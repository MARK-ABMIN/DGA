<?php
/**
 * Theme functions and definitions.
 *
 * For additional information on potential customization options,
 * read the developers' documentation:
 *
 * https://developers.elementor.com/docs/hello-elementor-theme/
 *
 * @package HelloElementorChild
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

define( 'HELLO_ELEMENTOR_CHILD_VERSION', '2.0.0' );

/***** ฟังก์ชั่นซ่อนเมนูบาร์ *****/

function dga_hide_menubar() {
    // ตรวจสอบว่าผู้ใช้ไม่ใช่ subscriber และเข้าสู่ระบบแล้ว
    if (!is_user_logged_in() || current_user_can('subscriber')) {
        return;
    }
    
    // Enqueue CSS
    wp_enqueue_style(
        'dga-hide-menubar-css',
        get_stylesheet_directory_uri() . '/css/dga-hide_menubar.css',
        array(),
        '1.0.0'
    );
    
    // Enqueue JavaScript
    wp_enqueue_script(
        'dga-hide-menubar-js',
        get_stylesheet_directory_uri() . '/js/dga-hide_menubar.js',
        array('jquery'),
        '1.0.0',
        true
    );
    
    // ส่งข้อมูลไปยัง JavaScript (ถ้าจำเป็น)
    wp_localize_script('dga-hide-menubar-js', 'dga_menubar_params', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('dga_menubar_nonce'),
        'tab_text' => __('Admin menu', 'dga-hide-menubar'),
        'tab_position' => 'left', // เปลี่ยนเป็น 'right' ถ้าต้องการให้อยู่ขวา
        'tab_style' => 'rounded' // style ของปุ่ม: 'rounded', 'square', 'pill'
    ));
}
add_action('wp_enqueue_scripts', 'dga_hide_menubar');

// ป้องกันไม่ให้ซ่อน menu bar ทันทีสำหรับ subscribers
function dga_disable_menubar_for_subscribers() {
    if (current_user_can('subscriber')) {
        show_admin_bar(false);
    }
}
add_action('after_setup_theme', 'dga_disable_menubar_for_subscribers');

// เพิ่ม CSS class เพื่อให้ JavaScript ทำงานได้ถูกต้อง
function dga_add_body_class($classes) {
    if (is_user_logged_in() && !current_user_can('subscriber')) {
        $classes[] = 'dga-menubar-enabled';
    }
    return $classes;
}
add_filter('body_class', 'dga_add_body_class');


/***** DGA ADMIN LOGIN **********/

// ฟังก์ชันหลักสำหรับการปรับแต่งหน้า Login
function dga_login2_admin() {
    // เพิ่ม CSS และ JavaScript
    add_action('login_enqueue_scripts', 'dga_login2_admin_styles');
    
    // เปลี่ยน URL ของโลโก้
    add_filter('login_headerurl', 'dga_login2_admin_logo_url');
    
    // เปลี่ยนข้อความ Title ของโลโก้
    add_filter('login_headertext', 'dga_login2_admin_logo_title');
    
    // ปรับแต่ง HTML ของฟอร์ม Login
    add_action('login_form', 'dga_login2_admin_form_additions');
    
    // เพิ่ม AJAX endpoints
    add_action('wp_ajax_nopriv_dga_ajax_login', 'dga_ajax_login_callback');
    
    // ลบตัวเลือกเปลี่ยนภาษา
    dga_remove_language_switcher();
    
    // ลบลิงก์ลงทะเบียน ลืมรหัสผ่าน และอื่นๆ (เพิ่มใหม่)
    dga_remove_login_links();
}
add_action('init', 'dga_login2_admin');

// ฟังก์ชันสำหรับการเพิ่ม CSS และ JavaScript
function dga_login2_admin_styles() {
    $theme_directory = get_stylesheet_directory_uri();
    
    // เพิ่ม CSS
    wp_enqueue_style('dga-login2-admin-style', $theme_directory . '/css/dga-login2-admin.css', array(), '1.0.0');
    
    // เพิ่ม JavaScript
    wp_enqueue_script('dga-login2-admin-script', $theme_directory . '/js/dga-login2-admin.js', array('jquery'), '1.0.0', true);
    
    // ส่งข้อมูลไปยัง JavaScript
    wp_localize_script('dga-login2-admin-script', 'dga_login_params', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'login_nonce' => wp_create_nonce('dga-login-nonce'),
        'redirect_url' => admin_url(),
        'loading_text' => __('กำลังเข้าสู่ระบบ...', 'dga'),
    ));
    
    // เพิ่ม CSS แบบ inline เพื่อซ่อนตัวเลือกภาษา
    wp_add_inline_style('dga-login2-admin-style', '
        /* ซ่อนทุกอิลิเมนต์ที่เกี่ยวข้องกับการเปลี่ยนภาษา */
        .language-switcher,
        #language-switcher,
        #language-switcher-locales-wrapper,
        .login-language-switcher,
        .login-form-language-switcher-container,
        .language-switcher-container,
        select[name="wp_lang"],
        select[name="language"],
        div[class*="language-switcher"],
        div[id*="language-switcher"],
        .login-footer-languages,
        #login-language-switcher,
        #login-footer-languages,
        .language-switcher-links,
        div:has(select[name="language"]),
        div:has(select[id*="language"]),
        a:contains("เปลี่ยนภาษา"),
        .login > form + div,
        .login > #loginform + div,
        .login-footer-local,
        .login-header-language,
        [id*="language"],
        [class*="language"],
        [name*="language"],
        [id*="lang-"],
        [class*="lang-"],
        [id*="lang_"],
        [class*="lang_"] {
            display: none !important;
            visibility: hidden !important;
        }
    ');
}

// ฟังก์ชันสำหรับการเปลี่ยน URL ของโลโก้
function dga_login2_admin_logo_url() {
    return home_url();
}

// ฟังก์ชันสำหรับการเปลี่ยนข้อความ Title ของโลโก้
function dga_login2_admin_logo_title() {
    return get_bloginfo('name');
}

// ฟังก์ชันสำหรับการเพิ่มเนื้อหาเข้าไปในฟอร์ม Login
function dga_login2_admin_form_additions() {
    echo '<div class="dga-login-response"></div>';
    echo '<input type="hidden" name="dga_login_nonce" value="' . wp_create_nonce('dga-login-nonce') . '">';
}

// ฟังก์ชัน AJAX Callback
function dga_ajax_login_callback() {
    // ตรวจสอบ Nonce
    check_ajax_referer('dga-login-nonce', 'security');
    
    // รับข้อมูลจากฟอร์ม
    $username = isset($_POST['username']) ? sanitize_user($_POST['username']) : '';
    $password = isset($_POST['password']) ? $_POST['password'] : '';
    $remember = isset($_POST['remember']) ? true : false;
    
    // ตรวจสอบการเข้าสู่ระบบ
    $user = wp_signon(array(
        'user_login' => $username,
        'user_password' => $password,
        'remember' => $remember
    ), is_ssl());
    
    // ตรวจสอบว่าเข้าสู่ระบบสำเร็จหรือไม่
    if (is_wp_error($user)) {
        wp_send_json_error(array(
            'message' => $user->get_error_message()
        ));
    } else {
        wp_send_json_success(array(
            'message' => __('เข้าสู่ระบบสำเร็จ กำลังเปลี่ยนเส้นทาง...', 'dga'),
            'redirect' => admin_url()
        ));
    }
}

/**
 * ฟังก์ชันสำหรับลบตัวเลือกเปลี่ยนภาษาออกจากหน้า Login อย่างสมบูรณ์
 */
function dga_remove_language_switcher() {
    // ลบตัวเลือกภาษาด้วย filter
    add_filter('login_display_language_dropdown', '__return_false', 9999);
    add_filter('login_form_language_dropdown', '__return_false', 9999);
    
    // ลบทุก action ที่เกี่ยวข้องกับ language switcher
    if (has_action('login_form', 'wp_login_language_switcher')) {
        remove_action('login_form', 'wp_login_language_switcher');
    }
    
    // ใส่ JavaScript เพื่อซ่อนตัวเลือกภาษาที่อาจจะไม่ถูกซ่อนด้วย CSS
    add_action('login_footer', 'dga_language_switcher_remove_js', 9999);
    
    // ใช้ output buffering เพื่อลบ HTML ของตัวเลือกภาษา
    add_action('login_init', 'dga_remove_language_switcher_ob', 1);
}

/**
 * ฟังก์ชันสำหรับลบลิงก์ลงทะเบียน ลืมรหัสผ่าน และอื่นๆ (เพิ่มใหม่)
 */
function dga_remove_login_links() {
    // ลบลิงก์ลงทะเบียนและลืมรหัสผ่าน
    add_filter('login_display_password_reset_link', '__return_false');
    add_filter('login_display_register_link', '__return_false');
    
    // ลบลิงก์ Privacy Policy
    add_filter('the_privacy_policy_link', '__return_empty_string');
    
    // ลบใน footer
    add_action('login_footer', 'dga_remove_login_links_js', 9999);
    
    // ลบออกด้วย output buffer
    add_action('login_init', 'dga_remove_login_links_ob', 2);
}

/**
 * ฟังก์ชันสำหรับเพิ่ม JavaScript เพื่อซ่อนตัวเลือกภาษา
 */
function dga_language_switcher_remove_js() {
    ?>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // รายการ selector ที่ต้องการลบ
        const elementsToRemove = [
            '.language-switcher',
            '#language-switcher',
            '.login-language-switcher',
            '.login-footer-languages',
            'select[name="wp_lang"]',
            'select[name="language"]',
            '[id*="language"]',
            '[class*="language"]',
            'a:contains("เปลี่ยนภาษา")',
            'form + div select',
            '.login-footer-local',
            '.login-header-language'
        ];
        
        // ลบทุกอิลิเมนต์ที่ตรงกับ selector
        elementsToRemove.forEach(function(selector) {
            try {
                document.querySelectorAll(selector).forEach(function(el) {
                    if (el && el.parentNode) {
                        el.parentNode.removeChild(el);
                    }
                });
            } catch (e) {
                // ดักจับข้อผิดพลาดหากมี
            }
        });
    });
    </script>
    <?php
}

/**
 * ฟังก์ชันสำหรับเพิ่ม JavaScript เพื่อซ่อนลิงก์ (เพิ่มใหม่)
 */
function dga_remove_login_links_js() {
    ?>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // รายการ selector ที่ต้องการลบ
        const elementsToRemove = [
            '#nav',
            '#backtoblog',
            'p#nav',
            'p#backtoblog',
            '.privacy-policy-page-link',
            'a[href*="wp-login.php?action=register"]',
            'a[href*="wp-login.php?action=lostpassword"]',
            'a[href*="wp-login.php?action=rp"]',
            '.login-footer',
            '#login-footer',
            '#login + p',
            '#login ~ p'
        ];
        
        // ลบทุกอิลิเมนต์ที่ตรงกับ selector
        elementsToRemove.forEach(function(selector) {
            try {
                document.querySelectorAll(selector).forEach(function(el) {
                    if (el && el.parentNode) {
                        el.parentNode.removeChild(el);
                    }
                });
            } catch (e) {
                // ดักจับข้อผิดพลาดหากมี
            }
        });
        
        // ลบทุกลิงก์ที่มีข้อความที่เกี่ยวข้อง
        document.querySelectorAll('a').forEach(function(el) {
            try {
                const text = el.textContent.toLowerCase();
                if (text.includes('ลงทะเบียน') || 
                    text.includes('ลืมรหัสผ่าน') || 
                    text.includes('กลับไปที่') || 
                    text.includes('privacy policy')) {
                    
                    // ลบทั้ง parent ถ้าเป็น div หรือ p
                    let parent = el;
                    while (parent && parent.tagName !== 'BODY') {
                        if (parent.tagName === 'DIV' || parent.tagName === 'P') {
                            if (parent.parentNode) {
                                parent.parentNode.removeChild(parent);
                                break;
                            }
                        }
                        parent = parent.parentNode;
                    }
                    
                    // ถ้าไม่ได้ลบ parent ให้ลบแค่ลิงก์
                    if (el.parentNode) {
                        el.parentNode.removeChild(el);
                    }
                }
            } catch (e) {
                // ดักจับข้อผิดพลาดหากมี
            }
        });
    });
    </script>
    <?php
}

/**
 * ฟังก์ชันสำหรับลบตัวเลือกภาษาด้วย Output Buffer
 */
function dga_remove_language_switcher_ob() {
    // เริ่มต้น output buffering
    ob_start(function($buffer) {
        // ลบตัวเลือกภาษาจาก HTML ด้วย regular expressions
        $patterns = [
            '/<select[^>]*(?:name=["\'](?:wp_lang|language)["\']|id=["\'][^"\']*(?:language|lang)[^"\']*["\'])[^>]*>.*?<\/select>/is',
            '/<div[^>]*(?:id=["\'][^"\']*(?:language|lang)[^"\']*["\']|class=["\'][^"\']*(?:language|lang)[^"\']*["\'])[^>]*>.*?<\/div>/is',
            '/<p[^>]*(?:class=["\'][^"\']*(?:language|lang)[^"\']*["\'])[^>]*>.*?<\/p>/is',
            '/<a[^>]*>.*?เปลี่ยนภาษา.*?<\/a>/is',
            '/<button[^>]*>.*?เปลี่ยนภาษา.*?<\/button>/is'
        ];
        
        foreach ($patterns as $pattern) {
            $buffer = preg_replace($pattern, '', $buffer);
        }
        
        return $buffer;
    });
}

/**
 * ฟังก์ชันสำหรับลบลิงก์ด้วย Output Buffer (เพิ่มใหม่)
 */
function dga_remove_login_links_ob() {
    // ถ้ามี output buffer ที่เปิดอยู่แล้ว ให้ใช้อันเดิม
    if (ob_get_level() == 0) {
        ob_start(function($buffer) {
            // ลบลิงก์จาก HTML ด้วย regular expressions
            $patterns = [
                '/<p[^>]*id=["\'](nav|backtoblog)["\'][^>]*>.*?<\/p>/is',
                '/<div[^>]*class=["\'](privacy-policy-page-link|login-footer)["\'][^>]*>.*?<\/div>/is',
                '/<a[^>]*>.*?(?:ลงทะเบียน|ลืมรหัสผ่าน|กลับไปที่|Privacy Policy).*?<\/a>/is'
            ];
            
            foreach ($patterns as $pattern) {
                $buffer = preg_replace($pattern, '', $buffer);
            }
            
            return $buffer;
        });
    }
    
    // ปิด output buffer ใน footer
    add_action('login_footer', function() {
        if (ob_get_level()) {
            ob_end_flush();
        }
    }, 9999);
}








/**
 * เพิ่มฟังก์ชัน Skip to Content Link ที่ทำงานได้อย่างถูกต้อง
 * สำหรับเพิ่มการเข้าถึงเว็บไซต์ตามมาตรฐาน WCAG
 */
function add_accessible_skip_to_content_link() {
    // เพิ่ม link ข้ามไปยังเนื้อหาหลัก
    echo '<a class="skip-link screen-reader-text" href="#content">' . esc_html__( 'ข้ามไปยังเนื้อหา', 'your-theme-textdomain' ) . '</a>';
}
add_action('wp_body_open', 'add_accessible_skip_to_content_link', 5);

/**
 * เพิ่ม CSS สำหรับ Skip Link ให้ทำงานได้อย่างถูกต้อง
 */
function add_skip_link_styles() {
    ?>
    <style>
        .screen-reader-text {
            border: 0;
            clip: rect(1px, 1px, 1px, 1px);
            clip-path: inset(50%);
            height: 1px;
            margin: -1px;
            overflow: hidden;
            padding: 0;
            position: absolute !important;
            width: 1px;
            word-wrap: normal !important;
        }
        
        .screen-reader-text:focus {
            background-color: #f1f1f1;
            border-radius: 3px;
            box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.6);
            clip: auto !important;
            clip-path: none;
            color: #21759b;
            display: block;
            font-size: 14px;
            font-weight: 700;
            height: auto;
            left: 5px;
            line-height: normal;
            padding: 15px 23px 14px;
            text-decoration: none;
            top: 5px;
            width: auto;
            z-index: 100000;
        }
    </style>
    <?php
}
add_action('wp_head', 'add_skip_link_styles');

/**
 * ตรวจสอบว่า theme รองรับ wp_body_open หรือไม่
 * สำหรับ WordPress เวอร์ชันเก่ากว่า 5.2
 */
if (!function_exists('wp_body_open')) {
    function wp_body_open() {
        do_action('wp_body_open');
    }
}

/**
 * เพิ่ม ID สำหรับเนื้อหาหลัก (ถ้ายังไม่มี)
 * ต้องเปลี่ยน 'the_content' เป็น hook ที่เหมาะสมกับธีมของคุณ
 */
function add_content_id_for_skip_link($content) {
    // ตรวจสอบว่าอยู่ในหน้าหลักหรือไม่
    if (is_singular() && in_the_loop() && is_main_query()) {
        // เพิ่ม ID "content" สำหรับ skip link
        return '<div id="content">' . $content . '</div>';
    }
    return $content;
}
add_filter('the_content', 'add_content_id_for_skip_link');

/**
 * เพิ่ม JavaScript เพื่อทำให้ Skip Link ทำงานได้อย่างถูกต้องใน Chrome และ Firefox
 */
function enable_skip_link_focus_fix() {
    // เวอร์ชันแบบย่อของ script
    ?>
    <script>
    /(trident|msie)/i.test(navigator.userAgent)&&document.getElementById&&window.addEventListener&&window.addEventListener("hashchange",function(){var t,e=location.hash.substring(1);/^[A-z0-9_-]+$/.test(e)&&(t=document.getElementById(e))&&(/^(?:a|select|input|button|textarea)$/i.test(t.tagName)||(t.tabIndex=-1),t.focus())},!1);
    </script>
    <?php
}
add_action('wp_print_footer_scripts', 'enable_skip_link_focus_fix');




/**
 * Load child theme scripts & styles.
 *
 * @return void
 */
function hello_elementor_child_scripts_styles() {

	wp_enqueue_style(
		'hello-elementor-child-style',
		get_stylesheet_directory_uri() . '/style.css',
		[
			'hello-elementor-theme-style',
		],
		HELLO_ELEMENTOR_CHILD_VERSION
	);

}
add_action( 'wp_enqueue_scripts', 'hello_elementor_child_scripts_styles', 20 );


// Add JavaScript Console Logging Function
function enable_console_logging() {
    ?>
    <script>
    if (!window.console) window.console = {};
    if (!window.console.log) window.console.log = function(msg) {};
    console.log('WordPress Console Logging Enabled');
    </script>
    <?php
}
add_action('wp_head', 'enable_console_logging');


/**
 * Google reCAPTCHA V3 Implementation for WordPress
 * 
 * เป็นฟังก์ชั่นที่พร้อมเรียกใช้สำหรับป้องกันฟอร์มด้วย reCAPTCHA V3
 * 
 */

// ลงทะเบียนสคริปต์ reCAPTCHA (แต่ยังไม่ได้โหลด)
function my_register_recaptcha_scripts() {
    // ลงทะเบียน Google reCAPTCHA API
    wp_register_script(
        'google-recaptcha',
        'https://www.google.com/recaptcha/api.js?render=6LcNePUqAAAAAHsRn5uSrOEaXUhAj9tOped3cM2D',
        array(),
        null,
        true
    );
    
    // ลงทะเบียนสคริปต์ reCAPTCHA ที่กำหนดเอง
    wp_register_script(
        'custom-recaptcha',
        get_stylesheet_directory_uri() . '/js/recaptcha.js',
        array('jquery', 'google-recaptcha'),
        '1.0.0',
        true
    );
    
    // ลงทะเบียนสไตล์สำหรับ reCAPTCHA badge
    wp_register_style(
        'custom-recaptcha-style',
        get_stylesheet_directory_uri() . '/css/recaptcha.css',
        array(),
        '1.0.0'
    );
}
add_action('init', 'my_register_recaptcha_scripts');

// ฟังก์ชั่นสำหรับโหลดสคริปต์ reCAPTCHA เมื่อต้องการใช้
function my_enqueue_recaptcha_scripts() {
    // ตรวจสอบว่าได้ลงทะเบียนสคริปต์แล้วหรือไม่
    if (!wp_script_is('google-recaptcha', 'registered')) {
        my_register_recaptcha_scripts();
    }
    
    // โหลดสคริปต์
    wp_enqueue_script('google-recaptcha');
    wp_enqueue_script('custom-recaptcha');
    wp_enqueue_style('custom-recaptcha-style');
    
    // ส่ง site key ไปยัง JavaScript
    wp_localize_script(
        'custom-recaptcha',
        'recaptcha_data',
        array(
            'site_key' => '6LcNePUqAAAAAHsRn5uSrOEaXUhAj9tOped3cM2D'
        )
    );
    
    // เพิ่มข้อความเกี่ยวกับ reCAPTCHA ในส่วนท้ายของเว็บไซต์
    add_action('wp_footer', 'add_recaptcha_notice');
}

// ฟังก์ชั่นตรวจสอบ reCAPTCHA token
function verify_recaptcha($token = null) {
    // ถ้าไม่มี token ให้ตรวจสอบข้อมูล POST
    if (empty($token) && isset($_POST['g-recaptcha-response'])) {
        $token = sanitize_text_field($_POST['g-recaptcha-response']);
    }
    
    // ส่งคืน false ถ้ายังไม่มี token
    if (empty($token)) {
        return false;
    }
    
    // ตั้งค่าคำขอไปยัง API ตรวจสอบของ Google
    $secret_key = '6LcNePUqAAAAAPi0ZHPmG4yYii4LmJkA3-191Zap';
    $response = wp_remote_post('https://www.google.com/recaptcha/api/siteverify', [
        'body' => [
            'secret' => $secret_key,
            'response' => $token,
            'remoteip' => $_SERVER['REMOTE_ADDR']
        ]
    ]);
    
    // ตรวจสอบข้อผิดพลาดในการตอบกลับ
    if (is_wp_error($response)) {
        return false;
    }
    
    // แยกวิเคราะห์การตอบกลับ
    $result = json_decode(wp_remote_retrieve_body($response), true);
    
    // ตรวจสอบความสำเร็จและคะแนน (0.5 เป็นเกณฑ์ที่ Google แนะนำ)
    if (isset($result['success']) && $result['success'] === true && $result['score'] >= 0.5) {
        return true;
    }
    
    return false;
}

// ฟังก์ชั่นเพิ่ม reCAPTCHA สำหรับฟอร์มความคิดเห็น WordPress
function enable_recaptcha_for_comments() {
    // โหลดสคริปต์ที่จำเป็น
    my_enqueue_recaptcha_scripts();
    
    // เพิ่มตัวกรองสำหรับตรวจสอบความคิดเห็น
    add_filter('preprocess_comment', 'verify_comment_recaptcha');
}

// ฟังก์ชั่นเพิ่ม reCAPTCHA สำหรับฟอร์มเข้าสู่ระบบ WordPress
function enable_recaptcha_for_login() {
    // โหลดสคริปต์ที่จำเป็น
    my_enqueue_recaptcha_scripts();
    
    // เพิ่มตัวกรองสำหรับตรวจสอบการเข้าสู่ระบบ
    add_filter('wp_authenticate_user', 'verify_login_recaptcha', 10, 2);
}

// ฟังก์ชั่นเพิ่ม reCAPTCHA สำหรับฟอร์มลงทะเบียน WordPress
function enable_recaptcha_for_registration() {
    // โหลดสคริปต์ที่จำเป็น
    my_enqueue_recaptcha_scripts();
    
    // เพิ่มตัวกรองสำหรับตรวจสอบการลงทะเบียน
    add_filter('registration_errors', 'verify_registration_recaptcha', 10, 3);
}

// ฟังก์ชั่นเพิ่ม reCAPTCHA สำหรับฟอร์มลืมรหัสผ่าน WordPress
function enable_recaptcha_for_lostpassword() {
    // โหลดสคริปต์ที่จำเป็น
    my_enqueue_recaptcha_scripts();
    
    // เพิ่มการดำเนินการสำหรับตรวจสอบฟอร์มลืมรหัสผ่าน
    add_action('lostpassword_post', 'verify_lostpassword_recaptcha');
}

// ฟังก์ชั่นเพิ่ม reCAPTCHA สำหรับ Contact Form 7
function enable_recaptcha_for_cf7() {
    // ตรวจสอบว่า Contact Form 7 ถูกติดตั้งหรือไม่
    if (!function_exists('wpcf7_init')) {
        return;
    }
    
    // โหลดสคริปต์ที่จำเป็น
    my_enqueue_recaptcha_scripts();
    
    // เพิ่มตัวกรองสำหรับตรวจสอบการส่ง Contact Form 7
    add_filter('wpcf7_spam', 'verify_cf7_recaptcha', 10, 2);
}

// ฟังก์ชั่นเพิ่ม reCAPTCHA สำหรับฟอร์มที่กำหนดเอง
function enable_recaptcha_for_custom_form() {
    // โหลดสคริปต์ที่จำเป็น
    my_enqueue_recaptcha_scripts();
    
    // หมายเหตุ: คุณจะต้องเพิ่มโค้ดการตรวจสอบเอง
    // สำหรับฟอร์มที่กำหนดเอง เมื่อมีการส่งฟอร์ม
}

// ฟังก์ชั่นตรวจสอบการส่งฟอร์มที่กำหนดเอง
function verify_custom_form_recaptcha() {
    if (!verify_recaptcha()) {
        // คุณสามารถจัดการกับข้อผิดพลาดที่นี่ตามที่คุณต้องการ
        // ตัวอย่าง:
        wp_die('รหัสยืนยัน reCAPTCHA ไม่ถูกต้อง โปรดลองอีกครั้ง', 'reCAPTCHA Error', ['response' => 403]);
        // หรือ return false; ถ้าคุณต้องการจัดการข้อผิดพลาดด้วยตัวเอง
    }
    
    return true;
}

// ฟังก์ชั่นตรวจสอบความคิดเห็น
function verify_comment_recaptcha($commentdata) {
    // ข้ามสำหรับผู้ใช้ที่เข้าสู่ระบบแล้ว (ตัวเลือก)
    if (is_user_logged_in()) {
        return $commentdata;
    }
    
    if (!verify_recaptcha()) {
        wp_die('รหัสยืนยัน reCAPTCHA ไม่ถูกต้อง โปรดลองอีกครั้ง', 'reCAPTCHA Error', ['response' => 403]);
    }
    
    return $commentdata;
}

// ฟังก์ชั่นตรวจสอบการเข้าสู่ระบบ
function verify_login_recaptcha($user, $password) {
    // ข้ามถ้าผู้ใช้เป็นข้อผิดพลาดแล้ว
    if (is_wp_error($user)) {
        return $user;
    }
    
    if (!verify_recaptcha()) {
        return new WP_Error('recaptcha_error', 'รหัสยืนยัน reCAPTCHA ไม่ถูกต้อง โปรดลองอีกครั้ง');
    }
    
    return $user;
}

// ฟังก์ชั่นตรวจสอบการลงทะเบียน
function verify_registration_recaptcha($errors, $sanitized_user_login, $user_email) {
    if (!verify_recaptcha()) {
        $errors->add('recaptcha_error', 'รหัสยืนยัน reCAPTCHA ไม่ถูกต้อง โปรดลองอีกครั้ง');
    }
    
    return $errors;
}

// ฟังก์ชั่นตรวจสอบลืมรหัสผ่าน
function verify_lostpassword_recaptcha() {
    if (!verify_recaptcha()) {
        wp_die('รหัสยืนยัน reCAPTCHA ไม่ถูกต้อง โปรดลองอีกครั้ง', 'reCAPTCHA Error', ['response' => 403]);
    }
}

// ฟังก์ชั่นตรวจสอบการส่ง Contact Form 7
function verify_cf7_recaptcha($spam, $submission) {
    if ($spam) {
        return $spam;
    }
    
    if (!verify_recaptcha()) {
        $spam = true;
    }
    
    return $spam;
}

// ฟังก์ชั่นเพิ่มข้อความเกี่ยวกับ reCAPTCHA ในส่วนท้ายของเว็บไซต์
function add_recaptcha_notice() {
    echo '<div class="recaptcha-notice">เว็บไซต์นี้ได้รับการปกป้องด้วย reCAPTCHA และ<a href="https://policies.google.com/privacy" target="_blank">นโยบายความเป็นส่วนตัว</a>และ<a href="https://policies.google.com/terms" target="_blank">ข้อกำหนดในการให้บริการ</a>ของ Google มีผลบังคับใช้</div>';
}



/***** SiteLogo Update *******/

/**
 * Shortcode [sitelogo] สำหรับแสดงโลโก้ตามประเภทพื้นหลัง
 * 
 * ใช้งานด้วย: 
 * [sitelogo mode="light"]   - แสดงโลโก้สำหรับพื้นหลังสว่าง (โลโก้สีเข้ม)
 * [sitelogo mode="dark"]    - แสดงโลโก้สำหรับพื้นหลังเข้ม (โลโก้สีสว่าง)
 * [sitelogo mode="transparent"] - แสดงโลโก้สำหรับพื้นหลังโปร่งใส
 */
function site_logo_shortcode($atts) {
    // ตั้งค่าพารามิเตอร์เริ่มต้น
    $atts = shortcode_atts(array(
        'mode' => 'light',      // mode: light, dark, transparent
        'class' => '',          // CSS classes เพิ่มเติม
        'size' => 'full',       // ขนาดรูปภาพ (full, large, medium, thumbnail)
        'link' => 'yes',        // แสดงลิงก์หรือไม่ (yes/no)
        'alt' => '',            // alt text สำหรับรูปภาพ
        'width' => '',          // ความกว้างรูปภาพ (พิกเซล)
        'height' => '',         // ความสูงรูปภาพ (พิกเซล)
        'debug' => 'no',        // แสดงข้อมูล debug (yes/no)
        'responsive' => 'yes',  // เปิดใช้ responsive images (yes/no)
    ), $atts, 'sitelogo');
    
    // แปลงค่า mode เป็นตัวพิมพ์เล็ก
    $mode = strtolower($atts['mode']);
    
    // กำหนด theme_mod ที่จะใช้ตาม mode ที่เรียกใช้
    $theme_mod_key = '';
    $background_type = '';
    
    // ตรวจสอบ mode และกำหนด theme_mod_key ให้ถูกต้อง
    if ($mode === 'light') {
        // mode="light" ใช้โลโก้ที่อัพโหลดในพื้นหลังเข้ม (custom_logo_dark)
        $theme_mod_key = 'custom_logo_dark';
        $background_type = 'dark';
    } elseif ($mode === 'dark') {
        // mode="dark" ใช้โลโก้ที่อัพโหลดในพื้นหลังขาว (custom_logo)
        $theme_mod_key = 'custom_logo';
        $background_type = 'white';
    } elseif ($mode === 'transparent') {
        // mode="transparent" ใช้โลโก้ที่อัพโหลดในพื้นหลังโปร่งใส (custom_logo_transparent)
        $theme_mod_key = 'custom_logo_transparent';
        $background_type = 'transparent';
    } else {
        // กรณีอื่นๆ ใช้ค่าเริ่มต้น
        $theme_mod_key = 'custom_logo';
        $background_type = 'white';
    }
    
    // ดึง ID ของโลโก้ตาม theme_mod
    $logo_id = get_theme_mod($theme_mod_key);
    
    // ถ้าไม่พบโลโก้ของโหมดที่เลือก ใช้โลโก้ปกติ (fallback)
    if (!$logo_id && $theme_mod_key !== 'custom_logo') {
        $logo_id = get_theme_mod('custom_logo');
        $background_type = 'white';
    }
    
    // ถ้ายังไม่พบโลโก้ ให้ออก
    if (!$logo_id) {
        if ($atts['debug'] === 'yes') {
            return "ไม่พบโลโก้สำหรับโหมด '{$mode}' (theme_mod: {$theme_mod_key})";
        }
        return '';
    }
    
    // เตรียม attributes สำหรับรูปภาพ
    $img_atts = array(
        'class' => 'custom-logo ' . $atts['class'],
        // ลบ itemprop="logo" ที่นี่เพื่อหลีกเลี่ยงปัญหา
    );
    
    // เพิ่ม alt text
    if (!empty($atts['alt'])) {
        $img_atts['alt'] = esc_attr($atts['alt']);
    } else {
        $img_atts['alt'] = esc_attr(get_bloginfo('name'));
    }
    
    // เพิ่มขนาดรูปภาพถ้ามีการกำหนด
    if (!empty($atts['width'])) {
        $img_atts['width'] = absint($atts['width']);
    }
    
    if (!empty($atts['height'])) {
        $img_atts['height'] = absint($atts['height']);
    }
    
    // เพิ่มข้อมูล data attribute เพื่อช่วยในการ debug
    if ($atts['debug'] === 'yes') {
        $img_atts['data-logo-mode'] = $mode;
        $img_atts['data-theme-mod'] = $theme_mod_key;
        $img_atts['data-logo-id'] = $logo_id;
        $img_atts['data-background-type'] = $background_type;
    }
    
    // สร้าง HTML สำหรับรูปภาพโลโก้ (ปรับให้รองรับ responsive images)
    $logo_html = '';
    
    if ($atts['responsive'] === 'yes') {
        // ดึงข้อมูลรูปภาพในขนาดต่างๆ
        $image_sizes = array('thumbnail', 'medium', 'large', 'full');
        $srcset = array();
        $sizes = array();
        
        // สร้าง srcset จากขนาดต่างๆ
        foreach ($image_sizes as $size) {
            $image_data = wp_get_attachment_image_src($logo_id, $size);
            if ($image_data) {
                $srcset[] = $image_data[0] . ' ' . $image_data[1] . 'w';
                
                // กำหนด sizes ตามขนาดต่างๆ
                if ($size === 'thumbnail') {
                    $sizes[] = '(max-width: 576px) ' . $image_data[1] . 'px';
                } elseif ($size === 'medium') {
                    $sizes[] = '(max-width: 768px) ' . $image_data[1] . 'px';
                } elseif ($size === 'large') {
                    $sizes[] = '(max-width: 1200px) ' . $image_data[1] . 'px';
                } else {
                    $sizes[] = $image_data[1] . 'px';
                }
            }
        }
        
        // ถ้ามีขนาดต่างๆ ให้เพิ่ม srcset และ sizes attributes
        if (!empty($srcset) && !empty($sizes)) {
            $img_atts['srcset'] = implode(', ', $srcset);
            $img_atts['sizes'] = implode(', ', $sizes);
        }
        
        // สร้าง picture element เพื่อรองรับ high-DPI displays
        $full_image = wp_get_attachment_image_src($logo_id, 'full');
        if ($full_image) {
            // ดึง URL ของรูปภาพ
            $image_url = $full_image[0];
            $image_width = $full_image[1];
            $image_height = $full_image[2];
            
            // ถ้าเป็นไฟล์รูปภาพที่ไม่ใช่ WebP ให้เพิ่ม type attribute
            $file_type = wp_check_filetype($image_url);
            $mime_type = !empty($file_type['type']) ? $file_type['type'] : '';
            
            // เริ่มสร้าง picture element
            $logo_html .= '<picture>';
            
            // เพิ่ม source สำหรับ high-DPI displays (2x)
            $retina_image = generate_retina_url($image_url);
            if ($retina_image) {
                $logo_html .= '<source media="(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)" srcset="' . esc_url($retina_image) . '"';
                if (!empty($mime_type)) {
                    $logo_html .= ' type="' . esc_attr($mime_type) . '"';
                }
                $logo_html .= '>';
            }
            
            // เพิ่ม source สำหรับหน้าจอมาตรฐาน
            $logo_html .= '<source srcset="' . esc_url($image_url) . '"';
            if (!empty($mime_type)) {
                $logo_html .= ' type="' . esc_attr($mime_type) . '"';
            }
            $logo_html .= '>';
            
            // เพิ่ม fallback img tag
            $logo_html .= '<img src="' . esc_url($image_url) . '" ';
            foreach ($img_atts as $name => $value) {
                $logo_html .= $name . '="' . esc_attr($value) . '" ';
            }
            $logo_html .= '>';
            
            $logo_html .= '</picture>';
        } else {
            // ถ้าไม่สามารถดึงข้อมูลรูปภาพได้ ใช้ฟังก์ชัน wp_get_attachment_image ปกติ
            $logo_html = wp_get_attachment_image($logo_id, $atts['size'], false, $img_atts);
        }
    } else {
        // ใช้ฟังก์ชัน wp_get_attachment_image ปกติ (ไม่ใช้ responsive)
        $logo_html = wp_get_attachment_image($logo_id, $atts['size'], false, $img_atts);
    }
    
    // ถ้าโหมด debug เปิดอยู่ ให้แสดงข้อมูลเพิ่มเติม
    if ($atts['debug'] === 'yes') {
        $debug_info = '<div class="site-logo-debug" style="background:#f5f5f5;padding:10px;margin:10px 0;font-size:12px;border:1px solid #ddd;">';
        $debug_info .= '<p>โหมดที่เรียกใช้: ' . $mode . '</p>';
        $debug_info .= '<p>พื้นหลังที่เลือกในหน้าอัพโหลด: ' . $background_type . '</p>';
        $debug_info .= '<p>Theme Mod Key: ' . $theme_mod_key . '</p>';
        $debug_info .= '<p>Logo ID: ' . $logo_id . '</p>';
        $debug_info .= '<p>Logo URL: ' . wp_get_attachment_url($logo_id) . '</p>';
        
        // แสดงข้อมูล theme mods ทั้งหมดที่เกี่ยวข้องกับโลโก้
        $debug_info .= '<p>ข้อมูล Theme Mods:</p><ul>';
        $debug_info .= '<li>custom_logo (พื้นหลังขาว): ' . get_theme_mod('custom_logo') . '</li>';
        $debug_info .= '<li>custom_logo_dark (พื้นหลังเข้ม): ' . get_theme_mod('custom_logo_dark') . '</li>';
        $debug_info .= '<li>custom_logo_transparent (พื้นหลังโปร่งใส): ' . get_theme_mod('custom_logo_transparent') . '</li>';
        $debug_info .= '</ul>';
        
        // แสดงความสัมพันธ์ระหว่างโหมดกับพื้นหลัง
        $debug_info .= '<p>ความสัมพันธ์:</p><ul>';
        $debug_info .= '<li>[sitelogo mode="light"] → ใช้โลโก้จากพื้นหลังสีเข้ม (custom_logo_dark)</li>';
        $debug_info .= '<li>[sitelogo mode="dark"] → ใช้โลโก้จากพื้นหลังสีขาว (custom_logo)</li>';
        $debug_info .= '<li>[sitelogo mode="transparent"] → ใช้โลโก้จากพื้นหลังโปร่งใส (custom_logo_transparent)</li>';
        $debug_info .= '</ul>';
        $debug_info .= '</div>';
        
        $logo_html .= $debug_info;
    }
    
    // ถ้าต้องการใส่ลิงก์ - แก้ไขเพื่อเพิ่ม microdata ที่ถูกต้อง
    if ($atts['link'] === 'yes') {
        $html = sprintf(
            '<div itemscope itemtype="https://schema.org/Organization"><a href="%1$s" class="custom-logo-link" rel="home">%2$s</a></div>',
            esc_url(home_url('/')),
            $logo_html
        );
    } else {
        $html = '<div itemscope itemtype="https://schema.org/Organization">' . $logo_html . '</div>';
    }
    
    return $html;
}
add_shortcode('sitelogo', 'site_logo_shortcode');

/**
 * ฟังก์ชันสร้าง URL สำหรับรูปภาพ retina (2x)
 */
function generate_retina_url($url) {
    // ตรวจสอบว่ามีรูปภาพ @2x หรือไม่
    $path_parts = pathinfo($url);
    $retina_url = $path_parts['dirname'] . '/' . $path_parts['filename'] . '@2x.' . $path_parts['extension'];
    
    // ตรวจสอบว่าไฟล์มีอยู่จริงหรือไม่ (สำหรับรูปภาพที่อัพโหลดผ่าน WordPress)
    $uploads_dir = wp_upload_dir();
    $upload_base_url = $uploads_dir['baseurl'];
    $upload_base_dir = $uploads_dir['basedir'];
    
    if (strpos($url, $upload_base_url) === 0) {
        // แปลง URL เป็น path ในเครื่อง server
        $file_path = str_replace($upload_base_url, $upload_base_dir, $retina_url);
        
        // ตรวจสอบว่าไฟล์มีอยู่จริงหรือไม่
        if (file_exists($file_path)) {
            return $retina_url;
        }
    }
    
    return false;
}

/**
 * ฟังก์ชันสร้างรูปภาพ retina และรูปภาพในขนาดต่างๆ
 * เรียกใช้เมื่อมีการอัพโหลดรูปภาพ
 */
function generate_logo_image_sizes($attachment_id) {
    // ตรวจสอบว่าเป็นรูปภาพโลโก้หรือไม่
    $logo_id = get_theme_mod('custom_logo');
    $logo_dark_id = get_theme_mod('custom_logo_dark');
    $logo_transparent_id = get_theme_mod('custom_logo_transparent');
    
    if ($attachment_id == $logo_id || $attachment_id == $logo_dark_id || $attachment_id == $logo_transparent_id) {
        // ดึงข้อมูลรูปภาพ
        $image_path = get_attached_file($attachment_id);
        if (!$image_path) {
            return;
        }
        
        // สร้างรูปภาพในขนาดต่างๆ
        $editor = wp_get_image_editor($image_path);
        if (!is_wp_error($editor)) {
            // ดึงขนาดปัจจุบัน
            $size = $editor->get_size();
            $orig_width = $size['width'];
            $orig_height = $size['height'];
            
            // สร้างรูปภาพ retina (2x)
            $retina_width = $orig_width * 2;
            $retina_height = $orig_height * 2;
            
            // สร้างชื่อไฟล์ retina
            $path_parts = pathinfo($image_path);
            $retina_path = $path_parts['dirname'] . '/' . $path_parts['filename'] . '@2x.' . $path_parts['extension'];
            
            // ดึงไฟล์ต้นฉบับที่มีความละเอียดสูงกว่า (ถ้ามี)
            $original_file = $image_path;
            
            // อัพโหลดไฟล์ retina ถ้ามีไฟล์ต้นฉบับที่ใหญ่กว่า
            if (file_exists($original_file)) {
                $orig_editor = wp_get_image_editor($original_file);
                if (!is_wp_error($orig_editor)) {
                    $orig_size = $orig_editor->get_size();
                    
                    // ถ้าไฟล์ต้นฉบับมีขนาดใหญ่พอ
                    if ($orig_size['width'] >= $retina_width && $orig_size['height'] >= $retina_height) {
                        // สร้างรูปภาพ retina
                        $orig_editor->resize($retina_width, $retina_height, true);
                        $orig_editor->save($retina_path);
                    }
                }
            }
        }
    }
}
add_action('wp_generate_attachment_metadata', 'generate_logo_image_sizes', 10, 1);

/**
 * เพิ่ม CSS สำหรับการแสดงผลโลโก้ให้ถูกต้อง
 */
function site_logo_responsive_styles() {
    ?>
    <style>
    .custom-logo-link {
        display: inline-block;
    }
    .custom-logo {
        max-width: 100%;
        height: auto;
    }
    @media only screen and (-webkit-min-device-pixel-ratio: 2), 
           only screen and (min-resolution: 192dpi) {
        /* สไตล์สำหรับ high-DPI displays */
        .custom-logo {
            image-rendering: -webkit-optimize-contrast; /* สำหรับ Chrome/Safari */
            image-rendering: crisp-edges; /* รองรับในอนาคต */
        }
    }
    </style>
    <?php
}
add_action('wp_head', 'site_logo_responsive_styles');

/**
 * ฟังก์ชันบันทึกโลโก้
 */
function save_site_logo($attachment_id, $background_type = 'white') {
    // ตรวจสอบความถูกต้องของ attachment_id
    if (!$attachment_id || !wp_attachment_is_image($attachment_id)) {
        return false;
    }
    
    // กำหนด theme_mod ตามประเภทพื้นหลัง
    $mod_name = '';
    switch ($background_type) {
        case 'white':
            $mod_name = 'custom_logo';
            break;
        case 'dark':
            $mod_name = 'custom_logo_dark';
            break;
        case 'transparent':
            $mod_name = 'custom_logo_transparent';
            break;
        default:
            $mod_name = 'custom_logo';
    }
    
    // บันทึก theme mod
    set_theme_mod($mod_name, $attachment_id);
    
    return $attachment_id;
}

/**
 * ฟังก์ชัน Helper สำหรับเรียกใช้โลโก้ในไฟล์ธีม
 * 
 * ใช้งาน: <?php echo get_site_logo('dark'); ?>
 */
function get_site_logo($mode = 'light', $args = array()) {
    $defaults = array(
        'mode' => $mode,
        'class' => '',
        'size' => 'full',
        'link' => 'yes',
        'alt' => '',
        'width' => '',
        'height' => '',
    );
    
    $args = wp_parse_args($args, $defaults);
    
    // สร้าง shortcode attributes string
    $shortcode_atts = '';
    foreach ($args as $key => $value) {
        if (!empty($value)) {
            $shortcode_atts .= ' ' . $key . '="' . esc_attr($value) . '"';
        }
    }
    
    return do_shortcode('[sitelogo' . $shortcode_atts . ']');
}

/**
 * ฟังก์ชัน Helper สำหรับแสดงโลโก้ในไฟล์ธีม
 * 
 * ใช้งาน: <?php site_logo('dark'); ?>
 */
function site_logo($mode = 'light', $args = array()) {
    echo get_site_logo($mode, $args);
}

/**
 * ฟังก์ชันเพื่อแสดงโลโก้ตามประเภทพื้นหลัง
 * ฟังก์ชันนี้จะใช้กับ auto-detection สำหรับแสดงโลโก้ที่เหมาะสมกับพื้นหลัง
 */
function get_logo_for_background($background_type = 'auto') {
    // ตรวจสอบว่าจะใช้โลโก้แบบไหน
    if ($background_type === 'auto') {
        // ตรงนี้ต้องมีการตรวจสอบสีพื้นหลังด้วย JavaScript
        echo '<script>
            document.addEventListener("DOMContentLoaded", function() {
                // ฟังก์ชันนี้จะตรวจสอบว่าควรใช้โลโก้แบบไหน
                function checkBackgroundType() {
                    var element = document.querySelector(".site-header"); // ปรับตามคลาสที่ใช้จริง
                    if (!element) return;
                    
                    // ดึงสี background ของ header
                    var bgColor = window.getComputedStyle(element).backgroundColor;
                    
                    // แปลงเป็นค่า RGB หรือ แปลงเป็นค่าความสว่าง
                    var match = bgColor.match(/rgba?\((\d+), (\d+), (\d+)/);
                    if (match) {
                        var r = parseInt(match[1]);
                        var g = parseInt(match[2]);
                        var b = parseInt(match[3]);
                        
                        // คำนวณความสว่าง (ค่าเฉลี่ย)
                        var brightness = (r + g + b) / 3;
                        
                        var logo = document.querySelector(".custom-logo");
                        if (!logo) return;
                        
                        // ถ้าพื้นหลังมืด ใช้โลโก้สำหรับพื้นหลังสีเข้ม
                        if (brightness < 128) {
                            var lightLogoId = "' . get_theme_mod("custom_logo_dark") . '";
                            if (lightLogoId) {
                                logo.src = "' . wp_get_attachment_url(get_theme_mod("custom_logo_dark")) . '";
                            }
                        }
                    }
                }
                
                // ตรวจสอบตอนโหลดเพจและเมื่อขนาดหน้าจอเปลี่ยน
                checkBackgroundType();
                window.addEventListener("resize", checkBackgroundType);
            });
        </script>';
        
        // ใช้ microdata ที่ถูกต้อง - แก้ไขจากเดิม
        echo '<div itemscope itemtype="https://schema.org/Organization">';
        echo get_custom_logo();
        echo '</div>';
        
        return;
    } else {
        // ใช้โลโก้ตามประเภทที่ระบุโดยตรง
        if ($background_type === 'dark') {
            return get_site_logo('light'); // พื้นหลังเข้ม ใช้ mode="light"
        } elseif ($background_type === 'transparent') {
            return get_site_logo('transparent'); // พื้นหลังโปร่งใส ใช้ mode="transparent"
        } else {
            return get_site_logo('dark'); // พื้นหลังสว่าง ใช้ mode="dark"
        }
    }
}

/**
 * ฟังก์ชันเพื่อช่วยตรวจสอบและบันทึกค่า theme mods ให้ถูกต้อง
 * สามารถเรียกใช้จาก functions.php หรือหน้าตั้งค่าธีม
 */
function fix_site_logo_theme_mods() {
    // ดึงค่า theme mods ปัจจุบัน
    $white_logo_id = get_theme_mod('custom_logo');
    $dark_logo_id = get_theme_mod('custom_logo_dark');
    $transparent_logo_id = get_theme_mod('custom_logo_transparent');
    
    // ตรวจสอบค่าและแสดงสถานะปัจจุบัน
    $status = array(
        'white_logo' => $white_logo_id ? 'OK' : 'Missing',
        'dark_logo' => $dark_logo_id ? 'OK' : 'Missing',
        'transparent_logo' => $transparent_logo_id ? 'OK' : 'Missing'
    );
    
    return $status;
}

/**
 * ฟังก์ชันเพื่อรีเซ็ตหรือล้างค่า theme mods ที่เกี่ยวข้องกับโลโก้
 * สามารถเรียกใช้ในกรณีที่ต้องการเริ่มต้นใหม่
 */
function reset_site_logo_theme_mods() {
    remove_theme_mod('custom_logo');
    remove_theme_mod('custom_logo_dark');
    remove_theme_mod('custom_logo_transparent');
    
    return array(
        'success' => true,
        'message' => 'รีเซ็ตค่า theme mods สำหรับโลโก้เรียบร้อยแล้ว'
    );
}

/**
 * เพิ่มการสนับสนุน custom logo ทั้งหมด
 * ให้เรียกใช้ใน functions.php ของธีม
 */
function site_logo_setup() {
    // สนับสนุน custom logo ปกติของ WordPress
    add_theme_support('custom-logo', array(
        'height'      => 90,
        'width'       => 330,
        'flex-height' => true,
        'flex-width'  => true,
        'header-text' => array('site-title', 'site-description'),
    ));
}
add_action('after_setup_theme', 'site_logo_setup');




/***** ฟังก์ชั่นนับจำนวนโพสตั้งค่าเองได้ ******/

class Post_Count_Widget {
    
    /**
     * Constructor
     */
    public function __construct() {
        add_action('wp_enqueue_scripts', array($this, 'register_scripts'));
        add_shortcode('post_count', array($this, 'shortcode_callback'));
        add_action('wp_ajax_get_post_count', array($this, 'ajax_callback'));
        add_action('wp_ajax_nopriv_get_post_count', array($this, 'ajax_callback'));
    }
    
    /**
     * Register and enqueue scripts and styles
     */
    public function register_scripts() {
        wp_register_script(
            'widget-post-count-js', 
            get_stylesheet_directory_uri() . '/js/widget-post-count.js', 
            array('jquery'), 
            '1.0.0', 
            true
        );
        
        wp_register_style(
            'widget-post-count-css', 
            get_stylesheet_directory_uri() . '/css/widget-post-count.css', 
            array(), 
            '1.0.0'
        );
        
        wp_localize_script('widget-post-count-js', 'postCountData', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('post_count_nonce'),
        ));
    }
    
    /**
     * Shortcode callback
     */
    public function shortcode_callback($atts) {
        // Enqueue scripts and styles
        wp_enqueue_script('widget-post-count-js');
        wp_enqueue_style('widget-post-count-css');
        
        // Extract parameters
        $atts = shortcode_atts(array(
            'posttype' => 'post',
            'taxonomy' => '',
            'term' => '',
        ), $atts, 'post_count');
        
        // Generate unique ID for this instance
        $unique_id = 'post-count-' . mt_rand(1000, 9999);
        
        // Create output HTML with data attributes
        $output = '<div id="' . esc_attr($unique_id) . '" class="post-count-widget" ';
        $output .= 'data-posttype="' . esc_attr($atts['posttype']) . '" ';
        $output .= 'data-taxonomy="' . esc_attr($atts['taxonomy']) . '" ';
        $output .= 'data-term="' . esc_attr($atts['term']) . '">';
        $output .= '<span class="post-count-loading">Loading...</span>';
        $output .= '</div>';
        
        return $output;
    }

    
    
    /**
     * AJAX callback for post count
     */
    public function ajax_callback() {
        // Verify nonce
        check_ajax_referer('post_count_nonce', 'nonce');
        
        // Get parameters
        $post_type = isset($_POST['posttype']) ? sanitize_text_field($_POST['posttype']) : 'post';
        $taxonomy = isset($_POST['taxonomy']) ? sanitize_text_field($_POST['taxonomy']) : '';
        $term = isset($_POST['term']) ? sanitize_text_field($_POST['term']) : '';
        
        // Set up query args
        $args = array(
            'post_type' => $post_type,
            'post_status' => 'publish',
            'posts_per_page' => -1,
        );
        
        // Add taxonomy query if both taxonomy and term are provided
        if (!empty($taxonomy) && !empty($term)) {
            $args['tax_query'] = array(
                array(
                    'taxonomy' => $taxonomy,
                    'field' => 'slug',
                    'terms' => $term,
                ),
            );
        }
        
        // Get post count
        $query = new WP_Query($args);
        $count = $query->found_posts;
        
        // Send response
        wp_send_json_success(array(
            'count' => $count,
        ));
    }
}

// Initialize the class
new Post_Count_Widget();


/**
 * ฟังก์ชันสำหรับตรวจสอบการทำงานของ shortcode
 * สามารถเพิ่มไว้ใน functions.php หรือไฟล์ PHP ที่มีการโหลดในธีม
 */
function debug_site_logo_shortcodes() {
    $output = '<div style="background:#f5f5f5;padding:20px;margin:20px 0;border:1px solid #ddd;font-family:Arial,sans-serif;">';
    $output .= '<h2 style="margin-top:0;">ทดสอบ Shortcode Logo</h2>';
    
    // สถานะการตั้งค่า theme mods
    $output .= '<h3>สถานะ Theme Mods:</h3>';
    $output .= '<ul>';
    $output .= '<li>custom_logo (พื้นหลังขาว): ' . (get_theme_mod('custom_logo') ? 'มีค่า (' . get_theme_mod('custom_logo') . ')' : 'ไม่มีค่า') . '</li>';
    $output .= '<li>custom_logo_dark (พื้นหลังเข้ม): ' . (get_theme_mod('custom_logo_dark') ? 'มีค่า (' . get_theme_mod('custom_logo_dark') . ')' : 'ไม่มีค่า') . '</li>';
    $output .= '<li>custom_logo_transparent (พื้นหลังโปร่งใส): ' . (get_theme_mod('custom_logo_transparent') ? 'มีค่า (' . get_theme_mod('custom_logo_transparent') . ')' : 'ไม่มีค่า') . '</li>';
    $output .= '</ul>';
    
    // ทดสอบ shortcode
    $output .= '<h3>ทดสอบ Shortcode:</h3>';
    
    // mode="light"
    $output .= '<div style="margin-bottom:20px;padding:15px;background-color:#fff;border:1px solid #ddd;">';
    $output .= '<h4 style="margin-top:0;">1. [sitelogo mode="light"]</h4>';
    $output .= '<p>ควรแสดงโลโก้จาก theme_mod: <strong>custom_logo_dark</strong> (โลโก้สีสว่างสำหรับพื้นหลังเข้ม)</p>';
    $output .= '<div style="background:#333;padding:15px;text-align:center;">';
    $output .= do_shortcode('[sitelogo mode="light" debug="yes"]');
    $output .= '</div>';
    $output .= '</div>';
    
    // mode="dark"
    $output .= '<div style="margin-bottom:20px;padding:15px;background-color:#fff;border:1px solid #ddd;">';
    $output .= '<h4 style="margin-top:0;">2. [sitelogo mode="dark"]</h4>';
    $output .= '<p>ควรแสดงโลโก้จาก theme_mod: <strong>custom_logo</strong> (โลโก้สีเข้มสำหรับพื้นหลังขาว)</p>';
    $output .= '<div style="background:#fff;padding:15px;text-align:center;">';
    $output .= do_shortcode('[sitelogo mode="dark" debug="yes"]');
    $output .= '</div>';
    $output .= '</div>';
    
    // mode="transparent"
    $output .= '<div style="margin-bottom:20px;padding:15px;background-color:#fff;border:1px solid #ddd;">';
    $output .= '<h4 style="margin-top:0;">3. [sitelogo mode="transparent"]</h4>';
    $output .= '<p>ควรแสดงโลโก้จาก theme_mod: <strong>custom_logo_transparent</strong> (โลโก้สำหรับพื้นหลังโปร่งใส)</p>';
    $output .= '<div style="background-image: linear-gradient(45deg, #f0f0f0 25%, transparent 25%), 
                linear-gradient(-45deg, #f0f0f0 25%, transparent 25%), 
                linear-gradient(45deg, transparent 75%, #f0f0f0 75%), 
                linear-gradient(-45deg, transparent 75%, #f0f0f0 75%);
                background-size: 20px 20px;
                background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
                padding:15px;text-align:center;">';
    $output .= do_shortcode('[sitelogo mode="transparent" debug="yes"]');
    $output .= '</div>';
    $output .= '</div>';
    
    // คำแนะนำในการแก้ไขปัญหา
    $output .= '<h3>วิธีแก้ไขปัญหา:</h3>';
    $output .= '<ol>';
    $output .= '<li>ตรวจสอบว่าได้อัพโหลดและบันทึกโลโก้สำหรับแต่ละพื้นหลังแล้ว</li>';
    $output .= '<li>หากยังมีปัญหา ให้ทดลองรีเซ็ตการตั้งค่าโลโก้ด้วยฟังก์ชัน <code>reset_site_logo_theme_mods()</code> แล้วอัพโหลดใหม่</li>';
    $output .= '<li>ตรวจสอบว่าไม่มีปลั๊กอินหรือโค้ดอื่นที่อาจขัดแย้งกับการตั้งค่า theme mods</li>';
    $output .= '<li>ลองเพิ่มโค้ด <code>add_theme_support(\'custom-logo\')</code> ในไฟล์ functions.php ของธีม</li>';
    $output .= '</ol>';
    
    // ปุ่มรีเซ็ต theme mods
    $output .= '<div style="margin-top:20px;">';
    $output .= '<a href="#" id="reset-logo-mods" style="display:inline-block;padding:10px 15px;background:#dc3545;color:#fff;text-decoration:none;border-radius:4px;">รีเซ็ตการตั้งค่าโลโก้ทั้งหมด</a>';
    $output .= '<div id="reset-result" style="margin-top:10px;display:none;padding:10px;background:#d4edda;color:#155724;border-radius:4px;"></div>';
    $output .= '</div>';
    
    // เพิ่ม JavaScript สำหรับปุ่มรีเซ็ต
    $output .= '<script>
        document.addEventListener("DOMContentLoaded", function() {
            var resetButton = document.getElementById("reset-logo-mods");
            var resultDiv = document.getElementById("reset-result");
            
            if (resetButton) {
                resetButton.addEventListener("click", function(e) {
                    e.preventDefault();
                    
                    if (confirm("คุณแน่ใจหรือไม่ว่าต้องการรีเซ็ตการตั้งค่าโลโก้ทั้งหมด?")) {
                        // ใช้ AJAX เพื่อเรียกฟังก์ชัน reset_site_logo_theme_mods()
                        var xhr = new XMLHttpRequest();
                        xhr.open("POST", ajaxurl, true);
                        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                        xhr.onreadystatechange = function() {
                            if (xhr.readyState === 4 && xhr.status === 200) {
                                var response = JSON.parse(xhr.responseText);
                                resultDiv.textContent = response.data.message;
                                resultDiv.style.display = "block";
                                
                                // รีโหลดหน้าหลังจาก 2 วินาที
                                setTimeout(function() {
                                    window.location.reload();
                                }, 2000);
                            }
                        };
                        xhr.send("action=reset_site_logo_theme_mods&nonce=" + site_logo_debug_data.nonce);
                    }
                });
            }
        });
    </script>';
    
    $output .= '</div>';
    
    return $output;
}
add_shortcode('debug_sitelogo', 'debug_site_logo_shortcodes');

/**
 * AJAX handler เพื่อรีเซ็ต theme mods
 */
function ajax_reset_site_logo_theme_mods() {
    // ตรวจสอบความปลอดภัย
    if (!current_user_can('manage_options')) {
        wp_send_json_error('ไม่มีสิทธิ์เพียงพอ');
        exit;
    }
    
    // รีเซ็ต theme mods
    $result = reset_site_logo_theme_mods();
    
    wp_send_json_success($result);
    exit;
}
add_action('wp_ajax_reset_site_logo_theme_mods', 'ajax_reset_site_logo_theme_mods');

/**
 * เพิ่ม script data สำหรับหน้า debug
 */
function enqueue_site_logo_debug_scripts() {
    wp_localize_script('jquery', 'site_logo_debug_data', array(
        'nonce' => wp_create_nonce('site_logo_debug_nonce'),
    ));
}
add_action('wp_enqueue_scripts', 'enqueue_site_logo_debug_scripts');

/**
 * ฟังก์ชันสร้างหน้าคำแนะนำการใช้งานและการแก้ไขปัญหา
 * สามารถใช้เป็น shortcode [sitelogo_guide]
 */
function site_logo_guide() {
    $output = '<div class="site-logo-guide">';
    
    // หัวข้อ
    $output .= '<h2>คู่มือการใช้งานและแก้ไขปัญหา Logo Shortcode</h2>';
    
    // วิธีการใช้งาน
    $output .= '<div class="guide-section">';
    $output .= '<h3>วิธีการใช้งาน</h3>';
    $output .= '<table class="guide-table">';
    $output .= '<tr><th>Shortcode</th><th>การใช้งาน</th><th>ตัวอย่าง</th></tr>';
    $output .= '<tr><td><code>[sitelogo mode="light"]</code></td><td>แสดงโลโก้บนพื้นหลังสว่าง (ควรเป็นโลโก้สีเข้ม)</td><td>' . do_shortcode('[sitelogo mode="light" width="100"]') . '</td></tr>';
    $output .= '<tr><td><code>[sitelogo mode="dark"]</code></td><td>แสดงโลโก้บนพื้นหลังเข้ม (ควรเป็นโลโก้สีสว่าง)</td><td>' . do_shortcode('[sitelogo mode="dark" width="100"]') . '</td></tr>';
    $output .= '<tr><td><code>[sitelogo mode="transparent"]</code></td><td>แสดงโลโก้บนพื้นหลังโปร่งใส</td><td>' . do_shortcode('[sitelogo mode="transparent" width="100"]') . '</td></tr>';
    $output .= '</table>';
    $output .= '</div>';
    
    // อธิบายความสัมพันธ์
    $output .= '<div class="guide-section">';
    $output .= '<h3>ความสัมพันธ์ระหว่างโหมดและพื้นหลัง</h3>';
    $output .= '<p>ระบบใช้หลักการว่า โลโก้ที่คุณอัพโหลดบนพื้นหลังหนึ่ง จะถูกเรียกใช้เมื่อต้องการแสดงบนอีกพื้นหลังที่แตกต่างกัน:</p>';
    $output .= '<ul>';
    $output .= '<li><strong>โลโก้ที่อัพโหลดบนพื้นหลังขาว</strong> (ควรเป็นโลโก้สีเข้ม) → เรียกใช้ด้วย <code>[sitelogo mode="dark"]</code></li>';
    $output .= '<li><strong>โลโก้ที่อัพโหลดบนพื้นหลังเข้ม</strong> (ควรเป็นโลโก้สีสว่าง) → เรียกใช้ด้วย <code>[sitelogo mode="light"]</code></li>';
    $output .= '<li><strong>โลโก้ที่อัพโหลดบนพื้นหลังโปร่งใส</strong> (ควรเป็นโลโก้ PNG โปร่งใส) → เรียกใช้ด้วย <code>[sitelogo mode="transparent"]</code></li>';
    $output .= '</ul>';
    $output .= '</div>';
    
    // ตารางแสดงความสัมพันธ์ที่ละเอียดขึ้น
    $output .= '<div class="guide-section">';
    $output .= '<h3>ตารางเปรียบเทียบชัดเจน</h3>';
    $output .= '<table class="guide-table">';
    $output .= '<tr><th>เมื่อคุณอัพโหลดโลโก้บน</th><th>ระบบบันทึกเป็น Theme Mod</th><th>เรียกใช้ด้วย Shortcode</th></tr>';
    $output .= '<tr><td>พื้นหลังขาว (โลโก้สีเข้ม/ดำ)</td><td>custom_logo</td><td><code>[sitelogo mode="dark"]</code></td></tr>';
    $output .= '<tr><td>พื้นหลังเข้ม (โลโก้สีสว่าง/ขาว)</td><td>custom_logo_dark</td><td><code>[sitelogo mode="light"]</code></td></tr>';
    $output .= '<tr><td>พื้นหลังโปร่งใส (โลโก้ PNG)</td><td>custom_logo_transparent</td><td><code>[sitelogo mode="transparent"]</code></td></tr>';
    $output .= '</table>';
    $output .= '</div>';
    
    // พารามิเตอร์เพิ่มเติม
    $output .= '<div class="guide-section">';
    $output .= '<h3>พารามิเตอร์เพิ่มเติม</h3>';
    $output .= '<table class="guide-table">';
    $output .= '<tr><th>พารามิเตอร์</th><th>คำอธิบาย</th><th>ตัวอย่าง</th></tr>';
    $output .= '<tr><td><code>class</code></td><td>กำหนด CSS class เพิ่มเติม</td><td><code>[sitelogo mode="dark" class="my-logo"]</code></td></tr>';
    $output .= '<tr><td><code>size</code></td><td>ขนาดรูปภาพ (full, large, medium, thumbnail)</td><td><code>[sitelogo mode="dark" size="medium"]</code></td></tr>';
    $output .= '<tr><td><code>link</code></td><td>กำหนดให้มีลิงก์หรือไม่ (yes/no)</td><td><code>[sitelogo mode="dark" link="no"]</code></td></tr>';
    $output .= '<tr><td><code>width</code>/<code>height</code></td><td>กำหนดความกว้าง/สูงเป็นพิกเซล</td><td><code>[sitelogo mode="dark" width="200" height="60"]</code></td></tr>';
    $output .= '<tr><td><code>alt</code></td><td>กำหนด alt text</td><td><code>[sitelogo mode="dark" alt="โลโก้บริษัท"]</code></td></tr>';
    $output .= '<tr><td><code>debug</code></td><td>แสดงข้อมูล debug (yes/no)</td><td><code>[sitelogo mode="dark" debug="yes"]</code></td></tr>';
    $output .= '</table>';
    $output .= '</div>';
    
    // คำถามที่พบบ่อย
    $output .= '<div class="guide-section">';
    $output .= '<h3>คำถามที่พบบ่อย</h3>';
    $output .= '<div class="faq-item">';
    $output .= '<h4>Q: โลโก้ไม่แสดงหรือแสดงผิด เกิดจากอะไร?</h4>';
    $output .= '<p>A: สาเหตุอาจเกิดจาก:</p>';
    $output .= '<ol>';
    $output .= '<li>ยังไม่ได้อัพโหลดโลโก้สำหรับบางพื้นหลัง</li>';
    $output .= '<li>มีความขัดแย้งกับปลั๊กอินอื่นที่ปรับแต่ง custom logo</li>';
    $output .= '<li>ธีมไม่รองรับ custom-logo feature</li>';
    $output .= '</ol>';
    $output .= '<p>ทดสอบด้วย shortcode <code>[debug_sitelogo]</code> เพื่อดูรายละเอียดการทำงาน</p>';
    $output .= '</div>';
    
    $output .= '<div class="faq-item">';
    $output .= '<h4>Q: ควรอัพโหลดโลโก้ในรูปแบบใด?</h4>';
    $output .= '<p>A: แนะนำให้เตรียมโลโก้ 3 รูปแบบ:</p>';
    $output .= '<ul>';
    $output .= '<li><strong>โลโก้สีเข้ม/ดำ</strong> สำหรับแสดงบนพื้นหลังสีอ่อน</li>';
    $output .= '<li><strong>โลโก้สีสว่าง/ขาว</strong> สำหรับแสดงบนพื้นหลังสีเข้ม</li>';
    $output .= '<li><strong>โลโก้ PNG โปร่งใส</strong> สำหรับแสดงบนพื้นหลังที่มีลวดลาย</li>';
    $output .= '</ul>';
    $output .= '</div>';
    
    $output .= '<div class="faq-item">';
    $output .= '<h4>Q: ถ้าต้องการรีเซ็ตข้อมูลโลโก้ทั้งหมด ทำอย่างไร?</h4>';
    $output .= '<p>A: สามารถใช้ฟังก์ชัน <code>reset_site_logo_theme_mods()</code> เพื่อรีเซ็ตการตั้งค่าทั้งหมด หรือใช้ shortcode <code>[debug_sitelogo]</code> แล้วคลิกที่ปุ่มรีเซ็ต</p>';
    $output .= '</div>';
    
    $output .= '</div>';
    
    // สไตล์สำหรับการแสดงผล
    $output .= '<style>
        .site-logo-guide {
            max-width: 800px;
            margin: 20px auto;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
            color: #333;
            line-height: 1.5;
        }
        .site-logo-guide h2 {
            text-align: center;
            padding-bottom: 15px;
            border-bottom: 1px solid #ddd;
            margin-bottom: 20px;
        }
        .guide-section {
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #eee;
        }
        .guide-section h3 {
            margin-bottom: 15px;
            color: #2271b1;
        }
        .guide-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        .guide-table th, .guide-table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }
        .guide-table th {
            background-color: #f5f5f5;
        }
        .guide-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .site-logo-guide code {
            background: #f0f0f1;
            padding: 2px 5px;
            border-radius: 3px;
            font-size: 13px;
            color: #007cba;
            font-family: Consolas, Monaco, monospace;
        }
        .faq-item {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-left: 4px solid #2271b1;
            border-radius: 4px;
        }
        .faq-item h4 {
            margin-top: 0;
            margin-bottom: 10px;
            color: #2271b1;
        }
        .faq-item p, .faq-item ul, .faq-item ol {
            margin-bottom: 10px;
        }
    </style>';
    
    $output .= '</div>';
    
    return $output;
}
add_shortcode('sitelogo_guide', 'site_logo_guide');

/**
 * ฟังก์ชัน site_logo_update() สำหรับแสดง UI จัดการโลโก้
 * ใช้งานด้วย shortcode [site_logo_updater]
 * 
 * @return string HTML output
 */
function site_logo_update() {
    // เตรียมการใช้ WordPress Media Library
    wp_enqueue_media();
    
    // โหลด scripts และ styles
    wp_enqueue_script(
        'site-logo-update-js',
        get_stylesheet_directory_uri() . '/js/site-logo-update.js',
        array('jquery', 'jquery-ui-draggable', 'jquery-ui-slider'),
        '1.1.0',
        true
    );
    
    wp_enqueue_style(
        'site-logo-update-css',
        get_stylesheet_directory_uri() . '/css/site-logo-update.css',
        array(),
        '1.1.0'
    );
    
    // โหลด jQuery UI CSS สำหรับ slider
    wp_enqueue_style(
        'jquery-ui-css',
        'https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css'
    );
    
    // ดึงข้อมูลโลโก้ปัจจุบัน
    $white_logo_id = get_theme_mod('custom_logo');
    $dark_logo_id = get_theme_mod('custom_logo_dark');
    $transparent_logo_id = get_theme_mod('custom_logo_transparent');
    
    // เตรียม URL ของโลโก้
    $white_logo_url = $white_logo_id ? wp_get_attachment_image_url($white_logo_id, 'full') : '';
    $dark_logo_url = $dark_logo_id ? wp_get_attachment_image_url($dark_logo_id, 'full') : '';
    $transparent_logo_url = $transparent_logo_id ? wp_get_attachment_image_url($transparent_logo_id, 'full') : '';
    
    // ส่งข้อมูลไปยัง JavaScript
    wp_localize_script(
        'site-logo-update-js',
        'siteLogoUpdateData',
        array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('site_logo_update_nonce'),
            'white_logo_url' => $white_logo_url,
            'dark_logo_url' => $dark_logo_url,
            'transparent_logo_url' => $transparent_logo_url,
            'white_logo_id' => $white_logo_id,
            'dark_logo_id' => $dark_logo_id,
            'transparent_logo_id' => $transparent_logo_id,
            'skip_crop' => true,
        )
    );
    
    // เริ่มสร้าง HTML output
    $output = '<div class="site-logo-updater-container">';
    
    // ส่วนหัว
    $output .= '<h2 class="site-logo-title">จัดการโลโก้เว็บไซต์</h2>';
    
    // คำอธิบายความสัมพันธ์
    $output .= '<div class="site-logo-relationship-info">';
    $output .= '<h3>ความสัมพันธ์ระหว่างพื้นหลังและการใช้งาน:</h3>';
    $output .= '<table class="site-logo-relationship-table">';
    $output .= '<tr><th>พื้นหลังที่อัพโหลด</th><th>ลักษณะของโลโก้</th><th>ใช้งานด้วย Shortcode</th></tr>';
    $output .= '<tr><td>พื้นหลังขาว</td><td>โลโก้สีเข้ม/ดำ</td><td><code>[sitelogo mode="dark"]</code></td></tr>';
    $output .= '<tr><td>พื้นหลังเข้ม</td><td>โลโก้สีสว่าง/ขาว</td><td><code>[sitelogo mode="light"]</code></td></tr>';
    $output .= '<tr><td>พื้นหลังโปร่งใส</td><td>โลโก้ PNG โปร่งใส</td><td><code>[sitelogo mode="transparent"]</code></td></tr>';
    $output .= '</table>';
    $output .= '</div>';
    
    // แท็บเมนู
    $output .= '<div class="site-logo-tabs">';
    $output .= '<div class="site-logo-tab active" data-tab="white">พื้นหลังขาว</div>';
    $output .= '<div class="site-logo-tab" data-tab="dark">พื้นหลังเข้ม</div>';
    $output .= '<div class="site-logo-tab" data-tab="transparent">พื้นหลังโปร่งใส</div>';
    $output .= '</div>';
    
    // ส่วนเนื้อหาแท็บ
    $output .= '<div class="site-logo-content-panels">';
    
    // แท็บ 1: พื้นหลังขาว
    $output .= '<div class="site-logo-content active" data-content="white">';
    $output .= '<div class="site-logo-preview-area" id="site-logo-preview-white" style="background-color: #ffffff;">';
    
    if ($white_logo_url) {
        $output .= '<div class="site-logo-image-container" id="site-logo-container-white" data-attachment-id="' . esc_attr($white_logo_id) . '">';
        $output .= '<img src="' . esc_url($white_logo_url) . '" alt="โลโก้พื้นขาว" id="site-logo-image-white" />';
        $output .= '</div>';
        $output .= '<div class="site-logo-overlay"><span>โลโก้สำหรับพื้นหลังขาว (สีเข้ม)</span></div>';
    } else {
        $output .= '<div class="site-logo-placeholder" id="site-logo-placeholder-white">คลิกเพื่อเลือกรูปภาพโลโก้สีเข้ม/ดำ</div>';
    }
    
    $output .= '</div>';
    
    $output .= '<div class="site-logo-panel-info">';
    $output .= '<h4>โลโก้สำหรับพื้นหลังขาว (สีเข้ม)</h4>';
    $output .= '<p>อัพโหลดโลโก้สีเข้ม/ดำ สำหรับแสดงบนพื้นหลังสีขาวหรือสีอ่อน</p>';
    $output .= '<p>→ ใช้งานด้วย <code>[sitelogo mode="dark"]</code></p>';
    $output .= '<div class="site-logo-controls">';
    $output .= '<button type="button" id="site-logo-select-white" class="site-logo-button">เลือกรูปภาพ</button>';
    $output .= '<button type="button" id="site-logo-save-white" class="site-logo-button" ' . (!$white_logo_url ? 'disabled' : '') . '>บันทึกโลโก้</button>';
    $output .= '</div>';
    if ($white_logo_url) {
        $output .= '<div class="site-logo-success-banner">';
        $output .= '<span>ใช้งานด้วย</span>';
        $output .= '<code>[sitelogo mode="dark"]</code>';
        $output .= '</div>';
    }
    $output .= '</div>';
    $output .= '</div>';
    
    // แท็บ 2: พื้นหลังเข้ม
    $output .= '<div class="site-logo-content" data-content="dark">';
    $output .= '<div class="site-logo-preview-area" id="site-logo-preview-dark" style="background-color: #333333;">';
    
    if ($dark_logo_url) {
        $output .= '<div class="site-logo-image-container" id="site-logo-container-dark" data-attachment-id="' . esc_attr($dark_logo_id) . '">';
        $output .= '<img src="' . esc_url($dark_logo_url) . '" alt="โลโก้พื้นเข้ม" id="site-logo-image-dark" />';
        $output .= '</div>';
        $output .= '<div class="site-logo-overlay"><span>โลโก้สำหรับพื้นหลังเข้ม (สีสว่าง)</span></div>';
    } else {
        $output .= '<div class="site-logo-placeholder" id="site-logo-placeholder-dark">คลิกเพื่อเลือกรูปภาพโลโก้สีสว่าง/ขาว</div>';
    }
    
    $output .= '</div>';
    
    $output .= '<div class="site-logo-panel-info">';
    $output .= '<h4>โลโก้สำหรับพื้นหลังเข้ม (สีสว่าง)</h4>';
    $output .= '<p>อัพโหลดโลโก้สีสว่าง/ขาว สำหรับแสดงบนพื้นหลังสีเข้มหรือสีดำ</p>';
    $output .= '<p>→ ใช้งานด้วย <code>[sitelogo mode="light"]</code></p>';
    $output .= '<div class="site-logo-controls">';
    $output .= '<button type="button" id="site-logo-select-dark" class="site-logo-button">เลือกรูปภาพ</button>';
    $output .= '<button type="button" id="site-logo-save-dark" class="site-logo-button" ' . (!$dark_logo_url ? 'disabled' : '') . '>บันทึกโลโก้</button>';
    $output .= '</div>';
    if ($dark_logo_url) {
        $output .= '<div class="site-logo-success-banner">';
        $output .= '<span>ใช้งานด้วย</span>';
        $output .= '<code>[sitelogo mode="light"]</code>';
        $output .= '</div>';
    }
    $output .= '</div>';
    $output .= '</div>';
    
    // แท็บ 3: พื้นหลังโปร่งใส
    $output .= '<div class="site-logo-content" data-content="transparent">';
    $output .= '<div class="site-logo-preview-area transparent-bg" id="site-logo-preview-transparent">';
    
    if ($transparent_logo_url) {
        $output .= '<div class="site-logo-image-container" id="site-logo-container-transparent" data-attachment-id="' . esc_attr($transparent_logo_id) . '">';
        $output .= '<img src="' . esc_url($transparent_logo_url) . '" alt="โลโก้พื้นโปร่งใส" id="site-logo-image-transparent" />';
        $output .= '</div>';
        $output .= '<div class="site-logo-overlay"><span>โลโก้สำหรับพื้นหลังโปร่งใส</span></div>';
    } else {
        $output .= '<div class="site-logo-placeholder" id="site-logo-placeholder-transparent">คลิกเพื่อเลือกรูปภาพโลโก้พื้นหลังโปร่งใส</div>';
    }
    
    $output .= '</div>';
    
    $output .= '<div class="site-logo-panel-info">';
    $output .= '<h4>โลโก้สำหรับพื้นหลังโปร่งใส</h4>';
    $output .= '<p>อัพโหลดโลโก้แบบพื้นหลังโปร่งใส (PNG) สำหรับแสดงบนพื้นหลังที่มีลวดลาย</p>';
    $output .= '<p>→ ใช้งานด้วย <code>[sitelogo mode="transparent"]</code></p>';
    $output .= '<div class="site-logo-controls">';
    $output .= '<button type="button" id="site-logo-select-transparent" class="site-logo-button">เลือกรูปภาพ</button>';
    $output .= '<button type="button" id="site-logo-save-transparent" class="site-logo-button" ' . (!$transparent_logo_url ? 'disabled' : '') . '>บันทึกโลโก้</button>';
    $output .= '</div>';
    if ($transparent_logo_url) {
        $output .= '<div class="site-logo-success-banner">';
        $output .= '<span>ใช้งานด้วย</span>';
        $output .= '<code>[sitelogo mode="transparent"]</code>';
        $output .= '</div>';
    }
    $output .= '</div>';
    $output .= '</div>';
    
    $output .= '</div>'; // ปิด site-logo-content-panels
    
    // พื้นที่แสดงข้อความสถานะ
    $output .= '<div id="site-logo-update-message" class="site-logo-update-message"></div>';
    
    // ส่วนแนะนำการใช้งาน
    $output .= '<div class="site-logo-usage-guide">';
    $output .= '<h3>วิธีใช้งาน Shortcode</h3>';
    $output .= '<p>หลังจากบันทึกโลโก้แล้ว สามารถใช้ shortcode ต่อไปนี้เพื่อแสดงโลโก้ในตำแหน่งที่ต้องการ:</p>';
    $output .= '<ul>';
    $output .= '<li><code>[sitelogo mode="light"]</code> - แสดงโลโก้สีสว่างสำหรับพื้นหลังเข้ม</li>';
    $output .= '<li><code>[sitelogo mode="dark"]</code> - แสดงโลโก้สีเข้มสำหรับพื้นหลังขาว</li>';
    $output .= '<li><code>[sitelogo mode="transparent"]</code> - แสดงโลโก้สำหรับพื้นหลังโปร่งใส</li>';
    $output .= '</ul>';
    $output .= '<p>ตัวอย่างการใช้งานพารามิเตอร์เพิ่มเติม:</p>';
    $output .= '<ul>';
    $output .= '<li><code>[sitelogo mode="dark" width="200" height="60"]</code> - กำหนดขนาด</li>';
    $output .= '<li><code>[sitelogo mode="light" class="my-logo" link="no"]</code> - เพิ่ม class และไม่มีลิงก์</li>';
    $output .= '</ul>';
    $output .= '<p>หากต้องการความช่วยเหลือเพิ่มเติม สามารถใช้ <code>[sitelogo_guide]</code> เพื่อดูคู่มือการใช้งานแบบละเอียด หรือ <code>[debug_sitelogo]</code> เพื่อตรวจสอบปัญหา</p>';
    $output .= '</div>';
    
    $output .= '</div>'; // ปิด site-logo-updater-container
    
    // เพิ่ม CSS เพิ่มเติมสำหรับส่วนใหม่
    $output .= '<style>
        .site-logo-relationship-info {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-left: 4px solid #2271b1;
            border-radius: 4px;
        }
        .site-logo-relationship-info h3 {
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 16px;
            color: #1d2327;
        }
        .site-logo-relationship-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }
        .site-logo-relationship-table th, 
        .site-logo-relationship-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        .site-logo-relationship-table th {
            background-color: #f5f5f5;
        }
        .site-logo-usage-guide {
            margin-top: 30px;
            padding: 15px;
            background-color: #f8f9fa;
            border-top: 1px solid #ddd;
        }
        .site-logo-usage-guide h3 {
            margin-top: 0;
            color: #1d2327;
        }
        .site-logo-usage-guide ul {
            margin-left: 20px;
        }
        .site-logo-usage-guide li {
            margin-bottom: 5px;
        }
    </style>';
    
    return $output;
}
add_shortcode('site_logo_updater', 'site_logo_update');


/**
 * AJAX handler สำหรับบันทึกโลโก้
 */
function site_logo_update_ajax_handler() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'site_logo_update_nonce')) {
        wp_send_json_error('การตรวจสอบความปลอดภัยล้มเหลว');
        exit;
    }
    
    // ตรวจสอบ attachment_id
    $attachment_id = isset($_POST['attachment_id']) ? intval($_POST['attachment_id']) : 0;
    if ($attachment_id <= 0) {
        wp_send_json_error('ไม่พบไฟล์แนบที่ถูกต้อง');
        exit;
    }
    
    // ตรวจสอบว่าเป็นรูปภาพจริง
    if (!wp_attachment_is_image($attachment_id)) {
        wp_send_json_error('ไฟล์แนบไม่ใช่รูปภาพ');
        exit;
    }
    
    // ตรวจสอบ background_type
    $background_type = isset($_POST['background_type']) ? sanitize_text_field($_POST['background_type']) : 'white';
    if (!in_array($background_type, array('white', 'dark', 'transparent'))) {
        $background_type = 'white';
    }
    
    // บันทึกโลโก้
    $saved_attachment_id = save_site_logo($attachment_id, $background_type);
    if (!$saved_attachment_id) {
        wp_send_json_error('ไม่สามารถบันทึกโลโก้ได้');
        exit;
    }
    
    // ชื่อพื้นหลังและ shortcode mode
    $background_name = '';
    $shortcode_mode = '';
    switch ($background_type) {
        case 'white':
            $background_name = 'ขาว';
            $shortcode_mode = 'dark';
            break;
        case 'dark':
            $background_name = 'สีเข้ม';
            $shortcode_mode = 'light';
            break;
        case 'transparent':
            $background_name = 'โปร่งใส';
            $shortcode_mode = 'transparent';
            break;
    }
    
    // ส่งข้อมูลกลับ
    wp_send_json_success(array(
        'message' => 'บันทึกโลโก้สำหรับพื้นหลัง' . $background_name . 'เรียบร้อยแล้ว',
        'shortcode' => '[sitelogo mode="' . $shortcode_mode . '"]',
        'logo_html' => wp_get_attachment_image($saved_attachment_id, 'full', false, array('class' => 'custom-logo')),
        'logo_url' => wp_get_attachment_image_url($saved_attachment_id, 'full'),
        'background_type' => $background_type,
        'shortcode_mode' => $shortcode_mode
    ));
    exit;
}
add_action('wp_ajax_site_logo_update', 'site_logo_update_ajax_handler');


/****** ฟังก์ชั่น DGA MENU FOR MOBILE *********/

function dga_mobile_menu() {
    // Enqueue necessary scripts and styles
    wp_enqueue_script('jquery');
    wp_enqueue_script('dga-mobile-menu-js', get_stylesheet_directory_uri() . '/js/dga-mobile-menu.js', array('jquery'), '1.1.0', true);
    wp_enqueue_style('dga-mobile-menu-css', get_stylesheet_directory_uri() . '/css/dga-mobile-menu.css', array(), '1.1.0');
    
    // Add AJAX URL for JavaScript use
    wp_localize_script('dga-mobile-menu-js', 'dga_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php')
    ));
    
    // Output the mobile menu container
    $output = '<div class="dga-mobile-menu-container">';
    $output .= '<button class="dga-mobile-menu-toggle" aria-label="Toggle menu"><span></span><span></span><span></span></button>';
    $output .= '<div class="dga-mobile-menu-overlay"></div>';
    $output .= '<div class="dga-mobile-menu-wrapper">';
    $output .= '<div class="dga-mobile-menu-header">';
    $output .= '<span class="dga-mobile-menu-title">Menu</span>';
    $output .= '<button class="dga-mobile-menu-close" aria-label="Close menu">×</button>';
    $output .= '</div>';
    $output .= '<div class="dga-mobile-menu-content"></div>';
    $output .= '</div>';
    $output .= '</div>';
    
    return $output;
}
add_shortcode('dga_mobile_menu', 'dga_mobile_menu');

// AJAX handler to get menu
function dga_get_mobile_menu() {
    // Get locations and find the main menu
    $locations = get_nav_menu_locations();
    $menu_id = 0;
    
    // Try to find MainMenu location
    if (isset($locations['main-menu'])) {
        $menu_id = $locations['main-menu'];
    } elseif (isset($locations['primary'])) {
        $menu_id = $locations['primary'];
    } elseif (isset($locations['header-menu'])) {
        $menu_id = $locations['header-menu'];
    } elseif (isset($locations['main_menu'])) {
        $menu_id = $locations['main_menu'];
    } elseif (isset($locations['header_menu'])) {
        $menu_id = $locations['header_menu'];
    } else {
        // Get the first available menu if no specific location is found
        $menus = wp_get_nav_menus();
        if (!empty($menus)) {
            $menu_id = $menus[0]->term_id;
        }
    }
    
    if ($menu_id) {
        $menu_items = wp_get_nav_menu_items($menu_id);
        
        if (!empty($menu_items)) {
            // สร้างเมนูแบบ accordion จากรายการเมนู
            echo build_accordion_menu($menu_items);
        } else {
            echo '<p>No menu items found.</p>';
        }
    } else {
        echo '<p>No menu found. Please check your WordPress Menus.</p>';
    }
    
    wp_die();
}
add_action('wp_ajax_dga_get_mobile_menu', 'dga_get_mobile_menu');
add_action('wp_ajax_nopriv_dga_get_mobile_menu', 'dga_get_mobile_menu');

// สร้างเมนูแบบ accordion
function build_accordion_menu($menu_items) {
    // สร้างโครงสร้างเมนูเป็นลำดับชั้น
    $menu_array = array();
    $parent_items = array();
    
    // แยกรายการเมนูตามระดับชั้น
    foreach ($menu_items as $item) {
        if ($item->menu_item_parent == 0) {
            $parent_items[$item->ID] = $item;
        } else {
            if (!isset($menu_array[$item->menu_item_parent])) {
                $menu_array[$item->menu_item_parent] = array();
            }
            $menu_array[$item->menu_item_parent][] = $item;
        }
    }
    
    // เริ่มสร้าง HTML สำหรับเมนู
    $output = '<nav class="dga-mobile-nav-menu">';
    $output .= '<ul class="dga-accordion-menu">';
    
    // สร้างรายการเมนูหลัก
    foreach ($parent_items as $item) {
        $has_children = isset($menu_array[$item->ID]);
        $item_class = 'menu-item menu-item-' . $item->ID;
        if ($has_children) {
            $item_class .= ' menu-item-has-children';
        }
        
        $output .= '<li class="' . esc_attr($item_class) . '">';
        
        // ลิงก์เมนูหลัก
        if ($has_children) {
            $output .= '<div class="dga-menu-item-header">';
            $output .= '<a href="' . esc_url($item->url) . '">' . esc_html($item->title) . '</a>';
            $output .= '<button class="dga-accordion-toggle" aria-label="Toggle submenu"><span class="dga-plus-minus"></span></button>';
            $output .= '</div>';
        } else {
            $output .= '<a href="' . esc_url($item->url) . '">' . esc_html($item->title) . '</a>';
        }
        
        // สร้างเมนูย่อย (ถ้ามี)
        if ($has_children) {
            $output .= '<ul class="dga-submenu level-1">';
            $output .= build_submenu_items($menu_array, $item->ID, 1, $menu_array);
            $output .= '</ul>';
        }
        
        $output .= '</li>';
    }
    
    $output .= '</ul>';
    $output .= '</nav>';
    
    return $output;
}

// สร้างรายการเมนูย่อย
function build_submenu_items($menu_array, $parent_id, $level, $all_items) {
    $output = '';
    $current_level = $level + 1;
    
    foreach ($menu_array[$parent_id] as $item) {
        $has_children = isset($menu_array[$item->ID]);
        $item_class = 'menu-item menu-item-' . $item->ID;
        if ($has_children) {
            $item_class .= ' menu-item-has-children';
        }
        
        $output .= '<li class="' . esc_attr($item_class) . '">';
        
        // ลิงก์เมนูย่อย
        if ($has_children) {
            $output .= '<div class="dga-menu-item-header">';
            $output .= '<a href="' . esc_url($item->url) . '">' . esc_html($item->title) . '</a>';
            $output .= '<button class="dga-accordion-toggle" aria-label="Toggle submenu"><span class="dga-plus-minus"></span></button>';
            $output .= '</div>';
        } else {
            $output .= '<a href="' . esc_url($item->url) . '">' . esc_html($item->title) . '</a>';
        }
        
        // สร้างเมนูย่อยซ้อนต่อไป (ถ้ามี และไม่เกิน 4 ระดับ)
        if ($has_children && $current_level <= 4) {
            $output .= '<ul class="dga-submenu level-' . $current_level . '">';
            $output .= build_submenu_items($menu_array, $item->ID, $current_level, $all_items);
            $output .= '</ul>';
        }
        
        $output .= '</li>';
    }
    
    return $output;
}



/***** ฟังก์ชั่น Widget แสดงข้อมูลเบื้องต้นใน Post *****/

/**
 * Post Social Widget Shortcode
 * 
 * [post_social] - แสดงผลทั้งหมด (ค่าเริ่มต้น)
 * [post_social post_id="123"] - แสดงข้อมูลของโพสต์ ID 123
 * [post_social date="off"] - ปิดการแสดงวันที่
 * [post_social count="off"] - ปิดการแสดงการนับจำนวน
 * [post_social social="off"] - ปิดการแสดงปุ่มแชร์โซเชียล
 * [post_social style="off"] - ปิดการใช้สไตล์ทั้งหมด
 */

// ลงทะเบียน CSS และ JavaScript
function post_social_enqueue_scripts() {
    // ตรวจสอบว่าอยู่ใน Child Theme หรือไม่
    if (get_stylesheet_directory() !== get_template_directory()) {
        // ถ้าใช้ Child Theme ให้โหลดจาก Child Theme
        $css_path = get_stylesheet_directory_uri() . '/css/post-social.css';
        $js_path = get_stylesheet_directory_uri() . '/js/post-social.js';
    } else {
        // ถ้าไม่ได้ใช้ Child Theme ให้โหลดจาก Parent Theme
        $css_path = get_template_directory_uri() . '/css/post-social.css';
        $js_path = get_template_directory_uri() . '/js/post-social.js';
    }
    
    // ตรวจสอบว่าเป็น Plugin หรือไม่ (ถ้ามีการใช้ใน Plugin)
    if (defined('PLUGIN_BASENAME') && PLUGIN_BASENAME) {
        $plugin_url = plugin_dir_url(PLUGIN_BASENAME);
        $css_path = $plugin_url . 'css/post-social.css';
        $js_path = $plugin_url . 'js/post-social.js';
    }
    
    // ลงทะเบียน CSS
    wp_enqueue_style('post-social-style', $css_path, array(), '1.0.1');
    
    // ลงทะเบียน JavaScript
    wp_enqueue_script('post-social-script', $js_path, array('jquery'), '1.0.1', true);
    
    // Localize script with ajax url
    wp_localize_script('post-social-script', 'post_social_data', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('post_social_nonce'),
    ));
}
add_action('wp_enqueue_scripts', 'post_social_enqueue_scripts');

/**
 * ฟังก์ชั่นสำหรับตรวจสอบว่าเป็น bot หรือ crawler หรือไม่
 */
function is_bot() {
    $bot_agents = array(
        'bot', 'crawl', 'slurp', 'spider', 'mediapartners', 'lighthouse', 'pagespeed',
        'yandex', 'baidu', 'bing', 'bingbot', 'googlebot', 'facebookexternalhit', 'pinterest'
    );
    
    if (isset($_SERVER['HTTP_USER_AGENT'])) {
        $user_agent = strtolower($_SERVER['HTTP_USER_AGENT']);
        foreach ($bot_agents as $bot_agent) {
            if (strpos($user_agent, $bot_agent) !== false) {
                return true;
            }
        }
    }
    
    return false;
}

/**
 * ฟังก์ชั่นสำหรับบันทึกจำนวนผู้เข้าชมโพสต์ (ปรับปรุงเพื่อนับ 1 ครั้งต่อเซสชั่น)
 */
function set_post_views($post_id) {
    // ถ้าเป็น bot, crawler หรือ admin ให้ข้ามการนับ
    if (is_bot() || is_user_logged_in() && current_user_can('manage_options')) {
        return;
    }
    
    // ตรวจสอบว่าเคยนับไปแล้วหรือไม่ในเซสชั่นนี้
    $cookie_name = 'post_views_counted';
    $viewed_posts = isset($_COOKIE[$cookie_name]) ? json_decode(stripslashes($_COOKIE[$cookie_name]), true) : array();
    
    // ถ้ายังไม่เคยนับโพสต์นี้ในเซสชั่นปัจจุบัน
    if (!isset($viewed_posts[$post_id])) {
        $count_key = 'post_views_count';
        $count = get_post_meta($post_id, $count_key, true);
        
        if ($count == '') {
            // ถ้ายังไม่มีข้อมูล ให้เริ่มที่ 1
            delete_post_meta($post_id, $count_key);
            add_post_meta($post_id, $count_key, '1');
        } else {
            // เพิ่มจำนวนการเข้าชม
            $count++;
            update_post_meta($post_id, $count_key, $count);
        }
        
        // บันทึกว่าได้นับโพสต์นี้ไปแล้วในเซสชั่นนี้
        $viewed_posts[$post_id] = time();
        
        // บันทึกคุกกี้ให้หมดอายุใน 24 ชั่วโมง
        setcookie($cookie_name, json_encode($viewed_posts), time() + 86400, COOKIEPATH, COOKIE_DOMAIN, is_ssl(), true);
    }
}

/**
 * ฟังก์ชั่นสำหรับดึงข้อมูลจำนวนการเข้าชม
 */
function get_post_views($post_id) {
    $count_key = 'post_views_count';
    $count = get_post_meta($post_id, $count_key, true);
    
    if ($count == '') {
        delete_post_meta($post_id, $count_key);
        add_post_meta($post_id, $count_key, '0');
        return "0";
    }
    
    return $count;
}

/**
 * Hook ที่จะเรียกใช้ฟังก์ชั่นนับจำนวนเมื่อเข้าชมโพสต์
 */
function post_social_count_view() {
    if (is_single()) {
        set_post_views(get_the_ID());
    }
}
add_action('wp_head', 'post_social_count_view');

/**
 * Shortcode function [post_social]
 */
function post_social_shortcode($atts) {
    // Extract attributes
    $atts = shortcode_atts(
        array(
            'post_id' => get_the_ID(), // Default to current post
            'date' => 'on',            // แสดงวันที่ (on/off)
            'count' => 'on',           // แสดงการนับจำนวน (on/off)
            'social' => 'on',          // แสดงปุ่มแชร์โซเชียล (on/off)
            'style' => 'on',           // ใช้สไตล์ (on/off)
        ),
        $atts,
        'post_social'
    );

    // หากปิดสไตล์ ให้เพิ่ม class
    $additional_class = $atts['style'] === 'off' ? 'no-style' : '';

    // Define SVG icons
    $calendar_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-calendar" aria-hidden="true"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>';
    
    $eye_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-eye" aria-hidden="true"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>';
    
    $line_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="currentColor" class="icon-line" aria-hidden="true"><path d="M24 10.304c0-5.369-5.383-9.738-12-9.738-6.616 0-12 4.369-12 9.738 0 4.809 4.269 8.843 10.036 9.608.391.083.923.258 1.058.59.121.302.079.771.039 1.076l-.171 1.027c-.053.303-.242 1.186 1.039.647 1.281-.54 6.911-4.069 9.428-6.967 1.739-1.907 2.571-3.851 2.571-5.981z"/></svg>';
    
    $facebook_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="currentColor" class="icon-facebook" aria-hidden="true"><path d="M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z"/></svg>';
    
    $twitter_icon = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="currentColor" class="icon-twitter" aria-hidden="true"><path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"/></svg>';

    // Generate a unique ID for this instance
    $widget_id = 'post-social-' . $atts['post_id'];

    // Start building the output with data attributes for JavaScript
    $output = '<div id="' . esc_attr($widget_id) . '" class="post-social-widget ' . esc_attr($additional_class) . '" 
        data-post-id="' . esc_attr($atts['post_id']) . '" 
        data-show-date="' . esc_attr($atts['date']) . '" 
        data-show-count="' . esc_attr($atts['count']) . '" 
        data-show-social="' . esc_attr($atts['social']) . '" 
        aria-live="polite">';
    $output .= '<div class="post-social-loading" aria-hidden="false">กำลังโหลด...</div>';
    $output .= '<div class="post-social-content" aria-hidden="true">';
    
    // วันที่ (จะถูกซ่อนหรือแสดงโดย JavaScript ตามค่า data-show-date)
    $output .= '<span class="post-social-date">' . $calendar_icon . ' <span class="date-text">...</span></span>';
    
    // จำนวนผู้เข้าชม (จะถูกซ่อนหรือแสดงโดย JavaScript ตามค่า data-show-count)
    $output .= '<span class="post-social-views">' . $eye_icon . ' <span class="views-text">0</span> ผู้เข้าชม</span>';
    
    // ปุ่มแชร์โซเชียล (จะถูกซ่อนหรือแสดงโดย JavaScript ตามค่า data-show-social)
    $output .= '<span class="post-social-share">';
    $output .= '<span class="share-label">แชร์:</span>';
    $output .= '<a href="#" class="share-line" aria-label="แชร์ไปยัง Line" role="button">' . $line_icon . ' <span>Line</span></a>';
    $output .= '<a href="#" class="share-facebook" aria-label="แชร์ไปยัง Facebook" role="button">' . $facebook_icon . ' <span>Facebook</span></a>';
    $output .= '<a href="#" class="share-twitter" aria-label="แชร์ไปยัง X" role="button">' . $twitter_icon . ' <span>X</span></a>';
    $output .= '</span>';
    
    $output .= '</div>';
    $output .= '</div>';

    // เพิ่ม inline CSS สำหรับกรณี style="off"
    if ($atts['style'] === 'off') {
        $output .= '<style>
            #' . esc_attr($widget_id) . '.no-style {
                background-color: transparent !important;
                padding: 0 !important;
                margin: 10px 0 !important;
                border: none !important;
                box-shadow: none !important;
                font-size: inherit !important;
                line-height: inherit !important;
                color: inherit !important;
            }
            #' . esc_attr($widget_id) . '.no-style .post-social-content {
                gap: 10px !important;
            }
            #' . esc_attr($widget_id) . '.no-style .post-social-share a {
                text-decoration: underline !important;
                background-color: transparent !important;
                color: inherit !important;
                padding: 0 !important;
            }
            #' . esc_attr($widget_id) . '.no-style .post-social-share a svg {
                color: inherit !important;
                fill: currentColor !important;
            }
            #' . esc_attr($widget_id) . '.no-style .icon-calendar, 
            #' . esc_attr($widget_id) . '.no-style .icon-eye {
                stroke: currentColor !important;
            }
        </style>';
    }

    return $output;
}
add_shortcode('post_social', 'post_social_shortcode');

/**
 * AJAX handler สำหรับดึงข้อมูลโพสต์
 */
function post_social_get_data() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'post_social_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
    }

    // ดึง post ID จาก request
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    
    if ($post_id <= 0) {
        wp_send_json_error(array('message' => 'Invalid post ID'));
    }

    // ดึงข้อมูลโพสต์
    $post = get_post($post_id);
    
    if (!$post) {
        wp_send_json_error(array('message' => 'Post not found'));
    }

    // รูปแบบวันที่
    $post_date = get_the_date('U', $post_id);
    $current_time = current_time('timestamp');
    $time_diff = $current_time - $post_date;
    
    // จัดรูปแบบวันที่
    if ($time_diff < 60) {
        $date_text = 'เมื่อสักครู่';
    } elseif ($time_diff < 3600) {
        $minutes = round($time_diff / 60);
        $date_text = $minutes . ' นาทีที่ผ่านมา';
    } elseif ($time_diff < 86400) {
        $hours = round($time_diff / 3600);
        $date_text = $hours . ' ชั่วโมงที่ผ่านมา';
    } else {
        // แปลงเป็นปีพุทธศักราช (พ.ศ.) โดยบวกเพิ่ม 543 ปี
        $date_text = get_the_date('d M Y', $post_id);
        // แทนที่ชื่อเดือนภาษาอังกฤษด้วยชื่อเดือนภาษาไทยแบบย่อ
        $en_months = array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');
        $th_months = array('ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.', 'ก.ค.', 'ส.ค.', 'ก.ย.', 'ต.ค.', 'พ.ย.', 'ธ.ค.');
        $date_text = str_replace($en_months, $th_months, $date_text);
        
        // แยกปีและแปลงเป็น พ.ศ.
        preg_match('/\d{4}/', $date_text, $matches);
        if (isset($matches[0])) {
            $ce_year = $matches[0];
            $be_year = intval($ce_year) + 543;
            $date_text = str_replace($ce_year, $be_year, $date_text);
        }
    }

    // ดึงจำนวนการเข้าชม (ไม่มีการเพิ่มจำนวนในส่วน AJAX)
    $post_views = get_post_views($post_id);

    // ดึง URL และชื่อโพสต์สำหรับการแชร์
    $post_url = get_permalink($post_id);
    $post_title = get_the_title($post_id);

    // เตรียมข้อมูลสำหรับการตอบกลับ
    $response_data = array(
        'date_text' => $date_text,
        'views' => intval($post_views),
        'post_url' => $post_url,
        'post_title' => $post_title
    );

    wp_send_json_success($response_data);
}
add_action('wp_ajax_post_social_get_data', 'post_social_get_data');
add_action('wp_ajax_nopriv_post_social_get_data', 'post_social_get_data');


/***** ฟังก์ชั่นอัพเดตภาพหน้าปก *****/

/**
 * Shortcode สำหรับอัพเดตภาพหน้าปกของโพสต์ (แก้ไขปัญหา icon และ Modal)
 * 
 * [postupdate_featured_images] หรือ [postupdate_featured_images post_id="123"]
 */

// ลงทะเบียน CSS และ JavaScript
function postupdate_featured_images_scripts() {
    // ตรวจสอบว่ามีการใช้ shortcode ในหน้าปัจจุบันหรือไม่
    global $post;
    if (is_a($post, 'WP_Post')) {
        if (has_shortcode($post->post_content, 'postupdate_featured_images') || is_singular()) {
            // Enqueue the WordPress media uploader scripts
            wp_enqueue_media();
            
            // CSS
            wp_enqueue_style('postupdate-featured-images-style', 
                get_stylesheet_directory_uri() . '/css/postupdate-featured-images.css', 
                array(), 
                time() // ใช้เวลาปัจจุบันเพื่อป้องกัน cache
            );
            
            // JavaScript
            wp_enqueue_script('postupdate-featured-images-script', 
                get_stylesheet_directory_uri() . '/js/postupdate-featured-images.js', 
                array('jquery'), 
                time(), // ใช้เวลาปัจจุบันเพื่อป้องกัน cache
                true
            );
            
            // Localize script
            wp_localize_script('postupdate-featured-images-script', 'postupdateData', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'nonce' => wp_create_nonce('postupdate_featured_image_nonce'),
                'current_url' => get_permalink(),
                'debug_mode' => true, // เพิ่มโหมดดีบั๊ก
                'strings' => array(
                    'upload_title' => 'อัพโหลดภาพหน้าปกใหม่',
                    'processing' => 'กำลังประมวลผล...',
                    'success' => 'อัพเดตภาพหน้าปกสำเร็จ กำลังรีโหลดหน้า...',
                    'error' => 'เกิดข้อผิดพลาด กรุณาลองใหม่อีกครั้ง',
                    'no_file' => 'กรุณาเลือกไฟล์ก่อนอัพโหลด',
                    'confirm_delete' => 'คุณต้องการลบภาพนี้ใช่หรือไม่?'
                )
            ));
        }
    }
}
add_action('wp_enqueue_scripts', 'postupdate_featured_images_scripts', 999); // ใช้ priority สูงเพื่อให้โหลดหลังสุด

// สร้าง Shortcode function (แก้ไขแล้ว)
function postupdate_featured_images_shortcode($atts) {
    // รับค่า attributes
    $atts = shortcode_atts(
        array(
            'post_id' => get_the_ID(), // เริ่มต้นใช้ ID ของโพสต์ปัจจุบัน
        ),
        $atts,
        'postupdate_featured_images'
    );
    
    // ตรวจสอบสิทธิ์ผู้ใช้ (แก้ไขให้ทดสอบง่ายขึ้น - สามารถลบออกในโปรดักชัน)
    // if (!is_user_logged_in() || !current_user_can('edit_post', $atts['post_id'])) {
    //     return ''; // ไม่แสดง shortcode สำหรับผู้ใช้ที่ไม่มีสิทธิ์
    // }
    
    // ดึงข้อมูลภาพปัจจุบัน (ถ้ามี)
    $current_image_id = get_post_thumbnail_id($atts['post_id']);
    $current_image_url = $current_image_id ? wp_get_attachment_url($current_image_id) : '';
    
    // สร้าง ID เฉพาะสำหรับ instance นี้
    $instance_id = 'postupdate-featured-' . $atts['post_id'];
    
    // ใช้ไอคอนแบบ Font Awesome แทน SVG (หรือเลือกใช้ไอคอนอื่นที่มีความเข้ากันได้สูงกว่า)
    $upload_icon = '<i class="fa fa-upload postupdate-upload-icon"></i>';
    $tree_icon = '<i class="fa fa-tree postupdate-tree-icon"></i>';
    
    // ถ้าไม่มี Font Awesome ให้ใช้ไอคอนแบบ HTML Entity หรือ Unicode
    if (!wp_style_is('font-awesome', 'enqueued')) {
        $upload_icon = '<span class="postupdate-upload-icon">&#x1F4E4;</span>'; // Unicode upload icon
        $tree_icon = '<span class="postupdate-tree-icon">&#x1F332;</span>'; // Unicode tree icon
    }
    
    // เริ่มสร้าง output HTML
    $output = '<div class="postupdate-featured-wrap" id="' . esc_attr($instance_id) . '" data-post-id="' . esc_attr($atts['post_id']) . '">';
    
    // ปุ่มเปิด Modal (ปรับให้เรียบง่ายขึ้น)
    $output .= '<button type="button" class="postupdate-featured-btn" aria-label="อัพเดตภาพหน้าปก" title="อัพเดตภาพหน้าปก">';
    $output .= $tree_icon;
    $output .= '</button>';
    
    // Modal Container (ปรับโครงสร้างให้เรียบง่ายขึ้น)
    $output .= '<div class="postupdate-modal" aria-hidden="true" tabindex="-1" role="dialog">';
    $output .= '<div class="postupdate-modal-overlay"></div>';
    $output .= '<div class="postupdate-modal-container">';
    
    // Modal Header
    $output .= '<div class="postupdate-modal-header">';
    $output .= '<h3 class="postupdate-modal-title">อัพโหลดภาพหน้าปกใหม่</h3>';
    $output .= '<button type="button" class="postupdate-modal-close" aria-label="ปิด">×</button>';
    $output .= '</div>';
    
    // Modal Body
    $output .= '<div class="postupdate-modal-body">';
    
    // Upload Zone
    $output .= '<div class="postupdate-upload-zone">';
    $output .= '<div class="postupdate-upload-prompt">';
    $output .= $upload_icon;
    $output .= '<p>ลากและวางไฟล์ภาพที่นี่<br>หรือ<br>คลิกเพื่อเลือกไฟล์</p>';
    $output .= '</div>';
    $output .= '<div class="postupdate-upload-preview" style="' . ($current_image_url ? '' : 'display: none;') . '">';
    
    if ($current_image_url) {
        $output .= '<img src="' . esc_url($current_image_url) . '" alt="ภาพหน้าปกปัจจุบัน" data-attachment-id="' . esc_attr($current_image_id) . '" />';
    } else {
        $output .= '<img src="" alt="ตัวอย่างภาพ" />';
    }
    
    $output .= '<div class="postupdate-preview-actions">';
    $output .= '<button type="button" class="postupdate-remove-image" aria-label="ลบไฟล์ภาพ">ลบไฟล์ภาพ</button>';
    $output .= '</div>';
    $output .= '</div>';
    
    $output .= '<input type="file" class="postupdate-file-input" accept="image/*" style="display: none;" />';
    $output .= '<div class="postupdate-progress-wrap">';
    $output .= '<div class="postupdate-progress-bar"></div>';
    $output .= '</div>';
    $output .= '</div>';
    
    // Status Message
    $output .= '<div class="postupdate-status" aria-live="polite"></div>';
    
    $output .= '</div>'; // End Modal Body
    
    // Modal Footer
    $output .= '<div class="postupdate-modal-footer">';
    $output .= '<button type="button" class="postupdate-cancel-btn">ยกเลิก</button>';
    $output .= '<button type="button" class="postupdate-update-btn" ' . ($current_image_url ? '' : 'disabled') . '>อัพเดตภาพหน้าปก</button>';
    $output .= '</div>';
    
    $output .= '</div>'; // End Modal Container
    $output .= '</div>'; // End Modal
    
    // เพิ่มข้อมูลดีบั๊ก
    $output .= '<div class="postupdate-debug" style="display: none;">';
    $output .= '<p>Debug Info: PostID=' . esc_attr($atts['post_id']) . ', Has Image: ' . ($current_image_url ? 'Yes' : 'No') . '</p>';
    $output .= '</div>';
    
    $output .= '</div>'; // End Wrap
    
    return $output;
}
add_shortcode('postupdate_featured_images', 'postupdate_featured_images_shortcode');

/**
 * AJAX handler สำหรับอัพโหลดไฟล์ไปยัง Media Library
 */
function postupdate_handle_file_upload() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (isset($_POST['_wpnonce']) && !wp_verify_nonce($_POST['_wpnonce'], 'postupdate_featured_image_nonce')) {
        wp_send_json_error(array('message' => 'รหัสความปลอดภัยไม่ถูกต้อง'));
    }
    
    // ตรวจสอบว่ามีไฟล์ที่อัพโหลดหรือไม่
    if (empty($_FILES['file'])) {
        wp_send_json_error(array('message' => 'ไม่พบไฟล์ที่อัพโหลด'));
    }
    
    // ตรวจสอบข้อผิดพลาดในการอัพโหลด
    if ($_FILES['file']['error'] !== UPLOAD_ERR_OK) {
        $error_message = postupdate_get_upload_error_message($_FILES['file']['error']);
        wp_send_json_error(array('message' => $error_message));
    }
    
    // ตรวจสอบประเภทไฟล์
    $file_type = wp_check_filetype(basename($_FILES['file']['name']));
    if (!$file_type['type']) {
        wp_send_json_error(array('message' => 'ประเภทของไฟล์ไม่ได้รับอนุญาต'));
    }
    
    // ตรวจสอบว่าเป็นไฟล์ภาพหรือไม่
    $allowed_types = array('image/jpeg', 'image/png', 'image/gif', 'image/webp');
    if (!in_array($file_type['type'], $allowed_types)) {
        wp_send_json_error(array('message' => 'ไฟล์นี้ไม่ใช่ไฟล์ภาพที่รองรับ (รองรับเฉพาะ JPG, PNG, GIF, WEBP)'));
    }
    
    // เตรียมข้อมูลสำหรับการอัพโหลดไฟล์
    $upload = wp_upload_bits($_FILES['file']['name'], null, file_get_contents($_FILES['file']['tmp_name']));
    
    if ($upload['error']) {
        wp_send_json_error(array('message' => $upload['error']));
    }
    
    // สร้าง attachment metadata
    $attachment = array(
        'post_mime_type' => $file_type['type'],
        'post_title'     => preg_replace('/\.[^.]+$/', '', basename($upload['file'])),
        'post_content'   => '',
        'post_status'    => 'inherit'
    );
    
    // แทรกไฟล์เข้าไปใน WordPress Media Library
    $attachment_id = wp_insert_attachment($attachment, $upload['file']);
    
    if (is_wp_error($attachment_id)) {
        wp_send_json_error(array('message' => $attachment_id->get_error_message()));
    }
    
    // สร้าง metadata สำหรับไฟล์ภาพ
    require_once(ABSPATH . 'wp-admin/includes/image.php');
    $attachment_data = wp_generate_attachment_metadata($attachment_id, $upload['file']);
    wp_update_attachment_metadata($attachment_id, $attachment_data);
    
    // ส่งคืนข้อมูลที่ต้องการ
    wp_send_json_success(array(
        'id'      => $attachment_id,
        'url'     => $upload['url'],
        'width'   => isset($attachment_data['width']) ? $attachment_data['width'] : 0,
        'height'  => isset($attachment_data['height']) ? $attachment_data['height'] : 0,
        'message' => 'อัพโหลดไฟล์สำเร็จ'
    ));
}
add_action('wp_ajax_postupdate_handle_file_upload', 'postupdate_handle_file_upload');
add_action('wp_ajax_nopriv_postupdate_handle_file_upload', 'postupdate_handle_file_upload'); // เพิ่มสำหรับผู้ใช้ที่ไม่ได้ล็อกอิน (ถ้าต้องการ)

/**
 * ตรวจสอบและส่งคืนข้อความข้อผิดพลาดในการอัพโหลด
 */
function postupdate_get_upload_error_message($error_code) {
    $errors = array(
        UPLOAD_ERR_INI_SIZE   => 'ไฟล์มีขนาดใหญ่เกินกำหนดในการตั้งค่า PHP (upload_max_filesize)',
        UPLOAD_ERR_FORM_SIZE  => 'ไฟล์มีขนาดใหญ่เกินกำหนดในฟอร์ม HTML (MAX_FILE_SIZE)',
        UPLOAD_ERR_PARTIAL    => 'ไฟล์ถูกอัพโหลดเพียงบางส่วน',
        UPLOAD_ERR_NO_FILE    => 'ไม่มีไฟล์ถูกอัพโหลด',
        UPLOAD_ERR_NO_TMP_DIR => 'ไม่พบโฟลเดอร์ชั่วคราวสำหรับอัพโหลด',
        UPLOAD_ERR_CANT_WRITE => 'เกิดข้อผิดพลาดในการเขียนไฟล์ลงดิสก์',
        UPLOAD_ERR_EXTENSION  => 'การอัพโหลดถูกหยุดโดย PHP Extension'
    );
    
    return isset($errors[$error_code]) ? $errors[$error_code] : 'เกิดข้อผิดพลาดที่ไม่ทราบสาเหตุในการอัพโหลดไฟล์';
}

/**
 * AJAX handler สำหรับอัพเดตภาพหน้าปก
 */
function postupdate_set_featured_image() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'postupdate_featured_image_nonce')) {
        wp_send_json_error(array('message' => 'รหัสความปลอดภัยไม่ถูกต้อง'));
    }
    
    // ตรวจสอบการส่งข้อมูลที่ต้องการ
    if (!isset($_POST['post_id']) || !isset($_POST['attachment_id'])) {
        wp_send_json_error(array('message' => 'ข้อมูลไม่ครบถ้วน'));
    }
    
    $post_id = intval($_POST['post_id']);
    $attachment_id = intval($_POST['attachment_id']);
    
    // ตรวจสอบสิทธิ์ผู้ใช้ (ถ้าต้องการเปิดใช้)
    // if (!current_user_can('edit_post', $post_id)) {
    //     wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์แก้ไขโพสต์นี้'));
    // }
    
    // ตั้งค่าภาพหน้าปก
    $result = set_post_thumbnail($post_id, $attachment_id);
    
    if ($result) {
        wp_send_json_success(array(
            'message' => 'อัพเดตภาพหน้าปกสำเร็จ',
            'post_url' => get_permalink($post_id)
        ));
    } else {
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดในการอัพเดตภาพหน้าปก'));
    }
}
add_action('wp_ajax_postupdate_set_featured_image', 'postupdate_set_featured_image');
add_action('wp_ajax_nopriv_postupdate_set_featured_image', 'postupdate_set_featured_image'); // เพิ่มสำหรับผู้ใช้ที่ไม่ได้ล็อกอิน (เฉพาะเพื่อการทดสอบ)

/**
 * AJAX handler สำหรับลบภาพหน้าปก
 */
function postupdate_remove_featured_image() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'postupdate_featured_image_nonce')) {
        wp_send_json_error(array('message' => 'รหัสความปลอดภัยไม่ถูกต้อง'));
    }
    
    // ตรวจสอบการส่งข้อมูลที่ต้องการ
    if (!isset($_POST['post_id'])) {
        wp_send_json_error(array('message' => 'ข้อมูลไม่ครบถ้วน'));
    }
    
    $post_id = intval($_POST['post_id']);
    
    // ตรวจสอบสิทธิ์ผู้ใช้ (ถ้าต้องการเปิดใช้)
    // if (!current_user_can('edit_post', $post_id)) {
    //     wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์แก้ไขโพสต์นี้'));
    // }
    
    // ลบภาพหน้าปก
    $result = delete_post_thumbnail($post_id);
    
    if ($result) {
        wp_send_json_success(array('message' => 'ลบภาพหน้าปกสำเร็จ'));
    } else {
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดในการลบภาพหน้าปก'));
    }
}
add_action('wp_ajax_postupdate_remove_featured_image', 'postupdate_remove_featured_image');
add_action('wp_ajax_nopriv_postupdate_remove_featured_image', 'postupdate_remove_featured_image'); // เพิ่มสำหรับผู้ใช้ที่ไม่ได้ล็อกอิน (เฉพาะเพื่อการทดสอบ)

// เพิ่มฟังก์ชันสำหรับเก็บบันทึกข้อผิดพลาด
function postupdate_log_error($message, $context = array()) {
    if (WP_DEBUG === true) {
        error_log('POSTUPDATE ERROR: ' . $message . ' ' . json_encode($context));
    }
}



/******* ลิมิตจำนวนตัวอักษรใน EDIT HEADING ********/


function limited_post_title_shortcode($atts) {
    // รับค่า parameters จาก shortcode
    $args = shortcode_atts(array(
        'length' => 25,    // ความยาวเริ่มต้น 50 ตัวอักษร
        'post_id' => null, // สามารถระบุ post ID เฉพาะได้
        'suffix' => '...', // ข้อความต่อท้ายเมื่อตัดข้อความ
    ), $atts);

    // ถ้าไม่ได้ระบุ post_id ให้ใช้โพสต์ปัจจุบัน
    $post_id = $args['post_id'] ? $args['post_id'] : get_the_ID();
    
    // ดึงชื่อโพสต์
    $title = get_the_title($post_id);
    
    // ตรวจสอบว่าความยาวชื่อเกินกำหนดหรือไม่
    if (mb_strlen($title) > $args['length']) {
        // ตัดข้อความและเพิ่ม suffix
        $title = mb_substr($title, 0, $args['length']) . $args['suffix'];
    }
    
    // ส่งคืนชื่อที่ถูกจำกัดความยาวแล้ว
    return '<span class="limited-title">' . esc_html($title) . '</span>';
}

// ลงทะเบียน shortcode
add_shortcode('limited_title', 'limited_post_title_shortcode');


/**
 * กำหนดให้ URL Slug ของ Post Type 'article' ใช้ Post ID เท่านั้น
 * ต้องเพิ่มโค้ดนี้ใน functions.php ของธีมที่ใช้งาน
 */

// เพิ่ม filter สำหรับแก้ไข post slug ก่อนบันทึก
add_filter('wp_unique_post_slug', 'custom_article_post_slug', 10, 6);

function custom_article_post_slug($slug, $post_ID, $post_status, $post_type, $post_parent, $original_slug) {
    // ตรวจสอบว่าเป็น post type 'article' หรือไม่
    if ($post_type === 'article') {
        // ใช้ post ID เป็น slug
        return $post_ID;
    }
    
    // ถ้าไม่ใช่ post type 'article' ให้ใช้ slug ปกติ
    return $slug;
}

// เพิ่ม filter สำหรับแก้ไข permalink structure
add_filter('post_type_link', 'custom_article_permalink', 10, 2);

function custom_article_permalink($permalink, $post) {
    // ตรวจสอบว่าเป็น post type 'article' หรือไม่
    if ($post->post_type !== 'article') {
        return $permalink;
    }
    
    // สร้าง permalink ใหม่โดยใช้ post ID
    $permalink = home_url('/article/' . $post->ID . '/');
    
    return $permalink;
}

// เพิ่ม rewrite rules สำหรับ article post type
add_action('init', 'custom_article_rewrite_rules');

function custom_article_rewrite_rules() {
    add_rewrite_rule(
        'article/([0-9]+)/?$',
        'index.php?post_type=article&p=$matches[1]',
        'top'
    );

}


/**** กำหนดให้ชื่อของภาพ เป็น Alt-text โดยอัตโนมัติ ******/

// Automatically set alt text for newly uploaded images
function auto_set_image_alt_text($post_ID) {
    // Check if this is an image attachment
    if (wp_attachment_is_image($post_ID)) {
        // Get the image filename without extension
        $filename = pathinfo(get_post_meta($post_ID, '_wp_attached_file', true), PATHINFO_FILENAME);
        
        // Clean up the filename to make it more readable as alt text
        // Replace dashes, underscores with spaces
        $alt_text = str_replace(array('-', '_'), ' ', $filename);
        
        // Capitalize first letter of each word
        $alt_text = ucwords($alt_text);
        
        // Update the image alt text
        update_post_meta($post_ID, '_wp_attachment_image_alt', $alt_text);
    }
    
    return $post_ID;
}
add_action('add_attachment', 'auto_set_image_alt_text');

// Function to update alt text for all existing images in media library
function update_all_image_alt_texts() {
    // Get all image attachments
    $args = array(
        'post_type' => 'attachment',
        'post_mime_type' => 'image',
        'post_status' => 'inherit',
        'posts_per_page' => -1,
    );
    
    $images = get_posts($args);
    
    $count = 0;
    foreach ($images as $image) {
        // Get the image filename without extension
        $filename = pathinfo(get_post_meta($image->ID, '_wp_attached_file', true), PATHINFO_FILENAME);
        
        // Clean up the filename to make it more readable as alt text
        // Replace dashes, underscores with spaces
        $alt_text = str_replace(array('-', '_'), ' ', $filename);
        
        // Capitalize first letter of each word
        $alt_text = ucwords($alt_text);
        
        // Only update if alt text is empty
        $current_alt = get_post_meta($image->ID, '_wp_attachment_image_alt', true);
        if (empty($current_alt)) {
            update_post_meta($image->ID, '_wp_attachment_image_alt', $alt_text);
            $count++;
        }
    }
    
    return $count;
}

// Add admin page to run update function on all existing images
function auto_alt_text_admin_menu() {
    add_management_page(
        'Auto Alt Text',
        'Auto Alt Text',
        'manage_options',
        'auto-alt-text',
        'auto_alt_text_admin_page'
    );
}
add_action('admin_menu', 'auto_alt_text_admin_menu');

// Admin page callback function
function auto_alt_text_admin_page() {
    $message = '';
    
    // Process form submission
    if (isset($_POST['update_all_alt_texts']) && check_admin_referer('auto_alt_text_update_nonce')) {
        $count = update_all_image_alt_texts();
        $message = sprintf(_n('%s image updated.', '%s images updated.', $count), $count);
    }
    
    ?>
    <div class="wrap">
        <h1><?php _e('Auto Alt Text'); ?></h1>
        
        <?php if (!empty($message)): ?>
            <div class="notice notice-success is-dismissible">
                <p><?php echo esc_html($message); ?></p>
            </div>
        <?php endif; ?>
        
        <form method="post" action="">
            <?php wp_nonce_field('auto_alt_text_update_nonce'); ?>
            <p><?php _e('Click the button below to automatically set alt text for all images in the media library that currently have no alt text.'); ?></p>
            <p><?php _e('The alt text will be based on the image filename.'); ?></p>
            <p><input type="submit" name="update_all_alt_texts" class="button button-primary" value="<?php _e('Update All Images'); ?>"></p>
        </form>
    </div>
    <?php
}


/****** กำหนดให้ Menu แสดงตาม Role ******/

// Enqueue scripts and styles from child theme
function menu_roles_admin_scripts() {
    if (is_admin()) {
        // Get child theme directory URL
        $child_theme_url = get_stylesheet_directory_uri();
        
        // Enqueue Select2
        wp_enqueue_style('select2-css', $child_theme_url . '/css/select2.min.css');
        wp_enqueue_script('select2-js', $child_theme_url . '/js/select2.min.js', array('jquery'), null, true);
        
        // Enqueue custom script
        wp_enqueue_script('menu-roles-js', $child_theme_url . '/js/menu-roles.js', array('jquery', 'select2-js'), '1.0', true);
        
        // Localize script for AJAX
        wp_localize_script('menu-roles-js', 'menuRolesAjax', array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('menu_roles_nonce')
        ));
    }
}
add_action('admin_enqueue_scripts', 'menu_roles_admin_scripts');

function add_nav_menu_role_fields($item_id, $item) {
    $roles = wp_roles()->roles;
    $current_roles = get_post_meta($item_id, '_menu_roles', true);
    
    if (!is_array($current_roles)) {
        $current_roles = array();
    }
    ?>
    <p class="field-menu-role description-wide" style="margin: 10px 0;">
        <label for="edit-menu-item-role-<?php echo $item_id; ?>">
            <?php _e('Display Role', 'menu-roles'); ?><br />
            <select multiple="multiple" 
                    id="edit-menu-item-role-<?php echo $item_id; ?>" 
                    name="menu-item-role[<?php echo $item_id; ?>][]" 
                    class="menu-role-select"
                    data-item-id="<?php echo $item_id; ?>"
                    style="width: 100%;">
                <option value="all" <?php selected(in_array('all', $current_roles) || empty($current_roles)); ?>>
                    <?php _e('All Users', 'menu-roles'); ?>
                </option>
                <?php foreach ($roles as $role => $role_info): ?>
                <option value="<?php echo esc_attr($role); ?>" 
                        <?php selected(in_array($role, $current_roles)); ?>>
                    <?php echo translate_user_role($role_info['name']); ?>
                </option>
                <?php endforeach; ?>
            </select>
            <span class="spinner" style="float: none; margin: 0 5px;"></span>
            <span class="status-message"></span>
        </label>
    </p>
    <?php
}
add_action('wp_nav_menu_item_custom_fields', 'add_nav_menu_role_fields', 10, 2);

// AJAX handler for updating menu roles
function update_menu_role_ajax() {
    // Verify nonce
    if (!check_ajax_referer('menu_roles_nonce', 'nonce', false)) {
        wp_send_json_error('Invalid nonce');
    }

    // Get and validate parameters
    $item_id = isset($_POST['item_id']) ? intval($_POST['item_id']) : 0;
    $roles = isset($_POST['roles']) ? $_POST['roles'] : array();

    if (!$item_id) {
        wp_send_json_error('Invalid menu item ID');
    }

    // Handle 'all' selection
    if (in_array('all', $roles)) {
        delete_post_meta($item_id, '_menu_roles');
        wp_send_json_success(array(
            'message' => __('Updated to All Users', 'menu-roles'),
            'roles' => array()
        ));
    }

    // Validate roles
    $valid_roles = array_intersect($roles, array_keys(wp_roles()->roles));
    
    if (empty($valid_roles)) {
        delete_post_meta($item_id, '_menu_roles');
        wp_send_json_success(array(
            'message' => __('No valid roles selected, defaulting to All Users', 'menu-roles'),
            'roles' => array()
        ));
    }

    // Update roles
    update_post_meta($item_id, '_menu_roles', $valid_roles);
    wp_send_json_success(array(
        'message' => __('Roles updated successfully', 'menu-roles'),
        'roles' => $valid_roles
    ));
}
add_action('wp_ajax_update_menu_role', 'update_menu_role_ajax');

// Filter menu items (unchanged)
function filter_nav_menu_role_items($items) {
    if (is_admin()) {
        return $items;
    }

    $user = wp_get_current_user();
    $filtered = array();

    foreach ($items as $item) {
        $roles = get_post_meta($item->ID, '_menu_roles', true);

        if (empty($roles)) {
            $filtered[] = $item;
            continue;
        }

        if ($user->ID && array_intersect($roles, (array) $user->roles)) {
            $filtered[] = $item;
        }
    }

    return $filtered;
}
add_filter('wp_get_nav_menu_items', 'filter_nav_menu_role_items', 10);

/**** DGA TEAM ******/

/**
 * DGA Team Member Shortcode (ปรับปรุงเพิ่มเติม)
 * 
 * ใช้งานด้วย [dga_team id="123" name="ชื่อ" position="ตำแหน่ง" phone="เบอร์โทร" half_image="url/รูปครึ่งตัว" full_image="url/รูปเต็มตัว" style="default|card"]
 * ถ้าระบุ id จะดึงข้อมูลจาก post นั้น
 * style="card" จะแสดงแบบการ์ดคล้ายกับภาพตัวอย่าง
 */
function dga_team_shortcode($atts) {
    // ดึงค่า attributes
    $attributes = shortcode_atts(array(
        'id' => '',
        'name' => '',
        'position' => '',
        'phone' => '',
        'half_image' => '', // URL รูปครึ่งตัว
        'full_image' => '', // URL รูปเต็มตัว
        'style' => 'card',  // default หรือ card (แบบที่เห็นในภาพตัวอย่าง)
        'url' => ''         // URL สำหรับลิงก์ไปเมื่อคลิกที่การ์ด (ถ้ามี)
    ), $atts);
    
    // เรียกใช้ CSS และ JS
    wp_enqueue_style('dga-team-css', get_stylesheet_directory_uri() . '/css/dga-team.css', array(), '1.0.1');
    wp_enqueue_script('dga-team-js', get_stylesheet_directory_uri() . '/js/dga-team.js', array('jquery'), '1.0.1', true);
    
    // ถ้ามี id ลองดึงข้อมูลจาก post
    if (!empty($attributes['id']) && is_numeric($attributes['id'])) {
        $team_post = get_post($attributes['id']);
        
        if ($team_post) {
            // ดึงข้อมูลจาก post ถ้ามี
            $attributes['name'] = $attributes['name'] ?: get_the_title($team_post->ID);
            $attributes['position'] = $attributes['position'] ?: get_post_meta($team_post->ID, 'position', true);
            $attributes['phone'] = $attributes['phone'] ?: get_post_meta($team_post->ID, 'phone', true);
            $attributes['url'] = $attributes['url'] ?: get_permalink($team_post->ID);
            
            // ดึงรูปถ้าไม่ได้ระบุมา
            if (empty($attributes['half_image'])) {
                $half_image_id = get_post_meta($team_post->ID, 'half_image_id', true);
                $attributes['half_image'] = wp_get_attachment_url($half_image_id);
            }
            
            if (empty($attributes['full_image'])) {
                $full_image_id = get_post_meta($team_post->ID, 'full_image_id', true);
                $attributes['full_image'] = wp_get_attachment_url($full_image_id);
                
                // ถ้าไม่มีรูปเต็มตัวที่กำหนดไว้ ใช้ featured image
                if (empty($attributes['full_image']) && has_post_thumbnail($team_post->ID)) {
                    $attributes['full_image'] = get_the_post_thumbnail_url($team_post->ID, 'full');
                }
            }
            
            // ถ้ายังไม่มีรูปครึ่งตัว แต่มีรูปเต็มตัว ให้ใช้รูปเต็มตัวแทน
            if (empty($attributes['half_image']) && !empty($attributes['full_image'])) {
                $attributes['half_image'] = $attributes['full_image'];
            }
        }
    }
    
    // สร้าง ID เฉพาะสำหรับ element
    $unique_id = 'dga-team-' . (is_numeric($attributes['id']) ? $attributes['id'] : uniqid());
    
    // ตรวจสอบว่ามีรูปภาพที่จะแสดง
    if (empty($attributes['half_image']) || empty($attributes['full_image'])) {
        return '<p class="dga-team-error">Error: ไม่ได้ระบุรูปภาพทีมงาน</p>';
    }
    
    // เตรียมคลาสและ data attributes
    $classes = 'dga-team-member';
    $classes .= ($attributes['style'] == 'card') ? ' dga-team-alternate' : '';
    
    $data_attrs = '';
    $data_attrs .= ' data-name="' . esc_attr($attributes['name']) . '"';
    $data_attrs .= ' data-position="' . esc_attr($attributes['position']) . '"';
    $data_attrs .= ' data-phone="' . esc_attr($attributes['phone']) . '"';
    
    if (!empty($attributes['url'])) {
        $data_attrs .= ' data-url="' . esc_url($attributes['url']) . '"';
        $data_attrs .= ' style="cursor: pointer;"';
    }
    
    // ถ้าเป็นรูปแบบ card (คล้ายกับภาพตัวอย่าง)
    if ($attributes['style'] == 'card') {
        $output = '
        <div class="' . esc_attr($classes) . '" id="' . esc_attr($unique_id) . '"' . $data_attrs . '>
            <div class="dga-team-image-container">
                <div class="dga-team-image-half" style="background-image: url(' . esc_url($attributes['half_image']) . ');"></div>
                <div class="dga-team-image-full" style="background-image: url(' . esc_url($attributes['full_image']) . ');"></div>
                <!-- ส่วนแสดงข้อมูลจะถูกสร้างโดย JavaScript -->
            </div>
            ' . (!empty($attributes['url']) ? '<a href="' . esc_url($attributes['url']) . '" class="dga-team-link"></a>' : '') . '
        </div>
        ';
    } else {
        // รูปแบบปกติ
        $output = '
        <div class="' . esc_attr($classes) . '" id="' . esc_attr($unique_id) . '"' . $data_attrs . '>
            <div class="dga-team-image-container">
                <div class="dga-team-image-half" style="background-image: url(' . esc_url($attributes['half_image']) . ');"></div>
                <div class="dga-team-image-full" style="background-image: url(' . esc_url($attributes['full_image']) . ');"></div>
            </div>
            <div class="dga-team-info">
                <h3 class="dga-team-name">' . esc_html($attributes['name']) . '</h3>
                <p class="dga-team-position">' . esc_html($attributes['position']) . '</p>
                <p class="dga-team-phone">' . esc_html($attributes['phone']) . '</p>
            </div>
            ' . (!empty($attributes['url']) ? '<a href="' . esc_url($attributes['url']) . '" class="dga-team-link"></a>' : '') . '
        </div>
        ';
    }
    
    return $output;
}
add_shortcode('dga_team', 'dga_team_shortcode');

/**
 * สร้าง shortcode สำหรับแสดงทีมงานหลายคนพร้อมกัน
 * 
 * ใช้งานด้วย:
 * [dga_team_group]
 *   [dga_team id="123" name="คนที่ 1" position="ตำแหน่ง" phone="089-123-4567" half_image="url" full_image="url"]
 *   [dga_team id="124" name="คนที่ 2" position="ตำแหน่ง" phone="089-765-4321" half_image="url" full_image="url"]
 * [/dga_team_group]
 */
function dga_team_group_shortcode($atts, $content = null) {
    // เรียกใช้ CSS และ JS
    wp_enqueue_style('dga-team-css', get_stylesheet_directory_uri() . '/css/dga-team.css', array(), '1.0.1');
    wp_enqueue_script('dga-team-js', get_stylesheet_directory_uri() . '/js/dga-team.js', array('jquery'), '1.0.1', true);
    
    // ดึงค่า shortcode ข้างใน
    $output = '<div class="dga-team-grid">';
    $output .= do_shortcode($content);
    $output .= '</div>';
    
    return $output;
}
add_shortcode('dga_team_group', 'dga_team_group_shortcode');



/**** บังคับปิดแถบเครื่องมือถ้า user ไม่ใช่ Administrator ******/

/**
 * Show admin bar only for administrators
 * Place this code in your theme's functions.php file
 */

// Function to check if current user is administrator
function is_user_administrator() {
    return current_user_can('administrator');
}

// Remove admin bar for non-administrators
function remove_admin_bar_for_non_admins() {
    if (!is_user_administrator()) {
        // Hide admin bar from frontend
        add_filter('show_admin_bar', '__return_false');
        
        // Remove admin bar related CSS
        remove_action('wp_head', '_admin_bar_bump_cb');
        
        // Disable admin bar on backend if somehow accessed
        if (!is_admin()) {
            add_filter('show_admin_bar', '__return_false');
        }
    }
}
add_action('init', 'remove_admin_bar_for_non_admins');

// Redirect non-administrators attempting to access wp-admin
function redirect_non_admin_users() {
    if (is_admin() && !is_user_administrator() && !(defined('DOING_AJAX') && DOING_AJAX)) {
        wp_redirect(home_url());
        exit;
    }
}
add_action('init', 'redirect_non_admin_users');

// Remove admin bar menu items for non-administrators
function remove_admin_bar_items($wp_admin_bar) {
    if (!is_user_administrator()) {
        $wp_admin_bar->remove_menu('site-name');
        $wp_admin_bar->remove_menu('dashboard');
        $wp_admin_bar->remove_menu('themes');
        $wp_admin_bar->remove_menu('customize');
        $wp_admin_bar->remove_menu('updates');
        $wp_admin_bar->remove_menu('comments');
        $wp_admin_bar->remove_menu('new-content');
        $wp_admin_bar->remove_menu('edit');
    }
}
add_action('admin_bar_menu', 'remove_admin_bar_items', 999);

// Disable admin bar styling for non-administrators
function disable_admin_bar_style() {
    if (!is_user_administrator()) {
        wp_dequeue_style('admin-bar');
        wp_dequeue_style('admin-bar-min');
    }
}
add_action('wp_enqueue_scripts', 'disable_admin_bar_style', 99);



/***** Widget แสดงข้อความสวัสดีผู้ใช้งาน ******/


// Enqueue CSS และ JavaScript files
function welcome_user_widget_enqueue_scripts() {
    // Enqueue CSS file สำหรับทุกกรณี
    wp_enqueue_style(
        'welcome-user-widget-style',
        get_stylesheet_directory_uri() . '/css/welcome-user-widget.css',
        array(),
        '1.0.8', // เพิ่มเวอร์ชั่นเพื่อป้องกัน caching
        'all'
    );
    
    // Enqueue JavaScript file สำหรับทุกกรณี
    wp_enqueue_script(
        'welcome-user-widget-script',
        get_stylesheet_directory_uri() . '/js/welcome-user-widget.js',
        array('jquery'),
        '1.0.8', // เพิ่มเวอร์ชั่นเพื่อป้องกัน caching
        true
    );
    
    // ส่ง AJAX URL และ nonce ไปยัง JavaScript
    wp_localize_script(
        'welcome-user-widget-script',
        'welcome_user_widget_ajax',
        array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'logout_nonce' => wp_create_nonce('welcome_user_logout_nonce'),
            'login_nonce' => wp_create_nonce('welcome_user_login_nonce'),
            'home_url' => home_url(),
            'current_url' => (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? "https" : "http") . "://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]",
        )
    );
}
add_action('wp_enqueue_scripts', 'welcome_user_widget_enqueue_scripts');

// Shortcode function สำหรับแสดงข้อความต้อนรับ หรือ ปุ่มลงชื่อเข้าใช้
function welcome_user_shortcode() {
    // ตรวจสอบว่ามีผู้ใช้ล็อกอินเข้ามาหรือไม่
    if (is_user_logged_in()) {
        // กรณีล็อกอินแล้ว
        // ดึงข้อมูลผู้ใช้ปัจจุบัน
        $current_user = wp_get_current_user();
        $user_roles = $current_user->roles;
        $role_name = '';
        
        // แปลงบทบาทผู้ใช้เป็นภาษาไทย (สามารถปรับแต่งได้ตามต้องการ)
        if (in_array('administrator', $user_roles)) {
            $role_name = 'ผู้ดูแลระบบ';
        } elseif (in_array('editor', $user_roles)) {
            $role_name = 'บรรณาธิการ';
        } elseif (in_array('author', $user_roles)) {
            $role_name = 'ผู้เขียน';
        } elseif (in_array('contributor', $user_roles)) {
            $role_name = 'ผู้มีส่วนร่วม';
        } elseif (in_array('subscriber', $user_roles)) {
            $role_name = 'สมาชิก';
        } else {
            $role_name = $user_roles[0]; // กรณีบทบาทอื่นๆ
        }
        
        // ดึง URL ของหน้าโปรไฟล์
        $profile_url = get_edit_profile_url($current_user->ID);
        
        // ดึง Avatar ของผู้ใช้
        $avatar = get_avatar(
            $current_user->ID, 
            30,  // ขนาด 30x30px
            '', 
            '', 
            array(
                'class' => 'welcome-user-avatar',
                'force_default' => false
            )
        );
        
        // สร้าง HTML output สำหรับผู้ใช้ที่ล็อกอินแล้ว
        $output = '<div class="welcome-user-widget logged-in">';
        $output .= '<div class="welcome-user-content">';
        
        // เพิ่ม Avatar
        $output .= '<div class="welcome-user-avatar-container">';
        $output .= $avatar;
        $output .= '</div>';
        
        $output .= '<div class="welcome-user-info">';
        $output .= '<span class="welcome-user-name">สวัสดี, ' . esc_html($current_user->display_name) . '</span>';
        $output .= '<span class="welcome-user-role">' . esc_html($role_name) . '</span>';
        $output .= '</div>';
        $output .= '<div class="welcome-user-buttons">';
        $output .= '<a href="/profiles" class="welcome-user-profile-btn">โปรไฟล์</a>';
        $output .= '<a href="#" id="welcome-user-logout-btn">ออกจากระบบ</a>';
        $output .= '</div>';
        $output .= '</div>';
        $output .= '</div>';
    } else {
        // กรณียังไม่ล็อกอิน
        $output = '<div class="welcome-user-widget not-logged-in">';
        
        // คอนเทนเนอร์สำหรับปุ่มต่างๆ
        $output .= '<div class="guest-user-buttons">';
        
        // ปุ่ม "ลงชื่อเข้าใช้งาน"
        $output .= '<div class="login-trigger-container">';
        $output .= '<a href="#" id="login-trigger-btn">ลงชื่อเข้าใช้งาน</a>';
        $output .= '</div>';
        
        // เพิ่มปุ่ม "สมัครสมาชิก"
        $output .= '<div class="register-container">';
        $output .= '<a href="' . esc_url(home_url('/register')) . '" class="register-btn">สมัครสมาชิก</a>';
        $output .= '</div>';
        
        $output .= '</div>'; // ปิด guest-user-buttons
        
        // ฟอร์มล็อกอินที่ซ่อนไว้ก่อน
        $output .= '<div class="login-form-container" style="display: none;">';
        $output .= '<form id="ajax-login-form" action="" method="post">';
        $output .= '<div class="inline-login-form">';
        
        // ช่องกรอกชื่อผู้ใช้พร้อม label ที่ถูกต้องตาม WCAG
        $output .= '<div class="form-field-wrapper">';
        $output .= '<label for="login-username" class="screen-reader-text">ชื่อผู้ใช้งาน</label>';
        $output .= '<input type="text" name="username" id="login-username" placeholder="ชื่อผู้ใช้งาน" aria-label="ชื่อผู้ใช้งาน" required />';
        $output .= '</div>';
        
        // ช่องกรอกรหัสผ่านพร้อม label ที่ถูกต้องตาม WCAG
        $output .= '<div class="form-field-wrapper">';
        $output .= '<label for="login-password" class="screen-reader-text">รหัสผ่าน</label>';
        $output .= '<input type="password" name="password" id="login-password" placeholder="รหัสผ่าน" aria-label="รหัสผ่าน" required autocomplete="current-password" />';
        $output .= '</div>';
        
        // ปุ่มเข้าสู่ระบบ
        $output .= '<button type="submit" id="login-submit-btn">เข้าสู่ระบบ</button>';
        
        // ลิงก์ลืมรหัสผ่าน
        $output .= '<a href="' . esc_url(home_url('/reset-password')) . '" class="forgot-password-link">ลืมรหัสผ่าน</a>';
        
        $output .= '</div>'; // ปิด inline-login-form
        
        $output .= '<div class="login-message" role="alert" aria-live="polite"></div>';
        $output .= '</form>';
        $output .= '</div>';
        
        $output .= '</div>'; // ปิด welcome-user-widget
    }
    
    return $output;
}
add_shortcode('welcome_user', 'welcome_user_shortcode');

// AJAX function สำหรับการออกจากระบบ
function welcome_user_logout_callback() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (isset($_POST['nonce']) && wp_verify_nonce($_POST['nonce'], 'welcome_user_logout_nonce')) {
        // ล็อกการเรียกใช้งานเพื่อดีบัก
        error_log('Logout AJAX initiated');
        
        // ทำการออกจากระบบ
        wp_logout();
        
        // ล็อกการทำงานเพื่อดีบัก
        error_log('Logout successful');
        
        // ส่งค่ากลับว่าสำเร็จ
        wp_send_json_success(array('message' => 'ออกจากระบบสำเร็จ'));
    } else {
        // ล็อกการทำงานเพื่อดีบัก
        error_log('Logout nonce verification failed');
        
        // ส่งค่ากลับว่าเกิดข้อผิดพลาด
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาด โปรดลองอีกครั้ง'));
    }
    
    // ต้องมี die() หรือ exit ด้วย
    die();
}
add_action('wp_ajax_welcome_user_logout', 'welcome_user_logout_callback');

// เพิ่มฟังก์ชันให้ logout จากลิงก์ปกติกรณี AJAX ไม่ทำงาน
function welcome_user_alternative_logout_link() {
    if (is_user_logged_in()) {
        // เพิ่ม logout URL ที่ซ่อนไว้ในหน้า เผื่อกรณี AJAX ไม่ทำงาน
        echo '<div id="welcome-user-alternative-logout" style="display:none;">';
        echo '<a href="' . wp_logout_url($_SERVER['REQUEST_URI']) . '" id="welcome-user-alt-logout-link">Logout</a>';
        echo '</div>';
    }
}
add_action('wp_footer', 'welcome_user_alternative_logout_link');

// AJAX function สำหรับการลงชื่อเข้าใช้
function welcome_user_login_callback() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (isset($_POST['nonce']) && wp_verify_nonce($_POST['nonce'], 'welcome_user_login_nonce')) {
        // ตรวจสอบข้อมูลที่ส่งมา
        $username = isset($_POST['username']) ? sanitize_user($_POST['username']) : '';
        $password = isset($_POST['password']) ? $_POST['password'] : '';
        
        // ถ้าไม่มีข้อมูลใดข้อมูลหนึ่ง
        if (empty($username) || empty($password)) {
            wp_send_json_error(array('message' => 'กรุณากรอกชื่อผู้ใช้และรหัสผ่าน'));
            die();
        }
        
        // พยายามล็อกอิน
        $user = wp_signon(
            array(
                'user_login' => $username,
                'user_password' => $password,
                'remember' => true
            ),
            is_ssl()
        );
        
        // ตรวจสอบผลลัพธ์
        if (is_wp_error($user)) {
            wp_send_json_error(array('message' => 'ชื่อผู้ใช้หรือรหัสผ่านไม่ถูกต้อง'));
        } else {
            wp_send_json_success(array('message' => 'เข้าสู่ระบบสำเร็จ'));
        }
    } else {
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดด้านความปลอดภัย โปรดลองอีกครั้ง'));
    }
    die();
}
add_action('wp_ajax_nopriv_welcome_user_login', 'welcome_user_login_callback');



/***** DGA MAIN SLIDE ********/

/**
 * DGA Carousel Slide Shortcode
 * 
 * Creates a carousel slider for posts from multiple post types with peek effect
 * Usage: [dga_carousel_slide post_types="news,article,pha,dgallery" posts_per_page="5"]
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

// Enqueue scripts and styles
function dga_carousel_slide_enqueue_scripts() {
    // Get theme directory URI for child theme
    $theme_dir = get_stylesheet_directory_uri();
    
    // Enqueue CSS
    wp_enqueue_style(
        'dga-carousel-slide-css',
        $theme_dir . '/css/dga-carousel-slide.css',
        array(),
        '1.0.6'
    );
    
    // Enqueue jQuery if not already loaded
    wp_enqueue_script('jquery');
    
    // Enqueue JavaScript
    wp_enqueue_script(
        'dga-carousel-slide-js',
        $theme_dir . '/js/dga-carousel-slide.js',
        array('jquery'),
        '1.0.6',
        true
    );
}
add_action('wp_enqueue_scripts', 'dga_carousel_slide_enqueue_scripts');

// Shortcode function
function dga_carousel_slide_shortcode($atts) {
    // Default attributes
    $atts = shortcode_atts(
        array(
            'post_types' => 'news,article,pha,dgallery', // Default post types
            'posts_per_page' => 5, // Number of posts to display
            'orderby' => 'date', // Order by date
            'order' => 'DESC', // Descending order (newest first)
        ),
        $atts,
        'dga_carousel_slide'
    );
    
    // Convert post_types string to array
    $post_types = explode(',', $atts['post_types']);
    
    // Query arguments
    $args = array(
        'post_type' => $post_types,
        'posts_per_page' => intval($atts['posts_per_page']),
        'orderby' => $atts['orderby'],
        'order' => $atts['order'],
        'post_status' => 'publish',
        'meta_query' => array(
            array(
                'key' => '_thumbnail_id',  // Only get posts with featured images
                'compare' => 'EXISTS'
            ),
        ),
        'no_found_rows' => true, // Performance improvement
    );
    
    // Get posts
    $posts_query = new WP_Query($args);
    
    // Check if posts exist
    if (!$posts_query->have_posts()) {
        return '<div class="dga-carousel-empty">No posts with featured images found.</div>';
    }
    
    // Generate unique ID for this carousel
    $carousel_id = 'dga-carousel-' . wp_rand(1000, 9999);
    
    // Start output buffer
    ob_start();
    ?>
    <div id="<?php echo esc_attr($carousel_id); ?>" class="dga-carousel-container" role="region" aria-roledescription="carousel" aria-label="Content Carousel">
        <!-- Live region สำหรับโปรแกรมอ่านหน้าจอ -->
        <div class="screen-reader-text dga-carousel-liveregion" aria-live="polite" aria-atomic="true"></div>
        
        <div class="dga-carousel-track-container">
            <!-- ใช้ div แทน ul เพื่อแก้ปัญหาโครงสร้าง HTML -->
            <div class="dga-carousel-track">
                <?php $slide_index = 0; while ($posts_query->have_posts()) : $posts_query->the_post(); 
                    $thumbnail_url = get_the_post_thumbnail_url(get_the_ID(), 'large');
                    if (!$thumbnail_url) continue; // Skip if no thumbnail
                    
                    // Get post title and excerpt for overlay
                    $post_title = get_the_title();
                    $post_url = get_permalink();
                    $post_excerpt = get_the_excerpt();
                    $short_excerpt = wp_trim_words($post_excerpt, 15, '...');
                    $slide_id = 'slide-' . $slide_index . '-' . $carousel_id;
                ?>
                <div id="<?php echo esc_attr($slide_id); ?>" 
                    class="dga-carousel-slide" 
                    role="tabpanel" 
                    aria-roledescription="slide" 
                    aria-label="<?php echo esc_attr($slide_index + 1); ?> of <?php echo esc_attr($posts_query->post_count); ?>"
                    data-post-url="<?php echo esc_url($post_url); ?>">
                    
                    <!-- ทำให้คลิกได้ทั้งพื้นที่โดยครอบด้วย a tag -->
                    <a href="<?php echo esc_url($post_url); ?>" 
                       class="dga-carousel-slide-link" 
                       data-post-id="<?php echo get_the_ID(); ?>"
                       aria-label="<?php echo esc_attr($post_title); ?>"
                       title="<?php echo esc_attr($post_title); ?>"
                       <?php if ($slide_index !== 2) echo 'tabindex="-1"'; ?>>
                        
                        <div class="dga-carousel-image" style="background-image: url('<?php echo esc_url($thumbnail_url); ?>');">
                            <span class="screen-reader-text"><?php echo esc_html($post_title); ?></span>
                            
                            <!-- เพิ่ม overlay แสดงชื่อเรื่องและข้อมูลเพิ่มเติม -->
                            <div class="dga-carousel-overlay">
                                <h3 class="dga-carousel-title"><?php echo esc_html($post_title); ?></h3>
                                <p class="dga-carousel-excerpt"><?php echo esc_html($short_excerpt); ?></p>
                                <span class="dga-carousel-read-more">อ่านเพิ่มเติม</span>
                            </div>
                        </div>
                    </a>
                </div>
                <?php $slide_index++; endwhile; ?>
            </div>
        </div>
        
        <div class="dga-carousel-controls">
            <button class="dga-carousel-prev" aria-label="Previous slide">
                <svg viewBox="0 0 24 24" width="24" height="24" aria-hidden="true" focusable="false">
                    <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z" fill="currentColor"></path>
                </svg>
                <span class="screen-reader-text">Previous</span>
            </button>
            
            <div class="dga-carousel-dots" role="tablist" aria-label="Carousel Navigation">
                <!-- จะถูกสร้างโดย JavaScript -->
            </div>
            
            <button class="dga-carousel-next" aria-label="Next slide">
                <svg viewBox="0 0 24 24" width="24" height="24" aria-hidden="true" focusable="false">
                    <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z" fill="currentColor"></path>
                </svg>
                <span class="screen-reader-text">Next</span>
            </button>
        </div>
        
        <!-- เพิ่ม template สำหรับใช้กับ JavaScript -->
        <template id="<?php echo esc_attr($carousel_id); ?>-dot-template">
            <button class="dga-carousel-dot" role="tab" aria-selected="false">
                <span class="screen-reader-text">Go to slide</span>
            </button>
        </template>
    </div>
    
    <script>
    // Script แยกสำหรับเตรียมพร้อมใช้งาน carousel นี้โดยเฉพาะ
    (function() {
        document.addEventListener('DOMContentLoaded', function() {
            // ตรวจสอบว่า Carousel ถูกสร้างในหน้านี้
            var carousel = document.getElementById('<?php echo esc_attr($carousel_id); ?>');
            if (carousel && typeof jQuery !== 'undefined') {
                // กระตุ้นให้ initialize carousel นี้
                jQuery(carousel).data('dgaCarousel') || initDgaCarousels();
            }
        });
    })();
    </script>
    <?php
    // Reset post data
    wp_reset_postdata();
    
    // Return output buffer
    return ob_get_clean();
}
add_shortcode('dga_carousel_slide', 'dga_carousel_slide_shortcode');



/****** Login ******/

// Add shortcode
add_shortcode('dgalogin', 'blue_orange_login_shortcode');

// Register necessary scripts and styles
add_action('wp_enqueue_scripts', 'blue_orange_login_assets');

function blue_orange_login_assets() {
    $child_theme_url = get_stylesheet_directory_uri();
    wp_enqueue_style('blue-orange-login-style', $child_theme_url . '/css/blue-orange-login.css', array(), '1.0.0');
    wp_enqueue_script('blue-orange-login-script', $child_theme_url . '/js/blue-orange-login.js', array('jquery'), '1.0.0', true);
    
    wp_localize_script('blue-orange-login-script', 'blueOrangeLoginAjax', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'security' => wp_create_nonce('blue-orange-login-nonce')
    ));
}

function blue_orange_login_shortcode() {
    if (is_user_logged_in() && !current_user_can('administrator')) {
        wp_redirect(home_url('/profile'));
        exit;
    }

    ob_start();
    ?>
    <div class="blue-orange-login-container">
        <div class="blue-orange-login-card">
            <div class="blue-orange-login-header">
                <h2>เข้าสู่ระบบ</h2>
            </div>
            
            <form id="blue-orange-login-form" class="blue-orange-login-form">
                <!-- ขั้นตอนที่ 1: กรอกชื่อผู้ใช้ -->
                <div class="step-content" data-step="1">
                    <div class="form-group">
                        <input type="text" id="username" name="username" placeholder="ชื่อผู้ใช้หรืออีเมล" required>
                    </div>

                    <div class="form-group">
                        <button type="button" class="next-step-button">
                            <span>ถัดไป</span>
                        </button>
                    </div>
                </div>

                <!-- ขั้นตอนที่ 2: กรอกรหัสผ่าน -->
                <div class="step-content" data-step="2" style="display: none;">
                    <div class="user-info">
                        <span class="username-display"></span>
                        <button type="button" class="change-user">เปลี่ยน</button>
                    </div>

                    <div class="form-group">
                        <div class="password-wrapper">
                            <input type="password" id="password" name="password" placeholder="รหัสผ่าน" required>
                            <button type="button" class="toggle-password">แสดง</button>
                        </div>
                    </div>

                    <div class="form-group remember-forgot">
                        <label class="remember-me">
                            <input type="checkbox" name="remember" id="remember">
                            <span>จดจำฉัน</span>
                        </label>
                        <a href="<?php echo wp_lostpassword_url(); ?>" class="forgot-password">ลืมรหัสผ่าน?</a>
                    </div>

                    <div class="form-group">
                        <button type="submit" class="login-button">
                            <span>เข้าสู่ระบบ</span>
                            <div class="loader"></div>
                        </button>
                    </div>
                </div>

                <div class="login-message"></div>
            </form>

            <div class="blue-orange-login-footer">
                <p>ยังไม่มีบัญชี? <a href="/register">ลงทะเบียน</a></p>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}

// AJAX action for username check
add_action('wp_ajax_nopriv_check_username', 'check_username_exists');
add_action('wp_ajax_check_username', 'check_username_exists');
function check_username_exists() {
    check_ajax_referer('blue-orange-login-nonce', 'security');

    $username = sanitize_user($_POST['username']);
    
    if (email_exists($username) || username_exists($username)) {
        wp_send_json_success(array(
            'exists' => true,
            'message' => 'ผู้ใช้พบในระบบ'
        ));
    } else {
        wp_send_json_error(array(
            'exists' => false,
            'message' => 'ไม่พบผู้ใช้ในระบบ'
        ));
    }
}

// Login handler
add_action('wp_ajax_nopriv_blue_orange_login', 'handle_blue_orange_login');
add_action('wp_ajax_blue_orange_login', 'handle_blue_orange_login');
function handle_blue_orange_login() {
    check_ajax_referer('blue-orange-login-nonce', 'security');

    $credentials = array(
        'user_login' => $_POST['username'],
        'user_password' => $_POST['password'],
        'remember' => isset($_POST['remember']) ? true : false
    );

    $user = wp_signon($credentials, false);

    if (is_wp_error($user)) {
        wp_send_json_error(array(
            'message' => 'รหัสผ่านไม่ถูกต้อง'
        ));
    } else {
        wp_send_json_success(array(
            'message' => 'เข้าสู่ระบบสำเร็จ กำลังนำคุณไปยังหน้าโปรไฟล์...',
            'redirect_url' => home_url('/profile')
        ));
    }
}


/***** DUAL BUTTON LOGIN - REGISTER ******/

// Add shortcode for auth buttons
add_shortcode('daul-button', 'modern_auth_buttons_shortcode');

// Register necessary scripts and styles
add_action('wp_enqueue_scripts', 'modern_auth_buttons_assets');

function modern_auth_buttons_assets() {
    // Get Child Theme directory URL
    $child_theme_url = get_stylesheet_directory_uri();
    
    // Enqueue Font Awesome
    wp_enqueue_style('font-awesome', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css');
    
    // Enqueue custom styles and scripts from Child Theme
    wp_enqueue_style('modern-auth-buttons', $child_theme_url . '/css/modern-auth-buttons.css', array(), '1.0.0');
    wp_enqueue_script('modern-auth-buttons', $child_theme_url . '/js/modern-auth-buttons.js', array('jquery'), '1.0.0', true);
}

// Main shortcode function
function modern_auth_buttons_shortcode() {
    ob_start();
    ?>
    <div class="modern-auth-buttons">
        <a href="<?php echo home_url('/login'); ?>" target="_blank" class="auth-button login-button" aria-label="เข้าสู่ระบบ">
            <div class="button-content">
                <div class="icon-wrapper">
                    <i class="fas fa-sign-in-alt"></i>
                    <div class="icon-ripple"></div>
                </div>
                <span class="button-text">เข้าสู่ระบบ</span>
                <i class="fas fa-external-link-alt external-icon"></i>
            </div>
            <div class="hover-effect"></div>
        </a>

        <a href="<?php echo home_url('/register'); ?>" target="_blank" class="auth-button register-button" aria-label="ลงทะเบียน">
            <div class="button-content">
                <div class="icon-wrapper">
                    <i class="fas fa-user-plus"></i>
                    <div class="icon-ripple"></div>
                </div>
                <span class="button-text">ลงทะเบียน</span>
                <i class="fas fa-external-link-alt external-icon"></i>
            </div>
            <div class="hover-effect"></div>
        </a>
    </div>
    <?php
    return ob_get_clean();
}


/**** อัพเดต WP CONTENT ******/

// เพิ่ม Shortcode
function edit_wpcontent_shortcode($atts) {
    // ดึงค่าตัวแปรจาก shortcode attributes
    $atts = shortcode_atts(array(
        'id' => get_the_ID(), // ใช้ ID ของโพสต์ปัจจุบันเป็นค่าเริ่มต้น
        'field' => 'content', // ค่าเริ่มต้นคือเนื้อหาโพสต์
    ), $atts);
    
    // ตรวจสอบว่าผู้ใช้มีสิทธิ์ในการแก้ไขหรือไม่
    $can_edit = current_user_can('edit_post', $atts['id']);
    
    // ดึงข้อมูลโพสต์
    $post = get_post($atts['id']);
    
    if (!$post) {
        return '<p>ไม่พบเนื้อหา</p>';
    }
    
    // เลือกข้อมูลที่จะแสดงตาม field ที่กำหนด
    switch ($atts['field']) {
        case 'title':
            $content = $post->post_title;
            break;
        case 'excerpt':
            $content = $post->post_excerpt;
            break;
        case 'content':
        default:
            $content = $post->post_content;
            break;
    }
    
    // สร้าง nonce สำหรับความปลอดภัย
    $nonce = wp_create_nonce('edit_wpcontent_nonce');
    
    // สร้าง output HTML
    $output = '<div class="edit-wpcontent-container" data-id="' . esc_attr($atts['id']) . '" data-field="' . esc_attr($atts['field']) . '" data-nonce="' . esc_attr($nonce) . '">';
    $output .= '<div class="edit-wpcontent-content">' . wpautop($content) . '</div>';
    
    // แสดงปุ่มแก้ไขเฉพาะสำหรับผู้ใช้ที่มีสิทธิ์
    if ($can_edit) {
        $output .= '<button class="edit-wpcontent-button" title="แก้ไขเนื้อหา"><i class="dashicons dashicons-edit"></i></button>';
        $output .= '<div class="edit-wpcontent-form" style="display:none;">';
        $output .= '<textarea class="edit-wpcontent-textarea">' . esc_textarea($content) . '</textarea>';
        $output .= '<div class="edit-wpcontent-actions">';
        $output .= '<button class="edit-wpcontent-save">บันทึก</button>';
        $output .= '<button class="edit-wpcontent-cancel">ยกเลิก</button>';
        $output .= '</div></div>';
    }
    
    $output .= '</div>';
    
    // เรียกใช้ CSS และ JS
    wp_enqueue_style('edit-wpcontent-style');
    wp_enqueue_script('edit-wpcontent-script');
    wp_enqueue_style('dashicons');
    
    return $output;
}
add_shortcode('edit_wpcontent', 'edit_wpcontent_shortcode');

// ลงทะเบียน CSS สำหรับ shortcode
function edit_wpcontent_register_styles() {
    wp_register_style(
        'edit-wpcontent-style', 
        get_stylesheet_directory_uri() . '/css/edit-wpcontent.css', 
        array(), 
        '1.0.0'
    );
}
add_action('wp_enqueue_scripts', 'edit_wpcontent_register_styles');

// ลงทะเบียน JavaScript สำหรับ shortcode
function edit_wpcontent_register_scripts() {
    wp_register_script(
        'edit-wpcontent-script', 
        get_stylesheet_directory_uri() . '/js/edit-wpcontent.js', 
        array('jquery'), 
        '1.0.0', 
        true
    );
    
    // ส่งข้อมูลไปยัง JavaScript
    wp_localize_script('edit-wpcontent-script', 'editWpContent', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'messages' => array(
            'success' => 'บันทึกเนื้อหาเรียบร้อยแล้ว',
            'error' => 'เกิดข้อผิดพลาด โปรดลองอีกครั้ง'
        )
    ));
}
add_action('wp_enqueue_scripts', 'edit_wpcontent_register_scripts');

// สร้าง AJAX handler สำหรับการบันทึกเนื้อหา
function edit_wpcontent_ajax_save() {
    // ตรวจสอบความปลอดภัยด้วย nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'edit_wpcontent_nonce')) {
        wp_send_json_error('Security check failed');
    }
    
    // ตรวจสอบข้อมูลที่ส่งมา
    if (!isset($_POST['post_id']) || !isset($_POST['content']) || !isset($_POST['field'])) {
        wp_send_json_error('Missing required data');
    }
    
    $post_id = intval($_POST['post_id']);
    $content = wp_kses_post($_POST['content']);
    $field = sanitize_text_field($_POST['field']);
    
    // ตรวจสอบสิทธิ์การแก้ไข
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error('Permission denied');
    }
    
    // อัปเดตโพสต์ตาม field ที่กำหนด
    $post_data = array(
        'ID' => $post_id
    );
    
    switch ($field) {
        case 'title':
            $post_data['post_title'] = $content;
            break;
        case 'excerpt':
            $post_data['post_excerpt'] = $content;
            break;
        case 'content':
        default:
            $post_data['post_content'] = $content;
            break;
    }
    
    // บันทึกการเปลี่ยนแปลง
    $result = wp_update_post($post_data);
    
    if ($result) {
        // แปลงเนื้อหาให้อยู่ในรูปแบบที่ถูกต้องสำหรับการแสดงผล
        $formatted_content = $content;
        if ($field == 'content') {
            $formatted_content = wpautop($content);
        }
        
        wp_send_json_success(array(
            'message' => 'Content updated successfully',
            'formatted_content' => $formatted_content
        ));
    } else {
        wp_send_json_error('Failed to update content');
    }
}
add_action('wp_ajax_edit_wpcontent_save', 'edit_wpcontent_ajax_save');




/**
 * WCAG CHECKER - COMPLETE MANUAL CHECKS

 */

// Enable debug mode
define('WCAG_DEBUG', true);
define('WCAG_VERBOSE', true);

// Error logging function
function wcag_log_error($message, $data = null) {
    if (WCAG_DEBUG) {
        $log_entry = '[WCAG Checker ' . date('H:i:s') . '] ' . $message;
        if ($data !== null) {
            $log_entry .= ' - Data: ' . print_r($data, true);
        }
        error_log($log_entry);
    }
}

// Add shortcode
function wcag_compliance_checker_shortcode() {
    wp_enqueue_style('wcag-checker-style', get_stylesheet_directory_uri() . '/css/wcag-checker.css');
    wp_enqueue_script('wcag-checker-script', get_stylesheet_directory_uri() . '/js/wcag-checker.js', array('jquery'), '1.0', true);
    
    wp_localize_script('wcag-checker-script', 'wcagAjax', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('wcag_checker_nonce'),
        'currentUrl' => get_permalink(),
        'debug' => WCAG_DEBUG,
        'verbose' => WCAG_VERBOSE
    ));
    
    $output = '
        <div class="wcag-checker-container">
            <div class="wcag-results">
                <div class="wcag-grade"></div>
                <button class="wcag-check-now">ตรวจสอบเลย</button>
                <button class="wcag-details-toggle" style="display: none;">แสดงรายละเอียด</button>
                <div class="wcag-details" style="display: none;"></div>
            </div>
            <div class="wcag-loading">
                <div class="wcag-spinner"></div>
                <div class="wcag-loading-text">กำลังตรวจสอบ...</div>
                <div class="wcag-loading-details" style="font-size: 0.9em; margin-top: 10px; color: #666;"></div>
            </div>
            
            <!-- Debug panel -->
            <div class="wcag-debug" style="margin-top: 20px; padding: 10px; background: #f0f0f0; border: 1px solid #ccc; font-family: monospace; font-size: 12px; white-space: pre-wrap; max-height: 300px; overflow-y: auto;"></div>
            
            <!-- Modal Popup -->
            <div id="wcag-modal" class="wcag-modal">
                <div class="wcag-modal-content">
                    <span class="wcag-modal-close">&times;</span>
                    <div id="wcag-modal-content"></div>
                </div>
            </div>
        </div>
    ';
    
    return $output;
}
add_shortcode('wcag_checker', 'wcag_compliance_checker_shortcode');

// AJAX handler
function wcag_run_compliance_check() {
    wcag_log_error('=== Starting WCAG Check ===');
    
    if (!check_ajax_referer('wcag_checker_nonce', 'nonce', false)) {
        wcag_log_error('Nonce verification failed');
        wp_send_json_error(array('message' => 'Security check failed'));
        return;
    }
    
    $current_url = isset($_POST['url']) ? esc_url_raw($_POST['url']) : '';
    $severity = isset($_POST['severity']) ? sanitize_text_field($_POST['severity']) : 'medium';
    
    wcag_log_error('Check parameters', array('url' => $current_url, 'severity' => $severity));
    
    try {
        // Fetch HTML content
        $start_time = microtime(true);
        
        $response = wp_remote_get($current_url, array(
            'timeout' => 30,
            'user-agent' => 'Mozilla/5.0 (compatible; WCAG Checker/1.0)'
        ));
        
        $fetch_time = microtime(true) - $start_time;
        wcag_log_error('URL fetch completed', array('time' => $fetch_time . 's'));
        
        if (is_wp_error($response)) {
            wcag_log_error('Failed to fetch URL', $response->get_error_message());
            wp_send_json_error(array(
                'message' => 'ไม่สามารถเข้าถึง URL ได้: ' . $response->get_error_message()
            ));
            return;
        }
        
        $html_content = wp_remote_retrieve_body($response);
        $content_length = strlen($html_content);
        wcag_log_error('HTML content retrieved', array('length' => $content_length . ' bytes'));
        
        // Complete accessibility check
        $check_start = microtime(true);
        
        $results = wcag_complete_accessibility_check($html_content, $severity);
        
        $check_time = microtime(true) - $check_start;
        wcag_log_error('Check completed', array(
            'total_time' => $check_time . 's',
            'score' => $results['score'],
            'grade' => $results['grade']
        ));
        
        // Add debug info
        $results['debug_info'] = array(
            'url' => $current_url,
            'fetch_time' => $fetch_time,
            'check_time' => $check_time,
            'content_length' => $content_length,
            'timestamp' => date('Y-m-d H:i:s')
        );
        
        wp_send_json_success($results);
        
    } catch (Exception $e) {
        wcag_log_error('Exception occurred', $e->getMessage());
        wp_send_json_error(array(
            'message' => 'เกิดข้อผิดพลาด: ' . $e->getMessage()
        ));
    }
}
add_action('wp_ajax_wcag_check', 'wcag_run_compliance_check');
add_action('wp_ajax_nopriv_wcag_check', 'wcag_run_compliance_check');

// Complete accessibility check with all manual checks
function wcag_complete_accessibility_check($html_content, $severity = 'medium') {
    global $wpdb;
    wcag_log_error('Starting complete accessibility check');
    
    // Initialize results
    $checks = array(
        'contrast' => array('passed' => true, 'violations' => array(), 'total' => 0, 'checked' => 0),
        'alt_text' => array('passed' => true, 'violations' => array(), 'total' => 0, 'checked' => 0),
        'headers' => array('passed' => true, 'violations' => array(), 'total' => 0, 'checked' => 0),
        'aria' => array('passed' => true, 'violations' => array(), 'total' => 0, 'checked' => 0),
        'keyboard' => array('passed' => true, 'violations' => array(), 'total' => 0, 'checked' => 0),
        'forms' => array('passed' => true, 'violations' => array(), 'total' => 0, 'checked' => 0),
        'links' => array('passed' => true, 'violations' => array(), 'total' => 0, 'checked' => 0)
    );
    
    // Parse HTML
    $dom = new DOMDocument();
    libxml_use_internal_errors(true);
    
    $html_content = mb_convert_encoding($html_content, 'HTML-ENTITIES', 'UTF-8');
    $loaded = @$dom->loadHTML($html_content, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);
    
    if (!$loaded) {
        wcag_log_error('Failed to parse HTML');
        libxml_clear_errors();
        return array(
            'grade' => null,
            'checks' => $checks,
            'score' => 0,
            'severity' => $severity,
            'error' => 'ไม่สามารถวิเคราะห์ HTML ได้'
        );
    }
    
    libxml_clear_errors();
    
    // Create XPath for queries
    $xpath = new DOMXPath($dom);
    
    // 1. Check images (alt text)
    wcag_log_error('Checking images for alt text');
    $images = $dom->getElementsByTagName('img');
    $checks['alt_text']['total'] = $images->length;
    $checks['alt_text']['checked'] = $images->length;
    
    foreach ($images as $img) {
        if (!$img->hasAttribute('alt')) {
            $checks['alt_text']['violations'][] = array(
                'message' => 'รูปภาพไม่มี alt text',
                'impact' => 'critical',
                'element' => wcag_get_element_snippet($img)
            );
            $checks['alt_text']['passed'] = false;
        }
    }
    
    // 2. Check links
    wcag_log_error('Checking links');
    $links = $dom->getElementsByTagName('a');
    $checks['links']['total'] = $links->length;
    $checks['links']['checked'] = $links->length;
    
    foreach ($links as $link) {
        $text = trim($link->textContent);
        $hasImg = $link->getElementsByTagName('img')->length > 0;
        $hasAriaLabel = $link->hasAttribute('aria-label');
        $hasTitle = $link->hasAttribute('title');
        
        if (empty($text) && !$hasImg && !$hasAriaLabel && !$hasTitle) {
            $checks['links']['violations'][] = array(
                'message' => 'ลิงก์ไม่มีข้อความหรือคำอธิบาย',
                'impact' => 'serious',
                'element' => wcag_get_element_snippet($link)
            );
            $checks['links']['passed'] = false;
        }
    }
    
    // 3. Check headings structure
    wcag_log_error('Checking heading structure');
    $headings = array();
    for ($i = 1; $i <= 6; $i++) {
        $h_tags = $dom->getElementsByTagName('h' . $i);
        foreach ($h_tags as $h) {
            $headings[] = array('level' => $i, 'element' => $h);
        }
    }
    
    $checks['headers']['total'] = count($headings);
    $checks['headers']['checked'] = count($headings);
    
    if (count($headings) > 0) {
        // Sort by document order
        usort($headings, function($a, $b) {
            return $a['element']->getLineNo() - $b['element']->getLineNo();
        });
        
        $prev = 0;
        foreach ($headings as $heading) {
            $level = $heading['level'];
            if ($prev > 0 && $level - $prev > 1) {
                $checks['headers']['violations'][] = array(
                    'message' => 'ข้ามระดับหัวข้อจาก H' . $prev . ' ไป H' . $level,
                    'impact' => 'moderate',
                    'element' => wcag_get_element_snippet($heading['element'])
                );
                $checks['headers']['passed'] = false;
                break;
            }
            $prev = $level;
        }
    }
    
    // 4. Check forms
    wcag_log_error('Checking forms');
    $form_elements = array();
    
    // Get all form elements
    $inputs = $dom->getElementsByTagName('input');
    foreach ($inputs as $input) {
        $type = $input->getAttribute('type');
        if (!in_array($type, ['submit', 'reset', 'hidden', 'button', 'image'])) {
            $form_elements[] = $input;
        }
    }
    
    $selects = $dom->getElementsByTagName('select');
    foreach ($selects as $select) {
        $form_elements[] = $select;
    }
    
    $textareas = $dom->getElementsByTagName('textarea');
    foreach ($textareas as $textarea) {
        $form_elements[] = $textarea;
    }
    
    $checks['forms']['total'] = count($form_elements);
    $checks['forms']['checked'] = count($form_elements);
    
    wcag_log_error('Found form elements', count($form_elements));
    
    foreach ($form_elements as $element) {
        $has_label = false;
        
        // Check for associated label
        $id = $element->getAttribute('id');
        if ($id) {
            $labels = $xpath->query("//label[@for='$id']");
            if ($labels->length > 0) {
                $has_label = true;
            }
        }
        
        // Check for ARIA labels
        if ($element->hasAttribute('aria-label') || 
            $element->hasAttribute('aria-labelledby') || 
            $element->hasAttribute('title')) {
            $has_label = true;
        }
        
        // Check if wrapped in label
        $parent = $element->parentNode;
        while ($parent && $parent->nodeName !== 'body') {
            if ($parent->nodeName === 'label') {
                $has_label = true;
                break;
            }
            $parent = $parent->parentNode;
        }
        
        if (!$has_label) {
            $checks['forms']['violations'][] = array(
                'message' => 'ฟอร์มไม่มี label',
                'impact' => 'serious',
                'element' => wcag_get_element_snippet($element),
                'details' => 'Element: ' . $element->nodeName . ', Type: ' . $element->getAttribute('type') . ', ID: ' . $id
            );
            $checks['forms']['passed'] = false;
        }
    }
    
    // 5. Check ARIA usage
    wcag_log_error('Checking ARIA usage');
    $aria_elements = $xpath->query('//*[@role or @aria-label or @aria-labelledby or @aria-describedby]');
    $checks['aria']['total'] = $aria_elements->length;
    $checks['aria']['checked'] = $aria_elements->length;
    
    foreach ($aria_elements as $element) {
        // Check for invalid role values
        if ($element->hasAttribute('role')) {
            $role = $element->getAttribute('role');
            $valid_roles = array('button', 'navigation', 'main', 'banner', 'contentinfo', 'complementary', 'search', 'form', 'region', 'alert', 'dialog', 'menu', 'menubar', 'menuitem', 'tab', 'tablist', 'tabpanel');
            
            if ($role && !in_array($role, $valid_roles)) {
                $checks['aria']['violations'][] = array(
                    'message' => 'ARIA role ไม่ถูกต้อง: ' . $role,
                    'impact' => 'moderate',
                    'element' => wcag_get_element_snippet($element)
                );
                $checks['aria']['passed'] = false;
            }
        }
        
        // Check for aria-labelledby pointing to non-existent IDs
        if ($element->hasAttribute('aria-labelledby')) {
            $labelledby = $element->getAttribute('aria-labelledby');
            $ids = preg_split('/\s+/', $labelledby);
            
            foreach ($ids as $id) {
                if ($id && !$dom->getElementById($id)) {
                    $checks['aria']['violations'][] = array(
                        'message' => 'aria-labelledby อ้างอิง ID ที่ไม่มีอยู่: ' . $id,
                        'impact' => 'serious',
                        'element' => wcag_get_element_snippet($element)
                    );
                    $checks['aria']['passed'] = false;
                }
            }
        }
    }
    
    // 6. Check keyboard navigation
    wcag_log_error('Checking keyboard navigation');
    $interactive_elements = $xpath->query('//a[@href] | //button | //input | //select | //textarea | //*[@tabindex]');
    $checks['keyboard']['total'] = $interactive_elements->length;
    $checks['keyboard']['checked'] = $interactive_elements->length;
    
    $tabindex_values = array();
    
    foreach ($interactive_elements as $element) {
        // Check tabindex values
        if ($element->hasAttribute('tabindex')) {
            $tabindex = $element->getAttribute('tabindex');
            $tabindex_values[] = intval($tabindex);
            
            if (intval($tabindex) > 0) {
                $checks['keyboard']['violations'][] = array(
                    'message' => 'tabindex มีค่าเป็นบวก (' . $tabindex . ') ซึ่งอาจทำให้ลำดับการนำทางไม่เป็นธรรมชาติ',
                    'impact' => 'moderate',
                    'element' => wcag_get_element_snippet($element)
                );
                $checks['keyboard']['passed'] = false;
            }
        }
        
        // Check if element is keyboard accessible
        if ($element->nodeName === 'div' || $element->nodeName === 'span') {
            if ($element->hasAttribute('onclick') && !$element->hasAttribute('tabindex')) {
                $checks['keyboard']['violations'][] = array(
                    'message' => 'Element ที่มี onclick แต่ไม่สามารถเข้าถึงด้วยแป้นพิมพ์ได้',
                    'impact' => 'serious',
                    'element' => wcag_get_element_snippet($element)
                );
                $checks['keyboard']['passed'] = false;
            }
        }
    }
    
    // 7. Check color contrast (simplified)
    wcag_log_error('Checking color contrast');
    $text_elements = $xpath->query('//p | //span | //div | //h1 | //h2 | //h3 | //h4 | //h5 | //h6 | //a | //li | //td | //th');
    $contrast_checked = 0;
    
    foreach ($text_elements as $element) {
        $text = trim($element->textContent);
        if (empty($text)) continue;
        
        $contrast_checked++;
        
        // Check inline styles for color/background
        if ($element->hasAttribute('style')) {
            $style = $element->getAttribute('style');
            
            // Simple check for potential contrast issues
            if ((strpos($style, 'color:') !== false || strpos($style, 'background') !== false)) {
                // Look for potentially problematic color combinations
                if (preg_match('/color:\s*#([0-9a-fA-F]{3,6})/', $style, $fg_match) &&
                    preg_match('/background(-color)?:\s*#([0-9a-fA-F]{3,6})/', $style, $bg_match)) {
                    
                    // This is a simplified check - in reality we'd calculate actual contrast ratio
                    $checks['contrast']['violations'][] = array(
                        'message' => 'อาจมีปัญหาความคมชัดของสี (ต้องตรวจสอบด้วยตนเอง)',
                        'impact' => 'moderate',
                        'element' => wcag_get_element_snippet($element),
                        'style' => $style
                    );
                    $checks['contrast']['passed'] = false;
                }
            }
        }
    }
    
    $checks['contrast']['total'] = $contrast_checked;
    $checks['contrast']['checked'] = $contrast_checked;
    
    // Check from database if available
    $guideline = $wpdb->get_row("
        SELECT guideline_id, title, abbr 
        FROM guidelines 
        WHERE abbr = 'WCAG2-AA' 
           OR abbr = 'WCAG 2.0 (Level AA)'
           OR abbr LIKE '%WCAG%2%AA%'
        ORDER BY 
            CASE 
                WHEN abbr = 'WCAG2-AA' THEN 1
                WHEN abbr = 'WCAG 2.0 (Level AA)' THEN 2
                ELSE 3
            END
        LIMIT 1
    ");
    
    $guideline_info = 'Manual checks only';
    
    if ($guideline) {
        $guideline_info = $guideline->abbr;
        
        // Try to get checks from database
        $check_ids = $wpdb->get_col($wpdb->prepare("
            SELECT DISTINCT sc.check_id
            FROM subgroup_checks sc
            JOIN guideline_subgroups gs ON sc.subgroup_id = gs.subgroup_id
            WHERE gs.guideline_id = %d
        ", $guideline->guideline_id));
        
        wcag_log_error('Database checks found', count($check_ids));
    }
    
    // Log final check counts
    foreach ($checks as $category => $check) {
        wcag_log_error("Final count for $category", array(
            'total' => $check['total'],
            'checked' => $check['checked'],
            'violations' => count($check['violations'])
        ));
    }
    
    // Calculate score
    $score = wcag_calculate_score_verbose($checks);
    $grade = wcag_determine_grade($score, $severity);
    
    return array(
        'grade' => $grade,
        'checks' => $checks,
        'score' => $score,
        'severity' => $severity,
        'processing_info' => array(
            'total_checks' => array_sum(array_map(function($c) { return $c['checked']; }, $checks)),
            'guideline_used' => $guideline_info,
            'manual_checks' => true
        )
    );
}

// Helper functions
function wcag_get_element_snippet($element) {
    if ($element instanceof DOMElement) {
        $doc = new DOMDocument();
        $imported = $doc->importNode($element->cloneNode(false), true);
        $doc->appendChild($imported);
        $html = $doc->saveHTML();
        return htmlspecialchars(substr($html, 0, 200));
    }
    return 'Unknown element';
}

function wcag_calculate_score_verbose($checks) {
    $weights = array(
        'contrast' => 15,
        'alt_text' => 15,
        'headers' => 10,
        'aria' => 10,
        'keyboard' => 15,
        'forms' => 15,
        'links' => 15
    );
    
    $total_weight = 0;
    $total_score = 0;
    $details = array();
    
    foreach ($checks as $category => $check) {
        $weight = isset($weights[$category]) ? $weights[$category] : 10;
        $total_weight += $weight;
        
        if ($check['total'] > 0) {
            $violations = count($check['violations']);
            $passed_count = $check['total'] - $violations;
            $pass_percentage = ($passed_count / $check['total']) * 100;
            $category_score = ($pass_percentage / 100) * $weight;
            
            $details[$category] = array(
                'weight' => $weight,
                'total' => $check['total'],
                'passed' => $passed_count,
                'failed' => $violations,
                'percentage' => round($pass_percentage, 2),
                'score' => round($category_score, 2)
            );
            
            $total_score += $category_score;
        } else {
            // No elements to check, give full score
            $details[$category] = array(
                'weight' => $weight,
                'total' => 0,
                'passed' => 0,
                'failed' => 0,
                'percentage' => 100,
                'score' => $weight
            );
            $total_score += $weight;
        }
    }
    
    $final_score = ($total_weight > 0) ? ($total_score / $total_weight) * 100 : 0;
    
    wcag_log_error('Score calculation', array(
        'details' => $details,
        'total_score' => $total_score,
        'total_weight' => $total_weight,
        'final_score' => $final_score
    ));
    
    return $final_score;
}

function wcag_determine_grade($score, $severity) {
    switch ($severity) {
        case 'very-low':
            if ($score >= 75) return 'AAA';
            if ($score >= 65) return 'AA';
            if ($score >= 55) return 'A';
            break;
        case 'low':
            if ($score >= 80) return 'AAA';
            if ($score >= 70) return 'AA';
            if ($score >= 60) return 'A';
            break;
        case 'medium':
            if ($score >= 85) return 'AAA';
            if ($score >= 75) return 'AA';
            if ($score >= 65) return 'A';
            break;
        case 'high':
        default:
            if ($score >= 90) return 'AAA';
            if ($score >= 80) return 'AA';
            if ($score >= 70) return 'A';
            break;
    }
    
    return null;
}

// Admin menu
function wcag_checker_admin_menu() {
    add_options_page(
        'WCAG Checker',
        'WCAG Checker',
        'manage_options',
        'wcag-checker',
        'wcag_checker_admin_page'
    );
}
add_action('admin_menu', 'wcag_checker_admin_menu');

function wcag_checker_admin_page() {
    global $wpdb;
    
    ?>
    <div class="wrap">
        <h1>WCAG Checker Settings</h1>
        
        <div class="card">
            <h2>Check Summary</h2>
            <ul>
                <li><strong>Alt Text</strong>: ตรวจสอบ img tags ทั้งหมด</li>
                <li><strong>Links</strong>: ตรวจสอบ a tags ทั้งหมด</li>
                <li><strong>Headers</strong>: ตรวจสอบ h1-h6 tags ทั้งหมด</li>
                <li><strong>Forms</strong>: ตรวจสอบ input, select, textarea ทั้งหมด</li>
                <li><strong>ARIA</strong>: ตรวจสอบ elements ที่มี role หรือ aria-* attributes</li>
                <li><strong>Keyboard</strong>: ตรวจสอบ interactive elements และ tabindex</li>
                <li><strong>Contrast</strong>: ตรวจสอบ inline styles ที่อาจมีปัญหา contrast</li>
            </ul>
        </div>
        
        <div class="card">
            <h2>Test HTML Elements</h2>
            <form method="post" action="">
                <textarea id="test-html" rows="10" style="width: 100%;">
<html>
<body>
    <h1>Test Page</h1>
    <h3>Skipped heading level</h3>
    
    <img src="test.jpg">
    <img src="test2.jpg" alt="Test image">
    
    <a href="#">Empty link</a>
    <a href="#">Link with text</a>
    
    <form>
        <input type="text" name="test">
        <input type="text" id="field1" name="field1">
        <label for="field1">Field 1</label>
        
        <select name="choice">
            <option>Option 1</option>
        </select>
        
        <button type="submit">Submit</button>
    </form>
    
    <div role="invalid-role">Invalid ARIA role</div>
    <div role="button" tabindex="0">Valid button role</div>
    
    <div onclick="alert('test')">Clickable div without keyboard access</div>
    <div onclick="alert('test')" tabindex="0">Clickable div with keyboard access</div>
    
    <p style="color: #777; background-color: #fff;">Low contrast text</p>
</body>
</html>
                </textarea>
                <button type="button" id="test-html-check" class="button button-primary">Test HTML</button>
            </form>
            <div id="test-html-results" style="margin-top: 20px;"></div>
        </div>
    </div>
    
    <script>
    jQuery(document).ready(function($) {
        $('#test-html-check').on('click', function() {
            var html = $('#test-html').val();
            var $results = $('#test-html-results');
            
            $results.html('<p>Testing...</p>');
            
            // Create a temporary container
            var tempDiv = document.createElement('div');
            tempDiv.innerHTML = html;
            
            // Count elements
            var counts = {
                images: tempDiv.querySelectorAll('img').length,
                imagesWithoutAlt: tempDiv.querySelectorAll('img:not([alt])').length,
                links: tempDiv.querySelectorAll('a').length,
                emptyLinks: Array.from(tempDiv.querySelectorAll('a')).filter(a => !a.textContent.trim()).length,
                headings: tempDiv.querySelectorAll('h1,h2,h3,h4,h5,h6').length,
                formElements: tempDiv.querySelectorAll('input:not([type="submit"]):not([type="button"]):not([type="hidden"]),select,textarea').length,
                formElementsWithoutLabels: Array.from(tempDiv.querySelectorAll('input:not([type="submit"]):not([type="button"]):not([type="hidden"]),select,textarea')).filter(function(el) {
                    var id = el.id;
                    if (id && tempDiv.querySelector('label[for="' + id + '"]')) return false;
                    if (el.getAttribute('aria-label')) return false;
                    if (el.title) return false;
                    return true;
                }).length,
                ariaElements: tempDiv.querySelectorAll('[role],[aria-label],[aria-labelledby]').length,
                tabindexElements: tempDiv.querySelectorAll('[tabindex]').length,
                elementsWithStyle: tempDiv.querySelectorAll('[style*="color"],[style*="background"]').length
            };
            
            var html = '<h3>Element Counts:</h3><ul>';
            html += '<li>Images: ' + counts.images + ' (without alt: ' + counts.imagesWithoutAlt + ')</li>';
            html += '<li>Links: ' + counts.links + ' (empty: ' + counts.emptyLinks + ')</li>';
            html += '<li>Headings: ' + counts.headings + '</li>';
            html += '<li>Form elements: ' + counts.formElements + ' (without labels: ' + counts.formElementsWithoutLabels + ')</li>';
            html += '<li>ARIA elements: ' + counts.ariaElements + '</li>';
            html += '<li>Tabindex elements: ' + counts.tabindexElements + '</li>';
            html += '<li>Elements with color styles: ' + counts.elementsWithStyle + '</li>';
            html += '</ul>';
            
            $results.html(html);
        });
    });
    </script>
    <?php
}




/**
 * W3C CSS Validator Shortcode
 * 
 * Creates a shortcode [w3c_test] that validates CSS according to W3C standards
 */


 

// Register the shortcode
function w3c_test() {
    // Enqueue required styles and scripts
    wp_enqueue_style('w3c-test-style', get_stylesheet_directory_uri() . '/css/w3c-test.css', array(), '1.0');
    wp_enqueue_script('w3c-test-script', get_stylesheet_directory_uri() . '/js/w3c-test.js', array('jquery'), '1.0', true);
    
    // Pass data to JavaScript
    wp_localize_script('w3c-test-script', 'w3cTest', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('w3c_test_nonce'),
        'current_url' => get_permalink()
    ));
    
    // Create the HTML output
    $output = '
    <div class="w3c-test-container">
        <div class="w3c-test-header">
            <span class="w3c-test-title">W3C CSS Validator</span>
            <div class="w3c-test-score"></div>
        </div>
        <div class="w3c-test-toggle">ตรวจสอบ CSS</div>
        <div class="w3c-test-content" style="display:none;">
            <div class="w3c-test-summary"></div>
            <div class="w3c-test-details"></div>
        </div>
        <div class="w3c-test-loading" style="display:none;">
            <div class="w3c-test-spinner"></div>
            <span>กำลังตรวจสอบ CSS...</span>
        </div>
        
        <!-- Modal for detailed results -->
        <div id="w3c-test-modal" class="w3c-test-modal">
            <div class="w3c-test-modal-content">
                <span class="w3c-test-modal-close">&times;</span>
                <div class="w3c-test-modal-header">
                    <h3>CSS Validation Results</h3>
                </div>
                <div id="w3c-test-modal-body"></div>
            </div>
        </div>
    </div>
    ';
    
    return $output;
}
add_shortcode('w3c_test', 'w3c_test');

// AJAX handler for CSS validation
function w3c_css_validation() {
    check_ajax_referer('w3c_test_nonce', 'nonce');
    
    $current_url = isset($_POST['url']) ? esc_url_raw($_POST['url']) : '';
    
    // In a real-world scenario, we might use an external API
    // For this example, we'll simulate validation by checking stylesheets
    $results = simulate_css_validation($current_url);
    
    wp_send_json_success($results);
}
add_action('wp_ajax_w3c_css_validation', 'w3c_css_validation');
add_action('wp_ajax_nopriv_w3c_css_validation', 'w3c_css_validation');

/**
 * Simulate CSS validation by checking common issues
 * In a real implementation, this would connect to W3C API or use a CSS parser
 */
function simulate_css_validation($url) {
    // Define categories to check
    $checks = array(
        'syntax' => array(
            'name' => 'ไวยากรณ์ CSS (Syntax)',
            'issues' => array(),
            'score' => 100
        ),
        'compatibility' => array(
            'name' => 'ความเข้ากันได้ (Compatibility)',
            'issues' => array(),
            'score' => 100
        ),
        'performance' => array(
            'name' => 'ประสิทธิภาพ (Performance)',
            'issues' => array(),
            'score' => 100
        ),
        'best_practices' => array(
            'name' => 'แนวปฏิบัติที่ดีที่สุด (Best Practices)',
            'issues' => array(),
            'score' => 100
        )
    );
    
    // Simulate detection of issues (in real implementation, this would parse actual CSS)
    
    // 1. Syntax Issues (simulate random issues)
    if (rand(0, 1) == 1) {
        $checks['syntax']['issues'][] = array(
            'severity' => 'error',
            'message' => 'พบวงเล็บปีกกาไม่สมดุลในไฟล์ style.css บรรทัด 142',
            'recommendation' => 'ตรวจสอบวงเล็บปีกกาให้สมดุล'
        );
        $checks['syntax']['score'] -= 15;
    }
    
    // 2. Compatibility Issues
    $checks['compatibility']['issues'][] = array(
        'severity' => 'warning',
        'message' => 'ใช้คุณสมบัติ CSS ที่อาจไม่รองรับใน IE11: grid, flex-wrap',
        'recommendation' => 'พิจารณาเพิ่ม vendor prefixes หรือใช้ polyfills'
    );
    $checks['compatibility']['score'] -= 5;
    
    // 3. Performance Issues
    $checks['performance']['issues'][] = array(
        'severity' => 'warning',
        'message' => 'ตรวจพบ selector ที่ซับซ้อนเกินไป (>5 ระดับ) x 3 จุด',
        'recommendation' => 'ลดความซับซ้อนของ selectors เพื่อปรับปรุงประสิทธิภาพ'
    );
    $checks['performance']['score'] -= 10;
    
    if (rand(0, 1) == 1) {
        $checks['performance']['issues'][] = array(
            'severity' => 'info',
            'message' => 'พบการใช้ !important จำนวน 8 ครั้ง',
            'recommendation' => 'หลีกเลี่ยงการใช้ !important ยกเว้นกรณีจำเป็น'
        );
        $checks['performance']['score'] -= 5;
    }
    
    // 4. Best Practices
    $checks['best_practices']['issues'][] = array(
        'severity' => 'info',
        'message' => 'ไม่พบการใช้ CSS Custom Properties (variables)',
        'recommendation' => 'พิจารณาใช้ CSS Variables เพื่อให้โค้ดง่ายต่อการบำรุงรักษา'
    );
    $checks['best_practices']['score'] -= 5;
    
    // Calculate overall score
    $total_score = 0;
    $weights = array(
        'syntax' => 0.4,
        'compatibility' => 0.3,
        'performance' => 0.2,
        'best_practices' => 0.1
    );
    
    foreach ($checks as $key => $check) {
        $total_score += $check['score'] * $weights[$key];
    }
    
    // Determine grade
    $grade = 'A';
    if ($total_score < 90) $grade = 'B';
    if ($total_score < 80) $grade = 'C'; 
    if ($total_score < 70) $grade = 'D';
    if ($total_score < 60) $grade = 'F';
    
    return array(
        'score' => round($total_score),
        'grade' => $grade,
        'url' => $url,
        'checks' => $checks
    );
}


/****** ตัวเลือกเปลี่ยนภาษา ******/

// Enqueue necessary scripts and styles
function wpml_language_switcher_assets() {
    wp_enqueue_style('wpml-language-switcher', get_stylesheet_directory_uri() . '/css/wpml-language-switcher.css', array(), '1.0.0');
    wp_enqueue_script('wpml-language-switcher', get_stylesheet_directory_uri() . '/js/wpml-language-switcher.js', array('jquery'), '1.0.0', true);
    
    // Pass AJAX URL and current language to JavaScript
    wp_localize_script('wpml-language-switcher', 'wpmlVars', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('wpml-language-switch-nonce'),
        'currentLang' => apply_filters('wpml_current_language', null),
        'defaultLang' => 'th'
    ));
}
add_action('wp_enqueue_scripts', 'wpml_language_switcher_assets');

// Create shortcode for language switcher
function custom_wpml_language_switcher_shortcode() {
    // Check if WPML is active
    if (!function_exists('icl_get_languages')) {
        return '';
    }

    $languages = apply_filters('wpml_active_languages', null, array(
        'skip_missing' => 0,
        'orderby' => 'code',
        'order' => 'desc'
    ));

    if (empty($languages)) {
        return '';
    }

    $current_language = apply_filters('wpml_current_language', null);
    $output = '<div class="wpml-language-switcher">';
    $output .= '<div class="wpml-ls-dropdown">';
    
    // Current language display
    foreach ($languages as $lang) {
        if ($lang['active'] == 1) {
            $flag_url = $lang['code'] === 'th' ? 
                'https://dga.wpdevs.co/wp-content/uploads/2025/01/THAI-30px-FLAG.webp' : 
                'https://dga.wpdevs.co/wp-content/uploads/2025/01/ENG-30px-FLAG.webp';
            
            $output .= '<div class="wpml-ls-current-language">';
            $output .= '<img src="' . esc_url($flag_url) . '" alt="' . esc_attr($lang['code']) . ' flag" /> ';
            $output .= '<span>' . esc_html($lang['native_name']) . '</span>';
            $output .= '<span class="wpml-ls-dropdown-arrow"></span>';
            $output .= '</div>';
            break;
        }
    }

    // Language options
    $output .= '<ul class="wpml-ls-languages">';
    foreach ($languages as $lang) {
        $flag_url = $lang['code'] === 'th' ? 
            'https://dga.wpdevs.co/wp-content/uploads/2025/01/THAI-30px-FLAG.webp' : 
            'https://dga.wpdevs.co/wp-content/uploads/2025/01/ENG-30px-FLAG.webp';
        
        $class = !$lang['active'] ? '' : ' class="active"';
        $url = apply_filters('wpml_permalink', get_permalink(), $lang['code']);
        
        $output .= '<li' . $class . '>';
        $output .= '<a href="' . esc_url(add_query_arg('lang', $lang['code'], $url)) . '" data-lang="' . esc_attr($lang['code']) . '">';
        $output .= '<img src="' . esc_url($flag_url) . '" alt="' . esc_attr($lang['code']) . ' flag" /> ';
        $output .= '<span>' . esc_html($lang['native_name']) . '</span>';
        $output .= '</a>';
        $output .= '</li>';
    }
    $output .= '</ul>';
    $output .= '</div>';
    $output .= '</div>';

    return $output;
}
add_shortcode('wpml_language_switcher', 'custom_wpml_language_switcher_shortcode');

// Set default language to Thai
function set_default_language() {
    if (!isset($_COOKIE['wpml_language_preference'])) {
        setcookie('wpml_language_preference', 'th', time() + (86400 * 30), '/');
        do_action('wpml_switch_language', 'th');
    }
}
add_action('init', 'set_default_language', 1);

// AJAX handler for saving language preference
function save_language_preference() {
    check_ajax_referer('wpml-language-switch-nonce', 'nonce');
    
    if (isset($_POST['language'])) {
        $language = sanitize_text_field($_POST['language']);
        setcookie('wpml_language_preference', $language, time() + (86400 * 30), '/');
        do_action('wpml_switch_language', $language);
        wp_send_json_success(array('redirect' => add_query_arg('lang', $language)));
    }
    
    wp_send_json_error();
}
add_action('wp_ajax_save_language_preference', 'save_language_preference');
add_action('wp_ajax_nopriv_save_language_preference', 'save_language_preference');


/***** บังคับให้ทุก Post ที่สร้างใหม่ใช้ URL SLUG ด้วย POST ID เสมอ ******/

function force_post_id_as_slug($data) {
    // ตรวจสอบว่าเป็นโพสประเภท 'post' เท่านั้น
    if($data['post_type'] == 'post') {
        // กรณีสร้างโพสใหม่
        if($data['post_status'] == 'publish') {
            // บังคับใช้ ID เป็น slug แม้จะมี post_title
            if(!empty($data['ID'])) {
                $data['post_name'] = $data['ID'];
            }
        }
        
        // กรณีอัพเดทโพส
        if(!empty($data['ID'])) {
            // บังคับใช้ ID เป็น slug เสมอ ไม่ว่าจะมีการแก้ไข post_title หรือไม่
            $data['post_name'] = $data['ID'];
        }
    }
    
    return $data;
}
add_filter('wp_insert_post_data', 'force_post_id_as_slug', 99, 1);

// เพิ่มฟิลเตอร์เพื่อป้องกันการสร้าง slug จาก post_title
add_filter('name_save_pre', function($title) {
    global $post;
    if(!empty($post) && $post->post_type == 'post' && !empty($post->ID)) {
        return $post->ID;
    }
    return $title;
}, 99);


// สำหรับโพสที่มีอยู่แล้ว ต้องการอัพเดท slug ให้เป็น ID
function update_existing_posts_slug() {
    $args = array(
        'post_type' => 'post',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    );
    
    $posts = get_posts($args);
    
    foreach($posts as $post) {
        // อัพเดท slug เป็น ID โดยไม่สนใจ post_title
        wp_update_post(array(
            'ID' => $post->ID,
            'post_name' => $post->ID
        ));
    }
}


/******* ฟอร์มสร้างบทความใหม่ ********/

function at_add_article_shortcode() {
    // Enqueue required scripts and styles
    wp_enqueue_style('at-article-style', get_stylesheet_directory_uri() . '/css/article-manager.css');
    wp_enqueue_script('at-article-script', get_stylesheet_directory_uri() . '/js/article-manager.js', array('jquery'), '1.0', true);
    
    // Add WordPress media scripts
    wp_enqueue_media();
    
    // Add WordPress Ajax URL
    wp_localize_script('at-article-script', 'atAjax', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('at_article_nonce')
    ));

    ob_start();
    ?>
    <button class="at-add-article-btn">เพิ่มข้อมูล</button>
    <div id="at-article-modal" class="at-modal">
        <div class="at-modal-content">
            <div class="at-modal-inner">
                <span class="at-close">&times;</span>
                <h2>เพิ่มข้อมูลใหม่</h2>
                <form id="at-article-form" enctype="multipart/form-data">
                    <?php wp_nonce_field('at_article_action', 'at_article_nonce'); ?>

                    <div class="at-form-group">
                        <label>เลือกประเภทเนื้อหา</label>
                        <div class="at-post-type-grid">
                            <label class="at-post-type-card">
                                <input type="checkbox" name="post_types[]" value="article" class="at-post-type-input">
                                <div class="at-post-type-content">
                                    <div class="at-post-type-icon">📄</div>
                                    <div class="at-post-type-label">บทความ/ข่าวสาร/ประกาศ</div>
                                </div>
                            </label>
                            <label class="at-post-type-card">
                                <input type="checkbox" name="post_types[]" value="mpeople" class="at-post-type-input">
                                <div class="at-post-type-content">
                                    <div class="at-post-type-icon">📚</div>
                                    <div class="at-post-type-label">คู่มือประชาชน</div>
                                </div>
                            </label>
                            <label class="at-post-type-card">
                                <input type="checkbox" name="post_types[]" value="news" class="at-post-type-input">
                                <div class="at-post-type-content">
                                    <div class="at-post-type-icon">📰</div>
                                    <div class="at-post-type-label">ข้อมูลทั่วไป/มาตรฐาน</div>
                                </div>
                            </label>
                            <label class="at-post-type-card">
                                <input type="checkbox" name="post_types[]" value="pha" class="at-post-type-input">
                                <div class="at-post-type-content">
                                    <div class="at-post-type-icon">👥</div>
                                    <div class="at-post-type-label">ประชาพิจารณ์และกิจกรรม</div>
                                </div>
                            </label>
                        </div>
                        <div class="at-post-type-error"></div>
                    </div>
                    
                    <div class="at-form-group">
                        <label for="article_title">ชื่อบทความ</label>
                        <input type="text" id="article_title" name="article_title" required>
                    </div>
                    
                    <!-- พื้นที่สำหรับ fields เลขที่มาตรฐาน -->
                    <div id="standards-fields-container" class="at-form-group" style="display:none;">
                        <div id="dga-standard-field" class="at-standard-field-group" style="display:none;">
                            <label for="dga_standard_number">กำหนดเลขที่ มสพร.</label>
                            <input type="text" id="dga_standard_number" name="dga_standard_number" placeholder="เช่น มสพร. 1-2565">
                        </div>
                        
                        <div id="dgth-standard-field" class="at-standard-field-group" style="display:none;">
                            <label for="dgth_standard_number">กำหนดเลข มรด.</label>
                            <input type="text" id="dgth_standard_number" name="dgth_standard_number" placeholder="เช่น มรด. 1-2565">
                        </div>
                    </div>
                    
                    <div class="at-form-group">
                        <label>หมวดหมู่และหัวข้อ</label>
                        <div id="taxonomy-terms-container" class="at-taxonomy-container">
                            <!-- Taxonomy terms จะถูกโหลดด้วย JavaScript -->
                            <div class="at-taxonomy-placeholder">กรุณาเลือกประเภทเนื้อหาก่อน เพื่อแสดงหมวดหมู่ที่เกี่ยวข้อง</div>
                        </div>
                    </div>
                    
                    <div class="at-form-group">
                        <label for="article_images">เพิ่มภาพหน้าปก</label>
                        <div id="image-upload-area">
                            <div class="upload-icon">📷</div>
                            <div class="upload-text">คลิกหรือลากภาพมาวางที่นี่</div>
                            <div class="upload-hint">แนะนำภาพแนวนอน ขนาด 1200×630 พิกเซล</div>
                            <input type="file" id="article_images" name="article_images" accept="image/*">
                        </div>
                        <input type="hidden" id="featured_image_id" name="featured_image_id" value="0">
                        <div id="image-preview"></div>
                    </div>
                    
                    <div class="at-form-group">
                        <label for="article_content">เนื้อหาบทความ</label>
                        <div class="wp-editor-container">
                            <?php 
                            $content = '';
                            $editor_id = 'article_content';
                            $settings = array(
                                'media_buttons' => true,
                                'textarea_name' => 'article_content',
                                'textarea_rows' => 20,
                                'teeny' => false,
                                'quicktags' => true,
                                'tinymce' => true
                            );
                            wp_editor($content, $editor_id, $settings);
                            ?>
                        </div>
                    </div>
                    
                    <div class="at-form-group">
                        <label>เอกสารมาตรฐาน</label>
                        <p class="at-form-hint">หากยังไม่มีเอกสารแนบสามารถข้ามก่อนได้ครับ</p>
                        <div class="at-doc-controls">
                            <button type="button" id="toggle-documents" class="at-toggle-btn" data-state="show">ไม่มีเอกสาร</button>
                        </div>
                        <div id="documents-section">
                            <div id="file-repeater-container">
                                <div class="file-repeater-row">
                                    <input type="text" name="file_name[]" placeholder="ชื่อไฟล์">
                                    <input type="date" name="file_date[]" value="<?php echo current_time('Y-m-d'); ?>">
                                    <input type="file" name="file_upload[]" accept=".pdf,.doc,.docx">
                                    <button type="button" class="remove-row">ลบ</button>
                                </div>
                            </div>
                            <button type="button" id="add-file-row">เพิ่มเอกสาร</button>
                        </div>
                    </div>
                    
                    <div class="at-info-message">
                        <div class="at-info-icon">ℹ️</div>
                        <div class="at-info-text">เนื้อหาที่เพิ่มใหม่จะถูกบันทึกเป็นฉบับร่างและรอการอนุมัติก่อนเผยแพร่</div>
                    </div>
                    
                    <button type="submit" class="at-submit-btn">บันทึกข้อมูล</button>
                </form>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('add_article', 'at_add_article_shortcode');

// ปรับปรุงฟังก์ชัน filter สำหรับตั้งค่า URL Slug เป็น Post ID โดยไม่ต้องตรวจสอบ original_slug
add_filter('wp_unique_post_slug', 'at_custom_post_slug', 10, 6);
function at_custom_post_slug($slug, $post_ID, $post_status, $post_type, $post_parent, $original_slug) {
    // ตั้งค่า slug ให้เป็น post_id เฉพาะกับโพสต์ของประเภทที่ต้องการ
    if ($post_ID > 0 && in_array($post_type, ['article', 'mpeople', 'news', 'pha'])) {
        return (string)$post_ID;
    }
    return $slug;
}

// เพิ่ม filter เพื่อให้แน่ใจว่า slug จะเป็น post ID เสมอ แม้ในกรณีมีการแก้ไขโพสต์
add_filter('wp_insert_post_data', 'at_set_post_slug_to_id', 10, 2);
function at_set_post_slug_to_id($data, $postarr) {
    // ตรวจสอบว่าเป็นโพสต์ประเภทที่ต้องการหรือไม่
    if (isset($data['post_type']) && in_array($data['post_type'], ['article', 'mpeople', 'news', 'pha'])) {
        // ถ้าเป็นโพสต์ใหม่ ให้ตั้งค่า post_name เป็นค่าว่าง เพื่อให้ filter at_custom_post_slug ทำงาน
        if (empty($postarr['ID'])) {
            $data['post_name'] = '';
        } 
        // ถ้าเป็นโพสต์ที่มีอยู่แล้ว ให้ตั้งค่า post_name เป็น ID
        else {
            $data['post_name'] = (string)$postarr['ID'];
        }
    }
    return $data;
}

// AJAX endpoint สำหรับอัพโหลดรูปภาพทันที
add_action('wp_ajax_at_upload_featured_image', 'at_upload_featured_image');
function at_upload_featured_image() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'at_article_nonce')) {
        wp_send_json_error(['message' => 'การตรวจสอบความปลอดภัยล้มเหลว']);
    }

    // ตรวจสอบว่ามีการอัพโหลดไฟล์หรือไม่
    if (empty($_FILES['file'])) {
        wp_send_json_error(['message' => 'ไม่พบไฟล์ที่อัพโหลด']);
    }

    // ตรวจสอบว่าไฟล์เป็นรูปภาพหรือไม่
    $file_type = wp_check_filetype(basename($_FILES['file']['name']));
    $allowed_types = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif' , 'image/webp'];

    if (!in_array($_FILES['file']['type'], $allowed_types)) {
        wp_send_json_error(['message' => 'กรุณาอัพโหลดไฟล์ภาพเท่านั้น (JPEG, PNG, GIF)']);
    }

    // โหลดไลบรารีที่จำเป็น
    require_once(ABSPATH . 'wp-admin/includes/image.php');
    require_once(ABSPATH . 'wp-admin/includes/file.php');
    require_once(ABSPATH . 'wp-admin/includes/media.php');

    // อัพโหลดไฟล์และสร้างเป็น attachment
    $attachment_id = media_handle_upload('file', 0);

    if (is_wp_error($attachment_id)) {
        wp_send_json_error([
            'message' => 'เกิดข้อผิดพลาดในการอัพโหลด: ' . $attachment_id->get_error_message()
        ]);
    }

    // ดึงข้อมูล URL ของรูปภาพ
    $image_url = wp_get_attachment_url($attachment_id);
    $image_data = wp_get_attachment_image_src($attachment_id, 'medium');
    $thumbnail_url = $image_data[0];

    wp_send_json_success([
        'message' => 'อัพโหลดภาพเรียบร้อยแล้ว',
        'attachment_id' => $attachment_id,
        'url' => $image_url,
        'thumbnail' => $thumbnail_url,
        'filename' => basename($_FILES['file']['name']),
        'filesize' => size_format($_FILES['file']['size'])
    ]);
}

// AJAX handler สำหรับดึงข้อมูล Taxonomy
add_action('wp_ajax_get_post_type_taxonomies', 'at_get_post_type_taxonomies');
function at_get_post_type_taxonomies() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'at_article_nonce')) {
        wp_send_json_error('การตรวจสอบความปลอดภัยล้มเหลว');
    }

    if (!isset($_POST['post_types']) || !is_array($_POST['post_types'])) {
        wp_send_json_error('คำขอไม่ถูกต้อง - ไม่พบประเภทเนื้อหา');
    }

    $post_types = $_POST['post_types'];
    $valid_post_types = ['article', 'mpeople', 'news', 'pha'];
    $selected_post_types = array_intersect($post_types, $valid_post_types);

    if (empty($selected_post_types)) {
        wp_send_json_error('ไม่พบประเภทเนื้อหาที่ถูกต้อง');
    }

    $taxonomies_data = [];

    foreach ($selected_post_types as $post_type) {
        $taxonomies = get_object_taxonomies($post_type, 'objects');
        
        if (!empty($taxonomies)) {
            foreach ($taxonomies as $taxonomy) {
                // ข้ามพวก internal หรือ non-public taxonomies
                if (!$taxonomy->public || $taxonomy->_builtin && $taxonomy->name == 'post_format') {
                    continue;
                }
                
                $terms = get_terms([
                    'taxonomy' => $taxonomy->name,
                    'hide_empty' => false,
                ]);
                
                if (!is_wp_error($terms) && !empty($terms)) {
                    $terms_data = [];
                    foreach ($terms as $term) {
                        $terms_data[] = [
                            'id' => $term->term_id,
                            'name' => $term->name,
                            'slug' => $term->slug,
                        ];
                    }
                    
                    $taxonomies_data[$post_type][] = [
                        'name' => $taxonomy->name,
                        'label' => $taxonomy->label,
                        'terms' => $terms_data,
                    ];
                }
            }
        }
    }

    wp_send_json_success($taxonomies_data);
}

// Handle AJAX submission - ปรับปรุงให้ใช้ Featured Image ที่อัพโหลดไว้ล่วงหน้า
function at_handle_article_submission() {
    // Verify nonce
    if (!isset($_POST['at_article_nonce']) || !wp_verify_nonce($_POST['at_article_nonce'], 'at_article_action')) {
        wp_send_json_error('Security check failed');
    }

    // Verify user capabilities
    if (!current_user_can('publish_posts')) {
        wp_send_json_error('Permission denied');
    }

    if (!isset($_POST['article_title']) || !isset($_POST['post_types'])) {
        wp_send_json_error('Invalid request - Missing required fields');
    }

    // Get selected post types and validate them
    $post_types = $_POST['post_types'];
    $valid_post_types = ['article', 'mpeople', 'news', 'pha'];
    $selected_post_types = array_intersect($post_types, $valid_post_types);

    if (empty($selected_post_types)) {
        wp_send_json_error('Please select at least one valid post type');
    }

    // Get taxonomy terms if provided
    $taxonomy_terms = isset($_POST['tax_input']) ? $_POST['tax_input'] : [];
    
    // Get standard document numbers if provided
    $dga_standard_number = isset($_POST['dga_standard_number']) ? sanitize_text_field($_POST['dga_standard_number']) : '';
    $dgth_standard_number = isset($_POST['dgth_standard_number']) ? sanitize_text_field($_POST['dgth_standard_number']) : '';

    $successful_posts = [];
    
    // นำ ID ของภาพที่อัพโหลดไว้ล่วงหน้ามาใช้
    $featured_image_id = isset($_POST['featured_image_id']) ? intval($_POST['featured_image_id']) : 0;
    
    // ตรวจสอบว่าภาพที่อัพโหลดไว้ล่วงหน้ามีอยู่จริงหรือไม่
    if ($featured_image_id > 0) {
        $attachment = get_post($featured_image_id);
        if (!$attachment || $attachment->post_type !== 'attachment') {
            $featured_image_id = 0;
        }
    }
    
    // ถ้าไม่มีภาพที่อัพโหลดไว้ล่วงหน้า และมีการอัพโหลดภาพผ่านฟอร์ม ให้ดำเนินการอัพโหลดภาพปกติ
    if ($featured_image_id == 0 && !empty($_FILES['article_images']['name'])) {
        // โหลดไลบรารีการจัดการไฟล์และรูปภาพ
        require_once(ABSPATH . 'wp-admin/includes/image.php');
        require_once(ABSPATH . 'wp-admin/includes/file.php');
        require_once(ABSPATH . 'wp-admin/includes/media.php');
        
        // อัพโหลดภาพไปยัง WordPress Media Library โดยยังไม่ผูกกับโพสต์ใด
        $featured_image_id = media_handle_upload('article_images', 0);
        
        // ตรวจสอบการอัพโหลดว่าสำเร็จหรือไม่
        if (is_wp_error($featured_image_id)) {
            // ถ้ามีข้อผิดพลาด ตั้งค่า $featured_image_id เป็น 0 แล้วทำงานต่อไป
            $featured_image_id = 0;
        }
    }
    
    // Process standard files once for reuse
    $standard_files_data = [];
    if (!empty($_FILES['file_upload']['tmp_name'][0])) {
        foreach ($_FILES['file_upload']['tmp_name'] as $key => $tmp_name) {
            if (empty($tmp_name)) continue;

            $_FILES['standard_file'] = array(
                'name' => $_FILES['file_upload']['name'][$key],
                'type' => $_FILES['file_upload']['type'][$key],
                'tmp_name' => $tmp_name,
                'error' => $_FILES['file_upload']['error'][$key],
                'size' => $_FILES['file_upload']['size'][$key]
            );

            $upload_data = wp_handle_upload($_FILES['standard_file'], array('test_form' => false));
            if (!isset($upload_data['error'])) {
                $standard_files_data[] = array(
                    'upload_data' => $upload_data,
                    'name' => isset($_POST['file_name'][$key]) ? sanitize_text_field($_POST['file_name'][$key]) : '',
                    'date' => isset($_POST['file_date'][$key]) ? sanitize_text_field($_POST['file_date'][$key]) : ''
                );
            }
        }
    }

    // Create posts for each selected post type
    foreach ($selected_post_types as $post_type) {
        // Create post with status 'pending' instead of 'publish'
        $post_data = array(
            'post_title' => sanitize_text_field($_POST['article_title']),
            'post_content' => wp_kses_post($_POST['article_content']),
            'post_status' => 'pending', // เปลี่ยนเป็น pending เพื่อรอการอนุมัติ
            'post_type' => $post_type,
            'post_name' => '' // กำหนดเป็นค่าว่างเพื่อให้ filter กำหนด slug เป็น post ID
        );

        $post_id = wp_insert_post($post_data);

        if (!is_wp_error($post_id)) {
            // Set taxonomy terms
            if (!empty($taxonomy_terms)) {
                foreach ($taxonomy_terms as $taxonomy => $terms) {
                    $tax_obj = get_taxonomy($taxonomy);
                    if ($tax_obj && in_array($post_type, $tax_obj->object_type)) {
                        // แปลงค่า terms ให้เป็น integers เพื่อให้ WordPress รู้ว่านี่คือ term IDs
                        $term_ids = array_map('intval', $terms);
                        
                        // ระบุ parameter ให้ชัดเจนว่าเป็น term IDs และไม่ต้องเพิ่มเข้าไป (append=false)
                        wp_set_object_terms($post_id, $term_ids, $taxonomy, false);
                    }
                }
            }
            
            // บันทึกเลขที่มาตรฐาน เฉพาะสำหรับ post_type = 'news'
            if ($post_type === 'news') {
                if (!empty($dga_standard_number)) {
                    update_field('at_docnum_1', $dga_standard_number, $post_id);
                }
                
                if (!empty($dgth_standard_number)) {
                    update_field('at_docnum_2', $dgth_standard_number, $post_id);
                }
            }
            
            // ตั้งค่า Featured Image ถ้ามีการอัพโหลดภาพ
            if ($featured_image_id > 0) {
                set_post_thumbnail($post_id, $featured_image_id);
                
                // เพิ่มภาพเข้า ACF field at_slide_images (ถ้ามี)
                if (function_exists('update_field')) {
                    update_field('at_slide_images', [$featured_image_id], $post_id);
                }
            }

            // Handle content update
            if (isset($_POST['article_content'])) {
                $content = wp_kses_post($_POST['article_content']);
                if (function_exists('update_field')) {
                    update_field('at_content', $content, $post_id);
                }
            }

            // Attach standard files to the post
            $post_standard_files = [];
            foreach ($standard_files_data as $file_data) {
                $filename = basename($file_data['upload_data']['file']);
                $wp_filetype = wp_check_filetype($filename);

                $attachment = array(
                    'post_mime_type' => $wp_filetype['type'],
                    'post_title' => preg_replace('/\.[^.]+$/', '', $filename),
                    'post_content' => '',
                    'post_status' => 'inherit'
                );

                $attach_id = wp_insert_attachment($attachment, $file_data['upload_data']['file'], $post_id);

                if (!is_wp_error($attach_id)) {
                    // Generate attachment metadata
                    $attachment_data = wp_generate_attachment_metadata($attach_id, $file_data['upload_data']['file']);
                    wp_update_attachment_metadata($attach_id, $attachment_data);
                    
                    $post_standard_files[] = array(
                        'at_rp_file_name' => $file_data['name'],
                        'at_rp_file_create' => $file_data['date'],
                        'at_rp_file_link' => wp_get_attachment_url($attach_id)
                    );
                }
            }

            // Update standard files field
            if (!empty($post_standard_files) && function_exists('update_field')) {
                update_field('at_file_standard', $post_standard_files, $post_id);
            }

            // Add to successful posts array
            $successful_posts[] = array(
                'type' => $post_type,
                'id' => $post_id,
                'url' => get_permalink($post_id)
            );
        }
    }

    if (!empty($successful_posts)) {
        wp_send_json_success(array(
            'message' => 'เนื้อหาถูกบันทึกเป็นฉบับร่างเรียบร้อยแล้ว และรอการอนุมัติก่อนเผยแพร่',
            'posts' => $successful_posts
        ));
    } else {
        wp_send_json_error('Failed to create any posts');
    }

    wp_die();
}
add_action('wp_ajax_submit_article', 'at_handle_article_submission');


// Add initialization hook for TinyMCE
add_action('admin_init', 'at_article_admin_init');
function at_article_admin_init() {
    if (!current_user_can('edit_posts') && !current_user_can('edit_pages')) {
        return;
    }
    if (get_user_option('rich_editing') !== 'true') {
        return;
    }
    add_filter('mce_buttons', 'at_article_register_buttons');
}

function at_article_register_buttons($buttons) {
    array_push($buttons, 'separator', 'fullscreen');
    return $buttons;
}













/**** ลิมิต PostTitle *****/
function limited_title_shortcode($atts) {
    // Parse attributes and set defaults
    $attributes = shortcode_atts(array(
        'length' => 60 // Default length if not specified
    ), $atts);
    
    // Get post title from current post
    $post_title = get_the_title();
    
    // Convert length to integer
    $max_length = intval($attributes['length']);
    
    // Ensure minimum length of 1
    if ($max_length < 1) {
        $max_length = 1;
    }
    
    // If title length is greater than max_length
    if (mb_strlen($post_title) > $max_length) {
        // Cut the string to max_length
        $post_title = mb_substr($post_title, 0, $max_length);
        // Add ellipsis
        $post_title .= '...';
    }
    
    return $post_title;
}

// Register shortcode
add_shortcode('limited_title', 'limited_title_shortcode');


if (!function_exists('at_content_shortcode')) {
    function at_content_shortcode($atts) {
        // Parse attributes with defaults
        $args = shortcode_atts(array(
            'chars' => 300,  // Default character limit
            'ending' => '...', // Default ending
        ), $atts);

        // Get current post
        global $post;
        if (!isset($post->ID)) {
            return '';
        }

        // Get custom field content
        $content = get_post_meta($post->ID, 'at_content', true);
        if (empty($content)) {
            return '';
        }

        // Clean up content
        $content = wp_strip_all_tags($content);
        $content = trim($content);

        // Convert character limit to integer
        $char_limit = intval($args['chars']);
        
        // Handle Thai text properly using mb_* functions
        if (mb_strlen($content, 'UTF-8') > $char_limit) {
            // Cut the string at the character limit
            $content = mb_substr($content, 0, $char_limit, 'UTF-8');
            
            // Find the last complete word
            $last_space = mb_strrpos($content, ' ', 0, 'UTF-8');
            
            if ($last_space !== false) {
                // Cut at the last complete word
                $content = mb_substr($content, 0, $last_space, 'UTF-8');
            }
            
            // Add the ending
            $content .= $args['ending'];
        }

        return $content;
    }
}

// Register shortcode
add_shortcode('at_content_short', 'at_content_shortcode');

// Make it work with Elementor
add_filter('elementor/widget/render_content', 'do_shortcode');

// Support for manual excerpts
add_filter('the_excerpt', 'do_shortcode');

// Example usage in template:
// [at_content_short chars="200" ending="...อ่านต่อ"]


/****** Query ID ออฟเซ็ท 2 Post ******/

/**
 * Custom Elementor query for article posts
 * Hook: elementor/query/article_more
 */
add_action('elementor/query/article_more', function($query) {
    // Set post type to 'article'
    $query->set('post_type', 'article');
    
    // Set offset to skip first 2 posts
    $query->set('offset', 2);
    
    // Optional: You can add more query parameters here
    // For example:
    // $query->set('posts_per_page', 10); // Number of posts to display
    // $query->set('orderby', 'date');    // Order by date
    // $query->set('order', 'DESC');      // Descending order
});


/***** โปรไฟล์เอดิเตอร์ ******/

/**
 * Profile Management System
 * 
 */

// 1. Enqueue necessary scripts and styles
function profile_management_enqueue_scripts() {
    $version = '1.0.0';
    
    // Enqueue CSS
    wp_enqueue_style(
        'profile-management', 
        get_stylesheet_directory_uri() . '/css/profile-management.css',
        array(),
        $version
    );
    
    // Enqueue JavaScript
    wp_enqueue_script(
        'profile-management',
        get_stylesheet_directory_uri() . '/js/profile-management.js',
        array('jquery'),
        $version,
        true
    );
    
    // Localize script
    wp_localize_script('profile-management', 'profileAjax', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('profile_management_nonce'),
        'loginUrl' => '/login/'
    ));
}
add_action('wp_enqueue_scripts', 'profile_management_enqueue_scripts');

// 2. Get custom avatar URL
function get_custom_avatar_url($user_id) {
    $custom_avatar_id = get_user_meta($user_id, 'custom_avatar_id', true);
    if ($custom_avatar_id) {
        $image_url = wp_get_attachment_image_url($custom_avatar_id, 'thumbnail');
        if ($image_url) {
            return $image_url;
        }
    }
    return 'https://dga.wpdevs.co/wp-content/uploads/2025/01/no-user.png';
}

// 3. Override WordPress avatar
function custom_avatar($avatar, $id_or_email, $size, $default, $alt) {
    $user = false;

    if (is_numeric($id_or_email)) {
        $user_id = (int) $id_or_email;
        $user = get_user_by('id', $user_id);
    } elseif (is_object($id_or_email)) {
        if (!empty($id_or_email->user_id)) {
            $user = get_user_by('id', (int) $id_or_email->user_id);
        }
    } else {
        $user = get_user_by('email', $id_or_email);
    }

    if ($user && is_object($user)) {
        $avatar_url = get_custom_avatar_url($user->ID);
        $avatar = sprintf(
            '<img alt="%s" src="%s" class="avatar avatar-%d photo" height="%d" width="%d" />',
            esc_attr($alt),
            esc_url($avatar_url),
            (int) $size,
            (int) $size,
            (int) $size
        );
    }

    return $avatar;
}
add_filter('get_avatar', 'custom_avatar', 10, 5);

// 4. Create shortcode for profile editor
function profile_management_shortcode() {
    if (!is_user_logged_in()) {
        return '<p>กรุณาเข้าสู่ระบบเพื่อแก้ไขโปรไฟล์</p>';
    }

    $current_user = wp_get_current_user();
    $avatar_url = get_custom_avatar_url($current_user->ID);
    
    ob_start();
    ?>
    <div class="profile-management-container">
        <!-- Profile Editor Form -->
        <div class="profile-editor-inner">
            <div class="profile-avatar-wrapper">
                <div class="profile-avatar">
                    <img src="<?php echo esc_url($avatar_url); ?>" alt="Profile Avatar" id="profile-avatar-preview">
                    <div class="avatar-upload-overlay">
                        <label for="avatar-upload" class="upload-button">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M3 15v4c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2v-4M17 8l-5-5-5 5M12 3v12"/>
                            </svg>
                        </label>
                        <input type="file" id="avatar-upload" name="avatar" accept="image/*" style="display: none;">
                    </div>
                </div>
            </div>
            
            <form id="profile-editor-form" class="profile-form">
                <div class="form-group">
                    <label for="first-name">ชื่อ</label>
                    <input type="text" id="first-name" name="first_name" 
                           value="<?php echo esc_attr($current_user->first_name); ?>" 
                           class="form-input">
                </div>
                
                <div class="form-group">
                    <label for="last-name">นามสกุล</label>
                    <input type="text" id="last-name" name="last_name" 
                           value="<?php echo esc_attr($current_user->last_name); ?>" 
                           class="form-input">
                </div>
                
                <button type="submit" class="submit-button">บันทึกข้อมูล</button>
            </form>
            
            <button id="reset-password-button" class="reset-password-button">
                เปลี่ยนรหัสผ่าน
            </button>
        </div>

        <!-- Password Reset Modal -->
        <div id="password-reset-modal" class="modal">
            <div class="modal-overlay"></div>
            <div class="modal-container">
                <div class="modal-header">
                    <h2 class="modal-title">เปลี่ยนรหัสผ่าน</h2>
                    <button type="button" class="modal-close" aria-label="Close">&times;</button>
                </div>
                <div class="modal-content">
                    <form id="password-reset-form" class="password-reset-form">
                        <div class="form-group">
                            <label for="new-password">รหัสผ่านใหม่</label>
                            <input type="password" id="new-password" name="new_password" 
                                   class="form-input" required minlength="8">
                            <small class="password-requirements">
                                รหัสผ่านต้องมีความยาวอย่างน้อย 8 ตัวอักษร
                            </small>
                        </div>
                        
                        <div class="form-group">
                            <label for="confirm-password">ยืนยันรหัสผ่านใหม่</label>
                            <input type="password" id="confirm-password" name="confirm_password" 
                                   class="form-input" required minlength="8">
                        </div>
                        
                        <button type="submit" class="submit-button">อัพเดตรหัสผ่าน</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Logout Confirmation Modal -->
        <div id="logout-confirm-modal" class="modal">
            <div class="modal-overlay"></div>
            <div class="modal-container">
                <div class="modal-header">
                    <h2 class="modal-title">ยืนยันการออกจากระบบ</h2>
                    <button type="button" class="modal-close" aria-label="Close">&times;</button>
                </div>
                <div class="modal-content">
                    <p>คุณต้องการออกจากระบบในทุกอุปกรณ์หรือไม่?</p>
                    <div class="modal-actions">
                        <button type="button" id="logout-all-devices" class="submit-button">
                            ออกจากระบบทุกอุปกรณ์
                        </button>
                        <button type="button" id="stay-logged-in" class="secondary-button">
                            คงอยู่ในระบบ
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Toast Notification -->
        <div id="toast-notification" class="toast-notification" role="alert" aria-live="polite"></div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('profile_management', 'profile_management_shortcode');

// 5. Handle AJAX profile update
function handle_profile_update() {
    // Verify nonce
    check_ajax_referer('profile_management_nonce', 'nonce');
    
    if (!is_user_logged_in()) {
        wp_send_json_error('กรุณาเข้าสู่ระบบ');
        return;
    }

    $user_id = get_current_user_id();
    
    // Update user meta
    $first_name = sanitize_text_field($_POST['first_name']);
    $last_name = sanitize_text_field($_POST['last_name']);
    
    update_user_meta($user_id, 'first_name', $first_name);
    update_user_meta($user_id, 'last_name', $last_name);
    
    // Handle avatar upload
    if (!empty($_FILES['avatar'])) {
        require_once(ABSPATH . 'wp-admin/includes/image.php');
        require_once(ABSPATH . 'wp-admin/includes/file.php');
        require_once(ABSPATH . 'wp-admin/includes/media.php');
        
        $attachment_id = media_handle_upload('avatar', 0);
        
        if (is_wp_error($attachment_id)) {
            wp_send_json_error('อัพโหลดรูปภาพล้มเหลว: ' . $attachment_id->get_error_message());
            return;
        }
        
        // Delete old avatar if exists
        $old_avatar_id = get_user_meta($user_id, 'custom_avatar_id', true);
        if ($old_avatar_id) {
            wp_delete_attachment($old_avatar_id, true);
        }
        
        // Save new avatar ID
        update_user_meta($user_id, 'custom_avatar_id', $attachment_id);
        
        // Return new avatar URL
        wp_send_json_success(array(
            'message' => 'อัพเดตข้อมูลเรียบร้อยแล้ว',
            'avatar_url' => wp_get_attachment_image_url($attachment_id, 'thumbnail')
        ));
        return;
    }
    
    wp_send_json_success(array(
        'message' => 'อัพเดตข้อมูลเรียบร้อยแล้ว'
    ));
}
add_action('wp_ajax_update_profile', 'handle_profile_update');

// 6. Handle password reset
function handle_password_reset() {
    check_ajax_referer('profile_management_nonce', 'nonce');
    
    if (!is_user_logged_in()) {
        wp_send_json_error('กรุณาเข้าสู่ระบบ');
        return;
    }

    $user_id = get_current_user_id();
    $new_password = $_POST['new_password'];
    
    // Update password
    wp_set_password($new_password, $user_id);
    
    // Handle logout from all devices if requested
    if (isset($_POST['logout_all']) && $_POST['logout_all'] === 'true') {
        // Destroy all sessions for user
        $sessions = WP_Session_Tokens::get_instance($user_id);
        $sessions->destroy_all();
        
        wp_send_json_success(array(
            'message' => 'อัพเดตรหัสผ่านเรียบร้อยแล้ว กำลังออกจากระบบ...',
            'redirect' => '/login/'
        ));
    } else {
        // Keep current session active
        wp_set_auth_cookie($user_id);
        wp_send_json_success(array(
            'message' => 'อัพเดตรหัสผ่านเรียบร้อยแล้ว'
        ));
    }
}
add_action('wp_ajax_reset_password', 'handle_password_reset');

/******** Reset Password ********/

function reset_password_shortcode() {
    ob_start();
    // Enqueue CSS and JS files from ChildTheme
    wp_enqueue_style('reset-password-styles', get_stylesheet_directory_uri() . '/css/reset-password.css');
    wp_enqueue_script('reset-password-script', get_stylesheet_directory_uri() . '/js/reset-password.js', array('jquery'), '1.0.0', true);
    
    // เรียกใช้ CSS และ JS สำหรับระบบตั้งรหัสผ่านแบบ Modal
    wp_enqueue_style('dga-newuser-style', get_stylesheet_directory_uri() . '/css/dga-newuser.css', array(), '1.0.0');
  ?>
    <div class="reset-password-container" id="reset-password-form">
      <div class="card">
        <div class="header">
          <div class="image">
            <svg aria-hidden="true" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none">
              <path d="M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15m3 0l3-3m0 0l-3-3m3 3H9" stroke-linejoin="round" stroke-linecap="round"></path>
            </svg>
          </div>
          <div class="content">
            <span class="title">Reset Password</span>
            <p class="message">Enter your email address to reset your password. You will receive a link to create a new password via email.</p>
          </div>
        </div>
        
        <form method="post">
          <div class="actions">  
            <input type="email" name="email" placeholder="Email" required>
            <button class="reset" type="submit" name="reset_password">Reset Password</button>
            <button class="cancel" type="button" onclick="window.location.href='<?php echo is_user_logged_in() ? get_permalink( get_option('woocommerce_myaccount_page_id') ) : home_url(); ?>'">Cancel</button>
          </div>
        </form>
      </div>
      
      <!-- Notification container -->
      <div id="notification-container" style="display: none;">
        <div class="notification-card">
          <div class="notification-header success">
            <div class="notification-icon">
              <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z" fill="#16a34a"></path> <path d="M16.0303 8.96967C16.3232 9.26256 16.3232 9.73744 16.0303 10.0303L11.0303 15.0303C10.7374 15.3232 10.2626 15.3232 9.96967 15.0303L7.96967 13.0303C7.67678 12.7374 7.67678 12.2626 7.96967 11.9697C8.26256 11.6768 8.73744 11.6768 9.03033 11.9697L10.5 13.4393L14.9697 8.96967C15.2626 8.67678 15.7374 8.67678 16.0303 8.96967Z" fill="white"></path> </g></svg>
            </div>
            <div class="notification-title">Success</div>
          </div>
          <div class="notification-message">
            Password reset link has been sent to your email. Please check your inbox.
          </div>
          <div class="notification-actions">
            <button class="notification-close" onclick="document.getElementById('notification-container').style.display='none';">Close</button>
          </div>
        </div>
      </div>
      
      <!-- Error notification -->
      <div id="error-notification-container" style="display: none;">
        <div class="notification-card">
          <div class="notification-header error">
            <div class="notification-icon">
              <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12Z" fill="#dc2626"></path> <path d="M8.96967 8.96967C9.26256 8.67678 9.73744 8.67678 10.0303 8.96967L12 10.9393L13.9697 8.96967C14.2626 8.67678 14.7374 8.67678 15.0303 8.96967C15.3232 9.26256 15.3232 9.73744 15.0303 10.0303L13.0607 12L15.0303 13.9697C15.3232 14.2626 15.3232 14.7374 15.0303 15.0303C14.7374 15.3232 14.2626 15.3232 13.9697 15.0303L12 13.0607L10.0303 15.0303C9.73744 15.3232 9.26256 15.3232 8.96967 15.0303C8.67678 14.7374 8.67678 14.2626 8.96967 13.9697L10.9393 12L8.96967 10.0303C8.67678 9.73744 8.67678 9.26256 8.96967 8.96967Z" fill="white"></path> </g></svg>
            </div>
            <div class="notification-title">Error</div>
          </div>
          <div class="notification-message">
            Email not found. Please check your email address and try again.
          </div>
          <div class="notification-actions">
            <button class="notification-close" onclick="document.getElementById('error-notification-container').style.display='none';">Close</button>
          </div>
        </div>
      </div>
    </div>
  
    <?php
    if (isset($_POST['reset_password'])) {
      $email = $_POST['email'];
      
      // ตรวจสอบว่า email มีอยู่ในระบบหรือไม่
      $user = get_user_by('email', $email);
      
      if ($user) {
        // ใช้ระบบตั้งรหัสผ่านใหม่แบบ Modal Popup
        $username = $user->user_login;
        $user_id = $user->ID;
        
        // สร้างและจัดเก็บคีย์แบบกำหนดเอง 
        // (ดึงฟังก์ชันจากระบบที่พัฒนาไว้แล้ว)
        if (function_exists('dga_generate_reset_key')) {
          $reset_key = dga_generate_reset_key($user_id);
        } else {
          // หากไม่มีฟังก์ชัน ให้สร้างแบบง่ายๆ
          $reset_key = wp_generate_password(20, false);
          // เก็บคีย์ในฐานข้อมูล
          update_user_meta($user_id, 'dga_password_reset_key', $reset_key);
          // กำหนดเวลาหมดอายุ (24 ชั่วโมง)
          $expiration = time() + (24 * HOUR_IN_SECONDS);
          update_user_meta($user_id, 'dga_password_reset_expiry', $expiration);
        }
        
        // สร้างลิงก์ที่นำไปยังหน้าแสดง Modal ตั้งรหัสผ่าน
        $reset_link = add_query_arg(
          array(
            'action' => 'dga_set_password',
            'key' => $reset_key,
            'login' => rawurlencode($username),
            'user_id' => $user_id
          ),
          home_url()
        );
        
        // Get site details
        $site_name = get_bloginfo('name');
        $site_url = get_bloginfo('url');
        $site_logo_url = get_site_icon_url(150); // Get site logo URL
        
        // ส่งอีเมลพร้อมลิงก์ตั้งรหัสผ่าน
        if (function_exists('dga_send_new_user_email')) {
          // ใช้ฟังก์ชันที่พัฒนาไว้แล้ว
          $mail_sent = dga_send_new_user_email($email, $reset_link);
        } else {
          // Load email template
          $template_path = get_stylesheet_directory() . '/email/newuser.html';
          if (!file_exists($template_path)) {
            // ถ้าไม่พบเทมเพลตใหม่ ให้ใช้เทมเพลตเดิม
            $template_path = get_stylesheet_directory() . '/email/reset-password.html';
          }
          
          $email_template = '';
          
          if (file_exists($template_path)) {
            $email_template = file_get_contents($template_path);
            
            // Replace placeholders in the template
            $email_template = str_replace('[SITE_NAME]', $site_name, $email_template);
            $email_template = str_replace('[RESET_LINK]', $reset_link, $email_template);
            $email_template = str_replace('{reset_link}', $reset_link, $email_template);
            $email_template = str_replace('[USER_EMAIL]', $email, $email_template);
            $email_template = str_replace('[SITE_URL]', $site_url, $email_template);
            $email_template = str_replace('{site_url}', $site_url, $email_template);
            $email_template = str_replace('[SITE_LOGO]', $site_logo_url, $email_template);
            $email_template = str_replace('[YEAR]', date('Y'), $email_template);
            $email_template = str_replace('{current_year}', date('Y'), $email_template);
            $email_template = str_replace('{site_name}', $site_name, $email_template);
          } else {
            // Fallback if template doesn't exist
            $email_template = "
                <p>Hello,</p>
                <p>Click the link below to reset your password:</p>
                <p><a href=\"$reset_link\">Reset Password</a></p>
                <p>If you didn't request this, please ignore this email.</p>
                <p>Regards,<br>$site_name</p>
            ";
          }
          
          // Email headers for HTML email
          $headers = array(
            'Content-Type: text/html; charset=UTF-8',
            'From: ' . $site_name . ' <no-reply@' . $_SERVER['HTTP_HOST'] . '>'
          );
          
          $subject = $site_name . ': Reset Password Request';
          
          // Send email
          $mail_sent = wp_mail($email, $subject, $email_template, $headers);
        }
        
        if ($mail_sent) {
          // JavaScript to show the notification
          echo '<script>
            document.getElementById("notification-container").style.display = "block";
            setTimeout(function() {
              document.getElementById("notification-container").style.display = "none";
            }, 10000); // Hide after 10 seconds
          </script>';
        } else {
          echo '<p>There was an error sending the email. Please try again later.</p>';
        }
        
      } else {
        // Show error notification
        echo '<script>
          document.getElementById("error-notification-container").style.display = "block";
          setTimeout(function() {
            document.getElementById("error-notification-container").style.display = "none";
          }, 10000); // Hide after 10 seconds
        </script>';
      }
    }
    
    return ob_get_clean();
}
add_shortcode('reset_password', 'reset_password_shortcode');


/**
 * ฟังก์ชันสนับสนุนสำหรับรีเซ็ตรหัสผ่าน
 * เพิ่มโค้ดนี้ในไฟล์ functions.php
 */

// เพิ่ม JavaScript สำหรับ modal ในทุกหน้า (ถ้ายังไม่มี)
function ensure_password_reset_scripts() {
    // ตรวจสอบว่ามีการร้องขอการตั้งรหัสผ่านหรือไม่
    $is_reset_request = isset($_GET['action']) && $_GET['action'] === 'dga_set_password';
    
    if ($is_reset_request) {
        // เรียกใช้ JavaScript และ CSS ที่จำเป็น
        wp_enqueue_style('dga-newuser-style', get_stylesheet_directory_uri() . '/css/dga-newuser.css', array(), '1.0.0');
        wp_enqueue_script('dga-newuser-script', get_stylesheet_directory_uri() . '/js/dga-newuser.js', array('jquery'), '1.0.0', true);
    }
}
add_action('wp_enqueue_scripts', 'ensure_password_reset_scripts');

// ตรวจสอบว่ามีฟังก์ชัน dga_generate_reset_key หรือไม่ ถ้าไม่มีให้สร้างขึ้นมา
if (!function_exists('dga_generate_reset_key')) {
    /**
     * สร้างและจัดเก็บคีย์สำหรับรีเซ็ตรหัสผ่านแบบกำหนดเอง
     * 
     * @param int $user_id ID ของผู้ใช้
     * @return string|bool คีย์รีเซ็ตรหัสผ่าน หรือ false หากล้มเหลว
     */
    function dga_generate_reset_key($user_id) {
        // สร้างคีย์แบบสุ่ม
        $key = wp_generate_password(20, false);
        
        // เก็บคีย์ในฐานข้อมูล
        update_user_meta($user_id, 'dga_password_reset_key', $key);
        
        // กำหนดเวลาหมดอายุ (24 ชั่วโมง)
        $expiration = time() + (24 * HOUR_IN_SECONDS);
        update_user_meta($user_id, 'dga_password_reset_expiry', $expiration);
        
        return $key;
    }
}

// ตรวจสอบว่ามีฟังก์ชันตรวจสอบคีย์หรือไม่ ถ้าไม่มีให้สร้างขึ้นมา
if (!function_exists('dga_verify_reset_key')) {
    /**
     * ตรวจสอบคีย์รีเซ็ตรหัสผ่านแบบกำหนดเอง
     * 
     * @param string $key คีย์ที่ต้องการตรวจสอบ
     * @param string $login ชื่อผู้ใช้หรืออีเมล
     * @return WP_User|WP_Error ออบเจ็กต์ผู้ใช้หากสำเร็จ หรือ WP_Error หากล้มเหลว
     */
    function dga_verify_reset_key($key, $login) {
        // ค้นหาผู้ใช้จากชื่อผู้ใช้หรืออีเมล
        $user = get_user_by(is_email($login) ? 'email' : 'login', $login);
        
        if (!$user) {
            return new WP_Error('invalid_key', __('ลิงก์รีเซ็ตรหัสผ่านไม่ถูกต้อง', 'textdomain'));
        }
        
        // ดึงคีย์และเวลาหมดอายุจากฐานข้อมูล
        $stored_key = get_user_meta($user->ID, 'dga_password_reset_key', true);
        $expiration = get_user_meta($user->ID, 'dga_password_reset_expiry', true);
        
        // ตรวจสอบว่าคีย์หมดอายุหรือไม่
        if (!$expiration || $expiration < time()) {
            return new WP_Error('expired_key', __('ลิงก์รีเซ็ตรหัสผ่านหมดอายุแล้ว', 'textdomain'));
        }
        
        // ตรวจสอบคีย์ (เปรียบเทียบโดยตรง)
        if (!$stored_key || $key !== $stored_key) {
            return new WP_Error('invalid_key', __('ลิงก์รีเซ็ตรหัสผ่านไม่ถูกต้อง', 'textdomain'));
        }
        
        return $user;
    }
}

// ตรวจสอบว่ามีฟังก์ชัน dga_add_password_reset_modal หรือไม่ ถ้าไม่มีให้สร้างขึ้นมา
if (!function_exists('dga_add_password_reset_modal')) {
    /**
     * เพิ่ม Modal สำหรับการตั้งรหัสผ่านไปยัง footer ของทุกหน้า
     */
    function dga_add_password_reset_modal() {
        // ตรวจสอบว่าอยู่ในหน้า admin หรือไม่
        if (is_admin()) {
            return;
        }
        
        // ตรวจสอบว่ามีการร้องขอการตั้งรหัสผ่านหรือไม่
        $is_reset_request = isset($_GET['action']) && $_GET['action'] === 'dga_set_password' && 
                           isset($_GET['key']) && isset($_GET['login']);
        
        if ($is_reset_request) {
            $key = sanitize_text_field($_GET['key']);
            $login = sanitize_user($_GET['login']);
            // รับค่า user_id จาก URL (ถ้ามี)
            $user_id = isset($_GET['user_id']) ? intval($_GET['user_id']) : 0;
            
            // ตรวจสอบความถูกต้องของคีย์ด้วยวิธีกำหนดเอง
            $user = dga_verify_reset_key($key, $login);
            
            if (is_wp_error($user)) {
                echo '<div class="dga-password-reset-error-container" style="padding: 20px; max-width: 600px; margin: 50px auto; background-color: #f8d7da; border-left: 4px solid #dc3545; color: #721c24;">
                    <h3>' . __('ข้อผิดพลาด', 'textdomain') . '</h3>
                    <p>' . $user->get_error_message() . '</p>
                    <p><a href="' . home_url() . '">' . __('กลับไปยังหน้าหลัก', 'textdomain') . '</a></p>
                </div>
                <script>
                    // ซ่อน Modal หากมีข้อผิดพลาด
                    document.addEventListener("DOMContentLoaded", function() {
                        var errorContainer = document.querySelector(".dga-password-reset-error-container");
                        if (errorContainer) {
                            // แสดงข้อความแจ้งเตือนในหน้า
                            document.body.prepend(errorContainer);
                        }
                    });
                </script>';
                return;
            }
            
            // เปรียบเทียบ user_id จาก URL กับ user->ID ถ้า user_id จาก URL ไม่ใช่ 0 และไม่ตรงกับ user->ID
            if ($user_id !== 0 && $user_id !== $user->ID) {
                echo '<div class="dga-password-reset-error-container" style="padding: 20px; max-width: 600px; margin: 50px auto; background-color: #f8d7da; border-left: 4px solid #dc3545; color: #721c24;">
                    <h3>' . __('ข้อผิดพลาด', 'textdomain') . '</h3>
                    <p>' . __('ข้อมูลผู้ใช้ไม่ตรงกัน กรุณาขอลิงก์ใหม่', 'textdomain') . '</p>
                    <p><a href="' . home_url() . '">' . __('กลับไปยังหน้าหลัก', 'textdomain') . '</a></p>
                </div>';
                return;
            }
            
            // ทำให้มั่นใจว่าเรามี user_id ที่ถูกต้อง
            $user_id = $user->ID;
            
            // ดึงข้อมูลผู้ใช้เพิ่มเติม
            $user_data = get_userdata($user_id);
            $display_name = $user_data->display_name;
            $user_email = $user_data->user_email;
            
            // แสดง Modal สำหรับการตั้งรหัสผ่าน
            ?>
            <div id="dga-password-reset-modal" class="dga-modal">
                <div class="dga-modal-content">
                    <div class="dga-modal-header">
                        <h2><?php _e('ตั้งรหัสผ่านใหม่', 'textdomain'); ?></h2>
                    </div>
                    <div class="dga-modal-body">
                        <div class="dga-user-info">
                            <p><?php _e('คุณกำลังตั้งรหัสผ่านสำหรับบัญชีต่อไปนี้:', 'textdomain'); ?></p>
                            <div class="dga-user-info-details">
                                <div class="dga-user-info-item">
                                    <span class="dga-user-info-label"><?php _e('ชื่อผู้ใช้:', 'textdomain'); ?></span>
                                    <span class="dga-user-info-value"><?php echo esc_html($login); ?></span>
                                </div>
                                <div class="dga-user-info-item">
                                    <span class="dga-user-info-label"><?php _e('อีเมล:', 'textdomain'); ?></span>
                                    <span class="dga-user-info-value"><?php echo esc_html($user_email); ?></span>
                                </div>
                            </div>
                        </div>
                        
                        <form method="post" id="dga-reset-password-form" class="dga-reset-password-form">
                            <div id="dga-form-messages"></div>
                            
                            <div class="dga-form-field">
                                <label for="pass1"><?php _e('รหัสผ่านใหม่', 'textdomain'); ?></label>
                                <input type="password" name="pass1" id="pass1" class="input" size="20" required autocomplete="new-password" />
                            </div>
                            
                            <div class="dga-form-field">
                                <label for="pass2"><?php _e('ยืนยันรหัสผ่านใหม่', 'textdomain'); ?></label>
                                <input type="password" name="pass2" id="pass2" class="input" size="20" required autocomplete="new-password" />
                            </div>
                            
                            <div class="dga-form-field">
                                <div class="dga-password-strength">
                                    <span id="password-strength"></span>
                                </div>
                                <div class="dga-password-hint"><?php _e('คำแนะนำ: รหัสผ่านควรมีอย่างน้อย 8 ตัวอักษร และควรใช้ตัวอักษรพิมพ์เล็ก พิมพ์ใหญ่ ตัวเลข และสัญลักษณ์พิเศษร่วมกัน', 'textdomain'); ?></div>
                            </div>
                            
                            <div class="dga-form-submit">
                                <input type="hidden" name="dga_reset_nonce" value="<?php echo wp_create_nonce('dga_reset_password_action'); ?>" />
                                <input type="hidden" name="key" value="<?php echo esc_attr($key); ?>" />
                                <input type="hidden" name="login" value="<?php echo esc_attr($login); ?>" />
                                <input type="hidden" name="user_id" value="<?php echo esc_attr($user_id); ?>" />
                                <input type="submit" name="dga_set_password_submit" value="<?php _e('ตั้งรหัสผ่าน', 'textdomain'); ?>" class="dga-submit-button" />
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <?php
            
            // เพิ่มข้อมูลสำหรับ JavaScript
            wp_localize_script('dga-newuser-script', 'dga_reset_params', array(
                'ajaxurl' => admin_url('admin-ajax.php'),
                'nonce' => wp_create_nonce('dga_ajax_reset_password')
            ));
        }
    }
    add_action('wp_footer', 'dga_add_password_reset_modal', 9999);
}

// ตรวจสอบว่ามีฟังก์ชัน dga_ajax_reset_password หรือไม่ ถ้าไม่มีให้สร้างขึ้นมา
if (!function_exists('dga_ajax_reset_password')) {
    /**
     * จัดการกับ AJAX request สำหรับการตั้งรหัสผ่าน - ข้ามการตรวจสอบ nonce ชั่วคราว
     */
    function dga_ajax_reset_password() {
        $debug = true; // เปิดโหมด debug
        
        // ข้ามการตรวจสอบ nonce ชั่วคราว
        $has_valid_nonce = true;
        
        // ตรวจสอบข้อมูลที่จำเป็น
        if (!isset($_POST['pass1']) || !isset($_POST['pass2'])) {
            wp_send_json_error(['message' => 'กรุณากรอกรหัสผ่าน']);
            exit;
        }
        
        // ดึงข้อมูลจาก POST
        $password = $_POST['pass1'];
        $password_confirm = $_POST['pass2'];
        
        // ตรวจสอบรหัสผ่าน
        if (empty($password) || empty($password_confirm)) {
            wp_send_json_error(['message' => 'กรุณากรอกรหัสผ่าน']);
            exit;
        }
        
        if ($password !== $password_confirm) {
            wp_send_json_error(['message' => 'รหัสผ่านไม่ตรงกัน']);
            exit;
        }
        
        if (strlen($password) < 8) {
            wp_send_json_error(['message' => 'รหัสผ่านควรมีอย่างน้อย 8 ตัวอักษร']);
            exit;
        }
        
        // ดึงข้อมูลผู้ใช้
        $user = null;
        $user_id = isset($_POST['user_id']) ? intval($_POST['user_id']) : 0;
        $login = isset($_POST['login']) ? sanitize_user($_POST['login']) : '';
        
        if ($user_id > 0) {
            // หาผู้ใช้จาก ID
            $user = get_user_by('id', $user_id);
        } elseif (!empty($login)) {
            // หาผู้ใช้จาก login
            $user = get_user_by(is_email($login) ? 'email' : 'login', $login);
        }
        
        // ตรวจสอบว่าพบผู้ใช้หรือไม่
        if (!$user) {
            wp_send_json_error(['message' => 'ไม่พบข้อมูลผู้ใช้']);
            exit;
        }
        
        // อัปเดตรหัสผ่าน
        wp_set_password($password, $user->ID);
        
        if ($debug) {
            error_log('Password reset successful for user ID: ' . $user->ID);
        }
        
        // ลบคีย์รีเซ็ตรหัสผ่าน (ถ้ามี)
        delete_user_meta($user->ID, 'dga_password_reset_key');
        delete_user_meta($user->ID, 'dga_password_reset_expiry');
        
        // สร้างโทเค็นสำหรับการล็อกอินอัตโนมัติ
        $token = wp_generate_password(32, false);
        update_user_meta($user->ID, 'dga_auto_login_token', $token);
        
        // ตั้งเวลาหมดอายุของโทเค็น (30 นาที)
        $expiry_time = time() + (30 * MINUTE_IN_SECONDS);
        update_user_meta($user->ID, 'dga_auto_login_token_expiry', $expiry_time);
        
        // ส่งข้อมูลสำเร็จ
        wp_send_json_success([
            'message' => 'ตั้งรหัสผ่านสำเร็จ! กำลังเข้าสู่ระบบ...',
            'user_id' => $user->ID,
            'token' => $token,
            'username' => $user->user_login
        ]);
        exit;
    }
    
    // แทนที่ hook เดิมด้วย hook ใหม่
    if (has_action('wp_ajax_nopriv_dga_reset_password')) {
        remove_action('wp_ajax_nopriv_dga_reset_password', 'dga_ajax_reset_password');
    }
    add_action('wp_ajax_nopriv_dga_reset_password', 'dga_ajax_reset_password');
}

// ตรวจสอบว่ามีฟังก์ชัน dga_auto_login หรือไม่ ถ้าไม่มีให้สร้างขึ้นมา
if (!function_exists('dga_auto_login')) {
    /**
     * Endpoint สำหรับการล็อกอินอัตโนมัติหลังจากตั้งรหัสผ่าน
     */
    function dga_auto_login() {
        // ตรวจสอบว่ามีพารามิเตอร์ที่จำเป็นหรือไม่
        if (!isset($_GET['user_id']) || !isset($_GET['token'])) {
            return;
        }
        
        // ถ้าผู้ใช้ล็อกอินอยู่แล้ว ให้ข้ามขั้นตอนนี้ไป
        if (is_user_logged_in()) {
            return;
        }
        
        $user_id = intval($_GET['user_id']);
        $token = sanitize_text_field($_GET['token']);
        
        // ตรวจสอบว่า user ID ถูกต้องหรือไม่
        $user = get_user_by('id', $user_id);
        if (!$user) {
            return;
        }
        
        $stored_token = get_user_meta($user_id, 'dga_auto_login_token', true);
        $token_expiry = get_user_meta($user_id, 'dga_auto_login_token_expiry', true);
        
        // ตรวจสอบโทเค็นและเวลาหมดอายุ
        if ($token && $stored_token && $token === $stored_token && $token_expiry > time()) {
            // ล็อกอินผู้ใช้อัตโนมัติด้วยการตั้งค่าที่เหมาะสม
            // กำหนดเวลาหมดอายุของ cookie และใช้ค่าที่เหมาะสม
            $expiration = time() + apply_filters('auth_cookie_expiration', 2 * DAY_IN_SECONDS, $user_id, true);
            
            // ล็อกอินผู้ใช้
            wp_clear_auth_cookie();
            wp_set_auth_cookie($user_id, true, is_ssl());
            wp_set_current_user($user_id);
            do_action('wp_login', $user->user_login, $user);
            
            // ลบโทเค็นหลังจากใช้งาน
            delete_user_meta($user_id, 'dga_auto_login_token');
            delete_user_meta($user_id, 'dga_auto_login_token_expiry');
            
            // เปลี่ยนเส้นทางไปยังหน้าบัญชีผู้ใช้
            if (function_exists('wc_get_page_id') && wc_get_page_id('myaccount') > 0) {
                // ถ้ามี WooCommerce ให้ไปหน้า My Account
                wp_redirect(get_permalink(wc_get_page_id('myaccount')));
            } else {
                // ถ้าไม่มี WooCommerce ให้ไปหน้า Dashboard
                wp_redirect(user_admin_url());
            }
            exit;
        } else if ($token && $stored_token) {
            // ในกรณีที่โทเค็นหมดอายุหรือไม่ถูกต้อง ให้ลบทิ้ง
            delete_user_meta($user_id, 'dga_auto_login_token');
            delete_user_meta($user_id, 'dga_auto_login_token_expiry');
        }
    }
    
    // ใช้ hook ที่มีความสำคัญสูงกว่า init และตรวจสอบหลังจากที่ WordPress โหลดแล้ว
    add_action('wp_loaded', 'dga_auto_login', 20);
}




/***** MainMenu ********/

class Custom_Menu_Walker extends Walker_Nav_Menu {
    function start_lvl(&$output, $depth = 0, $args = null) {
        $indent = str_repeat("\t", $depth);
        $output .= "\n$indent<ul class=\"sub-menu depth-$depth\">\n";
        $output .= "$indent\t<li class=\"sub-menu-arrow\"><span class=\"triangle\"></span></li>\n";
    }
    
    function start_el(&$output, $item, $depth = 0, $args = null, $id = 0) {
        $indent = str_repeat("\t", $depth);
        
        $classes = empty($item->classes) ? array() : (array) $item->classes;
        $classes[] = 'menu-item-' . $item->ID;
        
        if (in_array('menu-item-has-children', $classes)) {
            $classes[] = 'has-children';
        }
        
        $class_names = join(' ', apply_filters('nav_menu_css_class', array_filter($classes), $item, $args, $depth));
        $class_names = $class_names ? ' class="' . esc_attr($class_names) . '"' : '';
        
        $id = apply_filters('nav_menu_item_id', 'menu-item-'. $item->ID, $item, $args, $depth);
        $id = $id ? ' id="' . esc_attr($id) . '"' : '';
        
        $output .= $indent . '<li' . $id . $class_names .'>';
        
        $atts = array();
        $atts['title']  = !empty($item->attr_title) ? $item->attr_title : '';
        $atts['target'] = !empty($item->target) ? $item->target : '';
        $atts['rel']    = !empty($item->xfn) ? $item->xfn : '';
        $atts['href']   = !empty($item->url) ? $item->url : '';
        
        $atts = apply_filters('nav_menu_link_attributes', $atts, $item, $args, $depth);
        
        $attributes = '';
        foreach ($atts as $attr => $value) {
            if (!empty($value)) {
                $value = ('href' === $attr) ? esc_url($value) : esc_attr($value);
                $attributes .= ' ' . $attr . '="' . $value . '"';
            }
        }
        
        $item_output = $args->before;
        $item_output .= '<a'. $attributes .'>';
        $item_output .= $args->link_before . apply_filters('the_title', $item->title, $item->ID) . $args->link_after;
        
        if (in_array('menu-item-has-children', $classes)) {
            $item_output .= ' <span class="dropdown-indicator"><i class="arrow"></i></span>';
        }
        
        $item_output .= '</a>';
        $item_output .= $args->after;
        
        $output .= apply_filters('walker_nav_menu_start_el', $item_output, $item, $depth, $args);
    }
}

// Shortcode function สำหรับแสดง MainMenu โดยใช้ชื่อเมนูแทนตำแหน่งเมนู
function custom_main_menu_shortcode() {
    ob_start(); // เริ่มการเก็บ output buffer
    
    // ใช้ชื่อเมนู "MainMenu" โดยตรง
    wp_nav_menu(array(
        'menu'           => 'MainMenu', // ใช้ชื่อเมนูโดยตรง
        'menu_class'     => 'custom-main-menu',
        'container'      => 'nav',
        'container_class'=> 'custom-menu-container',
        'depth'          => 0, // 0 หมายถึงแสดงทุกระดับความลึก
        'walker'         => new Custom_Menu_Walker() // ใช้ Custom Walker
    ));
    
    // ดึงข้อมูลจาก buffer และเคลียร์ buffer
    $output = ob_get_clean();
    
    return $output;
}
add_shortcode('main_menu', 'custom_main_menu_shortcode');

// ลงทะเบียน CSS และ JS สำหรับเมนู
function custom_menu_scripts() {
    $theme_version = wp_get_theme()->get('Version');
    
    // ลงทะเบียน CSS
    wp_enqueue_style(
        'custom-menu-styles',
        get_stylesheet_directory_uri() . '/css/custom-menu.css',
        array(),
        $theme_version
    );
    
    // ลงทะเบียน JavaScript
    wp_enqueue_script(
        'custom-menu-script',
        get_stylesheet_directory_uri() . '/js/custom-menu.js',
        array('jquery'),
        $theme_version,
        true
    );
}
add_action('wp_enqueue_scripts', 'custom_menu_scripts');


/**** ปุ่มออกจากระบบ ******/

function enqueue_sign_out_css() {
    // Get the stylesheet directory URI of the child theme
    $theme_uri = get_stylesheet_directory_uri();
    // Enqueue the custom CSS file
    wp_enqueue_style( 'sign-out-style', $theme_uri . '/css/sign-out.css', array(), null );
}
add_action( 'wp_enqueue_scripts', 'enqueue_sign_out_css' );

function logout_button_shortcode() {
    // Check if the user is logged in
    if ( is_user_logged_in() ) {
        // Get the logout URL that redirects to the site URL
        $logout_url = wp_logout_url( site_url() );
        // Create a button link to the logout URL with the CSS class
        return '<a href="' . esc_url( $logout_url ) . '" class="sign-out-button">' . esc_html__( 'ออกจากระบบ', 'your-textdomain' ) . '</a>';
    } else {
        // Optionally, return something or nothing if not logged in
        return '';
    }
}
add_shortcode( 'logout_button', 'logout_button_shortcode' );



/********* ฟอร์มรับเรื่องร้องเรียน V2.0 - WCAG 2.1 AAA Compliant ********/

// ตั้งค่า constants สำหรับระบบ
define('CPM_BOOTSTRAP_VERSION', '5.2.3');
define('CPM_DATATABLES_VERSION', '1.13.1');
define('CPM_FONTAWESOME_VERSION', '6.2.1');

// Enqueue necessary scripts and styles
function complaint_form_enqueue_scripts() {
    global $post;
    
    // เช็คเฉพาะเมื่อมี shortcode [complaint_form] อยู่ในเนื้อหา
    if ($post && has_shortcode($post->post_content, 'complaint_form')) {
        
        // Enqueue CSS
        wp_enqueue_style(
            'complaint-form-style',
            get_stylesheet_directory_uri() . '/css/complaint-form.css',
            array(),
            '2.0.0'
        );
        
        // Enqueue JS
        wp_enqueue_script(
            'complaint-form-script',
            get_stylesheet_directory_uri() . '/js/complaint-form.js',
            array('jquery'),
            '2.0.0',
            true
        );

        // ส่งค่าตัวแปรต่างๆ ไปยัง JavaScript
        wp_localize_script(
            'complaint-form-script',
            'complaintFormAjax',
            array(
                'ajaxurl' => admin_url('admin-ajax.php'),
                'nonce' => wp_create_nonce('complaint_form_nonce'),
                'success_message' => 'ขอบคุณสำหรับการแจ้งเรื่องร้องเรียน เราได้รับข้อมูลเรียบร้อยแล้ว',
                'error_message' => 'เกิดข้อผิดพลาดในการส่งข้อมูล กรุณาลองใหม่อีกครั้ง',
                'aria_labels' => array(
                    'form_loading' => 'กำลังโหลดแบบฟอร์ม',
                    'submitting' => 'กำลังส่งข้อมูล',
                    'success' => 'ส่งข้อมูลสำเร็จ',
                    'error' => 'เกิดข้อผิดพลาด',
                    'close_modal' => 'ปิดหน้าต่างข้อความ'
                )
            )
        );
    }
}
add_action('wp_enqueue_scripts', 'complaint_form_enqueue_scripts');

// Create shortcode
function complaint_form_shortcode() {
    ob_start();
    ?>
    <!-- Skip Link for Accessibility -->
    <a href="#complaint-form" class="skip-link screen-reader-text">ข้ามไปยังแบบฟอร์มร้องเรียน</a>
    
    <div class="complaint-form-container" role="region" aria-label="แบบฟอร์มรับเรื่องร้องเรียน">
        <form id="complaint-form" class="complaint-form" novalidate aria-label="แบบฟอร์มรับเรื่องร้องเรียน">
            <h2 id="form-heading">แบบฟอร์มรับเรื่องร้องเรียน</h2>
            
            <!-- Live Region for Status Updates -->
            <div role="status" aria-live="polite" aria-atomic="true" class="screen-reader-text" id="form-status"></div>
            
            <!-- Alert Region for Errors -->
            <div role="alert" aria-live="assertive" aria-atomic="true" id="form-alert" class="screen-reader-text"></div>
            
            <div id="form-message" class="message" style="display: none;" role="alert" aria-live="polite"></div>
            
            <fieldset>
                <legend class="screen-reader-text">ข้อมูลเรื่องร้องเรียน</legend>
                
                <div class="form-group">
                    <label for="type" id="type-label">
                        ประเภทเรื่องร้องเรียน 
                        <span class="required" aria-label="จำเป็นต้องกรอก">*</span>
                    </label>
                    <select 
                        id="type" 
                        name="type" 
                        required 
                        aria-required="true"
                        aria-labelledby="type-label"
                        aria-describedby="type-error type-hint"
                    >
                        <option value="">เลือกประเภทเรื่องร้องเรียน</option>
                        <option value="corruption">การทุจริตประพฤติมิชอบ</option>
                        <option value="negligence">การละเลยการปฏิบัติหน้าที่</option>
                        <option value="misconduct">การปฏิบัติหน้าที่โดยมิชอบ</option>
                        <option value="rights">การละเมิดสิทธิ</option>
                        <option value="other">อื่นๆ</option>
                    </select>
                    <span id="type-hint" class="field-hint">กรุณาเลือกประเภทที่ตรงกับเรื่องร้องเรียนของท่าน</span>
                    <span id="type-error" class="error-message" role="alert" aria-live="polite"></span>
                </div>

                <div class="form-group type-other-field" style="display: none;" aria-hidden="true">
                    <label for="typeOther" id="typeOther-label">
                        ระบุประเภทเรื่องร้องเรียนอื่นๆ 
                        <span class="required" aria-label="จำเป็นต้องกรอก">*</span>
                    </label>
                    <input 
                        type="text" 
                        id="typeOther" 
                        name="typeOther"
                        aria-required="false"
                        aria-labelledby="typeOther-label"
                        aria-describedby="typeOther-error"
                    >
                    <span id="typeOther-error" class="error-message" role="alert" aria-live="polite"></span>
                </div>

                <div class="form-group">
                    <label for="department" id="department-label">
                        หน่วยงานที่ถูกร้องเรียน 
                        <span class="required" aria-label="จำเป็นต้องกรอก">*</span>
                    </label>
                    <input 
                        type="text" 
                        id="department" 
                        name="department" 
                        required
                        aria-required="true"
                        aria-labelledby="department-label"
                        aria-describedby="department-error department-hint"
                    >
                    <span id="department-hint" class="field-hint">ระบุชื่อหน่วยงานที่ท่านต้องการร้องเรียน</span>
                    <span id="department-error" class="error-message" role="alert" aria-live="polite"></span>
                </div>

                <div class="form-group">
                    <label for="details" id="details-label">
                        รายละเอียด 
                        <span class="required" aria-label="จำเป็นต้องกรอก">*</span>
                    </label>
                    <textarea 
                        id="details" 
                        name="details" 
                        required
                        aria-required="true"
                        aria-labelledby="details-label"
                        aria-describedby="details-error detailsCount details-hint"
                        maxlength="2000"
                    ></textarea>
                    <span id="details-hint" class="field-hint">กรุณาระบุรายละเอียดเหตุการณ์ที่ต้องการร้องเรียน</span>
                    <span id="details-error" class="error-message" role="alert" aria-live="polite"></span>
                    <div class="char-count" aria-live="polite" aria-atomic="true">
                        <span id="detailsCount">0</span>/2000 ตัวอักษร
                    </div>
                </div>
            </fieldset>

            <div class="anonymous-section" role="group" aria-labelledby="anonymous-label">
                <label id="anonymous-label">
                    <input 
                        type="checkbox" 
                        id="isAnonymous" 
                        name="isAnonymous"
                        aria-describedby="anonymous-hint"
                    >
                    ไม่ประสงค์ออกนาม
                </label>
                <span id="anonymous-hint" class="field-hint screen-reader-text">
                    หากเลือกตัวเลือกนี้ ท่านไม่จำเป็นต้องกรอกข้อมูลส่วนตัว
                </span>
            </div>

            <fieldset class="personal-info" aria-hidden="false">
                <legend>ข้อมูลผู้ร้องเรียน</legend>
                
                <div class="form-group">
                    <label for="name" id="name-label">
                        ชื่อ-นามสกุล 
                        <span class="required" aria-label="จำเป็นต้องกรอก">*</span>
                    </label>
                    <input 
                        type="text" 
                        id="name" 
                        name="name"
                        aria-required="true"
                        aria-labelledby="name-label"
                        aria-describedby="name-error"
                    >
                    <span id="name-error" class="error-message" role="alert" aria-live="polite"></span>
                </div>

                <div class="form-group">
                    <label for="address" id="address-label">ที่อยู่</label>
                    <textarea 
                        id="address" 
                        name="address"
                        aria-labelledby="address-label"
                        aria-describedby="address-hint"
                    ></textarea>
                    <span id="address-hint" class="field-hint">ที่อยู่สำหรับติดต่อกลับ (ไม่บังคับ)</span>
                </div>

                <div class="form-group">
                    <label for="phone" id="phone-label">
                        เบอร์โทรศัพท์ 
                        <span class="required" aria-label="จำเป็นต้องกรอกอย่างน้อยหนึ่งช่องทางติดต่อ">*</span>
                    </label>
                    <input 
                        type="tel" 
                        id="phone" 
                        name="phone"
                        aria-labelledby="phone-label"
                        aria-describedby="phone-error phone-hint"
                        pattern="[0-9]{9,10}"
                    >
                    <span id="phone-hint" class="field-hint">เบอร์โทรศัพท์ 9-10 หลัก</span>
                    <span id="phone-error" class="error-message" role="alert" aria-live="polite"></span>
                </div>

                <div class="form-group">
                    <label for="email" id="email-label">
                        อีเมล 
                        <span class="required" aria-label="จำเป็นต้องกรอกอย่างน้อยหนึ่งช่องทางติดต่อ">*</span>
                    </label>
                    <input 
                        type="email" 
                        id="email" 
                        name="email"
                        aria-labelledby="email-label"
                        aria-describedby="email-error email-hint"
                    >
                    <span id="email-hint" class="field-hint">อีเมลสำหรับติดต่อกลับ</span>
                    <span id="email-error" class="error-message" role="alert" aria-live="polite"></span>
                </div>
                
                <span id="contact-error" class="error-message" role="alert" aria-live="polite"></span>
                <p class="note" role="note">
                    <strong>หมายเหตุ:</strong> กรุณากรอกเบอร์โทรศัพท์หรืออีเมลอย่างน้อย 1 ช่องทาง
                </p>
            </fieldset>

            <div class="loading" style="display: none;" role="status" aria-live="polite">
                <span aria-hidden="true">กำลังส่งข้อมูล...</span>
                <span class="screen-reader-text">กำลังประมวลผลและส่งข้อมูลเรื่องร้องเรียนของท่าน</span>
            </div>
            
            <button 
                type="submit" 
                class="btn-submit"
                aria-label="ส่งเรื่องร้องเรียน"
            >
                ส่งเรื่องร้องเรียน
            </button>
        </form>
    </div>
    
    <!-- Modal Popup for Success -->
    <div 
        id="complaint-success-modal" 
        class="complaint-modal" 
        style="display: none;"
        role="dialog"
        aria-modal="true"
        aria-labelledby="modal-heading"
        aria-describedby="modal-details"
    >
        <div class="modal-container" role="document">
            <button 
                class="modal-close" 
                aria-label="ปิดหน้าต่างข้อความ"
                type="button"
            >
                <span aria-hidden="true">&times;</span>
            </button>
            <div class="modal-content">
                <h3 id="modal-heading">บันทึกเรื่องร้องเรียนสำเร็จ</h3>
                <div id="modal-details" role="region" aria-label="รายละเอียดเรื่องร้องเรียน"></div>
                <button 
                    class="btn-close-modal"
                    type="button"
                    aria-label="ปิดหน้าต่างข้อความ"
                >
                    ปิด
                </button>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('complaint_form', 'complaint_form_shortcode');

// เพิ่มฟังก์ชันสร้างเลขอ้างอิงเรื่องร้องเรียน
function generate_complaint_reference($post_id) {
    $year = date('Y');
    $month = date('m');
    $serial = str_pad($post_id, 6, '0', STR_PAD_LEFT);
    return "CPL-{$year}{$month}-{$serial}";
}

// AJAX handler for form submission - แก้ไขให้ใช้งานได้
function handle_complaint_submission() {
    
    // Verify nonce
    check_ajax_referer('complaint_form_nonce', 'nonce');
    
    // รับข้อมูลจากการส่งฟอร์ม
    $raw_data = isset($_POST['data']) ? sanitize_text_field(stripslashes($_POST['data'])) : '';
    $complaint_data = json_decode($raw_data, true);
    
    if (json_last_error() !== JSON_ERROR_NONE) {
        wp_send_json_error(array('message' => 'ข้อมูลไม่ถูกต้อง: ' . json_last_error_msg()));
        return;
    }
    
    if (empty($complaint_data)) {
        wp_send_json_error(array('message' => 'ไม่พบข้อมูลที่ส่งมา'));
        return;
    }

    // Validate required fields
    $required_fields = array(
        'type' => 'ประเภทเรื่องร้องเรียน',
        'department' => 'หน่วยงานที่ถูกร้องเรียน',
        'details' => 'รายละเอียด'
    );

    $errors = array();
    foreach ($required_fields as $field => $label) {
        if (empty($complaint_data[$field])) {
            $errors[] = "กรุณากรอก{$label}";
        }
    }

    // Additional validation for "other" type
    if (isset($complaint_data['type']) && $complaint_data['type'] === 'other' && empty($complaint_data['typeOther'])) {
        $errors[] = 'กรุณาระบุประเภทเรื่องร้องเรียนอื่นๆ';
    }

    // Validate personal info if not anonymous
    if (empty($complaint_data['isAnonymous'])) {
        if (empty($complaint_data['name'])) {
            $errors[] = 'กรุณากรอกชื่อ-นามสกุล';
        }
        if (empty($complaint_data['phone']) && empty($complaint_data['email'])) {
            $errors[] = 'กรุณากรอกเบอร์โทรศัพท์หรืออีเมลอย่างน้อย 1 ช่องทาง';
        }
    }

    // Return errors if any
    if (!empty($errors)) {
        wp_send_json_error(array('message' => implode(" ", $errors)));
        return;
    }

    // Prepare complaint data for saving
    $post_title = wp_strip_all_tags($complaint_data['type'] === 'other' ? 
        $complaint_data['typeOther'] : 
        get_complaint_type_label($complaint_data['type']));
        
    // เพิ่มชื่อหน่วยงานไว้ในชื่อเรื่อง
    $post_title .= ' - ' . wp_strip_all_tags($complaint_data['department']);

    $complaint = array(
        'post_title' => $post_title,
        'post_content' => wp_kses_post($complaint_data['details']),
        'post_type' => 'complaint',
        'post_status' => 'pending'
    );

    // Insert the complaint
    $post_id = wp_insert_post($complaint, true);

    if (is_wp_error($post_id)) {
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดในการบันทึกข้อมูล: ' . $post_id->get_error_message()));
        return;
    }

    // บันทึก meta data
    update_post_meta($post_id, '_complaint_type', sanitize_text_field($complaint_data['type']));
    update_post_meta($post_id, '_complaint_department', sanitize_text_field($complaint_data['department']));
    update_post_meta($post_id, '_is_anonymous', !empty($complaint_data['isAnonymous']) ? 'yes' : 'no');
    
    // Add personal info if not anonymous
    if (empty($complaint_data['isAnonymous'])) {
        update_post_meta($post_id, '_complainant_name', sanitize_text_field($complaint_data['name']));
        update_post_meta($post_id, '_complainant_address', sanitize_textarea_field($complaint_data['address']));
        update_post_meta($post_id, '_complainant_phone', sanitize_text_field($complaint_data['phone']));
        update_post_meta($post_id, '_complainant_email', sanitize_email($complaint_data['email']));
    }

    // สร้างและบันทึกเลขอ้างอิงเรื่องร้องเรียน
    $ref_number = generate_complaint_reference($post_id);
    update_post_meta($post_id, '_complaint_ref', $ref_number);
    
    // บันทึกวันที่รับเรื่อง
    $complaint_date = current_time('mysql');
    update_post_meta($post_id, '_complaint_date', $complaint_date);
    
    // กำหนดวันที่ครบกำหนดตอบ (30 วัน)
    $due_date = date('Y-m-d H:i:s', strtotime('+30 days'));
    update_post_meta($post_id, '_response_due_date', $due_date);

    // Send notification email to admin
    send_complaint_notification($post_id, $complaint_data);

    // Return success response with complete data for modal
    wp_send_json_success(array(
        'message' => 'บันทึกข้อมูลเรียบร้อยแล้ว',
        'post_id' => $post_id,
        'ref_number' => $ref_number,
        'complaint_date' => date_i18n('d/m/Y H:i', strtotime($complaint_date)),
        'complaint_type' => get_complaint_type_label($complaint_data['type']),
        'department' => sanitize_text_field($complaint_data['department'])
    ));
}
add_action('wp_ajax_submit_complaint', 'handle_complaint_submission');
add_action('wp_ajax_nopriv_submit_complaint', 'handle_complaint_submission');

// Helper function to get complaint type label
function get_complaint_type_label($type) {
    $types = array(
        'corruption' => 'การทุจริตประพฤติมิชอบ',
        'negligence' => 'การละเลยการปฏิบัติหน้าที่',
        'misconduct' => 'การปฏิบัติหน้าที่โดยมิชอบ',
        'rights' => 'การละเมิดสิทธิ',
        'other' => 'อื่นๆ'
    );
    return isset($types[$type]) ? $types[$type] : 'อื่นๆ';
}

// Send notification email to admin
function send_complaint_notification($post_id, $complaint_data) {
    $admin_email = get_option('admin_email');
    $site_name = get_bloginfo('name');
    
    $subject = sprintf('[%s] มีเรื่องร้องเรียนใหม่', $site_name);
    
    $ref_number = get_post_meta($post_id, '_complaint_ref', true);
    
    $message = "มีเรื่องร้องเรียนใหม่ถูกส่งเข้ามาในระบบ\n\n";
    $message .= "เลขที่เรื่อง: " . $ref_number . "\n";
    $message .= "ประเภท: " . get_complaint_type_label($complaint_data['type']) . "\n";
    $message .= "หน่วยงาน: " . $complaint_data['department'] . "\n";
    $message .= "รายละเอียด: " . $complaint_data['details'] . "\n\n";
    
    if (empty($complaint_data['isAnonymous'])) {
        $message .= "ข้อมูลผู้ร้องเรียน:\n";
        $message .= "ชื่อ-นามสกุล: " . $complaint_data['name'] . "\n";
        if (!empty($complaint_data['address'])) {
            $message .= "ที่อยู่: " . $complaint_data['address'] . "\n";
        }
        if (!empty($complaint_data['phone'])) {
            $message .= "เบอร์โทรศัพท์: " . $complaint_data['phone'] . "\n";
        }
        if (!empty($complaint_data['email'])) {
            $message .= "อีเมล: " . $complaint_data['email'] . "\n";
        }
    } else {
        $message .= "ผู้ร้องเรียนไม่ประสงค์ออกนาม\n";
    }
    
    $message .= "\nดูรายละเอียดเพิ่มเติมได้ที่: " . get_edit_post_link($post_id, 'raw');
    
    wp_mail($admin_email, $subject, $message);
}

// Register custom post type for complaints
function register_complaint_post_type() {
    $labels = array(
        'name' => 'เรื่องร้องเรียน',
        'singular_name' => 'เรื่องร้องเรียน',
        'menu_name' => 'เรื่องร้องเรียน',
        'add_new' => 'เพิ่มเรื่องร้องเรียน',
        'add_new_item' => 'เพิ่มเรื่องร้องเรียนใหม่',
        'edit_item' => 'แก้ไขเรื่องร้องเรียน',
        'new_item' => 'เรื่องร้องเรียนใหม่',
        'view_item' => 'ดูเรื่องร้องเรียน',
        'search_items' => 'ค้นหาเรื่องร้องเรียน',
        'not_found' => 'ไม่พบเรื่องร้องเรียน',
        'not_found_in_trash' => 'ไม่พบเรื่องร้องเรียนในถังขยะ'
    );

    $args = array(
        'labels' => $labels,
        'public' => false,
        'show_ui' => true,
        'show_in_menu' => true,
        'capability_type' => 'post',
        'hierarchical' => false,
        'menu_position' => 25,
        'menu_icon' => 'dashicons-feedback',
        'supports' => array('title', 'editor'),
        'register_meta_box_cb' => 'add_complaint_meta_boxes'
    );

    register_post_type('complaint', $args);
}
add_action('init', 'register_complaint_post_type');

// เพิ่ม meta boxes ในหน้าแก้ไขเรื่องร้องเรียน
function add_complaint_meta_boxes() {
    add_meta_box(
        'complaint_details',
        'รายละเอียดเรื่องร้องเรียน',
        'complaint_details_meta_box',
        'complaint',
        'normal',
        'default'
    );
    
    add_meta_box(
        'complainant_info',
        'ข้อมูลผู้ร้องเรียน',
        'complainant_info_meta_box',
        'complaint',
        'normal',
        'default'
    );
}

// Meta box แสดงรายละเอียดเรื่องร้องเรียน
function complaint_details_meta_box($post) {
    $type = get_post_meta($post->ID, '_complaint_type', true);
    $department = get_post_meta($post->ID, '_complaint_department', true);
    $ref_number = get_post_meta($post->ID, '_complaint_ref', true);
    $complaint_date = get_post_meta($post->ID, '_complaint_date', true);
    $due_date = get_post_meta($post->ID, '_response_due_date', true);
    
    if (empty($ref_number)) {
        $ref_number = generate_complaint_reference($post->ID);
        update_post_meta($post->ID, '_complaint_ref', $ref_number);
    }
    
    ?>
    <style>
        .complaint-meta-table { width: 100%; border-collapse: collapse; }
        .complaint-meta-table th, .complaint-meta-table td { padding: 8px; border: 1px solid #ddd; }
        .complaint-meta-table th { text-align: right; width: 200px; background: #f9f9f9; }
    </style>
    <table class="complaint-meta-table">
        <tr>
            <th scope="row">เลขที่เรื่องร้องเรียน:</th>
            <td><?php echo esc_html($ref_number); ?></td>
        </tr>
        <tr>
            <th scope="row">วันที่รับเรื่อง:</th>
            <td><?php echo !empty($complaint_date) ? date_i18n('d F Y H:i', strtotime($complaint_date)) : date_i18n('d F Y H:i', strtotime($post->post_date)); ?></td>
        </tr>
        <tr>
            <th scope="row">กำหนดตอบ:</th>
            <td><?php echo !empty($due_date) ? date_i18n('d F Y', strtotime($due_date)) : date_i18n('d F Y', strtotime('+30 days', strtotime($post->post_date))); ?></td>
        </tr>
        <tr>
            <th scope="row">ประเภทเรื่องร้องเรียน:</th>
            <td><?php echo esc_html(get_complaint_type_label($type)); ?></td>
        </tr>
        <tr>
            <th scope="row">หน่วยงานที่ถูกร้องเรียน:</th>
            <td><?php echo esc_html($department); ?></td>
        </tr>
    </table>
    <?php
}

// Meta box แสดงข้อมูลผู้ร้องเรียน
function complainant_info_meta_box($post) {
    $is_anonymous = get_post_meta($post->ID, '_is_anonymous', true);
    
    if ($is_anonymous == 'yes') {
        echo '<p><strong>ผู้ร้องเรียนไม่ประสงค์ออกนาม</strong></p>';
        return;
    }
    
    $name = get_post_meta($post->ID, '_complainant_name', true);
    $address = get_post_meta($post->ID, '_complainant_address', true);
    $phone = get_post_meta($post->ID, '_complainant_phone', true);
    $email = get_post_meta($post->ID, '_complainant_email', true);
    
    ?>
    <table class="complaint-meta-table">
        <tr>
            <th scope="row">ชื่อ-นามสกุล:</th>
            <td><?php echo esc_html($name); ?></td>
        </tr>
        <?php if (!empty($address)) : ?>
        <tr>
            <th scope="row">ที่อยู่:</th>
            <td><?php echo nl2br(esc_html($address)); ?></td>
        </tr>
        <?php endif; ?>
        <?php if (!empty($phone)) : ?>
        <tr>
            <th scope="row">เบอร์โทรศัพท์:</th>
            <td><?php echo esc_html($phone); ?></td>
        </tr>
        <?php endif; ?>
        <?php if (!empty($email)) : ?>
        <tr>
            <th scope="row">อีเมล:</th>
            <td><?php echo esc_html($email); ?></td>
        </tr>
        <?php endif; ?>
    </table>
    <?php
}

// Add custom columns to admin list
function add_complaint_columns($columns) {
    $new_columns = array();
    $new_columns['cb'] = $columns['cb'];
    $new_columns['ref_number'] = 'เลขที่';
    $new_columns['title'] = 'ประเภท';
    $new_columns['department'] = 'หน่วยงาน';
    $new_columns['complainant'] = 'ผู้ร้องเรียน';
    $new_columns['date'] = $columns['date'];
    $new_columns['status'] = 'สถานะ';
    return $new_columns;
}
add_filter('manage_complaint_posts_columns', 'add_complaint_columns');

// Fill custom columns
function fill_complaint_columns($column, $post_id) {
    switch ($column) {
        case 'ref_number':
            $ref_number = get_post_meta($post_id, '_complaint_ref', true);
            if (empty($ref_number)) {
                $ref_number = generate_complaint_reference($post_id);
                update_post_meta($post_id, '_complaint_ref', $ref_number);
            }
            echo $ref_number;
            break;
            
        case 'department':
            echo get_post_meta($post_id, '_complaint_department', true);
            break;
            
        case 'complainant':
            $is_anonymous = get_post_meta($post_id, '_is_anonymous', true);
            if ($is_anonymous == 'yes') {
                echo 'ไม่ประสงค์ออกนาม';
            } else {
                echo get_post_meta($post_id, '_complainant_name', true);
            }
            break;
            
        case 'status':
            $status = get_post_status($post_id);
            $status_labels = array(
                'pending' => 'รอดำเนินการ',
                'in-progress' => 'กำลังดำเนินการ',
                'completed' => 'เสร็จสิ้น',
                'rejected' => 'ไม่รับพิจารณา',
                'closed' => 'ปิดเรื่อง'
            );
            echo isset($status_labels[$status]) ? $status_labels[$status] : $status;
            break;
    }
}
add_action('manage_complaint_posts_custom_column', 'fill_complaint_columns', 10, 2);

// เพิ่มฟังก์ชันสำหรับการกรองข้อมูลในหน้า admin
function add_complaint_filters() {
    global $typenow;
    
    if ($typenow == 'complaint') {
        $current_type = isset($_GET['complaint_type']) ? $_GET['complaint_type'] : '';
        $types = array(
            'corruption' => 'การทุจริตประพฤติมิชอบ',
            'negligence' => 'การละเลยการปฏิบัติหน้าที่',
            'misconduct' => 'การปฏิบัติหน้าที่โดยมิชอบ',
            'rights' => 'การละเมิดสิทธิ',
            'other' => 'อื่นๆ'
        );
        
        echo '<select name="complaint_type" aria-label="กรองตามประเภทเรื่องร้องเรียน">';
        echo '<option value="">ทุกประเภท</option>';
        
        foreach ($types as $value => $label) {
            printf(
                '<option value="%s"%s>%s</option>',
                esc_attr($value),
                $value == $current_type ? ' selected="selected"' : '',
                esc_html($label)
            );
        }
        
        echo '</select>';
    }
}
add_action('restrict_manage_posts', 'add_complaint_filters');

// จัดการการกรองข้อมูล
function filter_complaints_by_meta($query) {
    global $pagenow, $typenow;
    
    if ($pagenow == 'edit.php' && $typenow == 'complaint' && is_admin()) {
        $qv = &$query->query_vars;
        
        if (isset($_GET['complaint_type']) && $_GET['complaint_type'] != '') {
            $qv['meta_query'][] = array(
                'key' => '_complaint_type',
                'value' => $_GET['complaint_type'],
                'compare' => '='
            );
        }
    }
}
add_filter('parse_query', 'filter_complaints_by_meta');


/********* ระบบค้นหาเรื่องร้องเรียน V1.2 - WCAG 2.1 AA Compliant ********/

// Enqueue necessary scripts and styles
function dga_complaint_search_enqueue_scripts() {
    global $post;
    
    if ($post && has_shortcode($post->post_content, 'complaint_search')) {
        
        // Enqueue CSS
        wp_enqueue_style(
            'complaint-search-style',
            get_stylesheet_directory_uri() . '/css/complaint-search.css',
            array(),
            '1.2.0'
        );
        
        // Enqueue Font Awesome (หากยังไม่มีการ include ไว้แล้ว)
        if (!wp_style_is('font-awesome', 'enqueued')) {
            wp_enqueue_style(
                'font-awesome',
                'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css',
                array(),
                '6.2.1'
            );
        }
        
        // Enqueue JS
        wp_enqueue_script(
            'complaint-search-script',
            get_stylesheet_directory_uri() . '/js/complaint-search.js',
            array('jquery'),
            '1.2.0',
            true
        );

        // ส่งค่าตัวแปรต่างๆ ไปยัง JavaScript
        wp_localize_script(
            'complaint-search-script',
            'complaintSearchAjax',
            array(
                'ajaxurl' => admin_url('admin-ajax.php'),
                'nonce' => wp_create_nonce('complaint_search_nonce'),
                'error_not_found' => 'ไม่พบข้อมูลเรื่องร้องเรียนตามหมายเลขที่ระบุ กรุณาตรวจสอบและลองใหม่อีกครั้ง',
                'error_invalid' => 'กรุณาระบุหมายเลขเรื่องร้องเรียนให้ถูกต้อง',
                'error_system' => 'เกิดข้อผิดพลาดในระบบ กรุณาลองใหม่อีกครั้งในภายหลัง',
                'prefix' => 'CPL-',
                'aria_labels' => array(
                    'searching' => 'กำลังค้นหา',
                    'search_result' => 'ผลการค้นหา',
                    'toggle_search' => 'เปิด/ปิด แถบค้นหา',
                    'close_result' => 'ปิดผลการค้นหา'
                )
            )
        );
    }
}
add_action('wp_enqueue_scripts', 'dga_complaint_search_enqueue_scripts');

// Create shortcode for complaint search
function dga_complaint_search_shortcode() {
    ob_start();
    ?>
    <div class="dga-complaint-search-container">
        <!-- ปุ่มที่มีตัวหนังสือแนวตั้ง (หมุน 90 องศา) -->
        <button type="button" id="dga-complaint-toggle-btn" class="dga-complaint-toggle-btn" aria-label="เปิด/ปิด แถบค้นหาเรื่องร้องเรียน" aria-expanded="false" aria-controls="dga-complaint-search-form">
            <div class="toggle-text">
                <span>ค้นหาสถานะ</span>
            </div>
            <div class="toggle-icon">
                <i class="fas fa-search" aria-hidden="true"></i>
            </div>
        </button>
        
        <!-- ฟอร์มค้นหาที่จะขยายออกมาทางขวา -->
        <div id="dga-complaint-search-form" class="dga-complaint-search-form" aria-hidden="true">
            <h3 id="search-form-heading">ค้นหาสถานะเรื่องร้องเรียน</h3>
            
            <form id="complaint-search-form" aria-labelledby="search-form-heading">
                <div class="form-group">
                    <label for="complaint-ref">หมายเลขเรื่องร้องเรียน</label>
                    <div class="input-with-button">
                        <input 
                            type="text" 
                            id="complaint-ref" 
                            name="complaint-ref" 
                            placeholder="ระบุหมายเลขเรื่องร้องเรียน เช่น CPL-202505-000123"
                            aria-required="true"
                            autocomplete="off"
                            value="CPL-"
                        >
                        <span id="complaint-ref-error" class="error-message" role="alert"></span>
                        <button type="submit" class="search-btn" aria-label="ค้นหา">
                            <i class="fas fa-search" aria-hidden="true"></i> ค้นหา
                        </button>
                    </div>
                    <div class="form-hint">
                        กรุณาระบุหมายเลขเรื่องร้องเรียนที่ได้รับจากระบบ
                    </div>
                </div>
            </form>
            
            <div id="complaint-search-loading" class="complaint-search-loading" style="display: none;" role="status" aria-live="polite">
                <div class="loading-spinner">
                    <i class="fas fa-circle-notch fa-spin" aria-hidden="true"></i>
                </div>
                <span>กำลังค้นหา...</span>
            </div>
        </div>
    </div>
    
    <!-- Popup สำหรับแสดงผลการค้นหาแยกต่างหาก -->
    <div id="complaint-result-popup" class="complaint-result-popup" aria-hidden="true">
        <div class="complaint-popup-content">
            <div id="complaint-search-result" class="complaint-search-result">
                <!-- ผลลัพธ์จะถูกเพิ่มโดย JavaScript -->
            </div>
        </div>
        <!-- พื้นหลังทึบสำหรับ overlay -->
        <div class="complaint-popup-overlay"></div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('complaint_search', 'dga_complaint_search_shortcode');

// AJAX handler for complaint search (ยังคงใช้โค้ดเดิม)
function dga_complaint_search_ajax_handler() {
    // เนื้อหา AJAX handler คงเดิม
    check_ajax_referer('complaint_search_nonce', 'nonce');
    
    // Get reference number
    $ref_number = isset($_POST['ref_number']) ? sanitize_text_field(wp_unslash($_POST['ref_number'])) : '';
    
    // Validate reference number
    if (empty($ref_number)) {
        wp_send_json_error(array('message' => 'กรุณาระบุหมายเลขเรื่องร้องเรียน'));
        return;
    }
    
    // ค้นหาเรื่องร้องเรียนจากฐานข้อมูล - ใช้ meta_key ให้ตรงกับที่บันทึกในระบบ
    $args = array(
        'post_type' => 'complaint',
        'post_status' => array('pending', 'publish', 'draft', 'in-progress', 'completed', 'rejected', 'closed', 'private'),
        'posts_per_page' => 1,
        'meta_query' => array(
            array(
                'key' => '_complaint_ref',
                'value' => $ref_number,
                'compare' => '='
            )
        )
    );
    
    $complaints = new WP_Query($args);
    
    if ($complaints->have_posts()) {
        $complaints->the_post();
        $post_id = get_the_ID();
        
        // ดึงข้อมูลเรื่องร้องเรียน
        $type = get_post_meta($post_id, '_complaint_type', true);
        $type_label = get_complaint_type_label($type);
        
        $type_other = '';
        if ($type == 'other') {
            $type_other = ' (' . get_post_meta($post_id, '_typeOther', true) . ')';
        }
        
        $department = get_post_meta($post_id, '_complaint_department', true);
        $status = get_post_status($post_id);
        $complaint_date = get_post_meta($post_id, '_complaint_date', true);
        $due_date = get_post_meta($post_id, '_response_due_date', true);
        $is_anonymous = get_post_meta($post_id, '_is_anonymous', true);
        
        // แปลงสถานะให้เป็นภาษาไทย
        $status_labels = array(
            'pending' => 'รอดำเนินการ',
            'publish' => 'รอดำเนินการ',
            'draft' => 'รอดำเนินการ',
            'private' => 'รอดำเนินการ',
            'in-progress' => 'กำลังดำเนินการ',
            'completed' => 'ดำเนินการเสร็จสิ้น',
            'rejected' => 'ไม่รับพิจารณา',
            'closed' => 'ปิดเรื่อง'
        );
        
        $status_label = isset($status_labels[$status]) ? $status_labels[$status] : $status;
        
        // สร้าง progress step ตามสถานะ
        $progress_steps = array(
            'pending' => 1,
            'publish' => 1,
            'draft' => 1,
            'private' => 1,
            'in-progress' => 2,
            'completed' => 3,
            'rejected' => 3,
            'closed' => 3
        );
        
        $current_step = isset($progress_steps[$status]) ? $progress_steps[$status] : 1;
        
        // จัดเตรียมข้อมูลสำหรับส่งกลับ
        $result = array(
            'ref_number' => $ref_number,
            'complaint_type' => $type_label . $type_other,
            'department' => $department,
            'status' => $status_label,
            'complaint_date' => !empty($complaint_date) ? date_i18n('d/m/Y', strtotime($complaint_date)) : date_i18n('d/m/Y', strtotime(get_the_date())),
            'due_date' => !empty($due_date) ? date_i18n('d/m/Y', strtotime($due_date)) : '',
            'current_step' => $current_step,
            'details' => wp_strip_all_tags(get_the_content())
        );
        
        wp_reset_postdata();
        wp_send_json_success($result);
        
    } else {
        // ถ้าค้นหาไม่พบ ลองค้นหาแบบ LIKE
        $args = array(
            'post_type' => 'complaint',
            'post_status' => array('pending', 'publish', 'draft', 'in-progress', 'completed', 'rejected', 'closed', 'private'),
            'posts_per_page' => 1,
            'meta_query' => array(
                array(
                    'key' => '_complaint_ref',
                    'value' => $ref_number,
                    'compare' => 'LIKE'
                )
            )
        );
        
        $complaints_like = new WP_Query($args);
        
        if ($complaints_like->have_posts()) {
            // ถ้าพบด้วยการค้นหาแบบ LIKE ใช้ข้อมูลนั้น
            $complaints_like->the_post();
            $post_id = get_the_ID();
            
            // ดึงค่าเลขที่เรื่องร้องเรียนที่ถูกต้อง
            $correct_ref = get_post_meta($post_id, '_complaint_ref', true);
            
            // ดึงข้อมูลเรื่องร้องเรียน
            $type = get_post_meta($post_id, '_complaint_type', true);
            $type_label = get_complaint_type_label($type);
            
            $type_other = '';
            if ($type == 'other') {
                $type_other = ' (' . get_post_meta($post_id, '_typeOther', true) . ')';
            }
            
            $department = get_post_meta($post_id, '_complaint_department', true);
            $status = get_post_status($post_id);
            $complaint_date = get_post_meta($post_id, '_complaint_date', true);
            $due_date = get_post_meta($post_id, '_response_due_date', true);
            $is_anonymous = get_post_meta($post_id, '_is_anonymous', true);
            
            // แปลงสถานะให้เป็นภาษาไทย
            $status_labels = array(
                'pending' => 'รอดำเนินการ',
                'publish' => 'รอดำเนินการ',
                'draft' => 'รอดำเนินการ',
                'private' => 'รอดำเนินการ',
                'in-progress' => 'กำลังดำเนินการ',
                'completed' => 'ดำเนินการเสร็จสิ้น',
                'rejected' => 'ไม่รับพิจารณา',
                'closed' => 'ปิดเรื่อง'
            );
            
            $status_label = isset($status_labels[$status]) ? $status_labels[$status] : $status;
            
            // สร้าง progress step ตามสถานะ
            $progress_steps = array(
                'pending' => 1,
                'publish' => 1,
                'draft' => 1,
                'private' => 1,
                'in-progress' => 2,
                'completed' => 3,
                'rejected' => 3,
                'closed' => 3
            );
            
            $current_step = isset($progress_steps[$status]) ? $progress_steps[$status] : 1;
            
            // จัดเตรียมข้อมูลสำหรับส่งกลับ
            $result = array(
                'ref_number' => $correct_ref, // ใช้เลขอ้างอิงที่ถูกต้องจากฐานข้อมูล
                'complaint_type' => $type_label . $type_other,
                'department' => $department,
                'status' => $status_label,
                'complaint_date' => !empty($complaint_date) ? date_i18n('d/m/Y', strtotime($complaint_date)) : date_i18n('d/m/Y', strtotime(get_the_date())),
                'due_date' => !empty($due_date) ? date_i18n('d/m/Y', strtotime($due_date)) : '',
                'current_step' => $current_step,
                'details' => wp_strip_all_tags(get_the_content())
            );
            
            wp_reset_postdata();
            wp_send_json_success($result);
        } else {
            // ลองค้นหาแบบ SQL query โดยตรงเพื่อหาค่าที่ใกล้เคียงที่สุด
            global $wpdb;
            $sql = $wpdb->prepare(
                "SELECT post_id, meta_value FROM {$wpdb->postmeta} 
                 WHERE meta_key = '_complaint_ref' 
                 AND meta_value LIKE %s
                 LIMIT 1", 
                '%' . $wpdb->esc_like($ref_number) . '%'
            );
            
            $direct_result = $wpdb->get_row($sql);
            
            if ($direct_result) {
                // ใช้ post_id ที่ได้ไปดึงข้อมูลและส่งกลับเหมือนข้างบน
                $post_id = $direct_result->post_id;
                $correct_ref = $direct_result->meta_value;
                
                // ดึงข้อมูล post
                $complaint_post = get_post($post_id);
                
                if ($complaint_post) {
                    // ดึงข้อมูลเรื่องร้องเรียน
                    $type = get_post_meta($post_id, '_complaint_type', true);
                    $type_label = get_complaint_type_label($type);
                    
                    $type_other = '';
                    if ($type == 'other') {
                        $type_other = ' (' . get_post_meta($post_id, '_typeOther', true) . ')';
                    }
                    
                    $department = get_post_meta($post_id, '_complaint_department', true);
                    $status = get_post_status($post_id);
                    $complaint_date = get_post_meta($post_id, '_complaint_date', true);
                    $due_date = get_post_meta($post_id, '_response_due_date', true);
                    
                    // แปลงสถานะให้เป็นภาษาไทย
                    $status_labels = array(
                        'pending' => 'รอดำเนินการ',
                        'publish' => 'รอดำเนินการ',
                        'draft' => 'รอดำเนินการ',
                        'private' => 'รอดำเนินการ',
                        'in-progress' => 'กำลังดำเนินการ',
                        'completed' => 'ดำเนินการเสร็จสิ้น',
                        'rejected' => 'ไม่รับพิจารณา',
                        'closed' => 'ปิดเรื่อง'
                    );
                    
                    $status_label = isset($status_labels[$status]) ? $status_labels[$status] : $status;
                    
                    // สร้าง progress step ตามสถานะ
                    $progress_steps = array(
                        'pending' => 1,
                        'publish' => 1,
                        'draft' => 1,
                        'private' => 1,
                        'in-progress' => 2,
                        'completed' => 3,
                        'rejected' => 3,
                        'closed' => 3
                    );
                    
                    $current_step = isset($progress_steps[$status]) ? $progress_steps[$status] : 1;
                    
                    // จัดเตรียมข้อมูลสำหรับส่งกลับ
                    $result = array(
                        'ref_number' => $correct_ref, // ใช้เลขอ้างอิงที่ถูกต้องจากฐานข้อมูล
                        'complaint_type' => $type_label . $type_other,
                        'department' => $department,
                        'status' => $status_label,
                        'complaint_date' => !empty($complaint_date) ? date_i18n('d/m/Y', strtotime($complaint_date)) : date_i18n('d/m/Y', strtotime($complaint_post->post_date)),
                        'due_date' => !empty($due_date) ? date_i18n('d/m/Y', strtotime($due_date)) : '',
                        'current_step' => $current_step,
                        'details' => wp_strip_all_tags($complaint_post->post_content)
                    );
                    
                    wp_send_json_success($result);
                    return;
                }
            }
            
            wp_send_json_error(array('message' => 'ไม่พบข้อมูลเรื่องร้องเรียนตามหมายเลขที่ระบุ กรุณาตรวจสอบและลองใหม่อีกครั้ง'));
        }
    }
}
add_action('wp_ajax_complaint_search', 'dga_complaint_search_ajax_handler');
add_action('wp_ajax_nopriv_complaint_search', 'dga_complaint_search_ajax_handler');

// Helper function to get complaint type label
if (!function_exists('get_complaint_type_label')) {
    function get_complaint_type_label($type) {
        $types = array(
            'corruption' => 'การทุจริตประพฤติมิชอบ',
            'negligence' => 'การละเลยการปฏิบัติหน้าที่',
            'misconduct' => 'การปฏิบัติหน้าที่โดยมิชอบ',
            'rights' => 'การละเมิดสิทธิ',
            'other' => 'อื่นๆ'
        );
        return isset($types[$type]) ? $types[$type] : 'อื่นๆ';
    }
}





/***** จัดการรายการร้องเรียน ******/

/**
 * Complaint Management System
 * Version: 1.0.0
 */

// กำหนดค่าคงที่สำหรับระบบ
if (!defined('CPM_BOOTSTRAP_VERSION')) {
    define('CPM_BOOTSTRAP_VERSION', '5.2.3');
}
if (!defined('CPM_DATATABLES_VERSION')) {
    define('CPM_DATATABLES_VERSION', '1.13.1');
}
if (!defined('CPM_FONTAWESOME_VERSION')) {
    define('CPM_FONTAWESOME_VERSION', '6.4.0');
}

/**
 * Enqueue scripts and styles for complaint list management
 */
function complaint_list_enqueue_scripts() {
    // ตรวจสอบว่าหน้าปัจจุบันมี shortcode [complaint_list] หรือไม่
    global $post;
    if (!is_a($post, 'WP_Post') || !has_shortcode($post->post_content, 'complaint_list')) {
        return;
    }

    // ตรวจสอบสิทธิ์การเข้าถึง
    if (!current_user_can('edit_posts') && !current_user_can('manage_options')) {
        return;
    }

    // Enqueue Bootstrap
    wp_enqueue_style(
        'complaint-bootstrap',
        "https://cdn.jsdelivr.net/npm/bootstrap@" . CPM_BOOTSTRAP_VERSION . "/dist/css/bootstrap.min.css",
        array(),
        CPM_BOOTSTRAP_VERSION
    );

    wp_enqueue_script(
        'complaint-bootstrap-js',
        "https://cdn.jsdelivr.net/npm/bootstrap@" . CPM_BOOTSTRAP_VERSION . "/dist/js/bootstrap.bundle.min.js",
        array('jquery'),
        CPM_BOOTSTRAP_VERSION,
        true
    );

    // Enqueue DataTables
    wp_enqueue_style(
        'complaint-datatables',
        "https://cdn.datatables.net/1.13.1/css/dataTables.bootstrap5.min.css",
        array('complaint-bootstrap'),
        CPM_DATATABLES_VERSION
    );

    wp_enqueue_script(
        'complaint-datatables-js',
        "https://cdn.datatables.net/1.13.1/js/jquery.dataTables.min.js",
        array('jquery'),
        CPM_DATATABLES_VERSION,
        true
    );

    wp_enqueue_script(
        'complaint-datatables-bs5',
        "https://cdn.datatables.net/1.13.1/js/dataTables.bootstrap5.min.js",
        array('complaint-datatables-js', 'complaint-bootstrap-js'),
        CPM_DATATABLES_VERSION,
        true
    );

    // Enqueue Font Awesome
    wp_enqueue_style(
        'complaint-fontawesome',
        "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/" . CPM_FONTAWESOME_VERSION . "/css/all.min.css",
        array(),
        CPM_FONTAWESOME_VERSION
    );

    // Enqueue Custom CSS
    wp_enqueue_style(
        'complaint-list-style',
        get_stylesheet_directory_uri() . '/css/complaint-list.css',
        array('complaint-bootstrap', 'complaint-datatables', 'complaint-fontawesome'),
        filemtime(get_stylesheet_directory() . '/css/complaint-list.css')
    );

    // Enqueue Custom JS
    wp_enqueue_script(
        'complaint-list-script',
        get_stylesheet_directory_uri() . '/js/complaint-list.js',
        array('jquery', 'complaint-bootstrap-js', 'complaint-datatables-bs5'),
        filemtime(get_stylesheet_directory() . '/js/complaint-list.js'),
        true
    );

    // Localize script สำหรับใช้ใน JavaScript
    wp_localize_script(
        'complaint-list-script',
        'complaintListData',
        array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('complaint_list_nonce'),
            'messages' => array(
                'loading' => 'กำลังโหลดข้อมูล...',
                'error' => 'เกิดข้อผิดพลาด กรุณาลองใหม่อีกครั้ง',
                'success' => 'ดำเนินการเรียบร้อยแล้ว',
                'confirm_delete' => 'คุณต้องการลบเรื่องร้องเรียนนี้ใช่หรือไม่?',
                'no_data' => 'ไม่พบเรื่องร้องเรียน',
                'confirm_status_change' => 'คุณต้องการเปลี่ยนสถานะเรื่องร้องเรียนเป็น {status} ใช่หรือไม่?'
            ),
            'status_labels' => array(
                'pending' => 'รอดำเนินการ',
                'in-progress' => 'กำลังดำเนินการ',
                'completed' => 'เสร็จสิ้น',
                'rejected' => 'ไม่รับพิจารณา',
                'closed' => 'ปิดเรื่อง'
            ),
            'status_colors' => array(
                'pending' => 'warning',
                'in-progress' => 'info',
                'completed' => 'success',
                'rejected' => 'danger',
                'closed' => 'secondary'
            ),
            'current_user' => array(
                'id' => get_current_user_id(),
                'name' => wp_get_current_user()->display_name,
                'can_edit' => current_user_can('edit_posts'),
                'can_delete' => current_user_can('delete_posts'),
                'is_admin' => current_user_can('manage_options')
            ),
            'date_format' => get_option('date_format'),
            'time_format' => get_option('time_format')
        )
    );
}
add_action('wp_enqueue_scripts', 'complaint_list_enqueue_scripts');

/**
 * Create shortcode for complaint list management
 */
function complaint_list_shortcode() {
    // ตรวจสอบสิทธิ์การเข้าถึง
    if (!current_user_can('edit_posts') && !current_user_can('manage_options')) {
        return '<div class="alert alert-danger"><i class="fas fa-exclamation-triangle me-2"></i>ขออภัย คุณไม่มีสิทธิ์เข้าถึงระบบจัดการเรื่องร้องเรียน</div>';
    }

    ob_start();
    ?>
    <div class="complaint-management-container">
        <!-- ส่วนหัว -->
        <div class="complaint-header mb-4">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h2 class="complaint-title"><i class="fas fa-clipboard-list me-2"></i>ระบบจัดการเรื่องร้องเรียน</h2>
                </div>
                <div class="col-md-6 text-md-end">
                    <div class="complaint-actions">
                        <button id="refresh-complaints" class="btn btn-outline-primary me-2">
                            <i class="fas fa-sync-alt me-1"></i> รีเฟรช
                        </button>
                        <?php if (current_user_can('manage_options')): ?>
                        <button id="export-complaints" class="btn btn-success">
                            <i class="fas fa-file-export me-1"></i> ส่งออกข้อมูล
                        </button>
                        <?php endif; ?>
                    </div>
                </div>
            </div>
        </div>

        <!-- แสดงการแจ้งเตือน -->
        <div id="complaint-alert" class="alert d-none mb-4" role="alert"></div>

        <!-- ภาพรวมสถานะ -->
        <div class="complaint-dashboard mb-4">
            <h3 class="section-title mb-3">ภาพรวมเรื่องร้องเรียน</h3>
            <div class="row g-3" id="status-summary">
                <div class="col-md-4 col-xl-2">
                    <div class="status-card card h-100 bg-light border-warning">
                        <div class="card-body text-center">
                            <h4 class="status-name text-warning">รอดำเนินการ</h4>
                            <div class="status-count display-4 fw-bold" id="status-pending">0</div>
                            <div class="status-label">เรื่อง</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 col-xl-2">
                    <div class="status-card card h-100 bg-light border-info">
                        <div class="card-body text-center">
                            <h4 class="status-name text-info">กำลังดำเนินการ</h4>
                            <div class="status-count display-4 fw-bold" id="status-in-progress">0</div>
                            <div class="status-label">เรื่อง</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 col-xl-2">
                    <div class="status-card card h-100 bg-light border-success">
                        <div class="card-body text-center">
                            <h4 class="status-name text-success">เสร็จสิ้น</h4>
                            <div class="status-count display-4 fw-bold" id="status-completed">0</div>
                            <div class="status-label">เรื่อง</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 col-xl-2">
                    <div class="status-card card h-100 bg-light border-danger">
                        <div class="card-body text-center">
                            <h4 class="status-name text-danger">ไม่รับพิจารณา</h4>
                            <div class="status-count display-4 fw-bold" id="status-rejected">0</div>
                            <div class="status-label">เรื่อง</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 col-xl-2">
                    <div class="status-card card h-100 bg-light border-secondary">
                        <div class="card-body text-center">
                            <h4 class="status-name text-secondary">ปิดเรื่อง</h4>
                            <div class="status-count display-4 fw-bold" id="status-closed">0</div>
                            <div class="status-label">เรื่อง</div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 col-xl-2">
                    <div class="status-card card h-100 bg-primary text-white">
                        <div class="card-body text-center">
                            <h4 class="status-name">ทั้งหมด</h4>
                            <div class="status-count display-4 fw-bold" id="status-total">0</div>
                            <div class="status-label">เรื่อง</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ส่วนการกรอง -->
        <div class="complaint-filters mb-4">
            <div class="card">
                <div class="card-header bg-primary bg-opacity-10">
                    <h3 class="section-title m-0">ตัวกรองข้อมูล</h3>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label for="filter-status" class="form-label">สถานะ</label>
                            <select id="filter-status" class="form-select">
                                <option value="">ทั้งหมด</option>
                                <option value="pending">รอดำเนินการ</option>
                                <option value="in-progress">กำลังดำเนินการ</option>
                                <option value="completed">เสร็จสิ้น</option>
                                <option value="rejected">ไม่รับพิจารณา</option>
                                <option value="closed">ปิดเรื่อง</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="filter-type" class="form-label">ประเภท</label>
                            <select id="filter-type" class="form-select">
                                <option value="">ทั้งหมด</option>
                                <option value="corruption">การทุจริตประพฤติมิชอบ</option>
                                <option value="negligence">การละเลยการปฏิบัติหน้าที่</option>
                                <option value="misconduct">การปฏิบัติหน้าที่โดยมิชอบ</option>
                                <option value="rights">การละเมิดสิทธิ</option>
                                <option value="other">อื่นๆ</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="filter-date" class="form-label">ช่วงเวลา</label>
                            <select id="filter-date" class="form-select">
                                <option value="">ทั้งหมด</option>
                                <option value="today">วันนี้</option>
                                <option value="week">7 วันล่าสุด</option>
                                <option value="month">30 วันล่าสุด</option>
                                <option value="quarter">3 เดือนล่าสุด</option>
                                <option value="year">ปีนี้</option>
                            </select>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-8">
                            <label for="filter-search" class="form-label">ค้นหา</label>
                            <input type="text" id="filter-search" class="form-control" placeholder="ค้นหาจากเลขที่ ประเภท หน่วยงาน หรือชื่อผู้ร้องเรียน">
                        </div>
                        <div class="col-md-4">
                            <label class="d-block invisible">ค้นหา</label>
                            <button id="apply-filters" class="btn btn-primary w-100">
                                <i class="fas fa-search me-1"></i> ค้นหา
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ตารางแสดงรายการ -->
        <div class="complaint-list mb-4">
            <div class="card">
                <div class="card-header bg-primary bg-opacity-10">
                    <h3 class="section-title m-0">รายการเรื่องร้องเรียน</h3>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table id="complaints-table" class="table table-striped table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>เลขที่</th>
                                    <th>วันที่รับเรื่อง</th>
                                    <th>ประเภท</th>
                                    <th>หน่วยงาน</th>
                                    <th>ผู้ร้องเรียน</th>
                                    <th>สถานะ</th>
                                    <th>กำหนดตอบ</th>
                                    <th width="120">จัดการ</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- ข้อมูลจะถูกเพิ่มด้วย JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="complaints-count">กำลังโหลดข้อมูล...</div>
                        </div>
                        <div class="col-md-6 text-md-end">
                            <div class="pagination-info"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal แสดงรายละเอียดเรื่องร้องเรียน -->
    <div class="modal fade" id="complaint-detail-modal" tabindex="-1" aria-labelledby="complaint-detail-modal-label" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="complaint-detail-modal-label">รายละเอียดเรื่องร้องเรียน</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="ปิด"></button>
                </div>
                <div class="modal-body">
                    <div id="complaint-detail-content">
                        <!-- ข้อมูลจะถูกเพิ่มด้วย JavaScript -->
                    </div>
                </div>
                <div class="modal-footer d-block">
                    <div class="row g-3">
                        <div class="col-md-8">
                            <select id="update-status" class="form-select">
                                <option value="pending">รอดำเนินการ</option>
                                <option value="in-progress">กำลังดำเนินการ</option>
                                <option value="completed">เสร็จสิ้น</option>
                                <option value="rejected">ไม่รับพิจารณา</option>
                                <option value="closed">ปิดเรื่อง</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <button id="btn-update-status" class="btn btn-primary w-100">
                                <i class="fas fa-save me-2"></i>บันทึกสถานะ
                            </button>
                        </div>
                    </div>
                    
                    <div class="row mt-3">
                        <div class="col">
                            <textarea id="status-note" class="form-control" rows="3" placeholder="บันทึกการดำเนินการ (optional)"></textarea>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('complaint_list', 'complaint_list_shortcode');

/**
 * AJAX handler: Get complaints list
 */
function complaint_list_get_complaints() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'complaint_list_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
    }

    // ตรวจสอบสิทธิ์
    if (!current_user_can('edit_posts') && !current_user_can('manage_options')) {
        wp_send_json_error(array('message' => 'You do not have permission to access this data'));
    }

    // รับพารามิเตอร์
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 10;
    $status = isset($_POST['status']) ? sanitize_text_field($_POST['status']) : '';
    $type = isset($_POST['type']) ? sanitize_text_field($_POST['type']) : '';
    $date_filter = isset($_POST['date']) ? sanitize_text_field($_POST['date']) : '';
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';

    // สร้าง query arguments
    $args = array(
        'post_type' => 'complaint',
        'posts_per_page' => $per_page,
        'paged' => $page,
        'meta_query' => array(),
        's' => $search
    );

    // กรองตามสถานะ
    if (!empty($status)) {
        $args['post_status'] = $status;
    } else {
        $args['post_status'] = array('pending', 'in-progress', 'completed', 'rejected', 'closed');
    }

    // กรองตามประเภท
    if (!empty($type)) {
        $args['meta_query'][] = array(
            'key' => '_complaint_type',
            'value' => $type,
            'compare' => '='
        );
    }

    // กรองตามวันที่
    if (!empty($date_filter)) {
        $date = new DateTime();
        switch ($date_filter) {
            case 'today':
                $args['date_query'] = array(
                    'after' => date('Y-m-d', strtotime('today'))
                );
                break;
            case 'week':
                $args['date_query'] = array(
                    'after' => date('Y-m-d', strtotime('-7 days'))
                );
                break;
            case 'month':
                $args['date_query'] = array(
                    'after' => date('Y-m-d', strtotime('-30 days'))
                );
                break;
            case 'quarter':
                $args['date_query'] = array(
                    'after' => date('Y-m-d', strtotime('-90 days'))
                );
                break;
            case 'year':
                $args['date_query'] = array(
                    'after' => date('Y-m-d', strtotime('first day of january this year')),
                    'before' => date('Y-m-d', strtotime('last day of december this year')),
                    'inclusive' => true
                );
                break;
        }
    }

    // คำนวณจำนวนตามสถานะ
    $status_counts = array(
        'pending' => 0,
        'in-progress' => 0,
        'completed' => 0,
        'rejected' => 0,
        'closed' => 0
    );

    foreach ($status_counts as $count_status => $count) {
        $count_args = $args;
        $count_args['post_status'] = $count_status;
        $count_args['posts_per_page'] = -1;
        $count_args['fields'] = 'ids';
        $count_query = new WP_Query($count_args);
        $status_counts[$count_status] = $count_query->found_posts;
    }

    // ดึงข้อมูลเรื่องร้องเรียน
    $query = new WP_Query($args);
    $complaints = array();

    while ($query->have_posts()) {
        $query->the_post();
        $post_id = get_the_ID();
        
        // ดึงข้อมูลเมตา
        $type_value = get_post_meta($post_id, '_complaint_type', true);
        $department = get_post_meta($post_id, '_complaint_department', true);
        $is_anonymous = get_post_meta($post_id, '_is_anonymous', true);
        $complainant_name = get_post_meta($post_id, '_complainant_name', true);
        $ref_number = get_post_meta($post_id, '_complaint_ref', true);
        $details = get_post_field('post_content', $post_id);
        $due_date = get_post_meta($post_id, '_response_due_date', true);
        
        // สร้างชื่อเรื่องและข้อมูลผู้ร้องเรียน
        $type_label = get_complaint_type_label($type_value);
        $complainant = ($is_anonymous == 'yes') ? 'ไม่ประสงค์ออกนาม' : $complainant_name;
        
        // จัดเตรียมข้อมูลสำหรับส่งกลับ
        $complaints[] = array(
            'id' => $post_id,
            'ref' => $ref_number,
            'type' => $type_label,
            'type_value' => $type_value,
            'department' => $department,
            'date' => get_the_date('Y-m-d H:i:s'),
            'due_date' => $due_date,
            'status' => get_post_status($post_id),
            'complainant' => $complainant,
            'is_anonymous' => ($is_anonymous == 'yes'),
            'details' => $details
        );
    }
    
    wp_reset_postdata();
    
    // ส่งข้อมูลกลับ
    wp_send_json_success(array(
        'complaints' => $complaints,
        'total' => $query->found_posts,
        'pages' => $query->max_num_pages,
        'current_page' => $page,
        'status_counts' => $status_counts
    ));
}
add_action('wp_ajax_complaint_list_get_complaints', 'complaint_list_get_complaints');

/**
 * AJAX handler: Get complaint details
 */
function complaint_list_get_details() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'complaint_list_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
    }

    // ตรวจสอบสิทธิ์
    if (!current_user_can('edit_posts') && !current_user_can('manage_options')) {
        wp_send_json_error(array('message' => 'You do not have permission to access this data'));
    }

    // รับ ID ของเรื่องร้องเรียน
    $complaint_id = isset($_POST['id']) ? intval($_POST['id']) : 0;
    if (empty($complaint_id)) {
        wp_send_json_error(array('message' => 'Invalid complaint ID'));
    }

    // ตรวจสอบว่ามีเรื่องร้องเรียนนี้หรือไม่
    $complaint = get_post($complaint_id);
    if (!$complaint || $complaint->post_type !== 'complaint') {
        wp_send_json_error(array('message' => 'Complaint not found'));
    }

    // ดึงข้อมูลเมตา
    $type_value = get_post_meta($complaint_id, '_complaint_type', true);
    $department = get_post_meta($complaint_id, '_complaint_department', true);
    $is_anonymous = get_post_meta($complaint_id, '_is_anonymous', true);
    $ref_number = get_post_meta($complaint_id, '_complaint_ref', true);
    $due_date = get_post_meta($complaint_id, '_response_due_date', true);
    
    // ข้อมูลผู้ร้องเรียน
    $complainant = array(
        'name' => get_post_meta($complaint_id, '_complainant_name', true),
        'address' => get_post_meta($complaint_id, '_complainant_address', true),
        'phone' => get_post_meta($complaint_id, '_complainant_phone', true),
        'email' => get_post_meta($complaint_id, '_complainant_email', true)
    );
    
    // ดึงประวัติการอัพเดตสถานะ
    $status_history = get_post_meta($complaint_id, '_status_history', true);
    if (empty($status_history)) {
        $status_history = array();
    }
    
    // สร้างข้อมูลเรื่องร้องเรียน
    $complaint_data = array(
        'id' => $complaint_id,
        'ref' => $ref_number,
        'type' => get_complaint_type_label($type_value),
        'type_value' => $type_value,
        'department' => $department,
        'date' => get_the_date('Y-m-d H:i:s', $complaint_id),
        'due_date' => $due_date,
        'status' => get_post_status($complaint_id),
        'is_anonymous' => ($is_anonymous == 'yes'),
        'complainant' => ($is_anonymous == 'yes') ? null : $complainant,
        'details' => $complaint->post_content,
        'status_history' => $status_history
    );
    
    // สร้าง HTML สำหรับแสดงรายละเอียด
    ob_start();
    ?>
    <div class="complaint-detail">
        <div class="row">
            <div class="col-md-6">
                <div class="detail-item">
                    <div class="detail-label">เลขที่เรื่องร้องเรียน</div>
                    <div class="detail-value"><?php echo esc_html($complaint_data['ref']); ?></div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="detail-item">
                    <div class="detail-label">วันที่รับเรื่อง</div>
                    <div class="detail-value"><?php echo date_i18n(get_option('date_format') . ' ' . get_option('time_format'), strtotime($complaint_data['date'])); ?></div>
                </div>
            </div>
        </div>
        
        <div class="row mt-3">
            <div class="col-md-6">
                <div class="detail-item">
                    <div class="detail-label">สถานะ</div>
                    <div class="detail-value">
                        <?php 
                        $status_labels = array(
                            'pending' => 'รอดำเนินการ',
                            'in-progress' => 'กำลังดำเนินการ',
                            'completed' => 'เสร็จสิ้น',
                            'rejected' => 'ไม่รับพิจารณา',
                            'closed' => 'ปิดเรื่อง'
                        );
                        $status_colors = array(
                            'pending' => 'warning',
                            'in-progress' => 'info',
                            'completed' => 'success',
                            'rejected' => 'danger',
                            'closed' => 'secondary'
                        );
                        $status = $complaint_data['status'];
                        $status_label = isset($status_labels[$status]) ? $status_labels[$status] : $status;
                        $status_color = isset($status_colors[$status]) ? $status_colors[$status] : 'primary';
                        ?>
                        <span class="badge bg-<?php echo $status_color; ?>"><?php echo $status_label; ?></span>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="detail-item">
                    <div class="detail-label">กำหนดตอบ</div>
                    <div class="detail-value">
                        <?php 
                        if (!empty($complaint_data['due_date'])) {
                            $due_date = date_create($complaint_data['due_date']);
                            $today = date_create('now');
                            $diff = date_diff($today, $due_date);
                            $is_overdue = $due_date < $today && $status == 'pending';
                            
                            echo date_i18n(get_option('date_format'), strtotime($complaint_data['due_date']));
                            
                            if ($is_overdue) {
                                echo ' <span class="badge bg-danger">เลยกำหนด</span>';
                            } elseif ($diff->days <= 7 && $status == 'pending') {
                                echo ' <span class="badge bg-warning text-dark">ใกล้ถึงกำหนด</span>';
                            }
                        } else {
                            echo 'ไม่กำหนด';
                        }
                        ?>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row mt-3">
            <div class="col-md-6">
                <div class="detail-item">
                    <div class="detail-label">ประเภทเรื่องร้องเรียน</div>
                    <div class="detail-value"><?php echo esc_html($complaint_data['type']); ?></div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="detail-item">
                    <div class="detail-label">หน่วยงานที่ถูกร้องเรียน</div>
                    <div class="detail-value"><?php echo esc_html($complaint_data['department']); ?></div>
                </div>
            </div>
        </div>
        
        <div class="mt-4">
            <div class="detail-label">รายละเอียด</div>
            <div class="detail-content p-3 bg-light rounded">
                <?php echo nl2br(esc_html($complaint_data['details'])); ?>
            </div>
        </div>
        
        <?php if (!$complaint_data['is_anonymous'] && !empty($complaint_data['complainant'])): ?>
        <div class="mt-4">
            <h5 class="detail-section-title">ข้อมูลผู้ร้องเรียน</h5>
            <div class="complainant-info p-3 bg-light rounded">
                <div class="row">
                    <div class="col-md-6">
                        <div class="detail-item">
                            <div class="detail-label">ชื่อ-นามสกุล</div>
                            <div class="detail-value"><?php echo esc_html($complaint_data['complainant']['name']); ?></div>
                        </div>
                    </div>
                    <?php if (!empty($complaint_data['complainant']['phone'])): ?>
                    <div class="col-md-6">
                        <div class="detail-item">
                            <div class="detail-label">เบอร์โทรศัพท์</div>
                            <div class="detail-value"><?php echo esc_html($complaint_data['complainant']['phone']); ?></div>
                        </div>
                    </div>
                    <?php endif; ?>
                </div>
                
                <?php if (!empty($complaint_data['complainant']['email'])): ?>
                <div class="row mt-3">
                    <div class="col-md-6">
                        <div class="detail-item">
                            <div class="detail-label">อีเมล</div>
                            <div class="detail-value"><?php echo esc_html($complaint_data['complainant']['email']); ?></div>
                        </div>
                    </div>
                </div>
                <?php endif; ?>
                
                <?php if (!empty($complaint_data['complainant']['address'])): ?>
                <div class="row mt-3">
                    <div class="col">
                        <div class="detail-item">
                            <div class="detail-label">ที่อยู่</div>
                            <div class="detail-value"><?php echo nl2br(esc_html($complaint_data['complainant']['address'])); ?></div>
                        </div>
                    </div>
                </div>
                <?php endif; ?>
            </div>
        </div>
        <?php else: ?>
        <div class="mt-4">
            <div class="alert alert-info">
                <i class="fas fa-user-secret me-2"></i> ผู้ร้องเรียนไม่ประสงค์ออกนาม
            </div>
        </div>
        <?php endif; ?>
        
        <?php if (!empty($complaint_data['status_history'])): ?>
        <div class="mt-4">
            <h5 class="detail-section-title">ประวัติการดำเนินการ</h5>
            <div class="status-history">
                <div class="timeline">
                    <?php foreach ($complaint_data['status_history'] as $history): ?>
                    <div class="timeline-item">
                        <div class="timeline-date">
                            <?php echo date_i18n(get_option('date_format') . ' ' . get_option('time_format'), strtotime($history['date'])); ?>
                        </div>
                        <div class="timeline-status">
                            <span class="badge bg-<?php echo isset($status_colors[$history['status']]) ? $status_colors[$history['status']] : 'primary'; ?>">
                                <?php echo isset($status_labels[$history['status']]) ? $status_labels[$history['status']] : $history['status']; ?>
                            </span>
                        </div>
                        <div class="timeline-user">
                            โดย: <?php echo esc_html($history['user']); ?>
                        </div>
                        <?php if (!empty($history['note'])): ?>
                        <div class="timeline-note mt-2 p-2 bg-light rounded">
                            <?php echo nl2br(esc_html($history['note'])); ?>
                        </div>
                        <?php endif; ?>
                    </div>
                    <?php endforeach; ?>
                </div>
            </div>
        </div>
        <?php endif; ?>
    </div>
    <?php
    $html = ob_get_clean();
    
    // ส่งข้อมูลกลับ
    wp_send_json_success(array(
        'complaint' => $complaint_data,
        'html' => $html
    ));
}
add_action('wp_ajax_complaint_list_get_details', 'complaint_list_get_details');

/**
 * AJAX handler: Update complaint status
 */
function complaint_list_update_status() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'complaint_list_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
    }

    // ตรวจสอบสิทธิ์
    if (!current_user_can('edit_posts') && !current_user_can('manage_options')) {
        wp_send_json_error(array('message' => 'You do not have permission to update this data'));
    }

    // รับพารามิเตอร์
    $complaint_id = isset($_POST['id']) ? intval($_POST['id']) : 0;
    $new_status = isset($_POST['status']) ? sanitize_text_field($_POST['status']) : '';
    $note = isset($_POST['note']) ? sanitize_textarea_field($_POST['note']) : '';

    // ตรวจสอบข้อมูล
    if (empty($complaint_id) || empty($new_status)) {
        wp_send_json_error(array('message' => 'Invalid parameters'));
    }

    // ตรวจสอบว่ามีเรื่องร้องเรียนนี้หรือไม่
    $complaint = get_post($complaint_id);
    if (!$complaint || $complaint->post_type !== 'complaint') {
        wp_send_json_error(array('message' => 'Complaint not found'));
    }

    // ดึงสถานะปัจจุบัน
    $current_status = get_post_status($complaint_id);
    
    // ตรวจสอบว่าสถานะมีการเปลี่ยนแปลงหรือไม่
    if ($current_status === $new_status) {
        wp_send_json_error(array('message' => 'No status change detected'));
    }

    // อัพเดตสถานะเรื่องร้องเรียน
    $update = wp_update_post(array(
        'ID' => $complaint_id,
        'post_status' => $new_status
    ));

    if (is_wp_error($update)) {
        wp_send_json_error(array('message' => $update->get_error_message()));
    }

    // บันทึกประวัติการอัพเดตสถานะ
    $user = wp_get_current_user();
    $status_history = get_post_meta($complaint_id, '_status_history', true);
    
    if (empty($status_history)) {
        $status_history = array();
    }
    
    $status_history[] = array(
        'date' => current_time('mysql'),
        'status' => $new_status,
        'user' => $user->display_name,
        'user_id' => $user->ID,
        'note' => $note
    );
    
    update_post_meta($complaint_id, '_status_history', $status_history);
    
    // อัพเดตวันที่อัพเดตล่าสุด
    update_post_meta($complaint_id, '_last_updated', current_time('mysql'));
    update_post_meta($complaint_id, '_last_updated_by', $user->ID);
    
    // ถ้าสถานะเป็น "กำลังดำเนินการ" และไม่มีเจ้าหน้าที่รับผิดชอบ
    if ($new_status === 'in-progress' && !get_post_meta($complaint_id, '_assigned_to', true)) {
        update_post_meta($complaint_id, '_assigned_to', $user->ID);
    }
    
    // ส่งอีเมลแจ้งเตือน (ถ้าตั้งค่าไว้)
    if (get_option('complaint_email_notifications', 'yes') === 'yes') {
        $ref_number = get_post_meta($complaint_id, '_complaint_ref', true);
        $status_labels = array(
            'pending' => 'รอดำเนินการ',
            'in-progress' => 'กำลังดำเนินการ',
            'completed' => 'เสร็จสิ้น',
            'rejected' => 'ไม่รับพิจารณา',
            'closed' => 'ปิดเรื่อง'
        );
        
        $subject = sprintf('[%s] อัพเดตสถานะเรื่องร้องเรียน %s', get_bloginfo('name'), $ref_number);
        
        $message = sprintf(
            "เรื่องร้องเรียนเลขที่ %s ได้รับการอัพเดตสถานะ\n\n" .
            "สถานะใหม่: %s\n" .
            "ดำเนินการโดย: %s\n" .
            "วันเวลา: %s\n",
            $ref_number,
            isset($status_labels[$new_status]) ? $status_labels[$new_status] : $new_status,
            $user->display_name,
            date_i18n(get_option('date_format') . ' ' . get_option('time_format'))
        );
        
        if (!empty($note)) {
            $message .= sprintf("\nบันทึกเพิ่มเติม:\n%s\n", $note);
        }
        
        $message .= sprintf("\nดูรายละเอียดเพิ่มเติมได้ที่: %s", get_edit_post_link($complaint_id, 'raw'));
        
        // ส่งอีเมลไปยังผู้ดูแลระบบ
        wp_mail(get_option('admin_email'), $subject, $message);
        
        // ถ้ามีอีเมลผู้ร้องเรียนและไม่ได้ไม่ประสงค์ออกนาม
        $is_anonymous = get_post_meta($complaint_id, '_is_anonymous', true);
        $complainant_email = get_post_meta($complaint_id, '_complainant_email', true);
        
        if ($is_anonymous !== 'yes' && !empty($complainant_email)) {
            $subject = sprintf('[%s] อัพเดตสถานะเรื่องร้องเรียนของท่าน', get_bloginfo('name'));
            
            $message = sprintf(
                "เรียนท่านผู้ร้องเรียน\n\n" .
                "เรื่องร้องเรียนเลขที่ %s ของท่านได้รับการอัพเดตสถานะ\n\n" .
                "สถานะปัจจุบัน: %s\n" .
                "วันเวลา: %s\n",
                $ref_number,
                isset($status_labels[$new_status]) ? $status_labels[$new_status] : $new_status,
                date_i18n(get_option('date_format') . ' ' . get_option('time_format'))
            );
            
            if (!empty($note)) {
                $message .= sprintf("\nรายละเอียดการดำเนินการ:\n%s\n", $note);
            }
            
            $message .= sprintf("\nขอบคุณที่แจ้งเรื่องร้องเรียนมายัง %s", get_bloginfo('name'));
            
            wp_mail($complainant_email, $subject, $message);
        }
    }
    
    // ส่งข้อมูลกลับ
    wp_send_json_success(array(
        'message' => 'อัพเดตสถานะเรียบร้อยแล้ว',
        'status' => $new_status,
        'updated_by' => $user->display_name,
        'updated_date' => date_i18n(get_option('date_format') . ' ' . get_option('time_format'))
    ));
}
add_action('wp_ajax_complaint_list_update_status', 'complaint_list_update_status');

/**
 * AJAX handler: Export complaints data
 */
function complaint_list_export_data() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'complaint_list_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
    }

    // ตรวจสอบสิทธิ์
    if (!current_user_can('manage_options')) {
        wp_send_json_error(array('message' => 'You do not have permission to export this data'));
    }

    // รับพารามิเตอร์
    $status = isset($_POST['status']) ? sanitize_text_field($_POST['status']) : '';
    $type = isset($_POST['type']) ? sanitize_text_field($_POST['type']) : '';
    $date_filter = isset($_POST['date']) ? sanitize_text_field($_POST['date']) : '';

    // สร้าง query arguments
    $args = array(
        'post_type' => 'complaint',
        'posts_per_page' => -1,
        'meta_query' => array()
    );

    // กรองตามสถานะ
    if (!empty($status)) {
        $args['post_status'] = $status;
    } else {
        $args['post_status'] = array('pending', 'in-progress', 'completed', 'rejected', 'closed');
    }

    // กรองตามประเภท
    if (!empty($type)) {
        $args['meta_query'][] = array(
            'key' => '_complaint_type',
            'value' => $type,
            'compare' => '='
        );
    }

    // กรองตามวันที่
    if (!empty($date_filter)) {
        $date = new DateTime();
        switch ($date_filter) {
            case 'today':
                $args['date_query'] = array(
                    'after' => date('Y-m-d', strtotime('today'))
                );
                break;
            case 'week':
                $args['date_query'] = array(
                    'after' => date('Y-m-d', strtotime('-7 days'))
                );
                break;
            case 'month':
                $args['date_query'] = array(
                    'after' => date('Y-m-d', strtotime('-30 days'))
                );
                break;
            case 'quarter':
                $args['date_query'] = array(
                    'after' => date('Y-m-d', strtotime('-90 days'))
                );
                break;
            case 'year':
                $args['date_query'] = array(
                    'after' => date('Y-m-d', strtotime('first day of january this year')),
                    'before' => date('Y-m-d', strtotime('last day of december this year')),
                    'inclusive' => true
                );
                break;
        }
    }

    // ดึงข้อมูลเรื่องร้องเรียน
    $query = new WP_Query($args);
    $complaints = array();
    $status_labels = array(
        'pending' => 'รอดำเนินการ',
        'in-progress' => 'กำลังดำเนินการ',
        'completed' => 'เสร็จสิ้น',
        'rejected' => 'ไม่รับพิจารณา',
        'closed' => 'ปิดเรื่อง'
    );
    
    while ($query->have_posts()) {
        $query->the_post();
        $post_id = get_the_ID();
        
        // ดึงข้อมูลเมตา
        $type_value = get_post_meta($post_id, '_complaint_type', true);
        $department = get_post_meta($post_id, '_complaint_department', true);
        $is_anonymous = get_post_meta($post_id, '_is_anonymous', true);
        $complainant_name = get_post_meta($post_id, '_complainant_name', true);
        $ref_number = get_post_meta($post_id, '_complaint_ref', true);
        $details = get_post_field('post_content', $post_id);
        $due_date = get_post_meta($post_id, '_response_due_date', true);
        $status = get_post_status($post_id);
        
        // สร้างชื่อเรื่องและข้อมูลผู้ร้องเรียน
        $type_label = get_complaint_type_label($type_value);
        $complainant = ($is_anonymous == 'yes') ? 'ไม่ประสงค์ออกนาม' : $complainant_name;
        $status_label = isset($status_labels[$status]) ? $status_labels[$status] : $status;
        
        // จัดเตรียมข้อมูลสำหรับส่งออก
        $complaints[] = array(
            'ref' => $ref_number,
            'date' => get_the_date('Y-m-d H:i:s'),
            'type' => $type_label,
            'department' => $department,
            'complainant' => $complainant,
            'details' => $details,
            'status' => $status_label,
            'due_date' => $due_date ? date('Y-m-d', strtotime($due_date)) : ''
        );
    }
    
    wp_reset_postdata();
    
    // สร้างข้อมูล CSV
    $csv_data = array();
    $headers = array(
        'เลขที่',
        'วันที่รับเรื่อง',
        'ประเภท',
        'หน่วยงาน',
        'ผู้ร้องเรียน',
        'รายละเอียด',
        'สถานะ',
        'กำหนดตอบ'
    );
    
    $csv_data[] = implode(',', array_map('complaint_list_csv_escape', $headers));
    
    foreach ($complaints as $complaint) {
        $row = array(
            $complaint['ref'],
            $complaint['date'],
            $complaint['type'],
            $complaint['department'],
            $complaint['complainant'],
            $complaint['details'],
            $complaint['status'],
            $complaint['due_date']
        );
        
        $csv_data[] = implode(',', array_map('complaint_list_csv_escape', $row));
    }
    
    $csv_content = implode("\n", $csv_data);
    
    // ส่งข้อมูลกลับ
    wp_send_json_success(array(
        'csv' => $csv_content,
        'filename' => 'complaints-export-' . date('Y-m-d') . '.csv',
        'count' => count($complaints)
    ));
}
add_action('wp_ajax_complaint_list_export_data', 'complaint_list_export_data');

/**
 * Helper: Escape CSV values
 */
function complaint_list_csv_escape($value) {
    $value = str_replace('"', '""', $value);
    $value = preg_replace('/[\r\n]+/', ' ', $value);
    return '"' . $value . '"';
}


/****** สถิติเรื่องร้องเรียน (Complaint Statistics) ********/

// Enqueue necessary scripts and styles for complaint statistics
function complaint_stats_enqueue_scripts() {
    // ตรวจสอบว่าหน้าปัจจุบันมี shortcode [complaint_stats] หรือไม่
    global $post;
    if (!is_a($post, 'WP_Post') || !has_shortcode($post->post_content, 'complaint_stats')) {
        return;
    }

    // ตรวจสอบสิทธิ์การเข้าถึง
    if (!current_user_can('edit_posts') && !current_user_can('manage_options')) {
        return;
    }

    // กำหนดค่าคงที่สำหรับ version ของไลบรารี
    define('CST_BOOTSTRAP_VERSION', '5.3.0');
    define('CST_HIGHCHARTS_VERSION', '11.3.0');
    define('CST_XLSX_VERSION', '0.18.0');

    // Enqueue Bootstrap CSS and JS
    wp_enqueue_style(
        'complaint-stats-bootstrap',
        "https://cdn.jsdelivr.net/npm/bootstrap@" . CST_BOOTSTRAP_VERSION . "/dist/css/bootstrap.min.css",
        array(),
        CST_BOOTSTRAP_VERSION
    );
    
    wp_enqueue_script(
        'complaint-stats-bootstrap',
        "https://cdn.jsdelivr.net/npm/bootstrap@" . CST_BOOTSTRAP_VERSION . "/dist/js/bootstrap.bundle.min.js",
        array('jquery'),
        CST_BOOTSTRAP_VERSION,
        true
    );

    // Enqueue Highcharts core
    wp_enqueue_script(
        'complaint-stats-highcharts',
        "https://cdn.jsdelivr.net/npm/highcharts@" . CST_HIGHCHARTS_VERSION . "/highcharts.js",
        array('jquery'),
        CST_HIGHCHARTS_VERSION,
        true
    );

    // Enqueue Highcharts modules
    wp_enqueue_script(
        'complaint-stats-exporting',
        "https://cdn.jsdelivr.net/npm/highcharts@" . CST_HIGHCHARTS_VERSION . "/modules/exporting.js",
        array('complaint-stats-highcharts'),
        CST_HIGHCHARTS_VERSION,
        true
    );

    wp_enqueue_script(
        'complaint-stats-export-data',
        "https://cdn.jsdelivr.net/npm/highcharts@" . CST_HIGHCHARTS_VERSION . "/modules/export-data.js",
        array('complaint-stats-highcharts', 'complaint-stats-exporting'),
        CST_HIGHCHARTS_VERSION,
        true
    );

    // Enqueue XLSX library
    wp_enqueue_script(
        'complaint-stats-xlsx',
        "https://cdn.jsdelivr.net/npm/xlsx@" . CST_XLSX_VERSION . "/dist/xlsx.full.min.js",
        array(),
        CST_XLSX_VERSION,
        true
    );

    // Enqueue Custom CSS and JS
    wp_enqueue_style(
        'complaint-stats-style',
        get_stylesheet_directory_uri() . '/css/complaint-stats.css',
        array('complaint-stats-bootstrap'),
        filemtime(get_stylesheet_directory() . '/css/complaint-stats.css')
    );
    
    wp_enqueue_script(
        'complaint-stats-script',
        get_stylesheet_directory_uri() . '/js/complaint-stats.js',
        array('jquery', 'complaint-stats-bootstrap', 'complaint-stats-highcharts', 'complaint-stats-exporting', 'complaint-stats-export-data', 'complaint-stats-xlsx'),
        filemtime(get_stylesheet_directory() . '/js/complaint-stats.js'),
        true
    );

    // Localize script สำหรับใช้ใน JavaScript
    wp_localize_script(
        'complaint-stats-script',
        'complaintStatsData',
        array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('complaint_stats_nonce'),
            'status_labels' => array(
                'pending' => 'รอดำเนินการ',
                'in-progress' => 'กำลังดำเนินการ',
                'completed' => 'เสร็จสิ้น',
                'rejected' => 'ไม่รับพิจารณา',
                'closed' => 'ปิดเรื่อง'
            ),
            'status_colors' => array(
                'pending' => 'warning',
                'in-progress' => 'info',
                'completed' => 'success',
                'rejected' => 'danger',
                'closed' => 'secondary'
            ),
            'messages' => array(
                'loading' => 'กำลังโหลดข้อมูล...',
                'error' => 'เกิดข้อผิดพลาด กรุณาลองใหม่อีกครั้ง',
                'no_data' => 'ไม่พบข้อมูล',
                'export_success' => 'ส่งออกข้อมูลเรียบร้อยแล้ว'
            ),
            'date_format' => get_option('date_format')
        )
    );
}
add_action('wp_enqueue_scripts', 'complaint_stats_enqueue_scripts');

// Create shortcode for complaint statistics
function complaint_stats_shortcode() {
    if (!current_user_can('edit_posts') && !current_user_can('manage_options')) {
        return '<div class="alert alert-danger"><i class="fas fa-exclamation-triangle me-2"></i>ขออภัย คุณไม่มีสิทธิ์เข้าถึงหน้านี้</div>';
    }

    ob_start();
    ?>
    <div class="complaint-stats-container">
        <!-- ส่วนหัว -->
        <div class="stats-header mb-4">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h2 class="stats-title"><i class="fas fa-chart-bar me-2"></i>สถิติเรื่องร้องเรียน</h2>
                </div>
                <?php if (current_user_can('manage_options')): ?>
                <div class="col-md-6 text-md-end">
                    <button id="export-excel-btn" class="btn btn-success">
                        <i class="fas fa-file-excel me-1"></i> ส่งออกข้อมูล Excel
                    </button>
                </div>
                <?php endif; ?>
            </div>
        </div>

        <!-- แสดงการแจ้งเตือน -->
        <div id="stats-alert" class="alert d-none mb-4" role="alert"></div>

        <!-- ส่วนตัวกรอง -->
        <div class="stats-filters mb-4">
            <div class="card">
                <div class="card-header bg-primary bg-opacity-10">
                    <h3 class="section-title mb-0">ตัวกรองข้อมูล</h3>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label for="period-filter" class="form-label">ช่วงเวลา</label>
                            <select id="period-filter" class="form-select">
                                <option value="monthly">รายเดือน</option>
                                <option value="yearly">รายปี</option>
                                <option value="daily">รายวัน</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label for="date-start" class="form-label">ตั้งแต่วันที่</label>
                            <input type="date" id="date-start" class="form-control">
                        </div>
                        <div class="col-md-4">
                            <label for="date-end" class="form-label">ถึงวันที่</label>
                            <input type="date" id="date-end" class="form-control">
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-12 text-end">
                            <button id="apply-stats-filters" class="btn btn-primary">
                                <i class="fas fa-filter me-1"></i> กรองข้อมูล
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ภาพรวมสถิติ -->
        <div class="stats-summary mb-4">
            <div class="row g-3">
                <div class="col-md-4">
                    <div class="stats-card total-complaints">
                        <div class="card h-100">
                            <div class="card-body">
                                <h3 class="card-title text-primary">เรื่องร้องเรียนทั้งหมด</h3>
                                <div class="stats-number" id="total-complaints">0</div>
                                <div class="stats-subtitle">เรื่อง</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="stats-card daily-average">
                        <div class="card h-100">
                            <div class="card-body">
                                <h3 class="card-title text-success">ค่าเฉลี่ยต่อวัน</h3>
                                <div class="stats-number" id="daily-average">0</div>
                                <div class="stats-subtitle">เรื่อง/วัน</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="stats-card active-complaints">
                        <div class="card h-100">
                            <div class="card-body">
                                <h3 class="card-title text-warning">อยู่ระหว่างดำเนินการ</h3>
                                <div class="stats-number" id="active-complaints">0</div>
                                <div class="stats-subtitle">เรื่อง</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- สถานะเรื่องร้องเรียน -->
        <div class="stats-detail-cards mb-4">
            <div class="card">
                <div class="card-header bg-primary bg-opacity-10">
                    <h3 class="section-title mb-0">สถานะเรื่องร้องเรียน</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-5">
                            <div id="complaints-by-status"></div>
                        </div>
                        <div class="col-md-7">
                            <div id="status-stats" class="h-100 d-flex align-items-center"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- แผนภูมิสถิติ -->
        <div class="stats-charts mb-4">
            <div class="row g-3">
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-header bg-primary bg-opacity-10">
                            <h3 class="section-title mb-0">สถิติตามประเภทเรื่องร้องเรียน</h3>
                        </div>
                        <div class="card-body">
                            <div id="complaints-by-type" class="chart-container"></div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card h-100">
                        <div class="card-header bg-primary bg-opacity-10">
                            <h3 class="section-title mb-0">สถิติตามหน่วยงาน</h3>
                        </div>
                        <div class="card-body">
                            <div id="complaints-by-department" class="chart-container"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- แนวโน้มเรื่องร้องเรียน -->
        <div class="stats-trend mb-4">
            <div class="card">
                <div class="card-header bg-primary bg-opacity-10">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3 class="section-title mb-0">แนวโน้มเรื่องร้องเรียนตามช่วงเวลา</h3>
                        <div class="trend-filters">
                            <select id="trend-status-filter" class="form-select form-select-sm">
                                <option value="all">ทุกสถานะ</option>
                                <option value="pending">รอดำเนินการ</option>
                                <option value="in-progress">กำลังดำเนินการ</option>
                                <option value="completed">เสร็จสิ้น</option>
                                <option value="rejected">ไม่รับพิจารณา</option>
                                <option value="closed">ปิดเรื่อง</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div id="complaints-trend" class="chart-container"></div>
                </div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('complaint_stats', 'complaint_stats_shortcode');

// AJAX handler for getting complaint statistics
function get_complaint_statistics() {
    check_ajax_referer('complaint_stats_nonce', 'nonce');
    
    if (!current_user_can('edit_posts') && !current_user_can('manage_options')) {
        wp_send_json_error(array('message' => 'ไม่มีสิทธิ์เข้าถึง'));
        return;
    }

    $period = isset($_POST['period']) ? sanitize_text_field($_POST['period']) : 'monthly';
    $start_date = isset($_POST['start_date']) ? sanitize_text_field($_POST['start_date']) : '';
    $end_date = isset($_POST['end_date']) ? sanitize_text_field($_POST['end_date']) : '';

    // กำหนดค่าเริ่มต้นหากไม่ได้ระบุวันที่
    if (empty($start_date)) {
        $start_date = date('Y-m-d', strtotime('-30 days'));
    }
    if (empty($end_date)) {
        $end_date = date('Y-m-d');
    }

    // Query arguments
    $args = array(
        'post_type' => 'complaint',
        'posts_per_page' => -1,
        'post_status' => array('pending', 'in-progress', 'completed', 'rejected', 'closed'),
        'date_query' => array(
            'inclusive' => true
        )
    );

    if (!empty($start_date)) {
        $args['date_query']['after'] = $start_date . ' 00:00:00';
    }
    if (!empty($end_date)) {
        $args['date_query']['before'] = $end_date . ' 23:59:59';
    }

    $query = new WP_Query($args);
    $complaints = $query->posts;

    // Initialize statistics arrays
    $stats = array(
        'total' => count($complaints),
        'by_type' => array(),
        'by_department' => array(),
        'by_status' => array(
            'pending' => 0,
            'in-progress' => 0,
            'completed' => 0,
            'rejected' => 0,
            'closed' => 0
        ),
        'trend' => array(),
        'active_complaints' => 0  // เรื่องที่ยังอยู่ระหว่างดำเนินการ (pending + in-progress)
    );

    // คำนวณวันเพื่อหาค่าเฉลี่ยต่อวัน
    $date1 = new DateTime($start_date);
    $date2 = new DateTime($end_date);
    $date_diff = $date2->diff($date1)->days + 1;
    $stats['daily_average'] = $date_diff > 0 ? $stats['total'] / $date_diff : 0;

    // Initialize trend data structure
    $trend_data = array();
    foreach ($stats['by_status'] as $status => $count) {
        $trend_data[$status] = array();
    }
    
    // กำหนดช่วงเวลาสำหรับแนวโน้ม
    $period_format = 'Y-m-d';
    switch ($period) {
        case 'yearly':
            $period_format = 'Y';
            break;
        case 'monthly':
            $period_format = 'Y-m';
            break;
        case 'daily':
            $period_format = 'Y-m-d';
            break;
    }
    
    // สร้างข้อมูลช่วงเวลาล่วงหน้า
    $period_labels = array();
    $current_date = clone $date1;
    
    while ($current_date <= $date2) {
        $period_key = $current_date->format($period_format);
        $period_labels[$period_key] = true;
        
        // เพิ่มวันตามประเภทช่วงเวลา
        switch ($period) {
            case 'yearly':
                $current_date->modify('+1 year');
                break;
            case 'monthly':
                $current_date->modify('+1 month');
                break;
            case 'daily':
                $current_date->modify('+1 day');
                break;
        }
    }
    
    // เตรียมโครงสร้างข้อมูลแนวโน้มด้วยช่วงเวลาที่สร้างไว้
    foreach ($stats['by_status'] as $status => $count) {
        foreach (array_keys($period_labels) as $period_key) {
            $trend_data[$status][$period_key] = 0;
        }
    }

    // Process each complaint
    foreach ($complaints as $complaint) {
        // Count by type
        $type = get_post_meta($complaint->ID, '_complaint_type', true);
        $type_label = get_complaint_type_label($type);
        if (!isset($stats['by_type'][$type_label])) {
            $stats['by_type'][$type_label] = 0;
        }
        $stats['by_type'][$type_label]++;

        // Count by department
        $department = get_post_meta($complaint->ID, '_complaint_department', true);
        if (!isset($stats['by_department'][$department])) {
            $stats['by_department'][$department] = 0;
        }
        $stats['by_department'][$department]++;

        // Count by status
        $status = get_post_status($complaint->ID);
        if (isset($stats['by_status'][$status])) {
            $stats['by_status'][$status]++;
        }
        
        // Count active complaints
        if ($status === 'pending' || $status === 'in-progress') {
            $stats['active_complaints']++;
        }

        // Process trend data
        $date = new DateTime($complaint->post_date);
        $period_key = $date->format($period_format);
        
        if (isset($trend_data[$status][$period_key])) {
            $trend_data[$status][$period_key]++;
        }
    }

    // Format trend data for each status
    $formatted_trend = array();
    foreach ($trend_data as $status => $periods) {
        ksort($periods); // Sort by date
        $trend_series = array();
        foreach ($periods as $date => $count) {
            $label = $date;
            if ($period === 'monthly') {
                $date_obj = DateTime::createFromFormat('Y-m', $date);
                if ($date_obj) {
                    $label = $date_obj->format('M Y');
                }
            } elseif ($period === 'daily') {
                $date_obj = DateTime::createFromFormat('Y-m-d', $date);
                if ($date_obj) {
                    $label = $date_obj->format('d M Y');
                }
            }
            $trend_series[] = array(
                'period' => $label,
                'count' => $count
            );
        }
        $formatted_trend[$status] = $trend_series;
    }

    $stats['trend'] = $formatted_trend;

    wp_send_json_success($stats);
}
add_action('wp_ajax_get_complaint_statistics', 'get_complaint_statistics');

// Export complaint data to Excel
function export_complaint_data() {
    check_ajax_referer('complaint_stats_nonce', 'nonce');
    
    if (!current_user_can('manage_options')) {
        wp_send_json_error(array('message' => 'ไม่มีสิทธิ์เข้าถึง'));
        return;
    }

    $start_date = isset($_POST['start_date']) ? sanitize_text_field($_POST['start_date']) : '';
    $end_date = isset($_POST['end_date']) ? sanitize_text_field($_POST['end_date']) : '';

    // กำหนดค่าเริ่มต้นหากไม่ได้ระบุวันที่
    if (empty($start_date)) {
        $start_date = date('Y-m-d', strtotime('-30 days'));
    }
    if (empty($end_date)) {
        $end_date = date('Y-m-d');
    }

    // Query arguments
    $args = array(
        'post_type' => 'complaint',
        'posts_per_page' => -1,
        'post_status' => array('pending', 'in-progress', 'completed', 'rejected', 'closed'),
        'date_query' => array(
            'inclusive' => true
        )
    );

    if (!empty($start_date)) {
        $args['date_query']['after'] = $start_date . ' 00:00:00';
    }
    if (!empty($end_date)) {
        $args['date_query']['before'] = $end_date . ' 23:59:59';
    }

    $query = new WP_Query($args);
    $complaints = $query->posts;

    // สร้างข้อมูลสำหรับส่งออก
    $export_data = array();
    $export_data[] = array(
        'เลขที่',
        'วันที่รับเรื่อง',
        'ประเภท',
        'หน่วยงาน',
        'รายละเอียด',
        'ผู้ร้องเรียน',
        'สถานะ',
        'กำหนดตอบ',
        'วันที่อัพเดตล่าสุด',
        'ผู้ดำเนินการ'
    );

    // ข้อมูลสถานะ
    $status_labels = array(
        'pending' => 'รอดำเนินการ',
        'in-progress' => 'กำลังดำเนินการ',
        'completed' => 'เสร็จสิ้น',
        'rejected' => 'ไม่รับพิจารณา',
        'closed' => 'ปิดเรื่อง'
    );

    foreach ($complaints as $complaint) {
        $type = get_post_meta($complaint->ID, '_complaint_type', true);
        $department = get_post_meta($complaint->ID, '_complaint_department', true);
        $ref_number = get_post_meta($complaint->ID, '_complaint_ref', true);
        $is_anonymous = get_post_meta($complaint->ID, '_is_anonymous', true);
        $complainant_name = $is_anonymous == 'yes' ? 'ไม่ประสงค์ออกนาม' : get_post_meta($complaint->ID, '_complainant_name', true);
        $due_date = get_post_meta($complaint->ID, '_response_due_date', true);
        $last_updated = get_post_meta($complaint->ID, '_last_updated', true);
        $last_updated_by = get_post_meta($complaint->ID, '_last_updated_by', true);
        $user_info = get_userdata($last_updated_by);
        $handler_name = $user_info ? $user_info->display_name : '';
        $status = get_post_status($complaint->ID);
        $status_label = isset($status_labels[$status]) ? $status_labels[$status] : $status;
        
        $export_data[] = array(
            $ref_number,
            get_the_date('Y-m-d H:i:s', $complaint->ID),
            get_complaint_type_label($type),
            $department,
            wp_strip_all_tags($complaint->post_content),
            $complainant_name,
            $status_label,
            $due_date ? date('Y-m-d', strtotime($due_date)) : '',
            $last_updated ? date('Y-m-d H:i:s', strtotime($last_updated)) : '',
            $handler_name
        );
    }

    wp_send_json_success(array(
        'data' => $export_data,
        'filename' => 'complaint-stats-' . date('Y-m-d') . '.xlsx',
        'count' => count($complaints)
    ));
}
add_action('wp_ajax_export_complaint_data', 'export_complaint_data');


/**** ปฏิทินงาน ******/

function thai_calendar_shortcode() {
    // Enqueue styles and scripts
    wp_enqueue_style('thai-calendar-style', get_stylesheet_directory_uri() . '/css/thai-calendar.css');
    wp_enqueue_script('thai-calendar-script', get_stylesheet_directory_uri() . '/js/thai-calendar.js', array('jquery'), '', true);
    
    // Add localized script data
    wp_localize_script('thai-calendar-script', 'thaiCalendarData', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('thai-calendar-nonce'),
        'months' => array(
            'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
            'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'
        ),
        'weekdays' => array('อา', 'จ', 'อ', 'พ', 'พฤ', 'ศ', 'ส')
    ));

    ob_start();
    ?>
    <div class="thai-calendar-wrapper">
        <div class="calendar-header">
            <button class="nav-btn prev-month" aria-label="เดือนก่อนหน้า">&lt;</button>
            <h2 class="current-month-year"></h2>
            <button class="nav-btn next-month" aria-label="เดือนถัดไป">&gt;</button>
        </div>
        <div class="calendar-body">
            <div class="weekdays">
                <?php
                $weekdays = array('อา', 'จ', 'อ', 'พ', 'พฤ', 'ศ', 'ส');
                foreach ($weekdays as $day) {
                    echo "<div>$day</div>";
                }
                ?>
            </div>
            <div class="days-grid"></div>
        </div>
        <div class="event-popup">
            <div class="popup-content">
                <div class="popup-header">
                    <h3>รายการ</h3>
                    <button class="close-popup" aria-label="ปิด">&times;</button>
                </div>
                <div class="popup-date-display"></div>
                <div class="popup-body">
                    <div class="posts-list-wrapper">
                        <ul class="posts-list"></ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('thai_calendar', 'thai_calendar_shortcode');

// Ajax handler for fetching posts
function get_calendar_posts() {
    check_ajax_referer('thai-calendar-nonce', 'nonce');
    
    $year = isset($_POST['year']) ? intval($_POST['year']) : date('Y');
    $month = isset($_POST['month']) ? intval($_POST['month']) : date('m');
    
    // Convert to Buddhist year for display
    $buddhist_year = $year + 543;
    
    $post_types = array('egp', 'mpeople', 'article', 'complaint');
    $posts_by_date = array();
    
    foreach ($post_types as $post_type) {
        $args = array(
            'post_type' => $post_type,
            'posts_per_page' => -1,
            'post_status' => 'publish',
            'date_query' => array(
                array(
                    'year' => $year,
                    'month' => $month,
                ),
            ),
            'orderby' => 'date',
            'order' => 'ASC'
        );
        
        $query = new WP_Query($args);
        
        if ($query->have_posts()) {
            while ($query->have_posts()) {
                $query->the_post();
                $post_date = get_the_date('Y-m-d');
                
                if (!isset($posts_by_date[$post_date])) {
                    $posts_by_date[$post_date] = array(
                        'preview' => array(),
                        'all' => array()
                    );
                }
                
                $post_data = array(
                    'id' => get_the_ID(),
                    'title' => get_the_title(),
                    'url' => get_permalink(),
                    'type' => $post_type,
                    'excerpt' => get_the_excerpt(),
                    'date' => get_the_date('d F Y'),
                    'time' => get_the_time('H:i')
                );

                // เพิ่มข้อมูลลงในทั้งสองส่วน
                $posts_by_date[$post_date]['all'][] = $post_data;
                
                // เพิ่มลงใน preview ถ้ายังไม่เกิน 4 รายการ
                if (count($posts_by_date[$post_date]['preview']) < 4) {
                    $posts_by_date[$post_date]['preview'][] = $post_data;
                }
            }
        }
        wp_reset_postdata();
    }
    
    $response = array(
        'success' => true,
        'posts' => $posts_by_date,
        'month_info' => array(
            'year' => $year,
            'buddhist_year' => $buddhist_year,
            'month' => $month,
            'days_in_month' => date('t', strtotime("$year-$month-01")),
            'first_day' => date('w', strtotime("$year-$month-01"))
        )
    );
    
    wp_send_json($response);
}
add_action('wp_ajax_get_calendar_posts', 'get_calendar_posts');
add_action('wp_ajax_nopriv_get_calendar_posts', 'get_calendar_posts');





/***** ฟังก์ชั่นสร้าง Wordprss role ใหม่ *******/

/**
 * Department Role Manager
 * ระบบจัดการบทบาทและสิทธิ์แผนกต่างๆ สำหรับ WordPress
 */

// ป้องกันการเข้าถึงไฟล์โดยตรง
if (!defined('ABSPATH')) {
    exit;
}

/**
 * 1. ส่วนการลงทะเบียน Scripts และ Styles
 */
function init_department_role_manager() {
    // กำหนดเส้นทางของธีมลูก
    $child_theme_path = get_stylesheet_directory();
    $child_theme_uri = get_stylesheet_directory_uri();

    // ตรวจสอบและลงทะเบียน JavaScript
    $js_path = $child_theme_path . '/js/department-role.js';
    if (file_exists($js_path)) {
        wp_register_script(
            'department-role-script',
            $child_theme_uri . '/js/department-role.js',
            array('jquery'),
            '1.0.1',
            true
        );

        // เพิ่ม localization
        wp_localize_script(
            'department-role-script',
            'departmentAjax',
            array(
                'ajaxurl' => admin_url('admin-ajax.php'),
                'nonce' => wp_create_nonce('department_role_nonce'),
                'messages' => array(
                    'confirmDelete' => 'คุณแน่ใจหรือไม่ที่จะลบบทบาทนี้?',
                    'defaultRoleError' => 'ไม่สามารถดำเนินการกับบทบาทเริ่มต้นได้',
                    'roleExistsError' => 'ชื่อบทบาทนี้มีอยู่แล้ว',
                    'generalError' => 'เกิดข้อผิดพลาด กรุณาลองใหม่อีกครั้ง',
                    'permissionSaved' => 'บันทึกการตั้งค่าสิทธิ์เรียบร้อยแล้ว'
                )
            )
        );
    } else {
        error_log('Department Role Manager: ไม่พบไฟล์ JavaScript ในธีมลูก');
    }

    // ตรวจสอบและลงทะเบียน CSS
    $css_path = $child_theme_path . '/css/department-role.css';
    if (file_exists($css_path)) {
        wp_register_style(
            'department-role-styles',
            $child_theme_uri . '/css/department-role.css',
            array(),
            '1.0.1'
        );
    } else {
        error_log('Department Role Manager: ไม่พบไฟล์ CSS ในธีมลูก');
    }
    
    // ทำให้แน่ใจว่า Dashicons ถูกโหลดในส่วน frontend
    add_action('wp_enqueue_scripts', 'enqueue_dashicons_front');
}
add_action('init', 'init_department_role_manager');

/**
 * โหลด Dashicons สำหรับส่วน Frontend
 */
function enqueue_dashicons_front() {
    wp_enqueue_style('dashicons');
}

/**
 * โหลด scripts และ styles เมื่อมี shortcode
 */
function enqueue_role_manager_scripts() {
    global $post;
    
    if ($post && (
        has_shortcode($post->post_content, 'department_role_manager') || 
        has_shortcode($post->post_content, 'department_role_table_manager')
    )) {
        // โหลด JavaScript ถ้ามีการลงทะเบียน
        if (wp_script_is('department-role-script', 'registered')) {
            wp_enqueue_script('department-role-script');
        }
        
        // โหลด CSS ถ้ามีการลงทะเบียน
        if (wp_style_is('department-role-styles', 'registered')) {
            wp_enqueue_style('department-role-styles');
        }
    }
}
add_action('wp_enqueue_scripts', 'enqueue_role_manager_scripts');

/**
 * 2. ส่วนของ AJAX Handlers
 */

/**
 * AJAX handler สำหรับสร้างบทบาทแผนกใหม่
 */
function create_department_role_ajax() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_nonce')) {
        wp_send_json_error(['message' => 'รหัสความปลอดภัยไม่ถูกต้อง']);
    }

    // ตรวจสอบสิทธิ์ของผู้ใช้
    if (!current_user_can('manage_options')) {
        wp_send_json_error(['message' => 'คุณไม่มีสิทธิ์ในการดำเนินการนี้']);
    }

    // ตรวจสอบและทำความสะอาดชื่อแผนก
    if (!isset($_POST['department_name']) || empty($_POST['department_name'])) {
        wp_send_json_error(['message' => 'กรุณาระบุชื่อบทบาท']);
    }

    $department_name = sanitize_text_field($_POST['department_name']);
    
    // ตรวจสอบว่ามีบทบาทนี้อยู่แล้วหรือไม่
    if (get_role($department_name)) {
        wp_send_json_error(['message' => 'ชื่อบทบาทนี้มีอยู่แล้ว กรุณาใช้ชื่ออื่น']);
    }

    // เพิ่มบทบาทใหม่ โดยคัดลอกสิทธิ์จากบทบาท contributor
    $contributor_role = get_role('contributor');
    $capabilities = $contributor_role ? $contributor_role->capabilities : [];
    
    // สร้างบทบาทใหม่
    $result = add_role($department_name, $department_name, $capabilities);
    
    if ($result) {
        wp_send_json_success(['message' => 'สร้างบทบาทใหม่เรียบร้อยแล้ว']);
    } else {
        wp_send_json_error(['message' => 'ไม่สามารถสร้างบทบาท กรุณาลองใหม่อีกครั้ง']);
    }
}
add_action('wp_ajax_create_department_role', 'create_department_role_ajax');

/**
 * AJAX handler สำหรับลบบทบาท
 */
function delete_role_ajax() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_nonce')) {
        wp_send_json_error(['message' => 'รหัสความปลอดภัยไม่ถูกต้อง']);
    }

    // ตรวจสอบสิทธิ์ของผู้ใช้
    if (!current_user_can('manage_options')) {
        wp_send_json_error(['message' => 'คุณไม่มีสิทธิ์ในการดำเนินการนี้']);
    }

    // ตรวจสอบและทำความสะอาดชื่อบทบาท
    if (!isset($_POST['role']) || empty($_POST['role'])) {
        wp_send_json_error(['message' => 'กรุณาระบุบทบาทที่ต้องการลบ']);
    }

    $role = sanitize_text_field($_POST['role']);
    
    // ตรวจสอบว่าเป็นบทบาทเริ่มต้นของ WordPress หรือไม่
    $default_roles = ['administrator', 'editor', 'author', 'contributor', 'subscriber'];
    if (in_array($role, $default_roles)) {
        wp_send_json_error(['message' => 'ไม่สามารถลบบทบาทเริ่มต้นของ WordPress ได้']);
    }
    
    // ตรวจสอบว่ามีผู้ใช้ที่มีบทบาทนี้หรือไม่
    $users_with_role = count_users();
    
    if (isset($users_with_role['avail_roles'][$role]) && $users_with_role['avail_roles'][$role] > 0) {
        // มีผู้ใช้ที่มีบทบาทนี้ ให้เปลี่ยนบทบาทของพวกเขาเป็น subscriber
        $users = get_users(['role' => $role]);
        
        foreach ($users as $user) {
            $user->remove_role($role);
            $user->add_role('subscriber');
        }
    }
    
    // ลบบทบาท
    remove_role($role);
    
    wp_send_json_success(['message' => 'ลบบทบาทเรียบร้อยแล้ว ผู้ใช้ทั้งหมดที่มีบทบาทนี้ได้ถูกเปลี่ยนเป็น Subscriber']);
}
add_action('wp_ajax_delete_role', 'delete_role_ajax');

/**
 * AJAX handler สำหรับแก้ไขบทบาทและจัดการสิทธิ์
 */
function edit_role_ajax() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_nonce')) {
        wp_send_json_error(['message' => 'รหัสความปลอดภัยไม่ถูกต้อง']);
    }

    // ตรวจสอบสิทธิ์ของผู้ใช้
    if (!current_user_can('manage_options')) {
        wp_send_json_error(['message' => 'คุณไม่มีสิทธิ์ในการดำเนินการนี้']);
    }

    // ตรวจสอบข้อมูลที่จำเป็น
    if (!isset($_POST['old_role']) || !isset($_POST['new_role'])) {
        wp_send_json_error(['message' => 'ข้อมูลบทบาทไม่ครบถ้วน']);
    }

    $old_role = sanitize_text_field($_POST['old_role']);
    $new_role = sanitize_text_field($_POST['new_role']);
    
    // ดึงข้อมูลสิทธิ์ต่างๆ
    $post_type_permissions = isset($_POST['post_type_permissions']) ? $_POST['post_type_permissions'] : [];
    $field_permissions = isset($_POST['field_permissions']) ? $_POST['field_permissions'] : [];
    $field_group_permissions = isset($_POST['field_group_permissions']) ? $_POST['field_group_permissions'] : [];
    $taxonomy_permissions = isset($_POST['taxonomy_permissions']) ? $_POST['taxonomy_permissions'] : [];

    // ตรวจสอบว่าเป็นบทบาทเริ่มต้นของ WordPress หรือไม่
    if (in_array($old_role, ['administrator', 'editor', 'author', 'contributor', 'subscriber'])) {
        wp_send_json_error(['message' => 'ไม่สามารถแก้ไขบทบาทเริ่มต้นของ WordPress ได้']);
    }

    // ตรวจสอบว่าชื่อบทบาทใหม่ซ้ำกับที่มีอยู่หรือไม่
    if ($old_role !== $new_role && get_role($new_role)) {
        wp_send_json_error(['message' => 'ชื่อบทบาทนี้มีอยู่แล้ว']);
    }

    if ($old_role === $new_role) {
        // อัปเดตเฉพาะสิทธิ์
        $role_obj = get_role($old_role);
        
        if ($role_obj) {
            // อัปเดตสิทธิ์ทั้งหมด
            update_post_type_capabilities($role_obj, $post_type_permissions);
            update_field_capabilities($role_obj, $field_permissions);
            update_field_group_capabilities($role_obj, $field_group_permissions);
            update_taxonomy_capabilities($role_obj, $taxonomy_permissions);
            
            wp_send_json_success(['message' => 'บทบาทได้รับการอัปเดตเรียบร้อยแล้ว']);
        } else {
            wp_send_json_error(['message' => 'ไม่พบบทบาทที่ระบุ']);
        }
    } else {
        // สร้างบทบาทใหม่ด้วยสิทธิ์เดิม
        $old_role_obj = get_role($old_role);
        
        if ($old_role_obj) {
            $caps = $old_role_obj->capabilities;
            
            // ลบบทบาทเก่า
            remove_role($old_role);
            
            // สร้างบทบาทใหม่
            add_role($new_role, $new_role, $caps);
            
            // อัปเดตสิทธิ์ทั้งหมด
            $new_role_obj = get_role($new_role);
            update_post_type_capabilities($new_role_obj, $post_type_permissions);
            update_field_capabilities($new_role_obj, $field_permissions);
            update_field_group_capabilities($new_role_obj, $field_group_permissions);
            update_taxonomy_capabilities($new_role_obj, $taxonomy_permissions);
            
            wp_send_json_success(['message' => 'บทบาทได้รับการอัปเดตเรียบร้อยแล้ว']);
        } else {
            wp_send_json_error(['message' => 'ไม่พบบทบาทที่ระบุ']);
        }
    }
}
add_action('wp_ajax_edit_role', 'edit_role_ajax');

/**
 * AJAX handler สำหรับดึงข้อมูลตารางบทบาททั้งหมด
 */
function get_roles_table_ajax() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_nonce')) {
        wp_send_json_error(['message' => 'รหัสความปลอดภัยไม่ถูกต้อง']);
    }
    
    // ตรวจสอบว่าผู้ใช้มีสิทธิ์ในการดูข้อมูล
    if (!is_user_logged_in()) {
        wp_send_json_error(['message' => 'กรุณาเข้าสู่ระบบ']);
    }
    
    // นับจำนวนผู้ใช้ทั้งหมด
    $users_count = count_users();
    $all_roles = get_editable_roles();
    $default_roles = ['administrator', 'editor', 'author', 'contributor', 'subscriber'];
    
    // ดึงข้อมูลผู้ใช้ปัจจุบัน
    $current_user = wp_get_current_user();
    $is_admin = current_user_can('manage_options');
    $current_user_roles = $current_user->roles;
    
    ob_start();
    ?>
    <table class="roles-table">
        <thead>
            <tr>
                <th>ชื่อบทบาท</th>
                <th>จำนวนผู้ใช้</th>
                <th>การดำเนินการ</th>
            </tr>
        </thead>
        <tbody>
            <?php 
            // แสดงบทบาทเริ่มต้นก่อน
            foreach ($default_roles as $role_name) : 
                if (isset($all_roles[$role_name])) :
                    // ข้ามถ้าไม่ใช่ admin และไม่ใช่บทบาทของผู้ใช้ปัจจุบัน
                    if (!$is_admin && !in_array($role_name, $current_user_roles)) {
                        continue;
                    }
                    
                    $role_count = isset($users_count['avail_roles'][$role_name]) ? $users_count['avail_roles'][$role_name] : 0;
            ?>
                <tr>
                    <td><?php echo esc_html(translate_user_role($all_roles[$role_name]['name'])); ?> <span class="role-type">(บทบาทระบบ)</span></td>
                    <td><?php echo esc_html($role_count); ?></td>
                    <td>
                        <div class="action-buttons">
                            <span class="default-role-badge">บทบาทเริ่มต้น</span>
                            <?php if ($is_admin || in_array($role_name, $current_user_roles)): ?>
                                <button type="button" class="view-users-btn" data-role="<?php echo esc_attr($role_name); ?>">ดูผู้ใช้</button>
                            <?php endif; ?>
                        </div>
                    </td>
                </tr>
            <?php 
                endif;
            endforeach; 
            
            // แสดงบทบาทที่สร้างเพิ่มเติม
            foreach ($all_roles as $role_name => $role_info) :
                if (!in_array($role_name, $default_roles)) :
                    // ข้ามถ้าไม่ใช่ admin และไม่ใช่บทบาทของผู้ใช้ปัจจุบัน
                    if (!$is_admin && !in_array($role_name, $current_user_roles)) {
                        continue;
                    }
                    
                    $role_count = isset($users_count['avail_roles'][$role_name]) ? $users_count['avail_roles'][$role_name] : 0;
            ?>
                <tr>
                    <td><?php echo esc_html($role_info['name']); ?></td>
                    <td><?php echo esc_html($role_count); ?></td>
                    <td>
                        <div class="action-buttons">
                            <?php if ($is_admin): ?>
                                <button type="button" class="edit-role-btn" data-role="<?php echo esc_attr($role_name); ?>">แก้ไข</button>
                                <button type="button" class="delete-role-btn" data-role="<?php echo esc_attr($role_name); ?>">ลบ</button>
                            <?php endif; ?>
                            <button type="button" class="view-users-btn" data-role="<?php echo esc_attr($role_name); ?>">ดูผู้ใช้</button>
                        </div>
                    </td>
                </tr>
            <?php 
                endif;
            endforeach; 
            ?>
        </tbody>
    </table>
    <?php
    $table_html = ob_get_clean();
    
    wp_send_json_success(['html' => $table_html]);
}
add_action('wp_ajax_get_roles_table', 'get_roles_table_ajax');

/**
 * AJAX handler สำหรับดึงข้อมูลผู้ใช้ตามบทบาท
 */
function get_users_by_role_ajax() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_nonce')) {
        wp_send_json_error(['message' => 'รหัสความปลอดภัยไม่ถูกต้อง']);
    }
    
    // ตรวจสอบว่าผู้ใช้เข้าสู่ระบบแล้ว
    if (!is_user_logged_in()) {
        wp_send_json_error(['message' => 'กรุณาเข้าสู่ระบบ']);
    }
    
    // ตรวจสอบข้อมูลที่ส่งมา
    if (!isset($_POST['role']) || empty($_POST['role'])) {
        wp_send_json_error(['message' => 'กรุณาระบุบทบาท']);
    }
    
    $role = sanitize_text_field($_POST['role']);
    $current_user = wp_get_current_user();
    $is_admin = current_user_can('manage_options');
    $current_user_roles = $current_user->roles;
    
    // ตรวจสอบว่าผู้ใช้มีสิทธิ์ในการดูบทบาทนี้
    if (!$is_admin && !in_array($role, $current_user_roles)) {
        wp_send_json_error(['message' => 'คุณไม่มีสิทธิ์ในการดูข้อมูลผู้ใช้บทบาทนี้']);
    }
    
    // ดึงข้อมูลผู้ใช้ตามบทบาท
    $users = get_users(['role' => $role]);
    
    if (empty($users)) {
        wp_send_json_success(['message' => 'ไม่พบผู้ใช้ในบทบาทนี้', 'html' => '<p>ไม่พบผู้ใช้ในบทบาทนี้</p>']);
    }
    
    ob_start();
    ?>
    <h3>รายชื่อผู้ใช้ในบทบาท: <?php echo esc_html($role); ?></h3>
    <table class="users-table">
        <thead>
            <tr>
                <th>ชื่อผู้ใช้</th>
                <th>ชื่อ-นามสกุล</th>
                <th>อีเมล</th>
                <?php if ($is_admin): ?>
                <th>การดำเนินการ</th>
                <?php endif; ?>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($users as $user): ?>
            <tr>
                <td><?php echo esc_html($user->user_login); ?></td>
                <td><?php echo esc_html($user->display_name); ?></td>
                <td><?php echo esc_html($user->user_email); ?></td>
                <?php if ($is_admin): ?>
                <td>
                    <div class="action-buttons">
                        <a href="<?php echo esc_url(admin_url('user-edit.php?user_id=' . $user->ID)); ?>" class="edit-user-btn" target="_blank">แก้ไข</a>
                    </div>
                </td>
                <?php endif; ?>
            </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
    <?php
    $users_html = ob_get_clean();
    
    wp_send_json_success(['html' => $users_html]);
}
add_action('wp_ajax_get_users_by_role', 'get_users_by_role_ajax');

/**
 * AJAX handler สำหรับดึงข้อมูล capabilities ของบทบาท
 */
function get_role_capabilities_ajax() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_nonce')) {
        wp_send_json_error(['message' => 'รหัสความปลอดภัยไม่ถูกต้อง']);
    }

    // ตรวจสอบสิทธิ์ของผู้ใช้
    if (!current_user_can('manage_options')) {
        wp_send_json_error(['message' => 'คุณไม่มีสิทธิ์ในการดำเนินการนี้']);
    }

    // ตรวจสอบและทำความสะอาดชื่อบทบาท
    if (!isset($_POST['role']) || empty($_POST['role'])) {
        wp_send_json_error(['message' => 'กรุณาระบุบทบาทที่ต้องการตรวจสอบ']);
    }

    $role_name = sanitize_text_field($_POST['role']);
    $role_obj = get_role($role_name);
    
    if (!$role_obj) {
        wp_send_json_error(['message' => 'ไม่พบบทบาทที่ระบุ']);
    }
    
    // ดึงข้อมูล capabilities ทั้งหมด
    $capabilities = $role_obj->capabilities;
    
    // ดึง capabilities ทั้งหมดที่มีอยู่ในระบบเพื่อให้แสดงตัวเลือกครบถ้วน
    $all_capabilities = get_all_capabilities();
    
    $result_capabilities = [];
    
    // รวมข้อมูล capabilities ทั้งหมด
    foreach ($all_capabilities as $cap) {
        $result_capabilities[$cap] = isset($capabilities[$cap]) && $capabilities[$cap];
    }
    
    // เรียงตามชื่อ
    ksort($result_capabilities);
    
    wp_send_json_success(['capabilities' => $result_capabilities]);
}
add_action('wp_ajax_get_role_capabilities', 'get_role_capabilities_ajax');

/**
 * เพิ่มส่วนแสดงผู้ใช้ในส่วนของระบบ
 */
function enqueue_department_role_user_scripts() {
    // ตรวจสอบว่าได้ลงทะเบียน script หลักแล้วหรือยัง
    if (!wp_script_is('department-role-script', 'enqueued')) {
        return;
    }

    // เพิ่ม CSS สำหรับตารางแสดงข้อมูลผู้ใช้
    $style = '
        /* ตารางแสดงข้อมูลผู้ใช้ */
        .users-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin: 1rem 0;
            background: #ffffff;
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
        }

        .users-table th {
            background: #2563eb;
            color: #ffffff;
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.875rem;
            letter-spacing: 0.05em;
            padding: 1rem 1.5rem;
            text-align: left;
        }

        .users-table td {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            color: #1e293b;
        }

        .users-table tr:last-child td {
            border-bottom: none;
        }

        .users-table tr:hover {
            background-color: #f8fafc;
        }

        /* ปุ่มดูผู้ใช้ */
        .view-users-btn {
            background-color: #3b82f6;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            border: none;
            cursor: pointer;
            transition: all 0.2s ease;
            min-width: 80px;
        }

        .view-users-btn:hover {
            background-color: #2563eb;
            transform: translateY(-1px);
        }

        .view-users-btn:active {
            background-color: #2563eb;
            transform: translateY(0);
        }

        /* ปุ่มแก้ไขผู้ใช้ */
        .edit-user-btn {
            display: inline-block;
            background-color: #f97316;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-size: 0.875rem;
            text-decoration: none;
            min-width: 80px;
            text-align: center;
        }

        .edit-user-btn:hover {
            background-color: #ea580c;
            color: white;
            transform: translateY(-1px);
        }

        .close-btn {
            background-color: #cbd5e1;
            color: #1e293b;
            padding: 0.75rem 1.5rem;
            border-radius: 0.375rem;
            font-size: 1rem;
            border: none;
            cursor: pointer;
            transition: all 0.2s ease;
            font-weight: 600;
        }

        .close-btn:hover {
            background-color: #94a3b8;
        }
    ';
    
    // เพิ่ม style ไปยัง header
    wp_add_inline_style('department-role-styles', $style);
    
    // เพิ่ม JavaScript สำหรับการแสดงข้อมูลผู้ใช้
    $script = '
        jQuery(document).ready(function($) {
            // กำหนด Event สำหรับปุ่มดูผู้ใช้
            $(document).on("click", ".view-users-btn", function() {
                var role = $(this).data("role");
                showUsersByRole(role);
            });

            // ดึงข้อมูลผู้ใช้ตามบทบาท
            function showUsersByRole(role) {
                $.ajax({
                    url: departmentAjax.ajaxurl,
                    type: "POST",
                    data: {
                        action: "get_users_by_role",
                        role: role,
                        nonce: departmentAjax.nonce
                    },
                    beforeSend: function() {
                        // สร้าง Modal สำหรับแสดงข้อมูลผู้ใช้
                        if (!$("#users-modal").length) {
                            $("body").append(
                                "<div id=\"users-modal\" class=\"modal\" aria-hidden=\"true\">" +
                                    "<div class=\"modal-content\">" +
                                        "<h2>ข้อมูลผู้ใช้</h2>" +
                                        "<div id=\"users-content\">" +
                                            "<div class=\"loading-indicator\">กำลังโหลดข้อมูล...</div>" +
                                        "</div>" +
                                        "<div class=\"form-group button-group\">" +
                                            "<button type=\"button\" class=\"close-btn\">ปิด</button>" +
                                        "</div>" +
                                    "</div>" +
                                "</div>"
                            );
                        }
                        
                        $("#users-content").html("<div class=\"loading-indicator\">กำลังโหลดข้อมูล...</div>");
                        $("#users-modal").attr("aria-hidden", "false").addClass("modal-visible");
                    },
                    success: function(response) {
                        if (response.success) {
                            $("#users-content").html(response.data.html);
                        } else {
                            var errorMsg = response.data.message || departmentAjax.messages.generalError;
                            $("#users-content").html("<div class=\"error-message\">" + errorMsg + "</div>");
                            if (typeof showToast === "function") {
                                showToast(errorMsg, "error");
                            }
                        }
                    },
                    error: function() {
                        var errorMsg = departmentAjax.messages.generalError;
                        $("#users-content").html("<div class=\"error-message\">" + errorMsg + "</div>");
                        if (typeof showToast === "function") {
                            showToast(errorMsg, "error");
                        }
                    }
                });
            }

            // ปุ่มปิด Modal ผู้ใช้
            $(document).on("click", "#users-modal .close-btn", function() {
                $("#users-modal")
                    .attr("aria-hidden", "true")
                    .removeClass("modal-visible");
            });

            // ปิด Modal เมื่อคลิกที่พื้นหลัง
            $(document).on("click", "#users-modal", function(e) {
                if ($(e.target).is("#users-modal")) {
                    $("#users-modal")
                        .attr("aria-hidden", "true")
                        .removeClass("modal-visible");
                }
            });
        });
    ';
    
    // เพิ่ม script ไปยัง footer
    wp_add_inline_script('department-role-script', $script);
}
add_action('wp_footer', 'enqueue_department_role_user_scripts', 99);
add_action('admin_footer', 'enqueue_department_role_user_scripts', 99);



/**
 * AJAX handler สำหรับอัปเดต capabilities ของบทบาท
 */
function update_role_capabilities_ajax() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_nonce')) {
        wp_send_json_error(['message' => 'รหัสความปลอดภัยไม่ถูกต้อง']);
    }

    // ตรวจสอบสิทธิ์ของผู้ใช้
    if (!current_user_can('manage_options')) {
        wp_send_json_error(['message' => 'คุณไม่มีสิทธิ์ในการดำเนินการนี้']);
    }

    // ตรวจสอบข้อมูลที่จำเป็น
    if (!isset($_POST['role']) || empty($_POST['role'])) {
        wp_send_json_error(['message' => 'กรุณาระบุบทบาท']);
    }

    if (!isset($_POST['capabilities']) || !is_array($_POST['capabilities'])) {
        wp_send_json_error(['message' => 'ข้อมูลสิทธิ์ไม่ถูกต้อง']);
    }

    $role_name = sanitize_text_field($_POST['role']);
    $capabilities = $_POST['capabilities'];
    
    // ตรวจสอบว่าเป็นบทบาทเริ่มต้นของ WordPress หรือไม่
    $default_roles = ['administrator', 'editor', 'author', 'contributor', 'subscriber'];
    if (in_array($role_name, $default_roles)) {
        wp_send_json_error(['message' => 'ไม่สามารถแก้ไขบทบาทเริ่มต้นของ WordPress ได้']);
    }
    
    $role_obj = get_role($role_name);
    
    if (!$role_obj) {
        wp_send_json_error(['message' => 'ไม่พบบทบาทที่ระบุ']);
    }
    
    // ดึง capabilities ปัจจุบันของบทบาท
    $current_capabilities = $role_obj->capabilities;
    
    // ดึง capabilities ทั้งหมดที่มีในระบบ
    $all_capabilities = get_all_capabilities();
    
    // อัปเดตแต่ละ capability
    foreach ($all_capabilities as $cap) {
        $has_cap = isset($capabilities[$cap]) && $capabilities[$cap];
        
        if ($has_cap) {
            $role_obj->add_cap($cap);
        } else {
            // ไม่ลบ read เพื่อให้ผู้ใช้สามารถล็อกอินได้
            if ($cap !== 'read') {
                $role_obj->remove_cap($cap);
            }
        }
    }
    
    wp_send_json_success(['message' => 'อัปเดตสิทธิ์เรียบร้อยแล้ว']);
}
add_action('wp_ajax_update_role_capabilities', 'update_role_capabilities_ajax');

/**
 * AJAX handler สำหรับดึงข้อมูล Post Types และสิทธิ์สำหรับบทบาท
 */
function get_post_type_permissions_ajax() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'department_role_nonce')) {
        wp_send_json_error(['message' => 'รหัสความปลอดภัยไม่ถูกต้อง']);
    }

    // ตรวจสอบว่ามีชื่อบทบาทหรือไม่
    if (!isset($_POST['role'])) {
        wp_send_json_error(['message' => 'กรุณาระบุบทบาท']);
    }

    $role = sanitize_text_field($_POST['role']);
    $role_obj = get_role($role);

    if (!$role_obj) {
        wp_send_json_error(['message' => 'ไม่พบบทบาทที่ระบุ']);
    }

    // ดึงข้อมูลสำหรับแต่ละประเภทของสิทธิ์
    $data = [
        'postTypes' => get_post_type_permissions($role_obj),
        'fields' => get_field_permissions($role_obj),
        'fieldGroups' => get_field_group_permissions($role_obj),
        'taxonomies' => get_taxonomy_permissions($role_obj)
    ];

    wp_send_json_success($data);
}
add_action('wp_ajax_get_post_type_permissions', 'get_post_type_permissions_ajax');

/**
 * 3. ฟังก์ชั่นช่วยจัดการสิทธิ์ต่างๆ
 */

/**
 * ฟังก์ชั่นดึง capabilities ทั้งหมดที่มีในระบบ
 * @return array รายการ capabilities ทั้งหมด
 */
function get_all_capabilities() {
    global $wp_roles;
    
    $capabilities = [];
    
    // ดึง capabilities จากทุกบทบาท
    foreach ($wp_roles->roles as $role) {
        if (isset($role['capabilities']) && is_array($role['capabilities'])) {
            $capabilities = array_merge($capabilities, array_keys($role['capabilities']));
        }
    }
    
    // ดึง capability ของ post types ทั้งหมด
    $post_types = get_post_types([], 'objects');
    foreach ($post_types as $post_type) {
        $post_type_name = $post_type->name;
        
        // สร้างรายการ capabilities ที่เกี่ยวข้องกับ post type
        $type_caps = [
            "read_{$post_type_name}",
            "read_{$post_type_name}s",
            "edit_{$post_type_name}",
            "edit_{$post_type_name}s",
            "edit_others_{$post_type_name}s",
            "edit_published_{$post_type_name}s",
            "delete_{$post_type_name}",
            "delete_{$post_type_name}s",
            "delete_others_{$post_type_name}s",
            "delete_published_{$post_type_name}s",
            "publish_{$post_type_name}s",
            "create_{$post_type_name}s"
        ];
        
        $capabilities = array_merge($capabilities, $type_caps);
    }
    
    // ดึง capability ของ taxonomies ทั้งหมด
    $taxonomies = get_taxonomies([], 'objects');
    foreach ($taxonomies as $taxonomy) {
        $taxonomy_name = $taxonomy->name;
        
        // สร้างรายการ capabilities ที่เกี่ยวข้องกับ taxonomy
        $tax_caps = [
            "manage_{$taxonomy_name}",
            "edit_{$taxonomy_name}",
            "delete_{$taxonomy_name}",
            "assign_{$taxonomy_name}"
        ];
        
        $capabilities = array_merge($capabilities, $tax_caps);
    }
    
    // หากมี ACF เพิ่ม capabilities สำหรับ fields และ field groups
    if (function_exists('acf_get_field_groups')) {
        $field_caps = [
            'read_fields',
            'edit_fields',
            'delete_fields',
            'write_fields',
            'read_field_groups',
            'edit_field_groups',
            'delete_field_groups',
            'write_field_groups'
        ];
        
        $capabilities = array_merge($capabilities, $field_caps);
    }
    
    // ลบ capabilities ซ้ำและเรียงลำดับ
    $capabilities = array_unique($capabilities);
    sort($capabilities);
    
    return $capabilities;
}

/**
 * ฟังก์ชั่นดึงข้อมูล Post Types และสิทธิ์
 * @param WP_Role $role_obj วัตถุบทบาท
 * @return array ข้อมูล Post Types และสิทธิ์
 */
function get_post_type_permissions($role_obj) {
    // ดึงข้อมูล Post Types ทั้งหมดที่ลงทะเบียนในระบบ
    $all_post_types = get_post_types(['public' => true], 'objects');
    
    // ดึง Custom Post Types เพิ่มเติม (รวมทั้งที่ไม่เป็น public)
    $custom_post_types = get_post_types(['_builtin' => false], 'objects');
    $all_post_types = array_merge($all_post_types, $custom_post_types);
    
    $post_type_permissions = [];

    foreach ($all_post_types as $post_type_name => $post_type) {
        // ข้ามประเภท attachment
        if ($post_type_name === 'attachment') {
            continue;
        }

        // ตรวจสอบสิทธิ์ที่มีอยู่
        $capabilities = [
            'read' => $role_obj->has_cap("read_{$post_type_name}") || $role_obj->has_cap("read_{$post_type_name}s"),
            'edit' => $role_obj->has_cap("edit_{$post_type_name}") || $role_obj->has_cap("edit_{$post_type_name}s"),
            'delete' => $role_obj->has_cap("delete_{$post_type_name}") || $role_obj->has_cap("delete_{$post_type_name}s"),
            'write' => $role_obj->has_cap("create_{$post_type_name}") || $role_obj->has_cap("create_{$post_type_name}s") || $role_obj->has_cap("publish_{$post_type_name}s"),
        ];

        $post_type_permissions[$post_type_name] = [
            'label' => $post_type->label ?? $post_type_name,
            'permissions' => $capabilities,
        ];
    }

    // เรียงตามชื่อ
    ksort($post_type_permissions);
    
    return $post_type_permissions;
}

/**
 * ฟังก์ชั่นดึงข้อมูล Fields และสิทธิ์ (สำหรับ ACF)
 * @param WP_Role $role_obj วัตถุบทบาท
 * @return array ข้อมูล Fields และสิทธิ์
 */
function get_field_permissions($role_obj) {
    $field_permissions = [
        'fields' => [
            'label' => 'Fields',
            'permissions' => [
                'read' => $role_obj->has_cap('read_fields'),
                'edit' => $role_obj->has_cap('edit_fields'),
                'delete' => $role_obj->has_cap('delete_fields'),
                'write' => $role_obj->has_cap('write_fields'),
            ]
        ]
    ];
    
    return $field_permissions;
}

/**
 * ฟังก์ชั่นดึงข้อมูล Field Groups และสิทธิ์ (สำหรับ ACF)
 * @param WP_Role $role_obj วัตถุบทบาท
 * @return array ข้อมูล Field Groups และสิทธิ์
 */
function get_field_group_permissions($role_obj) {
    $field_group_permissions = [
        'field_groups' => [
            'label' => 'Field Groups',
            'permissions' => [
                'read' => $role_obj->has_cap('read_field_groups'),
                'edit' => $role_obj->has_cap('edit_field_groups'),
                'delete' => $role_obj->has_cap('delete_field_groups'),
                'write' => $role_obj->has_cap('write_field_groups'),
            ]
        ]
    ];
    
    return $field_group_permissions;
}

/**
 * ฟังก์ชั่นดึงข้อมูล Taxonomies และสิทธิ์
 * @param WP_Role $role_obj วัตถุบทบาท
 * @return array ข้อมูล Taxonomies และสิทธิ์
 */
function get_taxonomy_permissions($role_obj) {
    // ดึงข้อมูล Taxonomies ทั้งหมด รวมถึง custom taxonomies
    $all_taxonomies = get_taxonomies([], 'objects');
    
    $taxonomy_permissions = [];
    
    foreach ($all_taxonomies as $taxonomy_name => $taxonomy) {
        // ข้ามบาง taxonomy ที่ไม่จำเป็น
        if (in_array($taxonomy_name, ['nav_menu', 'post_format', 'link_category'])) {
            continue;
        }
        
        // กำหนดชื่อ capability สำหรับแต่ละประเภทสิทธิ์
        $read_cap = "assign_{$taxonomy_name}";
        $edit_cap = "edit_{$taxonomy_name}";
        $delete_cap = "delete_{$taxonomy_name}";
        $write_cap = "manage_{$taxonomy_name}";
        
        // ตรวจสอบสิทธิ์ที่มีอยู่
        $capabilities = [
            'read' => $role_obj->has_cap($read_cap),
            'edit' => $role_obj->has_cap($edit_cap),
            'delete' => $role_obj->has_cap($delete_cap),
            'write' => $role_obj->has_cap($write_cap),
        ];
        
        $taxonomy_permissions[$taxonomy_name] = [
            'label' => $taxonomy->label ?? $taxonomy_name,
            'permissions' => $capabilities,
        ];
    }
    
    // เรียงตามชื่อ
    ksort($taxonomy_permissions);
    
    return $taxonomy_permissions;
}

/**
 * ฟังก์ชั่นอัปเดตสิทธิ์ของ Post Types
 * @param WP_Role $role_obj วัตถุบทบาท
 * @param array $post_type_permissions ข้อมูลสิทธิ์ของ Post Types
 */
function update_post_type_capabilities($role_obj, $post_type_permissions) {
    if (!$role_obj || !is_array($post_type_permissions)) {
        return;
    }

    foreach ($post_type_permissions as $post_type => $permissions) {
        // ตรวจสอบสิทธิ์แต่ละประเภท
        if (isset($permissions['read'])) {
            $read_cap = "read_{$post_type}";
            if ($permissions['read']) {
                $role_obj->add_cap($read_cap);
                // สำหรับ post type ที่ใช้ทั้งสองแบบ
                $role_obj->add_cap("read_{$post_type}s");
            } else {
                $role_obj->remove_cap($read_cap);
                $role_obj->remove_cap("read_{$post_type}s");
            }
        }

        if (isset($permissions['edit'])) {
            $edit_cap = "edit_{$post_type}s";
            $edit_single_cap = "edit_{$post_type}";
            if ($permissions['edit']) {
                $role_obj->add_cap($edit_cap);
                $role_obj->add_cap($edit_single_cap);
                $role_obj->add_cap("edit_published_{$post_type}s");
                $role_obj->add_cap("edit_others_{$post_type}s");
            } else {
                $role_obj->remove_cap($edit_cap);
                $role_obj->remove_cap($edit_single_cap);
                $role_obj->remove_cap("edit_published_{$post_type}s");
                $role_obj->remove_cap("edit_others_{$post_type}s");
            }
        }

        if (isset($permissions['delete'])) {
            $delete_cap = "delete_{$post_type}s";
            $delete_single_cap = "delete_{$post_type}";
            if ($permissions['delete']) {
                $role_obj->add_cap($delete_cap);
                $role_obj->add_cap($delete_single_cap);
                $role_obj->add_cap("delete_published_{$post_type}s");
                $role_obj->add_cap("delete_others_{$post_type}s");
            } else {
                $role_obj->remove_cap($delete_cap);
                $role_obj->remove_cap($delete_single_cap);
                $role_obj->remove_cap("delete_published_{$post_type}s");
                $role_obj->remove_cap("delete_others_{$post_type}s");
            }
        }

        if (isset($permissions['write'])) {
            $write_cap = "create_{$post_type}s";
            $publish_cap = "publish_{$post_type}s";
            if ($permissions['write']) {
                $role_obj->add_cap($write_cap);
                $role_obj->add_cap($publish_cap);
            } else {
                $role_obj->remove_cap($write_cap);
                $role_obj->remove_cap($publish_cap);
            }
        }
    }
}

/**
 * ฟังก์ชั่นอัปเดตสิทธิ์ของ Fields
 * @param WP_Role $role_obj วัตถุบทบาท
 * @param array $field_permissions ข้อมูลสิทธิ์ของ Fields
 */
function update_field_capabilities($role_obj, $field_permissions) {
    if (!$role_obj || !is_array($field_permissions)) {
        return;
    }
    
    foreach ($field_permissions as $field_type => $field_data) {
        $permissions = $field_data['permissions'] ?? [];
        
        $role_obj->add_cap('read_fields', !empty($permissions['read']));
        $role_obj->add_cap('edit_fields', !empty($permissions['edit']));
        $role_obj->add_cap('delete_fields', !empty($permissions['delete']));
        $role_obj->add_cap('write_fields', !empty($permissions['write']));
    }
}

/**
 * ฟังก์ชั่นอัปเดตสิทธิ์ของ Field Groups
 * @param WP_Role $role_obj วัตถุบทบาท
 * @param array $field_group_permissions ข้อมูลสิทธิ์ของ Field Groups
 */
function update_field_group_capabilities($role_obj, $field_group_permissions) {
    if (!$role_obj || !is_array($field_group_permissions)) {
        return;
    }
    
    foreach ($field_group_permissions as $group_type => $group_data) {
        $permissions = $group_data['permissions'] ?? [];
        
        $role_obj->add_cap('read_field_groups', !empty($permissions['read']));
        $role_obj->add_cap('edit_field_groups', !empty($permissions['edit']));
        $role_obj->add_cap('delete_field_groups', !empty($permissions['delete']));
        $role_obj->add_cap('write_field_groups', !empty($permissions['write']));
    }
}

/**
 * ฟังก์ชั่นอัปเดตสิทธิ์ของ Taxonomies
 * @param WP_Role $role_obj วัตถุบทบาท
 * @param array $taxonomy_permissions ข้อมูลสิทธิ์ของ Taxonomies
 */
function update_taxonomy_capabilities($role_obj, $taxonomy_permissions) {
    if (!$role_obj || !is_array($taxonomy_permissions)) {
        return;
    }
    
    // ดึง taxonomies ทั้งหมด
    $all_taxonomies = get_taxonomies([], 'objects');
    
    // เตรียม capabilities ทั้งหมดที่เกี่ยวข้องกับ taxonomy ไว้ตรวจสอบ
    $all_taxonomy_caps = [];
    foreach ($all_taxonomies as $taxonomy_name => $taxonomy) {
        if (in_array($taxonomy_name, ['nav_menu', 'post_format', 'link_category'])) {
            continue;
        }
        
        $all_taxonomy_caps["assign_{$taxonomy_name}"] = false;
        $all_taxonomy_caps["edit_{$taxonomy_name}"] = false;
        $all_taxonomy_caps["delete_{$taxonomy_name}"] = false;
        $all_taxonomy_caps["manage_{$taxonomy_name}"] = false;
    }
    
    // อัปเดตเฉพาะ capabilities ที่มีการเลือก
    foreach ($taxonomy_permissions as $taxonomy => $taxonomy_data) {
        $permissions = $taxonomy_data['permissions'] ?? [];
        
        // manage_terms
        if (isset($permissions['write'])) {
            $cap = "manage_{$taxonomy}";
            if ($permissions['write']) {
                $role_obj->add_cap($cap);
                $all_taxonomy_caps[$cap] = true;
            }
        }
        
        // edit_terms
        if (isset($permissions['edit'])) {
            $cap = "edit_{$taxonomy}";
            if ($permissions['edit']) {
                $role_obj->add_cap($cap);
                $all_taxonomy_caps[$cap] = true;
            }
        }
        
        // delete_terms
        if (isset($permissions['delete'])) {
            $cap = "delete_{$taxonomy}";
            if ($permissions['delete']) {
                $role_obj->add_cap($cap);
                $all_taxonomy_caps[$cap] = true;
            }
        }
        
        // assign_terms
        if (isset($permissions['read'])) {
            $cap = "assign_{$taxonomy}";
            if ($permissions['read']) {
                $role_obj->add_cap($cap);
                $all_taxonomy_caps[$cap] = true;
            }
        }
    }
    
    // ลบ capabilities ที่ไม่ได้เลือก
    foreach ($all_taxonomy_caps as $cap => $selected) {
        if (!$selected) {
            $role_obj->remove_cap($cap);
        }
    }
}

/**
 * 4. ส่วนของ Shortcodes
 */

/**
 * Shortcode สำหรับแสดงฟอร์มการจัดการบทบาท
 */
function department_role_manager_shortcode() {
    // ตรวจสอบสิทธิ์ของผู้ใช้
    if (!current_user_can('manage_options')) {
        return '<p>คุณไม่มีสิทธิ์ในการเข้าถึงหน้านี้</p>';
    }
    
    ob_start();
    ?>
    <div class="department-role-container">
        <h2>จัดการบทบาทแผนก</h2>
        
        <div class="department-form">
            <h3>เพิ่มบทบาทใหม่</h3>
            <form id="department-role-form">
                <div class="form-group">
                    <label for="department_name" class="form-label">ชื่อบทบาทแผนก</label>
                    <input type="text" id="department_name" name="department_name" class="form-input" placeholder="กรอกชื่อบทบาทแผนก" required>
                </div>
                <div class="form-group">
                    <button type="submit" class="submit-btn">เพิ่มแผนก</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Modal สำหรับแก้ไขบทบาท -->
    <div id="edit-role-modal" class="modal" aria-hidden="true">
        <div class="modal-content">
            <h2>แก้ไขบทบาท</h2>
            <form id="edit-role-form">
                <input type="hidden" id="original-role-name">
                <div class="form-group">
                    <label for="edit-role-name" class="form-label">ชื่อบทบาท</label>
                    <input type="text" id="edit-role-name" name="edit-role-name" class="form-input" required>
                </div>
                <!-- จะเพิ่มส่วนของการตั้งค่าสิทธิ์ด้วย AJAX -->
                <div class="form-group button-group">
                    <button type="submit" class="save-btn">บันทึก</button>
                    <button type="button" class="cancel-btn">ยกเลิก</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Toast Notification -->
    <div id="toast" class="toast" aria-hidden="true"></div>
    <?php
    return ob_get_clean();
}
add_shortcode('department_role_manager', 'department_role_manager_shortcode');

/**
 * Shortcode สำหรับแสดงตารางบทบาททั้งหมด
 */
function department_role_table_manager_shortcode() {
    // ตรวจสอบว่าผู้ใช้ล็อกอินแล้ว
    if (!is_user_logged_in()) {
        return '<p>กรุณาเข้าสู่ระบบเพื่อดูข้อมูลบทบาท</p>';
    }
    
    ob_start();
    ?>
    <div class="roles-table-container">
        <h2>รายการบทบาททั้งหมด</h2>
        <div class="roles-table-wrapper">
            <!-- ตารางจะถูกโหลดผ่าน AJAX -->
            <div class="loading-message">กำลังโหลดข้อมูล...</div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('department_role_table_manager', 'department_role_table_manager_shortcode');

/**
 * 5. ส่วนของการเพิ่มเมนูในส่วนผู้ดูแลระบบ
 */
function department_role_admin_menu() {
    add_management_page(
        'จัดการบทบาทแผนก',
        'บทบาทแผนก',
        'manage_options',
        'department-role-manager',
        'department_role_admin_page'
    );
}
add_action('admin_menu', 'department_role_admin_menu');

/**
 * แสดงหน้าจัดการบทบาทในส่วนผู้ดูแลระบบ
 */
function department_role_admin_page() {
    // ตรวจสอบสิทธิ์
    if (!current_user_can('manage_options')) {
        wp_die('คุณไม่มีสิทธิ์ในการเข้าถึงหน้านี้');
    }
    
    // โหลด scripts และ styles ที่จำเป็น
    wp_enqueue_script('department-role-script');
    wp_enqueue_style('department-role-styles');
    
    ?>
    <div class="wrap">
        <h1>จัดการบทบาทแผนก</h1>
        
        <div class="department-role-admin">
            <?php echo department_role_manager_shortcode(); ?>
            
            <?php echo department_role_table_manager_shortcode(); ?>
        </div>
        
        <!-- Modal สำหรับแก้ไขบทบาท (ซ้ำกับด้านบนเพื่อให้แน่ใจว่าจะมีแสดงในหน้านี้) -->
        <div id="edit-role-modal" class="modal" aria-hidden="true">
            <div class="modal-content">
                <h2>แก้ไขบทบาท</h2>
                <form id="edit-role-form">
                    <input type="hidden" id="original-role-name">
                    <div class="form-group">
                        <label for="edit-role-name" class="form-label">ชื่อบทบาท</label>
                        <input type="text" id="edit-role-name" name="edit-role-name" class="form-input" required>
                    </div>
                    <div class="form-group button-group">
                        <button type="submit" class="save-btn">บันทึก</button>
                        <button type="button" class="cancel-btn">ยกเลิก</button>
                    </div>
                </form>
            </div>
        </div>
        
        <!-- Toast Notification -->
        <div id="toast" class="toast" aria-hidden="true"></div>
    </div>
    <?php
}

/**
 * แสดงข้อความเตือนสำหรับไฟล์ที่หายไป
 */
function department_role_missing_files_notice() {
    if (!current_user_can('manage_options')) {
        return;
    }

    $child_theme_path = get_stylesheet_directory();
    $missing_files = array();

    // ตรวจสอบไฟล์ที่จำเป็น
    if (!file_exists($child_theme_path . '/js/department-role.js')) {
        $missing_files[] = '/js/department-role.js';
    }
    if (!file_exists($child_theme_path . '/css/department-role.css')) {
        $missing_files[] = '/css/department-role.css';
    }

    // แสดงข้อความเตือนถ้ามีไฟล์ที่หายไป
    if (!empty($missing_files)) {
        ?>
        <div class="notice notice-error">
            <p>Department Role Manager: ไม่พบไฟล์ที่จำเป็นต่อไปนี้ในธีมลูก:</p>
            <ul>
                <?php foreach ($missing_files as $file): ?>
                    <li><?php echo esc_html($file); ?></li>
                <?php endforeach; ?>
            </ul>
        </div>
        <?php
    }
}
add_action('admin_notices', 'department_role_missing_files_notice');







/****** เลือกผู้ใช้งาน และกำหนด ROLE *****/

// ลงทะเบียน Shortcode สำหรับแสดงตารางผู้ใช้
function wp_user_manager_shortcode() {
    // Enqueue CSS และ JavaScript จาก Child Theme
    wp_enqueue_style('wp-user-manager-style', get_stylesheet_directory_uri() . '/css/wp-user-manager.css');
    wp_enqueue_script('wp-user-manager-script', get_stylesheet_directory_uri() . '/js/wp-user-manager.js', array('jquery'), null, true);
    
    // ส่งค่าต่างๆ ไปยัง JavaScript
    $roles = wp_roles()->get_names();
    wp_localize_script('wp-user-manager-script', 'wpUserManager', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'security' => wp_create_nonce('wp_user_manager_nonce'),
        'roles' => $roles,
        'messages' => array(
            'confirmDelete' => 'คุณแน่ใจหรือไม่ที่จะลบผู้ใช้นี้?',
            'deleteSuccess' => 'ลบผู้ใช้เรียบร้อยแล้ว',
            'deleteError' => 'เกิดข้อผิดพลาดในการลบผู้ใช้',
            'updateSuccess' => 'อัพเดตบทบาทเรียบร้อยแล้ว',
            'updateError' => 'เกิดข้อผิดพลาดในการอัพเดตบทบาท'
        )
    ));

    // เริ่มเก็บ output
    ob_start();
    ?>
    <div class="wp-user-manager-container">
        <div class="user-table-header">
            <h2>จัดการผู้ใช้งาน</h2>
            <div class="table-actions">
                <div class="search-box">
                    <input type="text" id="user-search-input" placeholder="ค้นหาผู้ใช้..." />
                </div>
                <select id="role-filter">
                    <option value="">ทั้งหมด</option>
                    <?php
                    foreach ($roles as $role_id => $role_name) {
                        echo '<option value="' . esc_attr($role_id) . '">' . esc_html($role_name) . '</option>';
                    }
                    ?>
                </select>
            </div>
        </div>

        <div class="user-table-wrapper">
            <table class="wp-user-table">
                <thead>
                    <tr>
                        <th>ผู้ใช้งาน</th>
                        <th>ชื่อ-นามสกุล</th>
                        <th>บทบาท</th>
                        <th>การจัดการ</th>
                    </tr>
                </thead>
                <tbody id="user-table-body">
                    <!-- จะถูกเติมข้อมูลด้วย JavaScript -->
                    <tr class="loading-row">
                        <td colspan="4" class="loading-cell">กำลังโหลดข้อมูล...</td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div class="pagination-container">
            <div class="pagination-info">
                แสดง <span id="pagination-start">0</span> - <span id="pagination-end">0</span> จากทั้งหมด <span id="pagination-total">0</span> รายการ
            </div>
            <div class="pagination-controls">
                <button id="prev-page" class="pagination-button" disabled><span class="arrow">&#9664;</span> ก่อนหน้า</button>
                <div id="page-numbers" class="page-numbers"></div>
                <button id="next-page" class="pagination-button" disabled>ถัดไป <span class="arrow">&#9654;</span></button>
            </div>
        </div>

        <!-- Modal สำหรับแก้ไข Role -->
        <div id="role-edit-modal" class="modal">
            <div class="modal-content">
                <span class="close-modal">&times;</span>
                <h2>แก้ไขบทบาทผู้ใช้</h2>
                <p id="edit-user-info"></p>
                <input type="hidden" id="edit-user-id" />
                <div class="role-options">
                    <?php
                    foreach ($roles as $role_id => $role_name) {
                        echo '<div class="role-option" data-role="' . esc_attr($role_id) . '">' . 
                             esc_html($role_name) . '</div>';
                    }
                    ?>
                </div>
                <div class="modal-actions">
                    <button id="cancel-edit" class="cancel-button">ยกเลิก</button>
                    <button id="save-role-edit" class="save-button">บันทึก</button>
                </div>
            </div>
        </div>

        <!-- Modal ยืนยันการลบ -->
        <div id="delete-confirm-modal" class="modal">
            <div class="modal-content">
                <h2>ยืนยันการลบผู้ใช้</h2>
                <p id="delete-user-info"></p>
                <input type="hidden" id="delete-user-id" />
                <div class="modal-actions">
                    <button id="cancel-delete" class="cancel-button">ยกเลิก</button>
                    <button id="confirm-delete" class="delete-button">ลบผู้ใช้</button>
                </div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('wp_user_manager', 'wp_user_manager_shortcode');

// Ajax handler สำหรับดึงข้อมูล Users
add_action('wp_ajax_get_users_data', 'ajax_get_users_data');
function ajax_get_users_data() {
    check_ajax_referer('wp_user_manager_nonce', 'security');
    
    if (!current_user_can('list_users')) {
        wp_send_json_error('Permission denied');
        return;
    }
    
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 20;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $role_filter = isset($_POST['role']) ? sanitize_text_field($_POST['role']) : '';
    
    $offset = ($page - 1) * $per_page;
    
    $args = array(
        'number' => $per_page,
        'offset' => $offset,
        'orderby' => 'display_name',
        'order' => 'ASC'
    );
    
    if (!empty($search)) {
        $args['search'] = '*' . $search . '*';
        $args['search_columns'] = array('user_login', 'user_nicename', 'user_email', 'display_name');
    }
    
    if (!empty($role_filter)) {
        $args['role'] = $role_filter;
    }
    
    $user_query = new WP_User_Query($args);
    
    $users_data = array();
    foreach ($user_query->get_results() as $user) {
        $roles = array();
        foreach ($user->roles as $role) {
            if (isset(wp_roles()->role_names[$role])) {
                $roles[] = wp_roles()->role_names[$role];
            }
        }
        
        $users_data[] = array(
            'id' => $user->ID,
            'username' => $user->user_login,
            'display_name' => $user->display_name,
            'first_name' => $user->first_name,
            'last_name' => $user->last_name,
            'email' => $user->user_email,
            'roles' => $roles,
            'role_keys' => $user->roles
        );
    }
    
    // ดึงจำนวนผู้ใช้ทั้งหมด
    $total_users = $user_query->get_total();
    $total_pages = ceil($total_users / $per_page);
    
    wp_send_json_success(array(
        'users' => $users_data,
        'total' => $total_users,
        'total_pages' => $total_pages,
        'current_page' => $page
    ));
}

// Ajax handler สำหรับอัพเดต Role
add_action('wp_ajax_update_user_role', 'ajax_update_user_role');
function ajax_update_user_role() {
    check_ajax_referer('wp_user_manager_nonce', 'security');
    
    if (!current_user_can('edit_users')) {
        wp_send_json_error('Permission denied');
        return;
    }
    
    $user_id = intval($_POST['user_id']);
    $new_role = sanitize_text_field($_POST['role']);
    
    if ($user_id && $new_role) {
        // ตรวจสอบว่าไม่ได้เปลี่ยน role ของตัวเอง
        if ($user_id == get_current_user_id() && !current_user_can('administrator')) {
            wp_send_json_error('ไม่สามารถเปลี่ยนบทบาทของตัวเองได้');
            return;
        }
        
        $user = new WP_User($user_id);
        // ลบ roles เดิมทั้งหมด
        $user->set_role('');
        // เพิ่ม role ใหม่
        $user->add_role($new_role);
        wp_send_json_success('อัพเดตบทบาทเรียบร้อยแล้ว');
    } else {
        wp_send_json_error('พารามิเตอร์ไม่ถูกต้อง');
    }
}

// Ajax handler สำหรับลบ User
add_action('wp_ajax_delete_wp_user', 'ajax_delete_wp_user');
function ajax_delete_wp_user() {
    check_ajax_referer('wp_user_manager_nonce', 'security');
    
    if (!current_user_can('delete_users')) {
        wp_send_json_error('Permission denied');
        return;
    }
    
    $user_id = intval($_POST['user_id']);
    
    if ($user_id) {
        // ตรวจสอบว่าไม่ได้ลบตัวเอง
        if ($user_id == get_current_user_id()) {
            wp_send_json_error('ไม่สามารถลบบัญชีของตัวเองได้');
            return;
        }
        
        // ลบผู้ใช้
        if (wp_delete_user($user_id)) {
            wp_send_json_success('ลบผู้ใช้เรียบร้อยแล้ว');
        } else {
            wp_send_json_error('เกิดข้อผิดพลาดในการลบผู้ใช้');
        }
    } else {
        wp_send_json_error('พารามิเตอร์ไม่ถูกต้อง');
    }
}


/**
 * ฟังก์ชันสำหรับเพิ่มเมนูย่อย "กำหนดสิทธิ์พิเศษ" ในเมนูผู้ใช้
 */
function add_special_permissions_submenu() {
    add_submenu_page(
        'users.php',                    // Parent slug (เมนูผู้ใช้)
        'กำหนดสิทธิ์พิเศษ',              // Page title
        'กำหนดสิทธิ์พิเศษ',              // Menu title
        'manage_options',               // Capability
        'special-permissions',          // Menu slug
        'render_special_permissions_page' // Callback function
    );
}
add_action('admin_menu', 'add_special_permissions_submenu');

/**
 * ฟังก์ชันสำหรับโหลด CSS และ JavaScript ที่เกี่ยวข้อง
 */
function enqueue_special_permissions_assets() {
    // ตรวจสอบว่าอยู่ในหน้า "กำหนดสิทธิ์พิเศษ" หรือไม่
    $screen = get_current_screen();
    if ($screen->id !== 'users_page_special-permissions') {
        return;
    }

    // ดึง URL ของ Child Theme
    $child_theme_url = get_stylesheet_directory_uri();
    
    // โหลด CSS
    wp_enqueue_style(
        'special-permissions-css',
        $child_theme_url . '/css/special-permissions.css',
        array(),
        '1.0.0'
    );
    
    // โหลด JavaScript
    wp_enqueue_script(
        'special-permissions-js',
        $child_theme_url . '/js/special-permissions.js',
        array('jquery'),
        '1.0.0',
        true
    );
    
    // เพิ่ม Localize Script สำหรับส่งค่าไปยัง JavaScript
    wp_localize_script(
        'special-permissions-js',
        'specialPermissionsData',
        array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'security' => wp_create_nonce('special_permissions_nonce')
        )
    );
}
add_action('admin_enqueue_scripts', 'enqueue_special_permissions_assets');

/**
 * ฟังก์ชันสำหรับแสดงหน้า "กำหนดสิทธิ์พิเศษ"
 */
function render_special_permissions_page() {
    // ตรวจสอบสิทธิ์
    if (!current_user_can('manage_options')) {
        wp_die(__('คุณไม่มีสิทธิ์เข้าถึงหน้านี้'));
    }
    
    // บันทึกการตั้งค่าหากมีการส่งฟอร์ม
    if (isset($_POST['special_permissions_submit']) && check_admin_referer('special_permissions_action', 'special_permissions_nonce')) {
        $role_name = sanitize_text_field($_POST['role_name']);
        $action_type = sanitize_text_field($_POST['action_type']);
        
        if ($action_type === 'create_new_role' && !empty($_POST['new_role_name']) && !empty($_POST['new_role_display'])) {
            $new_role_name = sanitize_text_field($_POST['new_role_name']);
            $new_role_display = sanitize_text_field($_POST['new_role_display']);
            
            $result = create_role_with_admin_capabilities($new_role_name, $new_role_display);
            if (is_wp_error($result)) {
                $error_message = $result->get_error_message();
            } else {
                $success_message = sprintf(__('สร้าง Role "%s" เรียบร้อยแล้ว'), $new_role_display);
            }
        } elseif ($action_type === 'assign_to_existing' && !empty($role_name)) {
            $result = assign_admin_capabilities_to_role($role_name);
            if (is_wp_error($result)) {
                $error_message = $result->get_error_message();
            } else {
                $success_message = sprintf(__('กำหนดสิทธิ์พิเศษให้กับ Role "%s" เรียบร้อยแล้ว'), $role_name);
            }
        }
    }
    
    // ดึง Role ทั้งหมด
    $roles = wp_roles()->roles;
    ?>
    <div class="wrap special-permissions-wrap">
        <h1><?php echo esc_html__('กำหนดสิทธิ์พิเศษ'); ?></h1>
        
        <?php if (isset($error_message)): ?>
            <div class="notice notice-error is-dismissible">
                <p><?php echo esc_html($error_message); ?></p>
            </div>
        <?php endif; ?>
        
        <?php if (isset($success_message)): ?>
            <div class="notice notice-success is-dismissible">
                <p><?php echo esc_html($success_message); ?></p>
            </div>
        <?php endif; ?>
        
        <div class="special-permissions-container">
            <form method="post" action="">
                <?php wp_nonce_field('special_permissions_action', 'special_permissions_nonce'); ?>
                
                <div class="special-permissions-option">
                    <h2><?php echo esc_html__('เลือกวิธีกำหนดสิทธิ์พิเศษ'); ?></h2>
                    
                    <div class="special-permissions-radio">
                        <label>
                            <input type="radio" name="action_type" value="assign_to_existing" checked>
                            <?php echo esc_html__('กำหนดสิทธิ์ให้กับ Role ที่มีอยู่แล้ว'); ?>
                        </label>
                    </div>
                    
                    <div class="special-permissions-radio">
                        <label>
                            <input type="radio" name="action_type" value="create_new_role">
                            <?php echo esc_html__('สร้าง Role ใหม่พร้อมสิทธิ์พิเศษ'); ?>
                        </label>
                    </div>
                </div>
                
                <div class="special-permissions-existing-role">
                    <h3><?php echo esc_html__('เลือก Role ที่ต้องการกำหนดสิทธิ์'); ?></h3>
                    <select name="role_name" id="role-name-select">
                        <option value=""><?php echo esc_html__('-- เลือก Role --'); ?></option>
                        <?php foreach ($roles as $role_key => $role_data): ?>
                            <?php if ($role_key !== 'administrator'): ?>
                                <option value="<?php echo esc_attr($role_key); ?>">
                                    <?php echo esc_html($role_data['name']); ?>
                                </option>
                            <?php endif; ?>
                        <?php endforeach; ?>
                    </select>
                </div>
                
                <div class="special-permissions-new-role" style="display: none;">
                    <h3><?php echo esc_html__('ข้อมูล Role ใหม่'); ?></h3>
                    <div class="special-permissions-field">
                        <label for="new-role-name"><?php echo esc_html__('Role Name (slug)'); ?></label>
                        <input type="text" name="new_role_name" id="new-role-name" placeholder="เช่น super_editor">
                    </div>
                    <div class="special-permissions-field">
                        <label for="new-role-display"><?php echo esc_html__('ชื่อที่แสดง'); ?></label>
                        <input type="text" name="new_role_display" id="new-role-display" placeholder="เช่น ซูเปอร์เอดิเตอร์">
                    </div>
                </div>
                
                <div class="special-permissions-submit">
                    <input type="submit" name="special_permissions_submit" class="button button-primary" value="<?php echo esc_attr__('บันทึกการตั้งค่า'); ?>">
                </div>
            </form>
        </div>
    </div>
    <?php
}

/**
 * ฟังก์ชันสำหรับสร้าง WordPress role ใหม่ที่มีความสามารถเท่ากับ Administrator
 * 
 * @param string $role_name ชื่อของ role ใหม่ (slug)
 * @param string $display_name ชื่อที่แสดงของ role ใหม่
 * @return WP_Role|WP_Error ออบเจกต์ role ใหม่หรือ WP_Error ในกรณีที่เกิดข้อผิดพลาด
 */
function create_role_with_admin_capabilities($role_name, $display_name) {
    // ดึง role administrator
    $admin_role = get_role('administrator');
    
    // ถ้าไม่มี role administrator ให้ return error
    if (!$admin_role) {
        return new WP_Error('no_admin_role', __('ไม่พบ role Administrator'));
    }
    
    // ตรวจสอบว่า role ที่จะสร้างมีอยู่แล้วหรือไม่
    $existing_role = get_role($role_name);
    
    // ถ้า role มีอยู่แล้ว ให้ลบออกก่อนเพื่อสร้างใหม่
    if ($existing_role) {
        remove_role($role_name);
    }
    
    // สร้าง role ใหม่โดยใช้ความสามารถเดียวกับ administrator
    $new_role = add_role($role_name, $display_name, $admin_role->capabilities);
    
    // ตรวจสอบว่าสร้างสำเร็จหรือไม่
    if (!$new_role) {
        return new WP_Error('role_creation_failed', __('ไม่สามารถสร้าง role ใหม่ได้'));
    }
    
    return $new_role;
}

/**
 * ฟังก์ชันสำหรับกำหนดความสามารถของ Administrator ให้กับ role ที่มีอยู่แล้ว
 * 
 * @param string $role_name ชื่อของ role ที่ต้องการกำหนดความสามารถ
 * @return WP_Role|WP_Error ออบเจกต์ role ที่อัปเดตแล้วหรือ WP_Error ในกรณีที่เกิดข้อผิดพลาด
 */
function assign_admin_capabilities_to_role($role_name) {
    // ดึง role ที่ต้องการ
    $role = get_role($role_name);
    
    // ถ้าไม่พบ role ให้ return error
    if (!$role) {
        return new WP_Error('role_not_found', sprintf(__('ไม่พบ role "%s"'), $role_name));
    }
    
    // ดึง role administrator
    $admin_role = get_role('administrator');
    
    // ถ้าไม่มี role administrator ให้ return error
    if (!$admin_role) {
        return new WP_Error('no_admin_role', __('ไม่พบ role Administrator'));
    }
    
    // กำหนดความสามารถของ administrator ให้กับ role
    foreach ($admin_role->capabilities as $cap => $grant) {
        $role->add_cap($cap, $grant);
    }
    
    return $role;
}





/***** ระบบค้นหาเนื้อหาแบบ Auto UI แบบรวม *******/

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Enqueue necessary scripts and styles
 */
function custom_ajax_search_enqueue_scripts() {
    wp_enqueue_style(
        'custom-ajax-search', 
        get_stylesheet_directory_uri() . '/css/custom-ajax-search-unified.css', 
        array(), 
        '3.0.0'
    );
    
    wp_enqueue_script(
        'custom-ajax-search', 
        get_stylesheet_directory_uri() . '/js/custom-ajax-search-unified.js', 
        array('jquery'), 
        '3.0.0', 
        true
    );
    
    wp_localize_script('custom-ajax-search', 'customAjaxSearch', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('custom_search_nonce')
    ));
}
add_action('wp_enqueue_scripts', 'custom_ajax_search_enqueue_scripts');

/**
 * Create shortcode for the search form with unified UI
 */
function custom_ajax_search_shortcode() {
    ob_start();
    ?>
    <div class="custom-search-container" role="search">
        <form class="custom-search-form" aria-label="ค้นหาเนื้อหา">
            <div class="unified-search-wrapper">
                <div class="search-type-wrapper">
                    <select name="search_type" id="search_type" class="search-type-select" aria-label="เลือกประเภทการค้นหา">
                        <option value="article">บทความ</option>
                        <option value="news">ข้อมูลทั่วไป</option>
                        <option value="mpeople">คู่มือประชาชน</option>
                        <option value="egp">ประกาศจัดซื้อจัดจ้าง</option>
                    </select>
                </div>
                <div class="search-divider"></div>
                <div class="search-input-wrapper">
                    <input type="text" 
                           name="search_query" 
                           id="search_query" 
                           class="search-input" 
                           placeholder="พิมพ์คำค้นหา..." 
                           aria-label="ช่องค้นหา"
                           autocomplete="off">
                    <button type="button" class="search-button" aria-label="ค้นหา">
                        ค้นหา
                    </button>
                </div>
            </div>
        </form>
        <div class="search-results" aria-live="polite" role="region" aria-label="ผลการค้นหา">
            <!-- Skeleton loading placeholder -->
            <div class="search-skeleton hidden">
                <?php for($i = 0; $i < 5; $i++): ?>
                <div class="skeleton-item">
                    <div class="skeleton-image"></div>
                    <div class="skeleton-content">
                        <div class="skeleton-title"></div>
                        <div class="skeleton-date"></div>
                    </div>
                </div>
                <?php endfor; ?>
            </div>
            <!-- Results will be loaded here -->
            <div class="search-results-content"></div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('custom_ajax_search', 'custom_ajax_search_shortcode');

/**
 * AJAX handler for search with improved security
 */
function custom_ajax_search_handler() {
    check_ajax_referer('custom_search_nonce', 'nonce');

    $search_type = sanitize_text_field($_POST['search_type']);
    $search_query = sanitize_text_field($_POST['search_query']);

    $args = array(
        'post_type' => $search_type,
        'posts_per_page' => 5,
        'post_status' => 'publish',
        'orderby' => 'date',
        'order' => 'DESC'
    );

    // Add search conditions based on post type - คง logic เดิมไว้
    if ($search_type === 'egp') {
        $args['meta_query'] = array(
            'relation' => 'OR',
            array(
                'key' => 'egp_name',
                'value' => $search_query,
                'compare' => 'LIKE'
            )
        );
        $args['s'] = $search_query;
    } else {
        $args['s'] = $search_query;
    }

    $query = new WP_Query($args);
    $results = array();

    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $thumbnail = get_the_post_thumbnail_url(get_the_ID(), 'thumbnail');
            if (!$thumbnail) {
                $thumbnail = get_stylesheet_directory_uri() . '/images/default-thumbnail.jpg';
            }
            
            // Convert date to Thai format - คง logic เดิมไว้
            $thai_months = array(
                '01' => 'มกราคม', '02' => 'กุมภาพันธ์', '03' => 'มีนาคม',
                '04' => 'เมษายน', '05' => 'พฤษภาคม', '06' => 'มิถุนายน',
                '07' => 'กรกฎาคม', '08' => 'สิงหาคม', '09' => 'กันยายน',
                '10' => 'ตุลาคม', '11' => 'พฤศจิกายน', '12' => 'ธันวาคม'
            );
            
            $date = get_the_date('d/m/Y');
            $date_parts = explode('/', $date);
            $thai_date = $date_parts[0] . ' ' . $thai_months[$date_parts[1]] . ' ' . 
                        (intval($date_parts[2]) + 543);

            $results[] = array(
                'title' => get_the_title(),
                'permalink' => get_permalink(),
                'thumbnail' => $thumbnail,
                'date' => $thai_date
            );
        }
    }

    wp_reset_postdata();
    wp_send_json_success($results);
}
add_action('wp_ajax_custom_ajax_search', 'custom_ajax_search_handler');
add_action('wp_ajax_nopriv_custom_ajax_search', 'custom_ajax_search_handler');


/**** แสดงรายการคู่มือประชาชน ******/

// Register shortcode and enqueue scripts/styles
add_action('init', 'pplist_register_shortcode');
add_action('wp_enqueue_scripts', 'pplist_enqueue_assets');

function pplist_register_shortcode() {
    add_shortcode('pplist', 'pplist_shortcode_callback');
}

function pplist_enqueue_assets() {
    $theme_path = get_stylesheet_directory_uri();
    
    // Enqueue CSS
    wp_enqueue_style('pplist-styles', $theme_path . '/css/pplist.css', array(), '1.0.0');
    
    // Enqueue JavaScript
    wp_enqueue_script('jquery-ui-autocomplete');
    wp_enqueue_script('pplist-script', $theme_path . '/js/pplist.js', array('jquery', 'jquery-ui-autocomplete'), '1.0.0', true);
    
    // Localize script
    wp_localize_script('pplist-script', 'pplist_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('pplist_nonce')
    ));
}

// View Counter Functions
function pplist_get_post_views($post_id) {
    $count_key = 'pplist_post_views_count';
    $count = get_post_meta($post_id, $count_key, true);
    if ($count == '') {
        delete_post_meta($post_id, $count_key);
        add_post_meta($post_id, $count_key, '0');
        return "0";
    }
    return $count;
}

function pplist_set_post_views($post_id) {
    $count_key = 'pplist_post_views_count';
    $count = get_post_meta($post_id, $count_key, true);
    if ($count == '') {
        $count = 0;
        delete_post_meta($post_id, $count_key);
        add_post_meta($post_id, $count_key, '0');
    } else {
        $count++;
        update_post_meta($post_id, $count_key, $count);
    }
    return $count;
}

// Thai Date Formatter
function pplist_format_thai_date($timestamp) {
    $thai_month_arr = array(
        1 => "มกราคม", "กุมภาพันธ์", "มีนาคม",
        "เมษายน", "พฤษภาคม", "มิถุนายน",
        "กรกฎาคม", "สิงหาคม", "กันยายน",
        "ตุลาคม", "พฤศจิกายน", "ธันวาคม"
    );
    
    $thai_day_arr = array(
        "อาทิตย์", "จันทร์", "อังคาร",
        "พุธ", "พฤหัสบดี", "ศุกร์", "เสาร์"
    );
    
    $thai_date = date('j', $timestamp);
    $thai_month = $thai_month_arr[date('n', $timestamp)];
    $thai_year = date('Y', $timestamp) + 543;
    $thai_day = $thai_day_arr[date('w', $timestamp)];
    
    return "วัน$thai_day ที่ $thai_date $thai_month พ.ศ. $thai_year";
}

// Shortcode Callback
function pplist_shortcode_callback($atts) {
    $atts = shortcode_atts(array(
        'posts_per_page' => 10,
    ), $atts);
    
    ob_start();
    ?>
    <div class="pplist-container" role="region" aria-label="รายการคู่มือประชาชน">
        <div class="pplist-filter" role="search">
            <!-- Search Input -->
            <div class="pplist-search">
                <input type="text" 
                       class="pplist-search-input" 
                       placeholder="ค้นหาคู่มือประชาชน..." 
                       aria-label="ค้นหาคู่มือประชาชน">
                <div class="pplist-search-results" aria-live="polite"></div>
            </div>

            <!-- Group Filter - Updated to use ppgroup taxonomy -->
            <div class="pplist-group-filter">
                <label for="pplist-group">หมวดหมู่:</label>
                <select id="pplist-group" class="pplist-group-select">
                    <option value="">ทั้งหมด</option>
                    <?php
                    $groups = get_terms(array(
                        'taxonomy' => 'ppgroup',
                        'hide_empty' => true
                    ));
                    
                    if (!is_wp_error($groups) && !empty($groups)) {
                        foreach($groups as $group) {
                            printf(
                                '<option value="%s">%s</option>',
                                esc_attr($group->slug),
                                esc_html($group->name)
                            );
                        }
                    }
                    ?>
                </select>
            </div>

            <!-- Date Filter -->
            <div class="pplist-date-filter">
                <div class="pplist-date-from">
                    <label for="pplist-date-from">จากวันที่:</label>
                    <input type="date" id="pplist-date-from" class="pplist-date-input">
                </div>
                <div class="pplist-date-to">
                    <label for="pplist-date-to">ถึงวันที่:</label>
                    <input type="date" id="pplist-date-to" class="pplist-date-input">
                </div>
            </div>
        </div>
        
        <!-- Skeleton Loading -->
        <div class="pplist-skeleton">
            <?php for($i = 0; $i < 3; $i++): ?>
            <div class="skeleton-item">
                <div class="skeleton-title"></div>
                <div class="skeleton-meta"></div>
            </div>
            <?php endfor; ?>
        </div>
        
        <!-- Content Area -->
        <div class="pplist-items" aria-live="polite"></div>
        
        <!-- Load More Button -->
        <button class="pplist-load-more" aria-label="โหลดรายการเพิ่มเติม">
            โหลดเพิ่มเติม
        </button>
    </div>
    <?php
    return ob_get_clean();
}

// AJAX Handler for Post Loading
add_action('wp_ajax_pplist_load_posts', 'pplist_load_posts');
add_action('wp_ajax_nopriv_pplist_load_posts', 'pplist_load_posts');

function pplist_load_posts() {
    check_ajax_referer('pplist_nonce', 'nonce');
    
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $posts_per_page = isset($_POST['posts_per_page']) ? intval($_POST['posts_per_page']) : 10;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $group = isset($_POST['group']) ? sanitize_text_field($_POST['group']) : '';
    $date_from = isset($_POST['date_from']) ? sanitize_text_field($_POST['date_from']) : '';
    $date_to = isset($_POST['date_to']) ? sanitize_text_field($_POST['date_to']) : '';

    $args = array(
        'post_type' => 'mpeople',
        'posts_per_page' => $posts_per_page,
        'paged' => $page,
        'post_status' => 'publish',
        's' => $search
    );

    // Add taxonomy query if group is selected
    if (!empty($group)) {
        $args['tax_query'] = array(
            array(
                'taxonomy' => 'ppgroup',
                'field' => 'slug',
                'terms' => $group
            )
        );
    }

    // Add date filter
    if (!empty($date_from) || !empty($date_to)) {
        $args['date_query'] = array();
        
        if (!empty($date_from)) {
            $args['date_query']['after'] = $date_from;
        }
        if (!empty($date_to)) {
            $args['date_query']['before'] = $date_to;
        }
        
        $args['date_query']['inclusive'] = true;
    }

    $query = new WP_Query($args);
    $response = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            
            // Get view count
            $views = pplist_get_post_views($post_id);
            
            // Get publish date
            $publish_date = pplist_format_thai_date(get_the_time('U'));
            
            // Get files from repeater field
            $files = array();
            if (have_rows('at_file_standard')) {
                while (have_rows('at_file_standard')) {
                    the_row();
                    $files[] = array(
                        'name' => get_sub_field('at_rp_file_name'),
                        'date' => pplist_format_thai_date(strtotime(get_sub_field('at_rp_file_create'))),
                        'link' => get_sub_field('at_rp_file_link')
                    );
                }
            }
            
            $response[] = array(
                'id' => $post_id,
                'title' => get_the_title(),
                'link' => get_permalink(),
                'views' => $views,
                'publish_date' => $publish_date,
                'files' => $files
            );
        }
    }
    
    wp_reset_postdata();
    wp_send_json_success(array(
        'posts' => $response,
        'max_pages' => $query->max_num_pages
    ));
}

// AJAX Handler for View Counter
add_action('wp_ajax_pplist_increment_view', 'pplist_increment_view');
add_action('wp_ajax_nopriv_pplist_increment_view', 'pplist_increment_view');

function pplist_increment_view() {
    check_ajax_referer('pplist_nonce', 'nonce');
    
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    
    if ($post_id > 0) {
        $new_count = pplist_set_post_views($post_id);
        wp_send_json_success(array('views' => $new_count));
    } else {
        wp_send_json_error('Invalid post ID');
    }
}

// AJAX Handler for Autocomplete Search
add_action('wp_ajax_pplist_autocomplete', 'pplist_autocomplete');
add_action('wp_ajax_nopriv_pplist_autocomplete', 'pplist_autocomplete');

function pplist_autocomplete() {
    check_ajax_referer('pplist_nonce', 'nonce');
    
    $search = isset($_POST['term']) ? sanitize_text_field($_POST['term']) : '';
    
    if (strlen($search) < 2) {
        wp_send_json_success(array());
        return;
    }
    
    $args = array(
        'post_type' => 'mpeople',
        'posts_per_page' => 5,
        'post_status' => 'publish',
        's' => $search
    );
    
    $query = new WP_Query($args);
    $suggestions = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $suggestions[] = array(
                'id' => get_the_ID(),
                'value' => get_the_title(),
                'label' => get_the_title(),
                'link' => get_permalink()
            );
        }
    }
    
    wp_reset_postdata();
    wp_send_json_success($suggestions);
}




/**** กำหนด Slug ของ Post ให้เป็น Post ID สำหรับ Post Type 'mpeople ****/

function set_mpeople_post_slug_as_id($post_ID, $post, $update) {
    // ตรวจสอบว่าเป็น Post Type 'mpeople' หรือไม่
    if ($post->post_type !== 'mpeople') {
        return;
    }

    // ตรวจสอบว่าเป็นการ Auto Draft หรือไม่
    if ($post->post_status === 'auto-draft') {
        return;
    }

    // หยุดการทำงานถ้ามีการอัพเดทแล้ว เพื่อป้องกันการทำงานซ้ำ
    remove_action('save_post', 'set_mpeople_post_slug_as_id', 10);

    // อัพเดท post_name (slug) เป็น post ID
    wp_update_post(array(
        'ID' => $post_ID,
        'post_name' => $post_ID
    ));

    // เพิ่ม action กลับเข้าไปใหม่
    add_action('save_post', 'set_mpeople_post_slug_as_id', 10, 3);
}

// เพิ่ม Hook เข้าไปใน WordPress
add_action('save_post', 'set_mpeople_post_slug_as_id', 10, 3);


/**** ระบบแก้ไขหมวดหมู่โพส คู่มือประชาชน ******/


// เพิ่ม Script และ Style
function ppgroup_editor_enqueue_scripts() {
    $child_theme_url = get_stylesheet_directory_uri();
    
    // Enqueue CSS
    wp_enqueue_style(
        'ppgroup-editor-style',
        $child_theme_url . '/css/ppgroup-editor.css',
        array(),
        '1.0.0'
    );
    
    // Enqueue JavaScript
    wp_enqueue_script(
        'ppgroup-editor-script',
        $child_theme_url . '/js/ppgroup-editor.js',
        array('jquery'),
        '1.0.0',
        true
    );
    
    // ส่งค่า AJAX URL และ Nonce ไปยัง JavaScript
    wp_localize_script(
        'ppgroup-editor-script',
        'ppgroupEditor',
        array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('ppgroup_editor_nonce')
        )
    );
}
add_action('wp_enqueue_scripts', 'ppgroup_editor_enqueue_scripts');

// สร้าง Shortcode
function ppgroup_editor_shortcode($atts) {
    // รับค่า Post ID จาก attribute หรือใช้ ID ปัจจุบัน
    $atts = shortcode_atts(array(
        'post_id' => get_the_ID()
    ), $atts);
    
    $post_id = intval($atts['post_id']);
    
    // ดึงค่า terms ทั้งหมดของ taxonomy ppgroup
    $all_terms = get_terms(array(
        'taxonomy' => 'ppgroup',
        'hide_empty' => false
    ));
    
    // ดึงค่า terms ที่เลือกไว้ของโพสต์นี้
    $selected_terms = wp_get_object_terms($post_id, 'ppgroup');
    $selected_term_ids = wp_list_pluck($selected_terms, 'term_id');
    
    ob_start();
    ?>
    <div class="ppgroup-editor" data-post-id="<?php echo esc_attr($post_id); ?>">
        <div class="ppgroup-editor__header">
            <h3>เลือกหมวดหมู่</h3>
        </div>
        <div class="ppgroup-editor__content">
            <?php foreach ($all_terms as $term): ?>
                <label class="ppgroup-term-checkbox">
                    <input type="checkbox" 
                           name="ppgroup_terms[]" 
                           value="<?php echo esc_attr($term->term_id); ?>"
                           <?php checked(in_array($term->term_id, $selected_term_ids)); ?>>
                    <span class="checkmark"></span>
                    <span class="term-name"><?php echo esc_html($term->name); ?></span>
                </label>
            <?php endforeach; ?>
        </div>
        <div class="ppgroup-editor__footer">
            <div class="save-status"></div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('ppgroup_editor', 'ppgroup_editor_shortcode');

// AJAX Handler
function ppgroup_editor_update() {
    // ตรวจสอบ Nonce
    if (!check_ajax_referer('ppgroup_editor_nonce', 'nonce', false)) {
        wp_send_json_error('Invalid nonce');
    }
    
    // ตรวจสอบสิทธิ์
    if (!current_user_can('edit_posts')) {
        wp_send_json_error('Permission denied');
    }
    
    $post_id = intval($_POST['post_id']);
    $term_ids = array_map('intval', $_POST['term_ids']);
    
    // อัพเดต terms
    $result = wp_set_object_terms($post_id, $term_ids, 'ppgroup');
    
    if (is_wp_error($result)) {
        wp_send_json_error($result->get_error_message());
    }
    
    wp_send_json_success(array(
        'message' => 'บันทึกการเปลี่ยนแปลงเรียบร้อยแล้ว',
        'terms' => $term_ids
    ));
}
add_action('wp_ajax_ppgroup_editor_update', 'ppgroup_editor_update');

/***** ภาพประจำหมดวหมู่ คู่มือประชาชน */

// เพิ่มฟิลด์รูปภาพในหน้าเพิ่มหมวดหมู่ใหม่
function add_ppgroup_image_field() {
    ?>
    <div class="form-field term-group">
        <label for="ppgroup_image"><?php _e('หมวดหมู่รูปภาพ', 'text-domain'); ?></label>
        <input type="hidden" id="ppgroup_image_id" name="ppgroup_image_id" class="custom_media_url" value="">
        <div id="ppgroup_image_wrapper"></div>
        <p>
            <input type="button" class="button button-secondary" id="ppgroup_media_button" name="ppgroup_media_button" value="<?php _e('เพิ่มรูปภาพ', 'text-domain'); ?>" />
            <input type="button" class="button button-secondary" id="ppgroup_media_remove" name="ppgroup_media_remove" value="<?php _e('ลบรูปภาพ', 'text-domain'); ?>" />
        </p>
    </div>
    <?php
}
add_action('ppgroup_add_form_fields', 'add_ppgroup_image_field', 10, 2);

// เพิ่มฟิลด์รูปภาพในหน้าแก้ไขหมวดหมู่
function edit_ppgroup_image_field($term) {
    $image_id = get_term_meta($term->term_id, 'ppgroup_image_id', true);
    ?>
    <tr class="form-field term-group-wrap">
        <th scope="row">
            <label for="ppgroup_image"><?php _e('หมวดหมู่รูปภาพ', 'text-domain'); ?></label>
        </th>
        <td>
            <input type="hidden" id="ppgroup_image_id" name="ppgroup_image_id" value="<?php echo $image_id; ?>">
            <div id="ppgroup_image_wrapper">
                <?php if ($image_id) { 
                    echo wp_get_attachment_image($image_id, 'thumbnail');
                } ?>
            </div>
            <p>
                <input type="button" class="button button-secondary" id="ppgroup_media_button" name="ppgroup_media_button" value="<?php _e('เพิ่มรูปภาพ', 'text-domain'); ?>" />
                <input type="button" class="button button-secondary" id="ppgroup_media_remove" name="ppgroup_media_remove" value="<?php _e('ลบรูปภาพ', 'text-domain'); ?>" />
            </p>
        </td>
    </tr>
    <?php
}
add_action('ppgroup_edit_form_fields', 'edit_ppgroup_image_field', 10, 2);

// บันทึกข้อมูลรูปภาพ
function save_ppgroup_image($term_id) {
    if (isset($_POST['ppgroup_image_id']) && '' !== $_POST['ppgroup_image_id']) {
        $image = $_POST['ppgroup_image_id'];
        update_term_meta($term_id, 'ppgroup_image_id', $image);
    } else {
        delete_term_meta($term_id, 'ppgroup_image_id');
    }
}
add_action('edited_ppgroup', 'save_ppgroup_image', 10, 2);
add_action('create_ppgroup', 'save_ppgroup_image', 10, 2);

// เพิ่ม Style และ Script
function ppgroup_image_enqueue() {
    global $taxonomy;
    if ($taxonomy === 'ppgroup') {
        wp_enqueue_media();
        
        // เพิ่ม JavaScript สำหรับ Media Uploader
        wp_add_inline_script('jquery', '
            jQuery(document).ready(function($) {
                function ct_media_upload(button_class) {
                    var _custom_media = true,
                        _orig_send_attachment = wp.media.editor.send.attachment;
                    $("body").on("click", button_class, function(e) {
                        var button_id = "#" + $(this).attr("id");
                        var send_attachment_bkp = wp.media.editor.send.attachment;
                        var button = $(button_id);
                        _custom_media = true;
                        wp.media.editor.send.attachment = function(props, attachment) {
                            if (_custom_media) {
                                $("#ppgroup_image_id").val(attachment.id);
                                $("#ppgroup_image_wrapper").html(\'<img class="custom_media_image" src="\' + attachment.url + \'" style="max-width:100px;max-height:100px;" />\');
                            } else {
                                return _orig_send_attachment.apply(button_id, [props, attachment]);
                            }
                        }
                        wp.media.editor.open(button);
                        return false;
                    });
                }
                ct_media_upload(".button.button-secondary#ppgroup_media_button");
                $("body").on("click", "#ppgroup_media_remove", function() {
                    $("#ppgroup_image_id").val("");
                    $("#ppgroup_image_wrapper").html("");
                    return false;
                });
            });
        ');
    }
}
add_action('admin_enqueue_scripts', 'ppgroup_image_enqueue');


/***** เพิ่มรูปภาพสำหรับ Taxonomy tnews */

// เพิ่มฟิลด์รูปภาพในหน้าเพิ่มหมวดหมู่ใหม่
function add_tnews_image_field() {
    ?>
    <div class="form-field term-group">
        <label for="tnews_image"><?php _e('หมวดหมู่รูปภาพ', 'text-domain'); ?></label>
        <input type="hidden" id="tnews_image_id" name="tnews_image_id" class="custom_media_url" value="">
        <div id="tnews_image_wrapper"></div>
        <p>
            <input type="button" class="button button-secondary" id="tnews_media_button" name="tnews_media_button" value="<?php _e('เพิ่มรูปภาพ', 'text-domain'); ?>" />
            <input type="button" class="button button-secondary" id="tnews_media_remove" name="tnews_media_remove" value="<?php _e('ลบรูปภาพ', 'text-domain'); ?>" />
        </p>
    </div>
    <?php
}
add_action('tnews_add_form_fields', 'add_tnews_image_field', 10, 2);

// เพิ่มฟิลด์รูปภาพในหน้าแก้ไขหมวดหมู่
function edit_tnews_image_field($term) {
    $image_id = get_term_meta($term->term_id, 'tnews_image_id', true);
    ?>
    <tr class="form-field term-group-wrap">
        <th scope="row">
            <label for="tnews_image"><?php _e('หมวดหมู่รูปภาพ', 'text-domain'); ?></label>
        </th>
        <td>
            <input type="hidden" id="tnews_image_id" name="tnews_image_id" value="<?php echo $image_id; ?>">
            <div id="tnews_image_wrapper">
                <?php if ($image_id) { 
                    echo wp_get_attachment_image($image_id, 'thumbnail');
                } ?>
            </div>
            <p>
                <input type="button" class="button button-secondary" id="tnews_media_button" name="tnews_media_button" value="<?php _e('เพิ่มรูปภาพ', 'text-domain'); ?>" />
                <input type="button" class="button button-secondary" id="tnews_media_remove" name="tnews_media_remove" value="<?php _e('ลบรูปภาพ', 'text-domain'); ?>" />
            </p>
        </td>
    </tr>
    <?php
}
add_action('tnews_edit_form_fields', 'edit_tnews_image_field', 10, 2);

// บันทึกข้อมูลรูปภาพ
function save_tnews_image($term_id) {
    if (isset($_POST['tnews_image_id']) && '' !== $_POST['tnews_image_id']) {
        $image = $_POST['tnews_image_id'];
        update_term_meta($term_id, 'tnews_image_id', $image);
    } else {
        delete_term_meta($term_id, 'tnews_image_id');
    }
}
add_action('edited_tnews', 'save_tnews_image', 10, 2);
add_action('create_tnews', 'save_tnews_image', 10, 2);

// เพิ่ม Style และ Script
function tnews_image_enqueue() {
    global $taxonomy;
    if ($taxonomy === 'tnews') {
        wp_enqueue_media();
        
        // เพิ่ม JavaScript สำหรับ Media Uploader
        wp_add_inline_script('jquery', '
            jQuery(document).ready(function($) {
                function tnews_media_upload(button_class) {
                    var _custom_media = true,
                        _orig_send_attachment = wp.media.editor.send.attachment;
                    $("body").on("click", button_class, function(e) {
                        var button_id = "#" + $(this).attr("id");
                        var send_attachment_bkp = wp.media.editor.send.attachment;
                        var button = $(button_id);
                        _custom_media = true;
                        wp.media.editor.send.attachment = function(props, attachment) {
                            if (_custom_media) {
                                $("#tnews_image_id").val(attachment.id);
                                $("#tnews_image_wrapper").html(\'<img class="custom_media_image" src="\' + attachment.url + \'" style="max-width:100px;max-height:100px;" />\');
                            } else {
                                return _orig_send_attachment.apply(button_id, [props, attachment]);
                            }
                        }
                        wp.media.editor.open(button);
                        return false;
                    });
                }
                tnews_media_upload(".button.button-secondary#tnews_media_button");
                $("body").on("click", "#tnews_media_remove", function() {
                    $("#tnews_image_id").val("");
                    $("#tnews_image_wrapper").html("");
                    return false;
                });
            });
        ');
    }
}
add_action('admin_enqueue_scripts', 'tnews_image_enqueue');


/***** เพิ่มรูปภาพสำหรับประเภทหน่วยงานใน Taxonomy tdep */

// เพิ่มฟิลด์รูปภาพในหน้าเพิ่มประเภทหน่วยงานใหม่
function add_tdep_image_field() {
    ?>
    <div class="form-field term-group">
        <label for="tdep_image"><?php _e('รูปภาพประเภทหน่วยงาน', 'text-domain'); ?></label>
        <input type="hidden" id="tdep_image_id" name="tdep_image_id" class="custom_media_url" value="">
        <div id="tdep_image_wrapper"></div>
        <p>
            <input type="button" class="button button-secondary" id="tdep_media_button" name="tdep_media_button" value="<?php _e('เพิ่มรูปภาพ', 'text-domain'); ?>" />
            <input type="button" class="button button-secondary" id="tdep_media_remove" name="tdep_media_remove" value="<?php _e('ลบรูปภาพ', 'text-domain'); ?>" />
        </p>
    </div>
    <?php
}
add_action('tdep_add_form_fields', 'add_tdep_image_field', 10, 2);

// เพิ่มฟิลด์รูปภาพในหน้าแก้ไขประเภทหน่วยงาน
function edit_tdep_image_field($term) {
    $image_id = get_term_meta($term->term_id, 'tdep_image_id', true);
    ?>
    <tr class="form-field term-group-wrap">
        <th scope="row">
            <label for="tdep_image"><?php _e('รูปภาพประเภทหน่วยงาน', 'text-domain'); ?></label>
        </th>
        <td>
            <input type="hidden" id="tdep_image_id" name="tdep_image_id" value="<?php echo $image_id; ?>">
            <div id="tdep_image_wrapper">
                <?php if ($image_id) { 
                    echo wp_get_attachment_image($image_id, 'thumbnail');
                } ?>
            </div>
            <p>
                <input type="button" class="button button-secondary" id="tdep_media_button" name="tdep_media_button" value="<?php _e('เพิ่มรูปภาพ', 'text-domain'); ?>" />
                <input type="button" class="button button-secondary" id="tdep_media_remove" name="tdep_media_remove" value="<?php _e('ลบรูปภาพ', 'text-domain'); ?>" />
            </p>
        </td>
    </tr>
    <?php
}
add_action('tdep_edit_form_fields', 'edit_tdep_image_field', 10, 2);

// บันทึกข้อมูลรูปภาพ
function save_tdep_image($term_id) {
    if (isset($_POST['tdep_image_id']) && '' !== $_POST['tdep_image_id']) {
        $image = $_POST['tdep_image_id'];
        update_term_meta($term_id, 'tdep_image_id', $image);
    } else {
        delete_term_meta($term_id, 'tdep_image_id');
    }
}
add_action('edited_tdep', 'save_tdep_image', 10, 2);
add_action('create_tdep', 'save_tdep_image', 10, 2);

// เพิ่ม Style และ Script
function tdep_image_enqueue() {
    global $taxonomy;
    if ($taxonomy === 'tdep') {
        wp_enqueue_media();
        
        // เพิ่ม JavaScript สำหรับ Media Uploader
        wp_add_inline_script('jquery', '
            jQuery(document).ready(function($) {
                function tdep_media_upload(button_class) {
                    var _custom_media = true,
                        _orig_send_attachment = wp.media.editor.send.attachment;
                    $("body").on("click", button_class, function(e) {
                        var button_id = "#" + $(this).attr("id");
                        var send_attachment_bkp = wp.media.editor.send.attachment;
                        var button = $(button_id);
                        _custom_media = true;
                        wp.media.editor.send.attachment = function(props, attachment) {
                            if (_custom_media) {
                                $("#tdep_image_id").val(attachment.id);
                                $("#tdep_image_wrapper").html(\'<img class="custom_media_image" src="\' + attachment.url + \'" style="max-width:100px;max-height:100px;" />\');
                            } else {
                                return _orig_send_attachment.apply(button_id, [props, attachment]);
                            }
                        }
                        wp.media.editor.open(button);
                        return false;
                    });
                }
                tdep_media_upload(".button.button-secondary#tdep_media_button");
                $("body").on("click", "#tdep_media_remove", function() {
                    $("#tdep_image_id").val("");
                    $("#tdep_image_wrapper").html("");
                    return false;
                });
            });
        ');
    }
}
add_action('admin_enqueue_scripts', 'tdep_image_enqueue');




/****** แสดงวันที่ไทย และ จำนวนการคลิกอ่านโพสนั้น ******/

// Enqueue CSS and JavaScript
function thai_date_views_enqueue_scripts() {
    wp_enqueue_style('thai-date-views-style', 
        get_stylesheet_directory_uri() . '/css/thai-date-views.css', 
        array(), 
        '1.0.0'
    );
    
    wp_enqueue_script('thai-date-views-script', 
        get_stylesheet_directory_uri() . '/js/thai-date-views.js', 
        array('jquery'), 
        '1.0.0', 
        true
    );
}
add_action('wp_enqueue_scripts', 'thai_date_views_enqueue_scripts');

// Convert to Thai month (abbreviated)
function get_thai_month($month) {
    $thai_months = array(
        1 => 'ม.ค.',
        2 => 'ก.พ.',
        3 => 'มี.ค.',
        4 => 'เม.ย.',
        5 => 'พ.ค.',
        6 => 'มิ.ย.',
        7 => 'ก.ค.',
        8 => 'ส.ค.',
        9 => 'ก.ย.',
        10 => 'ต.ค.',
        11 => 'พ.ย.',
        12 => 'ธ.ค.'
    );
    return $thai_months[$month];
}

// Convert to Thai day
function get_thai_day($day) {
    $thai_days = array(
        'Sunday' => 'อาทิตย์',
        'Monday' => 'จันทร์',
        'Tuesday' => 'อังคาร',
        'Wednesday' => 'พุธ',
        'Thursday' => 'พฤหัสบดี',
        'Friday' => 'ศุกร์',
        'Saturday' => 'เสาร์'
    );
    return $thai_days[$day];
}

// Update post views
function update_post_views() {
    if (is_single()) {
        $post_id = get_the_ID();
        $views = get_post_meta($post_id, 'post_views', true);
        
        if ($views === '') {
            add_post_meta($post_id, 'post_views', 1, true);
        } else {
            update_post_meta($post_id, 'post_views', $views + 1);
        }
    }
}
add_action('wp_head', 'update_post_views');

// Create shortcode
function thai_date_views_shortcode() {
    $post_id = get_the_ID();
    $post_date = get_the_date('Y-m-d');
    $date = new DateTime($post_date);
    
    $thai_day = get_thai_day($date->format('l'));
    $thai_month = get_thai_month((int)$date->format('n'));
    $thai_year = (int)$date->format('Y') + 543;
    $thai_date = $date->format('j') . ' ' . $thai_month . ' ' . $thai_year;
    
    $views = get_post_meta($post_id, 'post_views', true);
    $views = ($views === '') ? 0 : $views;
    
    $output = '<div class="thai-date-views">';
    $output .= '<span class="thai-date">';
    $output .= '<i class="far fa-calendar-alt"></i> ';
    $output .= $thai_date;
    $output .= '</span>';
    $output .= '<span class="post-views">';
    $output .= '<i class="far fa-eye"></i> ';
    $output .= number_format($views) . ' ครั้ง';
    $output .= '</span>';
    $output .= '</div>';
    
    return $output;
}
add_shortcode('thai_date_views', 'thai_date_views_shortcode');


/**** แสดง Post ที่มี Taxo เดียวกัน *****/

add_action('elementor/query/pppost', function($query) {
    // Get current post
    $current_post = get_post();
    
    if (!$current_post) {
        return;
    }
    
    // Get all taxonomies for the current post
    $taxonomies = get_object_taxonomies($current_post->post_type);
    
    if (empty($taxonomies)) {
        return;
    }
    
    // Get terms from current post
    $related_terms = array();
    foreach ($taxonomies as $taxonomy) {
        $post_terms = wp_get_post_terms($current_post->ID, $taxonomy, array('fields' => 'ids'));
        if (!empty($post_terms) && !is_wp_error($post_terms)) {
            $related_terms[$taxonomy] = $post_terms;
        }
    }
    
    // If no terms found, return
    if (empty($related_terms)) {
        return;
    }
    
    // Build tax query
    $tax_query = array('relation' => 'OR');
    foreach ($related_terms as $taxonomy => $terms) {
        $tax_query[] = array(
            'taxonomy' => $taxonomy,
            'field'    => 'term_id',
            'terms'    => $terms,
            'operator' => 'IN'
        );
    }
    
    // Set query parameters
    $query->set('post_type', 'mpeople');
    $query->set('tax_query', $tax_query);
    $query->set('post__not_in', array($current_post->ID));
    $query->set('posts_per_page', 6);
    $query->set('orderby', 'date');
    $query->set('order', 'DESC');
});


/**** แสดงรายการใน sub customfield ของเอกสารคู่มือประชาชน *****/

// ลงทะเบียน Shortcode
function register_standard_documents_shortcode() {
    add_shortcode('standard_documents', 'display_standard_documents');
    add_action('wp_enqueue_scripts', 'enqueue_standard_documents_assets');
}
add_action('init', 'register_standard_documents_shortcode');

// ฟังก์ชันเพิ่ม CSS และ JS
function enqueue_standard_documents_assets() {
    wp_enqueue_style(
        'standard-documents-style',
        get_stylesheet_directory_uri() . '/css/standard-documents.css',
        array(),
        '1.0.0'
    );
    
    wp_enqueue_script(
        'standard-documents-script',
        get_stylesheet_directory_uri() . '/js/standard-documents.js',
        array('jquery'),
        '1.0.0',
        true
    );
}

// ฟังก์ชันแปลงวันที่เป็นรูปแบบไทย
function convert_to_thai_date($date_string) {
    $date = DateTime::createFromFormat('d/m/Y', $date_string);
    if (!$date) {
        return $date_string;
    }
    
    $thai_year = $date->format('Y') + 543;
    return $date->format('d/m/') . $thai_year;
}

// ฟังก์ชัน Shortcode หลัก
function display_standard_documents() {
    // ตรวจสอบว่ามีข้อมูล Repeater field หรือไม่
    if (!have_rows('at_file_standard')) {
        return '<div class="standard-docs-section">
                    <h2 class="standard-docs-title">เอกสารแนบ</h2>
                    <div class="standard-docs-empty" role="alert">ไม่มีไฟล์แนบ</div>
                </div>';
    }

    ob_start();
    ?>
    <div class="standard-docs-section">
        <h2 class="standard-docs-title">เอกสารแนบ</h2>
        <div class="standard-docs-container">
            <table class="standard-docs-table" role="table" aria-label="รายการเอกสารแนบ">
                <thead>
                    <tr>
                        <th scope="col" class="column-file">ชื่อไฟล์</th>
                        <th scope="col" class="column-date">วันที่นำเข้า</th>
                        <th scope="col" class="column-download">ดาวน์โหลด</th>
                    </tr>
                </thead>
                <tbody>
                <?php
                while (have_rows('at_file_standard')) {
                    the_row();
                    $file_name = get_sub_field('at_rp_file_name');
                    $file_date = get_sub_field('at_rp_file_create');
                    $file_link = get_sub_field('at_rp_file_link');
                    
                    $thai_date = convert_to_thai_date($file_date);
                    ?>
                    <tr>
                        <td data-label="ชื่อไฟล์" class="column-file">
                            <span class="file-icon">📄</span>
                            <?php echo esc_html($file_name); ?>
                        </td>
                        <td data-label="วันที่นำเข้า" class="column-date">
                            <?php echo esc_html($thai_date); ?>
                        </td>
                        <td data-label="ดาวน์โหลด" class="column-download">
                            <a href="<?php echo esc_url($file_link); ?>" 
                               class="download-button"
                               download
                               aria-label="ดาวน์โหลด <?php echo esc_attr($file_name); ?>">
                                <span class="download-icon">⬇️</span>
                                <span class="button-text">ดาวน์โหลด</span>
                            </a>
                        </td>
                    </tr>
                    <?php
                }
                ?>
                </tbody>
            </table>
        </div>
    </div>
    <?php
    return ob_get_clean();
}





/**** แสดงหมวดหมู่หน่วยงาน จาก tdep *****/

// Enqueue scripts and styles
function tdep_cards_enqueue_assets() {
    wp_enqueue_style('tdep-cards-style', get_stylesheet_directory_uri() . '/css/tdep-cards.css', array(), '1.0.0');
    wp_enqueue_script('tdep-cards-script', get_stylesheet_directory_uri() . '/js/tdep-cards.js', array('jquery'), '1.0.0', true);
}
add_action('wp_enqueue_scripts', 'tdep_cards_enqueue_assets');

// Shortcode function
function tdep_category_cards_shortcode() {
    $terms = get_terms(array(
        'taxonomy' => 'tdep',
        'hide_empty' => false,
    ));

    if (empty($terms) || is_wp_error($terms)) {
        return '<p>ไม่พบข้อมูลหมวดหมู่</p>';
    }

    $output = '<div class="tdep-cards-container">';
    
    foreach ($terms as $term) {
        // Get image ID and URL
        $image_id = get_term_meta($term->term_id, 'tdep_image_id', true);
        $image_url = $image_id ? wp_get_attachment_image_url($image_id, 'large') : '';
        
        // Default background if no image
        if (!$image_url) {
            $image_url = get_stylesheet_directory_uri() . '/images/default-bg.jpg';
        }

        // Get post count
        $post_count = $term->count;
        
        // Get term link
        $term_link = get_term_link($term);

        $output .= sprintf(
            '<a href="%s" class="tdep-card" data-aos="fade-up">
                <div class="tdep-card-inner" style="background-image: url(\'%s\')">
                    <div class="tdep-card-content">
                        <h3 class="tdep-card-title">%s</h3>
                        <div class="tdep-card-count">
                            <span class="count-number">%d</span>
                            <span class="count-text">รายการ</span>
                        </div>
                    </div>
                </div>
            </a>',
            esc_url($term_link),
            esc_url($image_url),
            esc_html($term->name),
            $post_count
        );
    }
    
    $output .= '</div>';
    
    return $output;
}
add_shortcode('tdep_cards', 'tdep_category_cards_shortcode');



/**** ฟังก์ชั่นแสดง Achive POst ตามหมวดหมู่นั้น  ******/

// Enqueue necessary scripts and styles
function tdep_tem_enqueue_assets() {
    $theme_version = wp_get_theme()->get('Version');
    
    // Enqueue CSS
    wp_enqueue_style(
        'tdep-tem-style',
        get_stylesheet_directory_uri() . '/css/tdep-tem.css',
        array(),
        $theme_version
    );

    // Enqueue JavaScript
    wp_enqueue_script(
        'tdep-tem-script',
        get_stylesheet_directory_uri() . '/js/tdep-tem.js',
        array('jquery'),
        $theme_version,
        true
    );

    // Localized script data
    wp_localize_script(
        'tdep-tem-script',
        'tdepTemData',
        array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('tdep_tem_nonce')
        )
    );
}
add_action('wp_enqueue_scripts', 'tdep_tem_enqueue_assets');

// Time ago function in Thai
function tdep_tem_time_ago($timestamp) {
    $thai_months = array(
        "ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.",
        "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค."
    );
    
    $current_time = current_time('timestamp');
    $diff = $current_time - $timestamp;
    
    if ($diff < 60) {
        return "เมื่อ " . $diff . " วินาทีที่แล้ว";
    } elseif ($diff < 3600) {
        $minutes = floor($diff / 60);
        return "เมื่อ " . $minutes . " นาทีที่แล้ว";
    } elseif ($diff < 86400) { // น้อยกว่า 24 ชั่วโมง
        $hours = floor($diff / 3600);
        return "เมื่อ " . $hours . " ชั่วโมงที่แล้ว";
    } else {
        // แสดงวันที่แบบไทย เมื่อเกิน 24 ชั่วโมง
        $day = date('j', $timestamp);
        $month = $thai_months[date('n', $timestamp) - 1];
        $year = date('Y', $timestamp) + 543; // แปลงเป็น พ.ศ.
        return "$day $month $year";
    }
}

// Shortcode function
function tdep_tem_shortcode($atts) {
    // Get the current queried object (archive term)
    $queried_object = get_queried_object();
    
    // Default arguments
    $args = shortcode_atts(array(
        'posts_per_page' => 9,
        'paged' => get_query_var('paged') ? get_query_var('paged') : 1,
        'orderby' => 'date',
        'order' => 'DESC',
        'taxonomy' => '',
        'term_id' => ''
    ), $atts);

    // Base query arguments
    $query_args = array(
        'post_type' => 'department',
        'posts_per_page' => $args['posts_per_page'],
        'paged' => $args['paged'],
        'orderby' => $args['orderby'],
        'order' => $args['order']
    );

    // Handle taxonomy query
    if (!empty($args['taxonomy']) && !empty($args['term_id'])) {
        $query_args['tax_query'] = array(
            array(
                'taxonomy' => $args['taxonomy'],
                'field' => 'term_id',
                'terms' => $args['term_id']
            )
        );
    } elseif (is_tax() && $queried_object instanceof WP_Term) {
        $query_args['tax_query'] = array(
            array(
                'taxonomy' => $queried_object->taxonomy,
                'field' => 'term_id',
                'terms' => $queried_object->term_id
            )
        );
    }

    // Run the query
    $query = new WP_Query($query_args);
    
    ob_start();
    
    if ($query->have_posts()) : ?>
        <div class="tdep-tem-container">
            <div class="tdep-tem-grid" role="region" aria-label="รายการแผนก">
                <?php while ($query->have_posts()) : $query->the_post();
                    $post_date = get_the_time('U');
                    $thumbnail = get_the_post_thumbnail_url(get_the_ID(), 'tdep-tem-thumbnail');
                    if (!$thumbnail) {
                        $thumbnail = get_stylesheet_directory_uri() . '/images/default-department.jpg';
                    }
                    
                    // Get categories/terms
                    $taxonomy = $queried_object instanceof WP_Term ? $queried_object->taxonomy : 'category';
                    $terms = get_the_terms(get_the_ID(), $taxonomy);
                    
                    // Get and sanitize excerpt
                    $excerpt = wp_strip_all_tags(get_the_excerpt());
                    $excerpt = wp_trim_words($excerpt, 20, '...');
                ?>
                    <article class="tdep-tem-card" role="article">
                        <a href="<?php echo esc_url(get_permalink()); ?>" class="tdep-tem-card-link" aria-labelledby="post-<?php echo get_the_ID(); ?>">
                            <div class="tdep-tem-card-image-wrapper">
                                <div class="tdep-tem-card-image" 
                                     style="background-image: url('<?php echo esc_url($thumbnail); ?>')"
                                     aria-label="<?php echo esc_attr__('ภาพประกอบบทความ: ', 'tdep-tem') . esc_attr(get_the_title()); ?>">
                                    <div class="tdep-tem-card-overlay"></div>
                                </div>
                                <?php if ($terms && !is_wp_error($terms)) : ?>
                                    <div class="tdep-tem-card-categories" aria-label="หมวดหมู่">
                                        <?php foreach ($terms as $term) : ?>
                                            <span class="tdep-tem-category-tag">
                                                <?php echo esc_html($term->name); ?>
                                            </span>
                                        <?php endforeach; ?>
                                    </div>
                                <?php endif; ?>
                            </div>
                            
                            <div class="tdep-tem-card-content">
                                <div class="tdep-tem-card-meta">
                                    <time datetime="<?php echo esc_attr(get_the_date('c')); ?>" class="tdep-tem-card-date">
                                        <i class="tdep-tem-icon-calendar" aria-hidden="true"></i>
                                        <?php echo esc_html(get_the_date('d/m/Y')); ?>
                                    </time>
                                </div>

                                <h2 id="post-<?php echo get_the_ID(); ?>" class="tdep-tem-card-title">
                                    <?php echo esc_html(get_the_title()); ?>
                                </h2>

                                <?php if ($excerpt) : ?>
                                    <p class="tdep-tem-card-excerpt">
                                        <?php echo esc_html($excerpt); ?>
                                    </p>
                                <?php endif; ?>

                                <div class="tdep-tem-card-footer">
                                    <span class="tdep-tem-timeago">
                                        <?php echo tdep_tem_time_ago($post_date); ?>
                                    </span>
                                    <span class="tdep-tem-read-more">
                                        <?php esc_html_e('อ่านเพิ่มเติม', 'tdep-tem'); ?>
                                        <span class="tdep-tem-arrow" aria-hidden="true">→</span>
                                    </span>
                                </div>
                            </div>
                        </a>
                    </article>
                <?php endwhile; ?>
            </div>

            <?php if ($query->max_num_pages > 1) : ?>
                <nav class="tdep-tem-pagination" role="navigation" aria-label="การนำทางหน้า">
                    <?php
                    echo paginate_links(array(
                        'base' => str_replace(999999999, '%#%', esc_url(get_pagenum_link(999999999))),
                        'format' => '?paged=%#%',
                        'current' => max(1, get_query_var('paged')),
                        'total' => $query->max_num_pages,
                        'prev_text' => '<i class="tdep-tem-icon-arrow-left" aria-hidden="true"></i> ' . __('หน้าก่อนหน้า', 'tdep-tem'),
                        'next_text' => __('หน้าถัดไป', 'tdep-tem') . ' <i class="tdep-tem-icon-arrow-right" aria-hidden="true"></i>',
                        'type' => 'list',
                        'mid_size' => 2,
                        'end_size' => 1,
                        'add_args' => false
                    ));
                    ?>
                </nav>
            <?php endif; ?>
        </div>
        <?php wp_reset_postdata();
    else : ?>
        <div class="tdep-tem-no-posts">
            <p><?php esc_html_e('ไม่พบข้อมูล', 'tdep-tem'); ?></p>
        </div>
    <?php endif;
    
    return ob_get_clean();
}
add_shortcode('tdep_tem', 'tdep_tem_shortcode');

// After theme setup
function tdep_tem_after_setup_theme() {
    add_theme_support('post-thumbnails');
    add_image_size('tdep-tem-thumbnail', 800, 450, true);
}
add_action('after_setup_theme', 'tdep_tem_after_setup_theme');

// Register custom image size for admin
function tdep_tem_admin_image_sizes($sizes) {
    $sizes['tdep-tem-thumbnail'] = __('Card Thumbnail Size', 'your-text-domain');
    return $sizes;
}
add_filter('image_size_names_choose', 'tdep_tem_admin_image_sizes');


/**** แสดงรายการของ Tdep */

// Enqueue necessary scripts and styles
function tdep_list_enqueue_assets() {
    $theme_version = wp_get_theme()->get('Version');
    
    // Enqueue CSS
    wp_enqueue_style(
        'tdep-list-style',
        get_stylesheet_directory_uri() . '/css/tdep-list.css',
        array(),
        $theme_version
    );

    // Enqueue JavaScript
    wp_enqueue_script(
        'tdep-list-script',
        get_stylesheet_directory_uri() . '/js/tdep-list.js',
        array('jquery'),
        $theme_version,
        true
    );

    // Localize script
    wp_localize_script(
        'tdep-list-script',
        'tdepListData',
        array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('tdep_list_nonce')
        )
    );
}
add_action('wp_enqueue_scripts', 'tdep_list_enqueue_assets');

// ฟังก์ชันตรวจสอบโพสต์ใหม่
function tdep_is_new_post($post_time) {
    $current_time = current_time('timestamp');
    $hours_diff = ($current_time - $post_time) / 3600; // แปลงวินาทีเป็นชั่วโมง
    return $hours_diff <= 12;
}

// Time ago function
function tdep_list_time_ago($timestamp) {
    $current_time = current_time('timestamp');
    $diff = $current_time - $timestamp;
    
    if ($diff < 60) {
        return "เมื่อ " . $diff . " วินาทีที่แล้ว";
    } elseif ($diff < 3600) {
        $minutes = floor($diff / 60);
        return "เมื่อ " . $minutes . " นาทีที่แล้ว";
    } elseif ($diff < 86400) { // น้อยกว่า 24 ชั่วโมง
        $hours = floor($diff / 3600);
        return "เมื่อ " . $hours . " ชั่วโมงที่แล้ว";
    } else {
        $thai_months = array(
            "ม.ค.", "ก.พ.", "มี.ค.", "เม.ย.", "พ.ค.", "มิ.ย.",
            "ก.ค.", "ส.ค.", "ก.ย.", "ต.ค.", "พ.ย.", "ธ.ค."
        );
        $day = date('j', $timestamp);
        $month = $thai_months[date('n', $timestamp) - 1];
        $year = date('Y', $timestamp) + 543; // แปลงเป็น พ.ศ.
        return "$day $month $year";
    }
}

// Main shortcode function
function tdep_list_shortcode($atts) {
    $args = shortcode_atts(array(
        'posts_per_page' => 10,
        'paged' => get_query_var('paged') ? get_query_var('paged') : 1,
        'orderby' => 'date',
        'order' => 'DESC'
    ), $atts);

    $query_args = array(
        'post_type' => 'department',
        'posts_per_page' => $args['posts_per_page'],
        'paged' => $args['paged'],
        'orderby' => $args['orderby'],
        'order' => $args['order'],
        'post_status' => 'publish'
    );

    $query = new WP_Query($query_args);
    
    ob_start();
    
    if ($query->have_posts()) : ?>
        <div class="tdep-list-container">
            <!-- Loading skeleton template -->
            <template id="tdep-list-skeleton">
                <div class="tdep-list-item tdep-list-skeleton">
                    <div class="tdep-list-content">
                        <div class="tdep-list-title-skeleton"></div>
                    </div>
                    <div class="tdep-list-time-skeleton"></div>
                </div>
            </template>

            <!-- Main content -->
            <div class="tdep-list-wrapper" role="list">
                <?php while ($query->have_posts()) : $query->the_post();
                    // Get all taxonomies for this post type
                    $taxonomies = get_object_taxonomies('department');
                    $term_links = array();
                    
                    // Get terms from all taxonomies with their links
                    foreach ($taxonomies as $taxonomy) {
                        $terms = get_the_terms(get_the_ID(), $taxonomy);
                        if ($terms && !is_wp_error($terms)) {
                            foreach ($terms as $term) {
                                $term_links[] = array(
                                    'name' => $term->name,
                                    'url' => get_term_link($term->term_id, $taxonomy)
                                );
                            }
                        }
                    }
                ?>
                    <article class="tdep-list-item" role="listitem">
                        <div class="tdep-list-link">
                            <div class="tdep-list-content">
                                <div class="tdep-list-title-wrapper">
                                    <a href="<?php echo esc_url(get_permalink()); ?>" class="tdep-list-title-link">
                                        <h2 class="tdep-list-title">
                                            <?php echo esc_html(get_the_title()); ?>
                                            <?php if (tdep_is_new_post(get_the_time('U'))) : ?>
                                                <span class="tdep-list-new-badge">ใหม่</span>
                                            <?php endif; ?>
                                        </h2>
                                    </a>
                                    <?php if (!empty($term_links)) : ?>
                                        <div class="tdep-list-inline-terms">
                                            <?php foreach ($term_links as $index => $term) : ?>
                                                <a href="<?php echo esc_url($term['url']); ?>" 
                                                   class="tdep-list-term-link"
                                                   title="ดูทั้งหมดใน <?php echo esc_attr($term['name']); ?>">
                                                    <?php echo esc_html($term['name']); ?>
                                                </a>
                                                <?php if ($index < count($term_links) - 1) echo '<span class="tdep-list-term-separator">,</span>'; ?>
                                            <?php endforeach; ?>
                                        </div>
                                    <?php endif; ?>
                                </div>
                            </div>
                            <time class="tdep-list-time" datetime="<?php echo get_the_date('c'); ?>">
                                <?php echo tdep_list_time_ago(get_the_time('U')); ?>
                            </time>
                        </div>
                    </article>
                <?php endwhile; ?>
            </div>

            <?php if ($query->max_num_pages > 1) : ?>
                <nav class="tdep-list-pagination" role="navigation" aria-label="เพจเนชั่น">
                    <?php
                    echo paginate_links(array(
                        'base' => str_replace(999999999, '%#%', esc_url(get_pagenum_link(999999999))),
                        'format' => '?paged=%#%',
                        'current' => max(1, get_query_var('paged')),
                        'total' => $query->max_num_pages,
                        'prev_text' => '<span class="tdep-list-prev">หน้าก่อนหน้า</span>',
                        'next_text' => '<span class="tdep-list-next">หน้าถัดไป</span>',
                        'type' => 'list',
                        'mid_size' => 2,
                        'end_size' => 1
                    ));
                    ?>
                </nav>
            <?php endif; ?>
        </div>
        <?php wp_reset_postdata();
    else : ?>
        <div class="tdep-list-empty">
            <p><?php esc_html_e('ไม่พบข้อมูล', 'tdep-list'); ?></p>
        </div>
    <?php endif;
    
    return ob_get_clean();
}
add_shortcode('tdep_list', 'tdep_list_shortcode');

// Add theme support for thumbnails if needed
function tdep_list_after_setup_theme() {
    add_theme_support('post-thumbnails');
}
add_action('after_setup_theme', 'tdep_list_after_setup_theme');



/***** ระบบจัดการหมวดหมู่ใน tDEP */

function register_category_editor_assets() {
    wp_enqueue_media(); // เพิ่ม WordPress Media Uploader
    wp_enqueue_style('category-editor-style', get_stylesheet_directory_uri() . '/css/category-editor.css', array(), '1.0.0');
    wp_enqueue_script('category-editor-script', get_stylesheet_directory_uri() . '/js/category-editor.js', array('jquery'), '1.0.0', true);
    wp_localize_script('category-editor-script', 'categoryEditorAjax', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('category_editor_nonce')
    ));
}
add_action('wp_enqueue_scripts', 'register_category_editor_assets');

// Shortcode function
function category_editor_shortcode() {
    ob_start();
    ?>
    <div class="category-editor-wrapper">
        <button class="category-editor-btn" id="openCategoryEditor">
            <i class="fas fa-cog"></i>
            <span>แก้ไขหมวดหมู่</span>
        </button>

        <!-- Modal Popup -->
        <div class="category-modal" id="categoryModal">
            <div class="category-modal-content">
                <div class="modal-header">
                    <h2>จัดการหมวดหมู่</h2>
                    <button class="close-modal">&times;</button>
                </div>

                <!-- รายการหมวดหมู่ทั้งหมด -->
                <div class="categories-grid" id="categoriesGrid">
                    <!-- Skeleton Loading -->
                    <div class="category-card skeleton">
                        <div class="skeleton-image"></div>
                        <div class="skeleton-text"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('category_editor', 'category_editor_shortcode');

// AJAX handlers
function get_tdep_categories() {
    check_ajax_referer('category_editor_nonce', 'nonce');
    
    $terms = get_terms(array(
        'taxonomy' => 'tdep',
        'hide_empty' => false,
    ));

    $categories = array();
    foreach ($terms as $term) {
        $image_id = get_term_meta($term->term_id, 'tdep_image_id', true);
        $image_url = wp_get_attachment_url($image_id);
        
        $categories[] = array(
            'id' => $term->term_id,
            'name' => $term->name,
            'slug' => $term->slug,
            'image' => $image_url,
            'image_id' => $image_id
        );
    }

    wp_send_json_success($categories);
}
add_action('wp_ajax_get_tdep_categories', 'get_tdep_categories');
add_action('wp_ajax_nopriv_get_tdep_categories', 'get_tdep_categories');

function update_tdep_category() {
    check_ajax_referer('category_editor_nonce', 'nonce');
    
    $term_id = intval($_POST['term_id']);
    $response_data = array();
    
    // อัพเดตชื่อหมวดหมู่
    if (isset($_POST['name']) && !empty($_POST['name'])) {
        $name = sanitize_text_field($_POST['name']);
        $update_result = wp_update_term($term_id, 'tdep', array(
            'name' => $name
        ));
        
        if (!is_wp_error($update_result)) {
            $response_data['name_updated'] = true;
            $response_data['new_name'] = $name;
        } else {
            wp_send_json_error(array(
                'message' => 'ไม่สามารถอัพเดตชื่อหมวดหมู่ได้'
            ));
            return;
        }
    }
    
    // จัดการรูปภาพ
    if (isset($_POST['image_id'])) {
        $image_id = intval($_POST['image_id']);
        update_term_meta($term_id, 'tdep_image_id', $image_id);
        $response_data['image_updated'] = true;
        $response_data['new_image_url'] = wp_get_attachment_url($image_id);
    } elseif (isset($_POST['remove_image'])) {
        delete_term_meta($term_id, 'tdep_image_id');
        $response_data['image_removed'] = true;
    }
    
    wp_send_json_success($response_data);
    check_ajax_referer('category_editor_nonce', 'nonce');
    
    $term_id = intval($_POST['term_id']);
    $name = sanitize_text_field($_POST['name']);
    
    $result = wp_update_term($term_id, 'tdep', array(
        'name' => $name
    ));

    if (isset($_FILES['image'])) {
        $image_id = media_handle_upload('image', 0);
        if (!is_wp_error($image_id)) {
            update_term_meta($term_id, 'tdep_image_id', $image_id);
        }
    }

    wp_send_json_success();
}
add_action('wp_ajax_update_tdep_category', 'update_tdep_category');

function delete_tdep_category() {
    check_ajax_referer('category_editor_nonce', 'nonce');
    
    $term_id = intval($_POST['term_id']);
    $result = wp_delete_term($term_id, 'tdep');

    if (is_wp_error($result)) {
        wp_send_json_error($result->get_error_message());
    }
    
    wp_send_json_success();
}
add_action('wp_ajax_delete_tdep_category', 'delete_tdep_category');


/**** ฟังก์ชั่นสร้างหมวดหมู่ใน tDEP ใหม่ *****/

function tdep_arc_create_shortcode() {
    // Enqueue SweetAlert2
    wp_enqueue_script('sweetalert2', 'https://cdn.jsdelivr.net/npm/sweetalert2@11', array(), null, true);
    
    // Enqueue jQuery
    wp_enqueue_script('jquery');
    
    // Enqueue custom script
    wp_enqueue_script('tdep-arc-create-js', get_stylesheet_directory_uri() . '/js/tdep-arc-create.js', array('jquery', 'sweetalert2'), '1.0', true);
    wp_enqueue_style('tdep-arc-create-css', get_stylesheet_directory_uri() . '/css/tdep-arc-create.css');
    
    // Add nonce และข้อมูลสำหรับ AJAX
    wp_localize_script('tdep-arc-create-js', 'tdepArcAjax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'security' => wp_create_nonce('tdep_arc_create_nonce'),
        'current_user_id' => get_current_user_id()
    ));
    
    $output = '
    <button id="tdep-create-btn" class="tdep-btn">เพิ่มหมวดหมู่</button>
    
    <div id="tdep-modal" class="tdep-modal">
        <div class="tdep-modal-content">
            <span class="tdep-close">&times;</span>
            <h2>เพิ่มหมวดหมู่ใหม่</h2>
            
            <form id="tdep-arc-create-form">
                <div class="tdep-form-group">
                    <label for="tdep-name">ชื่อหมวดหมู่:</label>
                    <input type="text" id="tdep-name" name="tdep-name" required>
                </div>
                
                <div class="tdep-form-group">
                    <label for="tdep-slug">Slug URL:</label>
                    <input type="text" id="tdep-slug" name="tdep-slug" readonly>
                </div>
                
                <button type="submit" class="tdep-submit">บันทึก</button>
            </form>
        </div>
    </div>';
    
    return $output;
}
add_shortcode('tdep_arc_create', 'tdep_arc_create_shortcode');

function tdep_arc_preview_slug() {
    // ตรวจสอบ nonce
    if (!isset($_POST['security']) || !wp_verify_nonce($_POST['security'], 'tdep_arc_create_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        exit;
    }
    
    global $wpdb;
    
    // ค้นหา slug ล่าสุดที่มีรูปแบบ depXXX
    $query = $wpdb->prepare(
        "SELECT slug FROM {$wpdb->terms} t 
         INNER JOIN {$wpdb->term_taxonomy} tt ON t.term_id = tt.term_id 
         WHERE tt.taxonomy = %s AND t.slug REGEXP '^dep[0-9]+$'
         ORDER BY LENGTH(slug) DESC, slug DESC 
         LIMIT 1",
        'tdep'
    );
    
    $latest_slug = $wpdb->get_var($query);
    
    if ($latest_slug && preg_match('/dep(\d+)/', $latest_slug, $matches)) {
        $next_number = intval($matches[1]) + 1;
    } else {
        $next_number = 1;
    }
    
    wp_send_json_success(array('slug' => 'dep' . $next_number));
}
add_action('wp_ajax_tdep_arc_preview_slug', 'tdep_arc_preview_slug');
add_action('wp_ajax_nopriv_tdep_arc_preview_slug', 'tdep_arc_preview_slug');

function tdep_arc_create_category() {
    // ตรวจสอบ nonce
    if (!isset($_POST['security']) || !wp_verify_nonce($_POST['security'], 'tdep_arc_create_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        exit;
    }
    
    if (!isset($_POST['name']) || empty($_POST['name'])) {
        wp_send_json_error(array('message' => 'กรุณากรอกชื่อหมวดหมู่'));
        exit;
    }
    
    $name = sanitize_text_field($_POST['name']);
    $slug = sanitize_text_field($_POST['slug']);
    
    if (empty($slug)) {
        global $wpdb;
        $query = $wpdb->prepare(
            "SELECT slug FROM {$wpdb->terms} t 
             INNER JOIN {$wpdb->term_taxonomy} tt ON t.term_id = tt.term_id 
             WHERE tt.taxonomy = %s AND t.slug REGEXP '^dep[0-9]+$'
             ORDER BY LENGTH(slug) DESC, slug DESC 
             LIMIT 1",
            'tdep'
        );
        
        $latest_slug = $wpdb->get_var($query);
        
        if ($latest_slug && preg_match('/dep(\d+)/', $latest_slug, $matches)) {
            $next_number = intval($matches[1]) + 1;
        } else {
            $next_number = 1;
        }
        
        $slug = 'dep' . $next_number;
    }
    
    $result = wp_insert_term(
        $name,
        'tdep',
        array('slug' => $slug)
    );
    
    if (is_wp_error($result)) {
        wp_send_json_error(array('message' => $result->get_error_message()));
    } else {
        wp_send_json_success(array(
            'message' => 'สร้างหมวดหมู่สำเร็จ',
            'slug' => $slug
        ));
    }
}

// ลงทะเบียน AJAX actions
add_action('wp_ajax_tdep_arc_preview_slug', 'tdep_arc_preview_slug');
add_action('wp_ajax_nopriv_tdep_arc_preview_slug', 'tdep_arc_preview_slug');
add_action('wp_ajax_tdep_arc_create_category', 'tdep_arc_create_category');
add_action('wp_ajax_nopriv_tdep_arc_create_category', 'tdep_arc_create_category');


/**** สร้าง Post ใหม่ใน tDEP *****/

function tdep_post_shortcode() {
    // Enqueue required scripts and styles
    wp_enqueue_script('tdep-post-js', get_stylesheet_directory_uri() . '/js/tdep-post.js', array('jquery'), '1.0', true);
    wp_enqueue_style('tdep-post-css', get_stylesheet_directory_uri() . '/css/tdep-post.css');
    wp_enqueue_media(); // For media uploader

    // Add nonce for security
    wp_localize_script('tdep-post-js', 'tdep_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('tdep_post_nonce')
    ));

    // Get departments from taxonomy
    $departments = get_terms(array(
        'taxonomy' => 'tdep',
        'hide_empty' => false
    ));

    // Modal HTML structure
    $output = '
    <button id="tdep-post-btn" class="tdep-btn">เพิ่มข้อมูล</button>

    <div id="tdep-post-modal" class="tdep-modal">
        <div class="tdep-modal-content">
            <span class="tdep-close">&times;</span>
            <h2>เพิ่มข้อมูลใหม่</h2>

            <form id="tdep-post-form">
                <div class="tdep-form-row">
                    <div class="tdep-form-col">
                        <label for="tdep-department">เลือกหน่วยงานย่อย:</label>
                        <select id="tdep-department" name="department" required>
                            <option value="">กรุณาเลือกหน่วยงาน</option>';
                            foreach ($departments as $dept) {
                                $output .= '<option value="' . esc_attr($dept->term_id) . '">' . esc_html($dept->name) . '</option>';
                            }
    $output .= '
                        </select>
                    </div>
                    <div class="tdep-form-col">
                        <label>รูปภาพหลัก:</label>
                        <div class="tdep-featured-image">
                            <button type="button" id="tdep-upload-btn" class="tdep-upload-btn">
                                <span class="upload-icon">+</span>
                                <span class="upload-text">เลือกรูปภาพ</span>
                            </button>
                            <div id="tdep-image-preview" class="image-preview"></div>
                            <input type="hidden" id="tdep-featured-image-id" name="featured_image_id">
                        </div>
                    </div>
                </div>

                <div class="tdep-form-group">
                    <label for="tdep-title">ชื่อเรื่อง:</label>
                    <input type="text" id="tdep-title" name="title" required>
                </div>

                <div class="tdep-form-group">
                    <label for="tdep-content">เนื้อหาหลัก:</label>
                    <textarea id="tdep-content" name="content" rows="6" required></textarea>
                </div>

                <button type="submit" class="tdep-submit">บันทึก</button>
            </form>
        </div>
    </div>';

    return $output;
}
add_shortcode('tdep_post', 'tdep_post_shortcode');

// AJAX handler for creating new post
function tdep_create_post() {
    check_ajax_referer('tdep_post_nonce', 'nonce');

    $post_data = array(
        'post_title' => sanitize_text_field($_POST['title']),
        'post_content' => wp_kses_post($_POST['content']),
        'post_type' => 'department',
        'post_status' => 'publish'
    );

    // Create post
    $post_id = wp_insert_post($post_data);

    if ($post_id) {
        // Update post name (slug) to match post ID
        wp_update_post(array(
            'ID' => $post_id,
            'post_name' => $post_id
        ));

        // Set department taxonomy
        wp_set_object_terms($post_id, intval($_POST['department']), 'tdep');

        // Set featured image
        if (!empty($_POST['featured_image_id'])) {
            set_post_thumbnail($post_id, intval($_POST['featured_image_id']));
        }

        wp_send_json_success(array(
            'message' => 'สร้างโพสสำเร็จ',
            'post_url' => get_permalink($post_id)
        ));
    } else {
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดในการสร้างโพส'));
    }
}
add_action('wp_ajax_tdep_create_post', 'tdep_create_post');
add_action('wp_ajax_nopriv_tdep_create_post', 'tdep_create_post');



/**** POST LIST ของ tDEP2 ****/

function tdep_list_2_enqueue_assets() {
    $theme_version = wp_get_theme()->get('Version');
    
    // Check for child theme CSS
    if (is_child_theme()) {
        $child_style_path = get_stylesheet_directory() . '/css/tdep-list-2.css';
        $child_style_uri = get_stylesheet_directory_uri() . '/css/tdep-list-2.css';
        
        if (file_exists($child_style_path)) {
            wp_enqueue_style('tdep-list-2-style', $child_style_uri, array(), $theme_version);
        } else {
            wp_enqueue_style('tdep-list-2-style', get_template_directory_uri() . '/css/tdep-list-2.css', array(), $theme_version);
        }
        
        // Check for child theme JS
        $child_script_path = get_stylesheet_directory() . '/js/tdep-list-2.js';
        $child_script_uri = get_stylesheet_directory_uri() . '/js/tdep-list-2.js';
        
        if (file_exists($child_script_path)) {
            wp_enqueue_script('tdep-list-2-script', $child_script_uri, array('jquery'), $theme_version, true);
        } else {
            wp_enqueue_script('tdep-list-2-script', get_template_directory_uri() . '/js/tdep-list-2.js', array('jquery'), $theme_version, true);
        }
    } else {
        wp_enqueue_style('tdep-list-2-style', get_template_directory_uri() . '/css/tdep-list-2.css', array(), $theme_version);
        wp_enqueue_script('tdep-list-2-script', get_template_directory_uri() . '/js/tdep-list-2.js', array('jquery'), $theme_version, true);
    }
}
add_action('wp_enqueue_scripts', 'tdep_list_2_enqueue_assets');

// Related posts shortcode function
function tdep_list_2_shortcode($atts) {
    // Parse attributes
    $atts = shortcode_atts(array(
        'posts_per_page' => 3,
        'exclude_current' => 'yes'
    ), $atts);
    
    // Get current post's taxonomies and terms
    $current_post_id = get_the_ID();
    $taxonomies = get_object_taxonomies('department');
    $current_terms = array();
    
    foreach ($taxonomies as $taxonomy) {
        $terms = wp_get_post_terms($current_post_id, $taxonomy, array('fields' => 'ids'));
        if (!empty($terms) && !is_wp_error($terms)) {
            $current_terms[$taxonomy] = $terms;
        }
    }
    
    // Build tax query
    $tax_query = array('relation' => 'OR');
    foreach ($current_terms as $taxonomy => $terms) {
        $tax_query[] = array(
            'taxonomy' => $taxonomy,
            'field' => 'id',
            'terms' => $terms
        );
    }
    
    // Setup query arguments
    $query_args = array(
        'post_type' => 'department',
        'posts_per_page' => $atts['posts_per_page'],
        'post_status' => 'publish',
        'tax_query' => $tax_query,
        'orderby' => 'date',
        'order' => 'DESC'
    );
    
    // Exclude current post if specified
    if ($atts['exclude_current'] === 'yes') {
        $query_args['post__not_in'] = array($current_post_id);
    }
    
    $query = new WP_Query($query_args);
    
    ob_start();
    
    if ($query->have_posts()) : ?>
        <div class="tdep-list-2-container">
            <div class="tdep-list-2-wrapper">
                <?php while ($query->have_posts()) : $query->the_post(); ?>
                    <article class="tdep-list-2-item">
                        <a href="<?php the_permalink(); ?>" class="tdep-list-2-link">
                            <div class="tdep-list-2-image">
                                <?php if (has_post_thumbnail()) : ?>
                                    <?php the_post_thumbnail('medium', array('class' => 'tdep-list-2-thumbnail')); ?>
                                <?php else : ?>
                                    <div class="tdep-list-2-no-image"></div>
                                <?php endif; ?>
                                <?php
                                    // Get all taxonomies for this post
                                    $taxonomies = get_object_taxonomies('department');
                                    $first_term = null;

                                    // Loop through taxonomies to find the first term
                                    foreach ($taxonomies as $taxonomy) {
                                        $terms = get_the_terms(get_the_ID(), $taxonomy);
                                        if (!empty($terms) && !is_wp_error($terms)) {
                                            $first_term = $terms[0];
                                            break; // ใช้ term แรกที่เจอ
                                        }
                                    }

                                    // Display the term name if found
                                    if ($first_term) : ?>
                                        <span class="tdep-list-2-badge"><?php echo esc_html($first_term->name); ?></span>
                                    <?php endif; ?>
                                    
                            </div>
                            <div class="tdep-list-2-content">
                                <h3 class="tdep-list-2-title"><?php the_title(); ?></h3>
                                <div class="tdep-list-2-meta">
                                    <span class="tdep-list-2-time"><?php echo tdep_tem_time_ago(get_the_time('U')); ?></span>
                                    <span class="tdep-list-2-separator">•</span>
                                    <span class="tdep-list-2-readmore">อ่านต่อ</span>
                                </div>
                            </div>
                        </a>
                    </article>
                <?php endwhile; ?>
            </div>
        </div>
    <?php endif;
    
    wp_reset_postdata();
    
    return ob_get_clean();
}
add_shortcode('tdep_list_2', 'tdep_list_2_shortcode');



/**** ฟังก์ชั่นเปลี่ยน Taxonomy ของโพสใน tDEP *****/

// Enqueue necessary scripts and styles
function tdep_enqueue_scripts() {
    wp_enqueue_style('tdep-post-taxo', get_stylesheet_directory_uri() . '/css/tdep-post-taxo.css');
    wp_enqueue_script('tdep-post-taxo', get_stylesheet_directory_uri() . '/js/tdep-post-taxo.js', array('jquery'), '1.0', true);
    
    wp_localize_script('tdep-post-taxo', 'tdepAjax', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('tdep_nonce'),
        'isLoggedIn' => is_user_logged_in()
    ));
}
add_action('wp_enqueue_scripts', 'tdep_enqueue_scripts');

// Create shortcode function
function tdep_post_taxo_shortcode($atts) {
    $post_id = get_the_ID();
    $terms = get_the_terms($post_id, 'tdep');
    $current_term = !empty($terms) ? $terms[0] : null;
    
    $output = '<div class="tdep-taxonomy-container">';
    
    if ($current_term) {
        $output .= '<div class="tdep-term-display" data-post-id="' . $post_id . '">';
        $output .= '<a href="' . get_term_link($current_term) . '" class="tdep-term-link">' . 
                  esc_html($current_term->name) . '</a>';
        
        if (is_user_logged_in()) {
            $output .= '<button class="tdep-edit-btn"><i class="tdep-edit-icon"></i></button>';
            
            // Hidden select box for editing
            $output .= '<div class="tdep-edit-form" style="display:none;">';
            $output .= '<select class="tdep-term-select">';
            
            $all_terms = get_terms(array(
                'taxonomy' => 'tdep',
                'hide_empty' => false,
            ));
            
            foreach ($all_terms as $term) {
                $selected = ($current_term->term_id === $term->term_id) ? 'selected' : '';
                $output .= '<option value="' . $term->term_id . '" ' . $selected . '>' . 
                          esc_html($term->name) . '</option>';
            }
            
            $output .= '</select>';
            $output .= '<button class="tdep-save-btn">บันทึก</button>';
            $output .= '<button class="tdep-cancel-btn">ยกเลิก</button>';
            $output .= '</div>';
        }
        
        $output .= '</div>';
    }
    
    $output .= '</div>';
    
    return $output;
}
add_shortcode('tdep_post_taxo', 'tdep_post_taxo_shortcode');

// AJAX handler for updating taxonomy
function tdep_update_taxonomy() {
    check_ajax_referer('tdep_nonce', 'nonce');
    
    if (!current_user_can('edit_posts')) {
        wp_send_json_error('Permission denied');
        return;
    }
    
    $post_id = intval($_POST['post_id']);
    $term_id = intval($_POST['term_id']);
    
    $result = wp_set_object_terms($post_id, $term_id, 'tdep');
    
    if (is_wp_error($result)) {
        wp_send_json_error($result->get_error_message());
    } else {
        $term = get_term($term_id, 'tdep');
        wp_send_json_success(array(
            'term_name' => $term->name,
            'term_link' => get_term_link($term)
        ));
    }
}
add_action('wp_ajax_tdep_update_taxonomy', 'tdep_update_taxonomy');



/***** ระบบส่งเมลติดต่อจากหน้า ติดต่อหน่วยงาน  ******/

// Enqueue necessary scripts and styles
function contact_form_enqueue_scripts() {
    wp_enqueue_style('contact-form-style', get_stylesheet_directory_uri() . '/css/contact-form.css');
    wp_enqueue_script('contact-form-script', get_stylesheet_directory_uri() . '/js/contact-form.js', array('jquery'), '1.0', true);
    wp_localize_script('contact-form-script', 'ajax_object', array('ajax_url' => admin_url('admin-ajax.php')));
}
add_action('wp_enqueue_scripts', 'contact_form_enqueue_scripts');

// Create shortcode for contact form
function contact_form_shortcode() {
    ob_start();
    ?>
    <div class="contact-form-container" role="form" aria-labelledby="form-title">
        <h2 id="form-title" class="form-title">แบบฟอร์มติดต่อหน่วยงาน</h2>
        
        <form id="department-contact-form" class="department-contact-form" novalidate>
            <div class="form-group">
                <label for="contact_name" class="form-label">
                    ชื่อผู้ติดต่อ
                    <span class="required-asterisk" aria-hidden="true">*</span>
                    <span class="sr-only">จำเป็นต้องกรอก</span>
                </label>
                <div class="input-wrapper">
                    <input 
                        type="text" 
                        id="contact_name" 
                        name="contact_name" 
                        class="form-control"
                        required
                        aria-required="true"
                        aria-describedby="name-error"
                        autocomplete="name"
                    >
                </div>
                <div id="name-error" class="error-message" aria-live="polite"></div>
            </div>
            
            <div class="form-group">
                <label for="contact_email" class="form-label">
                    E-mail
                    <span class="required-asterisk" aria-hidden="true">*</span>
                    <span class="sr-only">จำเป็นต้องกรอก</span>
                </label>
                <div class="input-wrapper">
                    <input 
                        type="email" 
                        id="contact_email" 
                        name="contact_email" 
                        class="form-control"
                        required
                        aria-required="true"
                        aria-describedby="email-error"
                        autocomplete="email"
                    >
                </div>
                <div id="email-error" class="error-message" aria-live="polite"></div>
            </div>
            
            <div class="form-group">
                <label for="contact_message" class="form-label">
                    รายละเอียด
                    <span class="required-asterisk" aria-hidden="true">*</span>
                    <span class="sr-only">จำเป็นต้องกรอก</span>
                </label>
                <div class="input-wrapper">
                    <textarea 
                        id="contact_message" 
                        name="contact_message" 
                        class="form-control"
                        required
                        aria-required="true"
                        aria-describedby="message-error"
                        rows="5"
                    ></textarea>
                </div>
                <div id="message-error" class="error-message" aria-live="polite"></div>
            </div>
            
            <div class="form-submit">
                <button 
                    type="submit" 
                    class="submit-button"
                    aria-label="ส่งแบบฟอร์ม"
                >
                    <span class="button-text">ส่งรายละเอียด</span>
                </button>
            </div>
        </form>
    </div>

    <!-- Loading Overlay -->
    <div id="loading-overlay" class="loading-overlay" role="alert" aria-busy="true" style="display: none;">
        <div class="loading-spinner"></div>
        <span class="loading-text">กำลังส่งข้อมูล...</span>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('department_contact', 'contact_form_shortcode');

// Handle AJAX submission
function handle_contact_form_submission() {
    // Verify nonce and sanitize inputs as before
    $contact_name = sanitize_text_field($_POST['contact_name']);
    $contact_email = sanitize_email($_POST['contact_email']);
    $contact_message = sanitize_textarea_field($_POST['contact_message']);
    
    $data = array(
        'contact_name' => $contact_name,
        'contact_email' => $contact_email,
        'contact_message' => $contact_message
    );

    // Set email headers
    $headers = array(
        'Content-Type: text/html; charset=UTF-8',
        'From: ' . get_bloginfo('name') . ' <' . get_bloginfo('admin_email') . '>'
    );

    // Send email to admin
    $admin_email = get_option('admin_email');
    $admin_subject = '[' . get_bloginfo('name') . '] มีข้อความติดต่อใหม่จาก ' . $contact_name;
    $admin_message = get_contact_email_template($data, 'admin');
    
    $admin_mail_sent = wp_mail($admin_email, $admin_subject, $admin_message, $headers);

    // Send confirmation email to user
    $user_subject = '[' . get_bloginfo('name') . '] ยืนยันการส่งข้อความติดต่อ';
    $user_message = get_contact_email_template($data, 'user');
    
    $user_mail_sent = wp_mail($contact_email, $user_subject, $user_message, $headers);

    // Prepare response
    if ($admin_mail_sent && $user_mail_sent) {
        $response = array(
            'status' => 'success',
            'message' => 'ส่งข้อความเรียบร้อยแล้ว'
        );
    } else {
        $response = array(
            'status' => 'error',
            'message' => 'เกิดข้อผิดพลาดในการส่งข้อความ กรุณาลองใหม่อีกครั้ง'
        );
    }
    
    wp_send_json($response);
}
add_action('wp_ajax_contact_form_submit', 'handle_contact_form_submission');
add_action('wp_ajax_nopriv_contact_form_submit', 'handle_contact_form_submission');


function get_contact_email_template($data, $type = 'admin') {
    // Get site logo URL
    $logo_url = wp_get_attachment_image_src(get_theme_mod('custom_logo'), 'full')[0] ?? '';
    $site_name = get_bloginfo('name');
    $site_url = get_site_url();
    
    // Format current date in Thai locale
    $current_date = date('j F Y');

    // Base template
    $template = '
    <!DOCTYPE html>
    <html lang="th">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Contact Form Notification</title>
    </head>
    <body style="margin: 0; padding: 0; font-family: \'Sarabun\', Arial, sans-serif;">
        <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
            <!-- Header with Logo -->
            <div style="text-align: center; padding: 20px 0; border-bottom: 2px solid #002D74;">
                <img src="' . esc_url($logo_url) . '" alt="' . esc_attr($site_name) . '" style="max-height: 80px;">
            </div>
            
            <!-- Date -->
            <div style="text-align: right; color: #666; padding: 10px 0;">
                ' . esc_html($current_date) . '
            </div>';

    // Different content for admin and user
    if ($type === 'admin') {
        $template .= '
            <div style="padding: 20px 0;">
                <h2 style="color: #002D74; margin-bottom: 20px;">การแจ้งเตือนแบบฟอร์มติดต่อใหม่</h2>
                <p>ระบบได้รับข้อความติดต่อใหม่จากแบบฟอร์มติดต่อหน่วยงาน โดยมีรายละเอียดดังนี้:</p>
                
                <div style="background: #f5f5f5; padding: 20px; margin: 20px 0; border-left: 4px solid #002D74;">
                    <p><strong>ชื่อผู้ติดต่อ:</strong> ' . esc_html($data['contact_name']) . '</p>
                    <p><strong>อีเมล:</strong> ' . esc_html($data['contact_email']) . '</p>
                    <p><strong>รายละเอียด:</strong></p>
                    <p style="white-space: pre-wrap;">' . esc_html($data['contact_message']) . '</p>
                </div>
            </div>';
    } else {
        $template .= '
            <div style="padding: 20px 0;">
                <h2 style="color: #002D74; margin-bottom: 20px;">ยืนยันการส่งข้อความติดต่อ</h2>
                <p>เรียน คุณ' . esc_html($data['contact_name']) . '</p>
                <p>ระบบได้รับข้อความติดต่อของท่านเรียบร้อยแล้ว โดยมีรายละเอียดดังนี้:</p>
                
                <div style="background: #f5f5f5; padding: 20px; margin: 20px 0; border-left: 4px solid #002D74;">
                    <p><strong>รายละเอียดข้อความ:</strong></p>
                    <p style="white-space: pre-wrap;">' . esc_html($data['contact_message']) . '</p>
                </div>
                
                <p>เจ้าหน้าที่จะดำเนินการตรวจสอบและติดต่อกลับโดยเร็วที่สุด</p>
            </div>';
    }

    // Footer
    $template .= '
            <div style="border-top: 1px solid #ddd; margin-top: 30px; padding-top: 20px; color: #666; font-size: 14px;">
                <p style="margin: 0;">' . esc_html($site_name) . '</p>
                <p style="margin: 5px 0;"><a href="' . esc_url($site_url) . '" style="color: #002D74; text-decoration: none;">' . esc_url($site_url) . '</a></p>
            </div>
        </div>
    </body>
    </html>';

    return $template;
}


/**** ฟอร์มเพิ่มข่าวกิจกรรม *****/


// Add shortcode function
function tgall_add_shortcode() {
    // Enqueue required scripts and styles
    wp_enqueue_script('jquery-ui-sortable');
    wp_enqueue_script('jquery-ui-datepicker');
    wp_enqueue_media();
    wp_enqueue_script('tgall-add', get_stylesheet_directory_uri() . '/js/tgall-add.js', array('jquery'), '1.0.0', true);
    wp_enqueue_style('tgall-add', get_stylesheet_directory_uri() . '/css/tgall-add.css');
    
    // Localize script
    wp_localize_script('tgall-add', 'tgall_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('tgall_nonce')
    ));
    
    // Modal HTML structure
    $output = '
    <div class="tgall-container">
        <button type="button" class="tgall-add-button" aria-label="เพิ่มกิจกรรม">
            <span class="dashicons dashicons-plus-alt"></span> เพิ่มกิจกรรม
        </button>
        
        <div id="tgall-modal" class="tgall-modal" aria-hidden="true" role="dialog" aria-labelledby="modal-title">
            <div class="tgall-modal-content">
                <header class="tgall-modal-header">
                    <h2 id="modal-title">เพิ่มกิจกรรมใหม่</h2>
                    <button type="button" class="tgall-close" aria-label="ปิด">&times;</button>
                </header>
                
                <div class="tgall-modal-body">
                    <form id="tgall-form" class="tgall-form">
                        <div class="tgall-form-group">
                            <label for="activity-name">ชื่อกิจกรรม *</label>
                            <input type="text" id="activity-name" required aria-required="true">
                        </div>
                        
                        <div class="tgall-form-group">
                            <label for="activity-date">วันที่จัดกิจกรรม *</label>
                            <input type="text" id="activity-date" class="thai-datepicker" required aria-required="true">
                        </div>
                        
                        <div class="tgall-form-group">
                            <label for="activity-description">รายละเอียดกิจกรรม</label>
                            <textarea id="activity-description" rows="4"></textarea>
                        </div>
                        
                        <div class="tgall-form-group">
                            <label>อัลบัมภาพกิจกรรม</label>
                            <div id="gallery-container" class="gallery-container">
                                <div id="gallery-preview" class="gallery-preview"></div>
                                <button type="button" id="add-images" class="add-images">
                                    <span class="dashicons dashicons-upload"></span> เพิ่มรูปภาพ
                                </button>
                            </div>
                        </div>
                        
                        <div class="tgall-form-group">
                            <label for="activity-category">ประเภทกิจกรรม *</label>
                            <div class="category-container">
                                <select id="activity-category" name="activity-category" required aria-required="true">
                                    <option value="">เลือกประเภทกิจกรรม</option>';
    
    // ดึงข้อมูล terms ด้านนอก HTML string
    $taxonomy_terms = get_terms(array(
        'taxonomy' => 'tgallery',
        'hide_empty' => false,
        'orderby' => 'name',
        'order' => 'ASC'
    ));
    
    // ตรวจสอบและเพิ่ม terms ลงใน output string
    if (!is_wp_error($taxonomy_terms) && !empty($taxonomy_terms)) {
        foreach ($taxonomy_terms as $term) {
            $output .= sprintf(
                '<option value="%d" data-slug="%s">%s</option>',
                $term->term_id,
                esc_attr($term->slug),
                esc_html($term->name)
            );
        }
    }
    
    $output .= '                  </select>
                                <button type="button" id="add-category" class="add-category" aria-label="เพิ่มหมวดหมู่">
                                    <span class="dashicons dashicons-plus-alt"></span>
                                </button>
                            </div>
                        </div>
                        
                        <div class="tgall-form-actions">
                            <button type="submit" class="tgall-submit">บันทึกกิจกรรม</button>
                            <button type="button" class="tgall-cancel">ยกเลิก</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>';
    
    return $output;
}
add_shortcode('tgall_add', 'tgall_add_shortcode');


// AJAX handler for creating new post
function tgall_add_post() {
    check_ajax_referer('tgall_nonce', 'nonce');
    
    $post_title = sanitize_text_field($_POST['title']);
    $event_date = sanitize_text_field($_POST['date']);
    $description = wp_kses_post($_POST['description']);
    $gallery = array_map('intval', $_POST['gallery']);
    $category = intval($_POST['category']);
    
    // Create post
    $post_data = array(
        'post_title' => $post_title,
        'post_type' => 'dgallery',
        'post_status' => 'publish'
    );
    
    $post_id = wp_insert_post($post_data);
    
    if ($post_id) {
        // Update post slug to post ID
        wp_update_post(array(
            'ID' => $post_id,
            'post_name' => $post_id
        ));
        
        // Update custom fields
        update_post_meta($post_id, 'ng_event_date', $event_date);
        update_post_meta($post_id, 'ng_news', $description);
        update_post_meta($post_id, 'ng_gallery', $gallery);
        
        // Set featured image if gallery has images
        if (!empty($gallery)) {
            // ใช้รูปภาพแรกในอัลบัมเป็น Featured Image
            set_post_thumbnail($post_id, $gallery[0]);
        }
        
        // Set category
        $term = get_term($category, 'tgallery');
        if (!is_wp_error($term)) {
            wp_set_object_terms($post_id, $term->term_id, 'tgallery');
        }
        
        wp_send_json_success(array(
            'message' => 'สร้างกิจกรรมเรียบร้อยแล้ว',
            'post_id' => $post_id,
            'category' => $term ? $term->name : '',
            'featured_image' => $gallery[0] ?? null
        ));
    } else {
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดในการสร้างกิจกรรม'));
    }
}
add_action('wp_ajax_tgall_add_post', 'tgall_add_post');

// AJAX handler for adding new category
function tgall_add_category() {
    check_ajax_referer('tgall_nonce', 'nonce');
    
    $category_name = sanitize_text_field($_POST['name']);
    
    // Get latest term ID to generate new slug
    $terms = get_terms(array(
        'taxonomy' => 'tgallery',
        'hide_empty' => false,
        'orderby' => 'slug',
        'order' => 'DESC',
        'number' => 1
    ));
    
    $next_id = 1;
    if (!empty($terms) && !is_wp_error($terms)) {
        $latest_slug = $terms[0]->slug;
        $current_id = intval(str_replace('tgall', '', $latest_slug));
        $next_id = $current_id + 1;
    }
    
    $new_slug = 'tgall' . $next_id;
    
    $result = wp_insert_term($category_name, 'tgallery', array('slug' => $new_slug));
    
    if (!is_wp_error($result)) {
        wp_send_json_success(array(
            'term_id' => $result['term_id'],
            'name' => $category_name
        ));
    } else {
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดในการเพิ่มหมวดหมู่'));
    }
}
add_action('wp_ajax_tgall_add_category', 'tgall_add_category');


// Function to get existing taxonomy terms
function tgall_get_terms() {
    check_ajax_referer('tgall_nonce', 'nonce');
    
    $terms = get_terms(array(
        'taxonomy' => 'tgallery',
        'hide_empty' => false,
        'orderby' => 'name',
        'order' => 'ASC'
    ));
    
    if (!is_wp_error($terms)) {
        $formatted_terms = array_map(function($term) {
            return array(
                'term_id' => $term->term_id,
                'name' => $term->name,
                'slug' => $term->slug,
                'count' => $term->count
            );
        }, $terms);
        
        wp_send_json_success($formatted_terms);
    } else {
        wp_send_json_error(array('message' => 'ไม่พบข้อมูลหมวดหมู่'));
    }
}
add_action('wp_ajax_get_tgallery_terms', 'tgall_get_terms');



/**** ระบบจำกัดสิทธิ์การเข้าถึงของผู้ใช้งาน ******/

if (!defined('ABSPATH')) exit;

class UserPermissionController {
    private $error_message = '';
    private $child_theme_directory;

    public function __construct() {
        $this->child_theme_directory = get_stylesheet_directory_uri();
        
        // Initialize hooks
        add_action('init', array($this, 'user_permission_init'));
        add_action('wp_enqueue_scripts', array($this, 'user_permission_enqueue_scripts'));
        add_action('wp_footer', array($this, 'check_page_access'), 10);
        
        // AJAX handlers for logged in users
        add_action('wp_ajax_update_page_permissions', array($this, 'user_permission_update_permissions'));
        add_action('wp_ajax_get_page_permissions', array($this, 'user_permission_get_permissions'));
        add_action('wp_ajax_check_page_permissions', array($this, 'user_permission_check_permissions'));
        
        // AJAX handlers for non-logged in users
        add_action('wp_ajax_nopriv_check_page_permissions', array($this, 'user_permission_check_permissions'));
        add_action('wp_ajax_nopriv_user_permission_login', array($this, 'handle_login'));
    }

    public function user_permission_init() {
        add_shortcode('page_permission', array($this, 'user_permission_shortcode'));
        
        // Add new AJAX handler for getting all roles
        add_action('wp_ajax_get_all_roles', array($this, 'get_all_roles'));
    }


    public function user_permission_enqueue_scripts() {
        wp_enqueue_style(
            'user-permission-styles', 
            $this->child_theme_directory . '/css/user-permission.css',
            array(),
            '1.0.0'
        );

        wp_enqueue_script('jquery');
        wp_enqueue_script(
            'user-permission-script', 
            $this->child_theme_directory . '/js/user-permission.js',
            array('jquery'),
            '1.0.0',
            true
        );

        wp_localize_script('user-permission-script', 'userPermissionAjax', array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('user_permission_nonce'),
            'homeUrl' => home_url() // เพิ่ม home URL
        ));
    }


    // method to get all roles
    public function get_all_roles() {
        check_ajax_referer('user_permission_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Unauthorized access');
        }
    
        global $wp_roles;
        $all_roles = array();
        
        // เพิ่มตัวเลือกสำหรับผู้ใช้ที่ไม่ได้ล็อกอิน (guest)
        $all_roles['guest'] = array(
            'name' => 'บุคคลทั่วไป (ไม่ต้องล็อกอิน)',
            'capabilities' => array()
        );
        
        foreach($wp_roles->roles as $role_key => $role) {
            $all_roles[$role_key] = array(
                'name' => translate_user_role($role['name']),
                'capabilities' => $role['capabilities']
            );
        }
    
        // Allow third-party plugins to modify the roles list
        $all_roles = apply_filters('user_permission_get_roles', $all_roles);
        
        wp_send_json_success(array('roles' => $all_roles));
    }

    public function check_page_access() {
        if (!is_admin() && !is_front_page()) {  // Don't check on admin or front page
            $page_id = get_the_ID();
            $allowed_roles = get_post_meta($page_id, '_user_permission_roles', true);
            
            if (!empty($allowed_roles)) {
                $has_access = false;
                
                // ตรวจสอบว่ามีสิทธิ์สำหรับ guest (ผู้ไม่ได้ล็อกอิน) หรือไม่
                if (in_array('guest', (array)$allowed_roles)) {
                    $has_access = true;
                }
                // ถ้าผู้ใช้ล็อกอินแล้ว ให้ตรวจสอบบทบาท
                else if (is_user_logged_in()) {
                    $current_user = wp_get_current_user();
                    foreach ((array)$allowed_roles as $role) {
                        if (in_array($role, (array)$current_user->roles)) {
                            $has_access = true;
                            break;
                        }
                    }
                }
                
                if (!$has_access) {
                    // Add blur overlay and login modal
                    echo '<div class="user-permission-overlay">
                        <div class="user-permission-modal">
                            <div class="modal-header">
                                <div class="lock-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                                        <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                                    </svg>
                                </div>
                            </div>
                            <div class="user-permission-message">
                                <h2>การเข้าถึงถูกจำกัด</h2>
                                <p>หน้านี้ต้องการสิทธิ์พิเศษในการเข้าถึง</p>
                                <div class="button-group">
                                    <button id="user-permission-login-btn" class="user-permission-login-btn">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"></path>
                                            <polyline points="10 17 15 12 10 7"></polyline>
                                            <line x1="15" y1="12" x2="3" y2="12"></line>
                                        </svg>
                                        ลงชื่อเข้าใช้
                                    </button>
                                    <button id="user-permission-home-btn" class="user-permission-home-btn">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                                            <polyline points="9 22 9 12 15 12 15 22"></polyline>
                                        </svg>
                                        กลับสู่หน้าหลัก
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>';
                }
            }
        }
    }

    public function user_permission_shortcode($atts) {
        if (!current_user_can('manage_options')) {
            return '';
        }

        $page_id = get_the_ID();
        return sprintf(
            '<button type="button" class="user-permission-icon" data-page-id="%d" title="ตั้งค่าการเข้าถึง">⚙️</button>',
            esc_attr($page_id)
        );
    }

    public function user_permission_get_permissions() {
        check_ajax_referer('user_permission_nonce', 'nonce');
        
        $page_id = intval($_POST['page_id']);
        $roles = get_post_meta($page_id, '_user_permission_roles', true);

        wp_send_json_success(array(
            'roles' => $roles ? $roles : array()
        ));
    }

    public function user_permission_update_permissions() {
        check_ajax_referer('user_permission_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Unauthorized access');
        }

        $page_id = intval($_POST['page_id']);
        $roles = isset($_POST['roles']) ? array_map('sanitize_text_field', (array)$_POST['roles']) : array();
        
        update_post_meta($page_id, '_user_permission_roles', $roles);
        wp_send_json_success('Permissions updated successfully');
    }

    public function user_permission_check_permissions() {
        check_ajax_referer('user_permission_nonce', 'nonce');
        
        $page_id = isset($_POST['page_id']) ? intval($_POST['page_id']) : 0;
        if (!$page_id) {
            wp_send_json_error(['message' => 'Invalid page ID']);
        }
    
        $allowed_roles = get_post_meta($page_id, '_user_permission_roles', true);
        $has_access = false;
        
        // ถ้าไม่มีการกำหนดบทบาท ให้อนุญาตทุกคน
        if (empty($allowed_roles)) {
            $has_access = true;
        }
        // ตรวจสอบว่ามีสิทธิ์สำหรับ guest (ผู้ไม่ได้ล็อกอิน) หรือไม่
        else if (in_array('guest', (array)$allowed_roles)) {
            $has_access = true;
        }
        // ถ้าผู้ใช้ล็อกอินแล้ว ให้ตรวจสอบบทบาท
        else if (is_user_logged_in()) {
            $current_user = wp_get_current_user();
            foreach ((array)$allowed_roles as $role) {
                if (in_array($role, (array)$current_user->roles)) {
                    $has_access = true;
                    break;
                }
            }
        }
    
        if ($has_access) {
            wp_send_json_success(['allowed' => true]);
        } else {
            wp_send_json_error(['allowed' => false, 'message' => 'Access denied']);
        }
    }

    public function handle_login() {
        check_ajax_referer('user_permission_nonce', 'nonce');
        
        $username = sanitize_user($_POST['username']);
        $password = $_POST['password'];
        
        $user = wp_signon(array(
            'user_login' => $username,
            'user_password' => $password,
            'remember' => true
        ));
        
        if (is_wp_error($user)) {
            wp_send_json_error($user->get_error_message());
        }
        
        wp_send_json_success(array(
            'message' => 'เข้าสู่ระบบสำเร็จ',
            'redirect_url' => wp_get_referer() ?: home_url()
        ));
    }
}

// Initialize the controller
function initialize_user_permission_controller() {
    global $user_permission_controller;
    $user_permission_controller = new UserPermissionController();
}
add_action('after_setup_theme', 'initialize_user_permission_controller');


/***** แสดง Post LOOP GALLERY *****/

function event_post_gallery_shortcode($atts) {
    // Enqueue required scripts and styles
    wp_enqueue_style('event-post-style', get_stylesheet_directory_uri() . '/css/event-post.css');
    wp_enqueue_script('event-post-script', get_stylesheet_directory_uri() . '/js/event-post.js', array('jquery'), '1.0', true);
    
    // Add ajax url
    wp_localize_script('event-post-script', 'event_post_ajax', array(
        'ajaxurl' => admin_url('admin-ajax.php')
    ));

    // Start output buffering
    ob_start();
    ?>
    <div class="event-post-container">
        <div class="event-post-grid" id="event-post-grid">
            <!-- Skeleton loader -->
            <?php for($i = 0; $i < 8; $i++): ?>
                <div class="event-post-skeleton">
                    <div class="skeleton-img"></div>
                    <div class="skeleton-content">
                        <div class="skeleton-title"></div>
                        <div class="skeleton-meta"></div>
                        <div class="skeleton-category"></div>
                    </div>
                </div>
            <?php endfor; ?>
        </div>
        
        <!-- Modal Template -->
        <div id="event-post-modal" class="event-post-modal">
            <div class="modal-content">
                <span class="modal-close">&times;</span>
                <div class="modal-gallery-grid"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('event_gallery', 'event_post_gallery_shortcode');

// AJAX handler for loading posts
function event_post_load_gallery() {
    $args = array(
        'post_type' => 'dgallery',
        'posts_per_page' => 10,
        'paged' => isset($_POST['page']) ? intval($_POST['page']) : 1,
    );

    $posts = new WP_Query($args);
    $response = array();

    if($posts->have_posts()) {
        while($posts->have_posts()) {
            $posts->the_post();
            
            // Get gallery images from ACF
            $gallery_field = get_field('ng_gallery');
            $gallery_urls = array();
            
            // Process gallery images
            if(!empty($gallery_field) && is_array($gallery_field)) {
                foreach($gallery_field as $image_id) {
                    // Check if we got image ID directly
                    $image_data = wp_get_attachment_metadata($image_id);
                    
                    if($image_data) {
                        // Get image URLs for different sizes
                        $full_url = wp_get_attachment_image_url($image_id, 'full');
                        $thumb_url = wp_get_attachment_image_url($image_id, 'large');
                        
                        if($full_url && $thumb_url) {
                            $gallery_urls[] = array(
                                'full' => $full_url,
                                'thumb' => $thumb_url,
                                'width' => isset($image_data['width']) ? $image_data['width'] : '',
                                'height' => isset($image_data['height']) ? $image_data['height'] : '',
                                'alt' => get_post_meta($image_id, '_wp_attachment_image_alt', true)
                            );
                        }
                    } else if(is_array($image_id) && isset($image_id['ID'])) {
                        // Handle case where ACF returns array with image data
                        $image_post_id = $image_id['ID'];
                        $full_url = wp_get_attachment_image_url($image_post_id, 'full');
                        $thumb_url = wp_get_attachment_image_url($image_post_id, 'large');
                        
                        if($full_url && $thumb_url) {
                            $gallery_urls[] = array(
                                'full' => $full_url,
                                'thumb' => $thumb_url,
                                'width' => isset($image_id['width']) ? $image_id['width'] : '',
                                'height' => isset($image_id['height']) ? $image_id['height'] : '',
                                'alt' => isset($image_id['alt']) ? $image_id['alt'] : get_post_meta($image_post_id, '_wp_attachment_image_alt', true)
                            );
                        }
                    }
                }
            }
            
            // Get featured image with fallback
            $featured_id = get_post_thumbnail_id(get_the_ID());
            $featured_image = array(
                'full' => $featured_id ? wp_get_attachment_image_url($featured_id, 'full') : '',
                'thumb' => $featured_id ? wp_get_attachment_image_url($featured_id, 'large') : ''
            );

            // Fallback to first gallery image if no featured image
            if(!$featured_image['full'] && !empty($gallery_urls)) {
                $featured_image = array(
                    'full' => $gallery_urls[0]['full'],
                    'thumb' => $gallery_urls[0]['thumb']
                );
            }
            
            // Get categories
            $terms = get_the_terms(get_the_ID(), 'tgallery');
            $categories = array();
            if(!is_wp_error($terms) && !empty($terms)) {
                foreach($terms as $term) {
                    $categories[] = array(
                        'name' => $term->name,
                        'slug' => $term->slug
                    );
                }
            }

            // Prepare response data
            $response[] = array(
                'id' => get_the_ID(),
                'title' => get_the_title(),
                'date' => get_the_date('d/m/Y'),
                'featured_image' => $featured_image,
                'gallery_images' => $gallery_urls,
                'gallery_count' => count($gallery_urls),
                'categories' => $categories,
                'permalink' => get_permalink() // เพิ่มบรรทัดนี้
            );
        }
    }
    
    wp_reset_postdata();
    wp_send_json(array(
        'success' => true,
        'data' => $response,
        'total_posts' => $posts->found_posts,
        'max_pages' => $posts->max_num_pages
    ));
}
add_action('wp_ajax_event_post_load_gallery', 'event_post_load_gallery');
add_action('wp_ajax_nopriv_event_post_load_gallery', 'event_post_load_gallery');

// Function to initialize gallery defaults
function event_post_init() {
    // Set default image placeholder
    $placeholder_url = get_stylesheet_directory_uri() . '/images/placeholder.jpg';
    
    // Pass variables to JavaScript
    wp_localize_script('event-post-script', 'event_post_ajax', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'placeholder' => $placeholder_url,
        'nonce' => wp_create_nonce('event_post_gallery')
    ));
}
add_action('wp_enqueue_scripts', 'event_post_init');

// Debug function - can be removed in production
function event_post_debug_acf_field() {
    if(current_user_can('administrator') && isset($_GET['debug_gallery'])) {
        $post_id = get_the_ID();
        $gallery_field = get_field('ng_gallery', $post_id);
        echo '<pre>';
        print_r($gallery_field);
        echo '</pre>';
    }
}
add_action('wp_footer', 'event_post_debug_acf_field');


function event_post_add_placeholder() {
    // Check if placeholder exists
    $upload_dir = wp_upload_dir();
    $placeholder_path = $upload_dir['basedir'] . '/placeholder.jpg';
    
    if(!file_exists($placeholder_path)) {
        // Create a simple placeholder image or copy from your theme
        // This is just an example - you should provide your own placeholder image
        copy(get_stylesheet_directory() . '/images/placeholder.jpg', $placeholder_path);
    }
}
add_action('after_setup_theme', 'event_post_add_placeholder');



/***** END POINT FOR EGP *******/

add_action('rest_api_init', function () {
    // Register route for all EGP posts
    register_rest_route('egp/v1', '/posts', array(
        'methods' => 'GET',
        'callback' => 'get_egp_posts',
        'permission_callback' => '__return_true'
    ));

    // Register route for single EGP post
    register_rest_route('egp/v1', '/posts/(?P<id>\d+)', array(
        'methods' => 'GET',
        'callback' => 'get_egp_post',
        'permission_callback' => '__return_true',
        'args' => array(
            'id' => array(
                'validate_callback' => function($param) {
                    return is_numeric($param);
                }
            )
        )
    ));
});

// Callback function for all EGP posts
function get_egp_posts() {
    $args = array(
        'post_type' => 'egp',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    );

    $posts = get_posts($args);
    $data = array();

    foreach ($posts as $post) {
        // Get all ACF fields
        $post_data = format_egp_data($post);
        $data[] = $post_data;
    }

    return new WP_REST_Response($data, 200);
}

// Callback function for single EGP post
function get_egp_post($request) {
    $post_id = $request['id'];
    $post = get_post($post_id);

    if (empty($post) || $post->post_type !== 'egp') {
        return new WP_Error('no_post', 'Post not found', array('status' => 404));
    }

    $post_data = format_egp_data($post);
    return new WP_REST_Response($post_data, 200);
}

// Helper function to format EGP post data
function format_egp_data($post) {
    $acf_fields = get_fields($post->ID);
    
    return array(
        'id' => $post->ID,
        'title' => $post->post_title,
        'date' => $post->post_date,
        'modified' => $post->post_modified,
        'egp_no' => $acf_fields['egp_no'] ?? '', // รหัสโครงการ
        'egp_name' => $acf_fields['egp_name'] ?? '', // ชื่อโครงการ
        'egp_type' => $acf_fields['egp_type'] ?? '', // ประเภทประกาศ
        'egp_way' => $acf_fields['egp_way'] ?? '', // วิธีจัดหา
        'egp_date_start' => $acf_fields['egp_date_start'] ?? '', // วันที่ประกาศ
        'egp_sub_dep' => $acf_fields['egp_sub_dep'] ?? '', // สำนัก/กอง
        'egp_dep' => $acf_fields['egp_dep'] ?? '', // หน่วยงาน
        'egp_files' => $acf_fields['egp_files'] ?? array(), // เอกสาร/ไฟล์แนบ
        'meta' => array(
            'post_type' => $post->post_type,
            'post_status' => $post->post_status
        )
    );
}

// Add shortcode to display API documentation
function endpoint_egp() {
    $site_url = get_site_url();
    $output = '
    <div class="egp-endpoints">
        <h2>EGP API Endpoints</h2>
        
        <div class="endpoint">
            <h3>Get All EGP Posts</h3>
            <p><strong>Endpoint:</strong> <code>' . esc_url($site_url) . '/wp-json/egp/v1/posts</code></p>
            <p><strong>Method:</strong> GET</p>
            <p><strong>Description:</strong> Returns all published EGP posts with their custom fields</p>
            <p><strong>Available Fields:</strong></p>
            <ul>
                <li><code>egp_no</code> - รหัสโครงการ</li>
                <li><code>egp_name</code> - ชื่อโครงการ</li>
                <li><code>egp_type</code> - ประเภทประกาศ</li>
                <li><code>egp_way</code> - วิธีจัดหา</li>
                <li><code>egp_date_start</code> - วันที่ประกาศ</li>
                <li><code>egp_sub_dep</code> - สำนัก/กอง</li>
                <li><code>egp_dep</code> - หน่วยงาน</li>
                <li><code>egp_files</code> - เอกสาร/ไฟล์แนบ</li>
            </ul>
        </div>

        <div class="endpoint">
            <h3>Get Single EGP Post</h3>
            <p><strong>Endpoint:</strong> <code>' . esc_url($site_url) . '/wp-json/egp/v1/posts/{id}</code></p>
            <p><strong>Method:</strong> GET</p>
            <p><strong>Description:</strong> Returns a single EGP post with all custom fields</p>
            <p><strong>Parameters:</strong></p>
            <ul>
                <li><code>id</code> - The post ID (required)</li>
            </ul>
        </div>

        <div class="endpoint-example">
            <h3>Example Response</h3>
            <pre>
{
    "id": 123,
    "title": "Example Project",
    "date": "2024-02-15",
    "modified": "2024-02-15",
    "egp_no": "EGP2024001",
    "egp_name": "โครงการตัวอย่าง",
    "egp_type": "ประกาศเชิญชวน",
    "egp_way": "e-bidding",
    "egp_date_start": "2024-02-15",
    "egp_sub_dep": "สำนักงานเลขานุการกรม",
    "egp_dep": "กรมบัญชีกลาง",
    "egp_files": [
        {
            "url": "path/to/file.pdf",
            "title": "เอกสารประกวดราคา"
        }
    ],
    "meta": {
        "post_type": "egp",
        "post_status": "publish"
    }
}
            </pre>
        </div>

        <div class="endpoint-example">
            <h3>Example Usage</h3>
            <pre>
// JavaScript fetch example
fetch("' . esc_url($site_url) . '/wp-json/egp/v1/posts")
    .then(response => response.json())
    .then(data => console.log(data));
            </pre>
        </div>
    </div>
    ';

    return $output;
}
add_shortcode('egp_endpoint', 'endpoint_egp');

// Add CSS for endpoint display
function egp_endpoint_styles() {
    if (has_shortcode(get_the_content(), 'egp_endpoint')) {
        ?>
        <style>
            .egp-endpoints {
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
            }

            .endpoint {
                background: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 4px;
                padding: 20px;
                margin-bottom: 20px;
            }

            .endpoint h3 {
                margin-top: 0;
                color: #2c3e50;
            }

            .endpoint code {
                background: #e9ecef;
                padding: 2px 6px;
                border-radius: 3px;
                font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
                font-size: 0.9em;
            }

            .endpoint ul {
                margin: 10px 0;
                padding-left: 20px;
            }

            .endpoint-example {
                background: #2c3e50;
                color: #fff;
                padding: 20px;
                border-radius: 4px;
                margin-bottom: 20px;
            }

            .endpoint-example pre {
                background: #34495e;
                padding: 15px;
                border-radius: 3px;
                overflow-x: auto;
                font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
                margin: 0;
                white-space: pre-wrap;
            }

            @media (max-width: 768px) {
                .egp-endpoints {
                    padding: 10px;
                }
                
                .endpoint {
                    padding: 15px;
                }
            }
        </style>
        <?php
    }
}
add_action('wp_head', 'egp_endpoint_styles');



/**** ENDPOINT FOR คู่มือประชาชน  ******/

add_action('rest_api_init', function () {
    // Register route for all MPeople posts
    register_rest_route('mpeople/v1', '/posts', array(
        'methods' => 'GET',
        'callback' => 'get_mpeople_posts',
        'permission_callback' => '__return_true'
    ));

    // Register route for single MPeople post
    register_rest_route('mpeople/v1', '/posts/(?P<id>\d+)', array(
        'methods' => 'GET',
        'callback' => 'get_mpeople_post',
        'permission_callback' => '__return_true',
        'args' => array(
            'id' => array(
                'validate_callback' => function($param) {
                    return is_numeric($param);
                }
            )
        )
    ));
});

// Callback function for all MPeople posts
function get_mpeople_posts() {
    $args = array(
        'post_type' => 'mpeople',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    );

    $posts = get_posts($args);
    $data = array();

    foreach ($posts as $post) {
        $post_data = format_mpeople_data($post);
        $data[] = $post_data;
    }

    return new WP_REST_Response($data, 200);
}

// Callback function for single MPeople post
function get_mpeople_post($request) {
    $post_id = $request['id'];
    $post = get_post($post_id);

    if (empty($post) || $post->post_type !== 'mpeople') {
        return new WP_Error('no_post', 'Post not found', array('status' => 404));
    }

    $post_data = format_mpeople_data($post);
    return new WP_REST_Response($post_data, 200);
}

// Helper function to format MPeople post data
function format_mpeople_data($post) {
    $acf_fields = get_fields($post->ID);
    
    // Format file standard repeater field
    $file_standards = array();
    if (!empty($acf_fields['at_file_standard'])) {
        foreach ($acf_fields['at_file_standard'] as $file) {
            $file_standards[] = array(
                'at_rp_file_name' => $file['at_rp_file_name'] ?? '',
                'at_rp_file_create' => $file['at_rp_file_create'] ?? '',
                'at_rp_file_link' => $file['at_rp_file_link'] ?? ''
            );
        }
    }
    
    return array(
        'id' => $post->ID,
        'title' => $post->post_title,
        'date' => $post->post_date,
        'modified' => $post->post_modified,
        'at_content' => $acf_fields['at_content'] ?? '', // เนื้อหาบทความ
        'at_file_standard' => $file_standards, // เอกสารมาตรฐาน (Repeater field)
        'meta' => array(
            'post_type' => $post->post_type,
            'post_status' => $post->post_status
        )
    );
}

// Add shortcode to display API documentation
function endpoint_mpeople() {
    $site_url = get_site_url();
    $output = '
    <div class="mpeople-endpoints">
        <h2>MPeople API Endpoints</h2>
        
        <div class="endpoint">
            <h3>Get All MPeople Posts</h3>
            <p><strong>Endpoint:</strong> <code>' . esc_url($site_url) . '/wp-json/mpeople/v1/posts</code></p>
            <p><strong>Method:</strong> GET</p>
            <p><strong>Description:</strong> Returns all published MPeople posts with their custom fields</p>
            <p><strong>Available Fields:</strong></p>
            <ul>
                <li><code>at_content</code> - เนื้อหาบทความ</li>
                <li><code>at_file_standard</code> - เอกสารมาตรฐาน (Repeater field)
                    <ul>
                        <li><code>at_rp_file_name</code> - ชื่อไฟล์</li>
                        <li><code>at_rp_file_create</code> - วันที่นำเข้า</li>
                        <li><code>at_rp_file_link</code> - ลิงค์ไฟล์</li>
                    </ul>
                </li>
            </ul>
        </div>

        <div class="endpoint">
            <h3>Get Single MPeople Post</h3>
            <p><strong>Endpoint:</strong> <code>' . esc_url($site_url) . '/wp-json/mpeople/v1/posts/{id}</code></p>
            <p><strong>Method:</strong> GET</p>
            <p><strong>Description:</strong> Returns a single MPeople post with all custom fields</p>
            <p><strong>Parameters:</strong></p>
            <ul>
                <li><code>id</code> - The post ID (required)</li>
            </ul>
        </div>

        <div class="endpoint-example">
            <h3>Example Response</h3>
            <pre>
{
    "id": 123,
    "title": "Example Post",
    "date": "2024-02-15",
    "modified": "2024-02-15",
    "at_content": "เนื้อหาบทความ...",
    "at_file_standard": [
        {
            "at_rp_file_name": "ชื่อไฟล์ 1",
            "at_rp_file_create": "2024-02-15",
            "at_rp_file_link": "https://example.com/file1.pdf"
        },
        {
            "at_rp_file_name": "ชื่อไฟล์ 2",
            "at_rp_file_create": "2024-02-15",
            "at_rp_file_link": "https://example.com/file2.pdf"
        }
    ],
    "meta": {
        "post_type": "mpeople",
        "post_status": "publish"
    }
}
            </pre>
        </div>
    </div>
    ';

    return $output;
}
add_shortcode('endpoint_mpeople', 'endpoint_mpeople');

// Add CSS for endpoint display
function mpeople_endpoint_styles() {
    if (has_shortcode(get_the_content(), 'endpoint_mpeople')) {
        ?>
        <style>
            .mpeople-endpoints {
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
            }

            .endpoint {
                background: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 4px;
                padding: 20px;
                margin-bottom: 20px;
            }

            .endpoint h3 {
                margin-top: 0;
                color: #2c3e50;
            }

            .endpoint code {
                background: #e9ecef;
                padding: 2px 6px;
                border-radius: 3px;
                font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
                font-size: 0.9em;
            }

            .endpoint ul {
                margin: 10px 0;
                padding-left: 20px;
            }

            .endpoint ul ul {
                margin: 5px 0;
            }

            .endpoint-example {
                background: #2c3e50;
                color: #fff;
                padding: 20px;
                border-radius: 4px;
                margin-bottom: 20px;
            }

            .endpoint-example pre {
                background: #34495e;
                padding: 15px;
                border-radius: 3px;
                overflow-x: auto;
                font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
                margin: 0;
                white-space: pre-wrap;
            }

            @media (max-width: 768px) {
                .mpeople-endpoints {
                    padding: 10px;
                }
                
                .endpoint {
                    padding: 15px;
                }
            }
        </style>
        <?php
    }
}
add_action('wp_head', 'mpeople_endpoint_styles');


/**** ENDPOINT FOR ข่าวหน่วยงาน  ******/

add_action('rest_api_init', function () {
    // Register route for all News posts
    register_rest_route('news/v1', '/posts', array(
        'methods' => 'GET',
        'callback' => 'get_news_posts',
        'permission_callback' => '__return_true'
    ));

    // Register route for single News post
    register_rest_route('news/v1', '/posts/(?P<id>\d+)', array(
        'methods' => 'GET',
        'callback' => 'get_news_post',
        'permission_callback' => '__return_true',
        'args' => array(
            'id' => array(
                'validate_callback' => function($param) {
                    return is_numeric($param);
                }
            )
        )
    ));
});

// Callback function for all News posts
function get_news_posts() {
    $args = array(
        'post_type' => 'news',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    );

    $posts = get_posts($args);
    $data = array();

    foreach ($posts as $post) {
        $post_data = format_news_data($post);
        $data[] = $post_data;
    }

    return new WP_REST_Response($data, 200);
}

// Callback function for single News post
function get_news_post($request) {
    $post_id = $request['id'];
    $post = get_post($post_id);

    if (empty($post) || $post->post_type !== 'news') {
        return new WP_Error('no_post', 'Post not found', array('status' => 404));
    }

    $post_data = format_news_data($post);
    return new WP_REST_Response($post_data, 200);
}

// Helper function to format News post data
function format_news_data($post) {
    $acf_fields = get_fields($post->ID);
    
    return array(
        'id' => $post->ID,
        'title' => $post->post_title,
        'date' => $post->post_date,
        'modified' => $post->post_modified,
        'content' => $acf_fields['at_content'] ?? '', // เนื้อหาบทความ
        'file_standard' => $acf_fields['at_file_standard'] ?? array(), // เอกสารมาตรฐาน
        'meta' => array(
            'post_type' => $post->post_type,
            'post_status' => $post->post_status
        )
    );
}

// Add shortcode to display API documentation
function endpoint_news() {
    $site_url = get_site_url();
    $output = '
    <div class="news-endpoints">
        <h2>News API Endpoints</h2>
        
        <div class="endpoint">
            <h3>Get All News Posts</h3>
            <p><strong>Endpoint:</strong> <code>' . esc_url($site_url) . '/wp-json/news/v1/posts</code></p>
            <p><strong>Method:</strong> GET</p>
            <p><strong>Description:</strong> Returns all published News posts with their custom fields</p>
            <p><strong>Available Fields:</strong></p>
            <ul>
                <li><code>content</code> - เนื้อหาบทความ</li>
                <li><code>file_standard</code> - เอกสารมาตรฐาน</li>
            </ul>
        </div>

        <div class="endpoint">
            <h3>Get Single News Post</h3>
            <p><strong>Endpoint:</strong> <code>' . esc_url($site_url) . '/wp-json/news/v1/posts/{id}</code></p>
            <p><strong>Method:</strong> GET</p>
            <p><strong>Description:</strong> Returns a single News post with all custom fields</p>
            <p><strong>Parameters:</strong></p>
            <ul>
                <li><code>id</code> - The post ID (required)</li>
            </ul>
        </div>

        <div class="endpoint-example">
            <h3>Example Response</h3>
            <pre>
{
    "id": 123,
    "title": "Example News Article",
    "date": "2024-02-15",
    "modified": "2024-02-15",
    "content": "เนื้อหาบทความตัวอย่าง",
    "file_standard": [
        {
            "url": "path/to/file.pdf",
            "title": "เอกสารมาตรฐาน"
        }
    ],
    "meta": {
        "post_type": "news",
        "post_status": "publish"
    }
}
            </pre>
        </div>

        <div class="endpoint-example">
            <h3>Example Usage</h3>
            <pre>
// JavaScript fetch example
fetch("' . esc_url($site_url) . '/wp-json/news/v1/posts")
    .then(response => response.json())
    .then(data => console.log(data));
            </pre>
        </div>
    </div>
    ';

    return $output;
}
add_shortcode('news_endpoint', 'endpoint_news');

// Add CSS for endpoint display
function news_endpoint_styles() {
    if (has_shortcode(get_the_content(), 'news_endpoint')) {
        ?>
        <style>
            .news-endpoints {
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
            }

            .endpoint {
                background: #f8f9fa;
                border: 1px solid #e9ecef;
                border-radius: 4px;
                padding: 20px;
                margin-bottom: 20px;
            }

            .endpoint h3 {
                margin-top: 0;
                color: #2c3e50;
            }

            .endpoint code {
                background: #e9ecef;
                padding: 2px 6px;
                border-radius: 3px;
                font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
                font-size: 0.9em;
            }

            .endpoint ul {
                margin: 10px 0;
                padding-left: 20px;
            }

            .endpoint-example {
                background: #2c3e50;
                color: #fff;
                padding: 20px;
                border-radius: 4px;
                margin-bottom: 20px;
            }

            .endpoint-example pre {
                background: #34495e;
                padding: 15px;
                border-radius: 3px;
                overflow-x: auto;
                font-family: Monaco, Consolas, "Andale Mono", "DejaVu Sans Mono", monospace;
                margin: 0;
                white-space: pre-wrap;
            }

            @media (max-width: 768px) {
                .news-endpoints {
                    padding: 10px;
                }
                
                .endpoint {
                    padding: 15px;
                }
            }
        </style>
        <?php
    }
}
add_action('wp_head', 'news_endpoint_styles');

/**** กำหนดให้ PostType "PHA" ใช้ SLUG URL เป็น POST ID */

// กำหนดให้ใช้ Post ID เป็น Slug สำหรับ Post Type 'pha'
function set_pha_post_slug($data, $postarr) {
    // ตรวจสอบว่าเป็น Post Type 'pha' หรือไม่
    if($data['post_type'] === 'pha') {
        // ถ้าเป็นการสร้าง Post ใหม่
        if(empty($postarr['ID'])) {
            // ให้ใช้ค่าว่างไว้ก่อน เพราะยังไม่มี ID
            $data['post_name'] = '';
        } else {
            // ถ้าเป็นการอัพเดท ให้ใช้ Post ID เป็น slug
            $data['post_name'] = $postarr['ID'];
        }
    }
    return $data;
}
add_filter('wp_insert_post_data', 'set_pha_post_slug', 10, 2);

// อัพเดท slug หลังจากสร้าง Post ใหม่
function update_pha_post_slug($post_id, $post, $update) {
    // ตรวจสอบว่าเป็น Post Type 'pha' และเป็นการสร้างใหม่
    if($post->post_type === 'pha' && !$update) {
        // อัพเดท slug เป็น Post ID
        wp_update_post(array(
            'ID' => $post_id,
            'post_name' => $post_id
        ));
    }
}
add_action('wp_insert_post', 'update_pha_post_slug', 10, 3);

// ป้องกันการแก้ไข slug ผ่าน Quick Edit หรือ Bulk Edit
function prevent_pha_slug_edit($actions, $post) {
    if($post->post_type === 'pha') {
        // ลบปุ่ม Quick Edit ออก
        unset($actions['inline hide-if-no-js']);
    }
    return $actions;
}
add_filter('post_row_actions', 'prevent_pha_slug_edit', 10, 2);

// ฟังก์ชันสำหรับอัพเดต slug ของ Post เก่าทั้งหมด
function update_existing_pha_posts_slug() {
    // Query เพื่อดึง Post ทั้งหมดใน Post Type 'pha'
    $args = array(
        'post_type' => 'pha',
        'posts_per_page' => -1,
        'post_status' => 'any'
    );
    
    $posts = get_posts($args);
    
    // อัพเดตแต่ละ Post
    foreach($posts as $post) {
        // อัพเดต slug เป็น Post ID
        wp_update_post(array(
            'ID' => $post->ID,
            'post_name' => $post->ID
        ));
    }
}

// เพิ่มเมนูใน WordPress Admin
function add_update_pha_slugs_menu() {
    add_submenu_page(
        'edit.php?post_type=pha',  // Parent slug
        'Update All Slugs',        // Page title
        'Update All Slugs',        // Menu title
        'manage_options',          // Capability required
        'update-pha-slugs',        // Menu slug
        'update_pha_slugs_page'    // Function to display the page
    );
}
add_action('admin_menu', 'add_update_pha_slugs_menu');

// สร้างหน้า Admin สำหรับรัน Update
function update_pha_slugs_page() {
    // ตรวจสอบว่ามีการกดปุ่ม Update หรือไม่
    if(isset($_POST['update_slugs']) && check_admin_referer('update_pha_slugs_action')) {
        update_existing_pha_posts_slug();
        echo '<div class="notice notice-success"><p>All PHA post slugs have been updated successfully!</p></div>';
    }
    ?>
    <div class="wrap">
        <h1>Update All PHA Post Slugs</h1>
        <p>Click the button below to update all existing PHA posts to use their Post ID as the slug.</p>
        <form method="post">
            <?php wp_nonce_field('update_pha_slugs_action'); ?>
            <input type="submit" name="update_slugs" class="button button-primary" value="Update All Slugs">
        </form>
    </div>
    <?php
}


/**** ฟังก์ชั่นแสดง ตารางไฟล์ที่เกี่ยวข้อง *******/

function at_document_table_shortcode() {
    // Check if ACF is active
    if (!function_exists('get_field')) return;
    
    // Get repeater field
    $files = get_field('at_file_standard');
    if (!$files) return;
    
    // Enqueue required styles and scripts
    wp_enqueue_style('at-document-table', get_stylesheet_directory_uri() . '/css/document-table.css');
    wp_enqueue_script('at-document-table', get_stylesheet_directory_uri() . '/js/document-table.js', array('jquery'), null, true);
    
    ob_start();
    ?>
    <div class="at-document-table-wrapper" role="region" aria-label="เอกสารที่เกี่ยวข้อง">
        <table class="at-document-table">
            <thead>
                <tr>
                    <th scope="col">ชื่อไฟล์</th>
                    <th scope="col">วันที่นำเข้า</th>
                    <th scope="col">ดาวน์โหลด</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($files as $file): ?>
                    <tr>
                        <td class="at-doc-name"><?php echo esc_html($file['at_rp_file_name']); ?></td>
                        <td class="at-doc-date"><?php 
                            $date = DateTime::createFromFormat('Y-m-d', $file['at_rp_file_create']);
                            if ($date) {
                                $thai_month = array(
                                    '01' => 'ม.ค.', '02' => 'ก.พ.', '03' => 'มี.ค.', '04' => 'เม.ย.',
                                    '05' => 'พ.ค.', '06' => 'มิ.ย.', '07' => 'ก.ค.', '08' => 'ส.ค.',
                                    '09' => 'ก.ย.', '10' => 'ต.ค.', '11' => 'พ.ย.', '12' => 'ธ.ค.'
                                );
                                $thai_date = $date->format('d') . '/' . 
                                           $thai_month[$date->format('m')] . '/' .
                                           ($date->format('Y') + 543);
                                echo esc_html($thai_date);
                            } else {
                                echo esc_html($file['at_rp_file_create']);
                            }
                        ?></td>
                        <td class="at-doc-link">
                            <?php
                            $file_url = $file['at_rp_file_link'];
                            $file_ext = pathinfo($file_url, PATHINFO_EXTENSION);
                            $icon_class = '';
                            
                            switch(strtolower($file_ext)) {
                                case 'pdf':
                                    $icon_class = 'pdf-icon';
                                    break;
                                case 'doc':
                                case 'docx':
                                    $icon_class = 'word-icon';
                                    break;
                                case 'xls':
                                case 'xlsx':
                                    $icon_class = 'excel-icon';
                                    break;
                                default:
                                    $icon_class = 'file-icon';
                            }
                            ?>
                            <a href="<?php echo esc_url($file_url); ?>" 
                               class="doc-download-link" 
                               download
                               aria-label="ดาวน์โหลด <?php echo esc_attr($file['at_rp_file_name']); ?>">
                                <span class="doc-icon <?php echo esc_attr($icon_class); ?>"></span>
                            </a>
                        </td>
                    </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('at_document_table', 'at_document_table_shortcode');



/**** เปลี่ยน SITE LOGO *****/

function custom_login_logo_and_background() {
    $site_logo_url      = get_site_logo_url(); // Get the site logo URL.
    $background_image_url = 'https://dga.wpdevs.co/wp-content/uploads/2025/02/408.jpg'; // Your provided background image URL.

    ?>
    <style type="text/css">
        /* Logo Styles (as before, but combined) */
        #login h1 a, .login h1 a {
            <?php if ( ! empty( $site_logo_url ) ) : ?>
                background-image: url(<?php echo esc_url( $site_logo_url ); ?>);
            <?php endif; ?>
            width: auto; /* Adjust as needed */
            height: 80px;  /* Adjust as needed */
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center center;
            margin-bottom: 20px;
            pointer-events: none; /* Disable clicks */
        }

        /* Background Image Styles */
        body.login {
            background-image: url(<?php echo esc_url( $background_image_url ); ?>);
            background-size: cover; /* Use 'cover' to cover the entire background */
            background-position: center center; /* Center the background image */
            background-repeat: no-repeat; /* Prevent tiling */
            background-attachment: fixed; /* Optional:  Fixed background */
        }

         /*  Optional: Adjust form container for better visibility */
        #login {
           background-color: rgba(255, 255, 255, 0.8); /* Semi-transparent white */
           padding: 20px;
           border-radius: 5px; /* Optional: Rounded corners */
        }

        /* Hide the default WordPress link if no site logo (Fallback). */
        <?php if ( empty( $site_logo_url ) ): ?>
        #login h1 a {
            background-size: contain; /* Keep basic styling */
            background-repeat: no-repeat;
            margin-bottom: 20px;
        }
        <?php endif; ?>
    </style>
    <?php
}
add_action( 'login_enqueue_scripts', 'custom_login_logo_and_background' );



// Helper function to get the site logo URL (same as before, but included for completeness)
function get_site_logo_url() {
    $logo_url = '';

    // 1. Check for Custom Logo (the best way).
    if ( function_exists( 'the_custom_logo' ) && has_custom_logo() ) {
        $custom_logo_id = get_theme_mod( 'custom_logo' );
        $logo_url = wp_get_attachment_image_url( $custom_logo_id, 'full' );
    }

    // 2. Fallback: Check for a theme option.
    elseif ( get_theme_mod( 'your_theme_option_name' ) ) {
        $logo_url = get_theme_mod( 'your_theme_option_name' );
    }

    // 3. Fallback: Check Parent theme
     elseif ( get_template_directory_uri() != get_stylesheet_directory_uri() &&  // Check if it *is* a child theme.
             get_theme_mod( 'your_theme_option_name', '', get_template() ) ) {  //Get logo URL if it's setted on parent theme
          $logo_url = get_theme_mod( 'your_theme_option_name', '', get_template() );
     }

    return $logo_url;
}

// Optional: Change the link on the logo (same as before).
function custom_login_logo_url() {
    return home_url();
}
add_filter( 'login_headerurl', 'custom_login_logo_url' );

// Optional: Change the title attribute (tooltip) (same as before).
function custom_login_logo_title() {
    return get_bloginfo( 'name' );
}
add_filter( 'login_headertext', 'custom_login_logo_title' );
add_filter( 'login_title', 'custom_login_logo_title');

//Optional: Change login error messages (same as before).
function custom_login_errors(){
    return 'Something is wrong!';
}
add_filter( 'login_errors', 'custom_login_errors' );


/**** ระบบแปลภาษาด้วย GoogleTR แสดงภาษาในรูปแบบต้นฉบับ *****/

function google_translate_button_shortcode() {
    // Enqueue Google Translate script
    wp_enqueue_script('google-translate', 'https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit', array(), null, true);
    
    // Enqueue custom script
    wp_enqueue_script('custom-translate', get_stylesheet_directory_uri() . '/js/custom-translate.js', array('jquery'), '1.0.0', true);
    
    // Enqueue custom styles
    wp_enqueue_style('custom-translate', get_stylesheet_directory_uri() . '/css/custom-translate.css', array(), '1.0.0');
    
    // Add custom script and styles
    add_action('wp_footer', function() {
        ?>
        <script type="text/javascript">
            function googleTranslateElementInit() {
                if (typeof google !== 'undefined' && typeof google.translate !== 'undefined') {
                    new google.translate.TranslateElement({
                        pageLanguage: 'th',
                        includedLanguages: 'en,zh-CN,ja,ko,vi,ms,id,fr,de',
                        layout: google.translate.TranslateElement.InlineLayout.SIMPLE,
                        autoDisplay: false
                    }, 'google_translate_element');
                    
                    // Add class to body when translate is loaded
                    document.body.classList.add('translate-loaded');
                    
                    // Call function to customize language display
                    setTimeout(customizeLanguageDisplay, 1000);
                } else {
                    console.error('Google Translate not loaded properly');
                }
            }

            // Function to customize language display
            function customizeLanguageDisplay() {
                // Native language names
                const nativeNames = {
                    'en': 'English',
                    'zh-CN': '中文',
                    'ja': '日本語',
                    'ko': '한국어',
                    'vi': 'Tiếng Việt',
                    'ms': 'Bahasa Melayu',
                    'id': 'Bahasa Indonesia',
                    'fr': 'Français',
                    'de': 'Deutsch',
                    'th': 'ไทย'
                };
                
                // Wait for Google Translate to initialize
                const selectElement = document.querySelector('.goog-te-combo');
                if (selectElement) {
                    // Modify option text to show native names
                    Array.from(selectElement.options).forEach(option => {
                        const langCode = option.value;
                        if (nativeNames[langCode]) {
                            option.text = nativeNames[langCode];
                        }
                    });
                }
            }

            // Ensure the functions are available globally
            window.googleTranslateElementInit = googleTranslateElementInit;
            window.customizeLanguageDisplay = customizeLanguageDisplay;

            // Function to get cookie
            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
            }

            // Load saved language preference
            document.addEventListener('DOMContentLoaded', function() {
                const savedLang = getCookie('googtrans');
                if (savedLang) {
                    console.log('Saved language found:', savedLang);
                }
                
                // Check if translate element exists
                const translateElement = document.getElementById('google_translate_element');
                if (!translateElement) {
                    console.error('Translate element not found');
                }
                
                // Add event listener for when Google Translate fully loads
                const observer = new MutationObserver(function(mutations) {
                    mutations.forEach(function(mutation) {
                        if (mutation.addedNodes.length) {
                            // Check if the language dropdown is added
                            if (document.querySelector('.goog-te-combo')) {
                                customizeLanguageDisplay();
                                observer.disconnect();
                            }
                        }
                    });
                });
                
                observer.observe(translateElement, { childList: true, subtree: true });
            });
        </script>
        <?php
    });

    // Return the translate button HTML with a wrapper
    return '<div class="translate-wrapper"><div id="google_translate_element"></div></div>';
}
add_shortcode('translate_button', 'google_translate_button_shortcode');

// Add init hook to ensure proper loading
add_action('init', function() {
    if (!is_admin()) {
        add_filter('script_loader_tag', function($tag, $handle) {
            if ('google-translate' === $handle) {
                return str_replace(' src', ' async defer src', $tag);
            }
            return $tag;
        }, 10, 2);
    }
});


/****** ระบบตรวจสอบโพส ที่เป็น pending ******/


/**
 * Pending Posts Cards System
 * 
 * @package PendingPostsCards
 * @version 1.0.1
 */

 if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

// Register shortcode
add_shortcode('pending_posts_cards', 'display_pending_posts_cards');

// Enqueue scripts and styles
add_action('wp_enqueue_scripts', 'pending_posts_cards_assets');

function pending_posts_cards_assets() {
    // Enqueue on all pages since shortcode could be anywhere
    wp_enqueue_style(
        'pending-posts-cards',
        get_stylesheet_directory_uri() . '/css/pending-posts-cards.css',
        array(),
        '1.0.1'
    );

    wp_enqueue_script(
        'pending-posts-cards',
        get_stylesheet_directory_uri() . '/js/pending-posts-cards.js',
        array('jquery'),
        '1.0.1',
        true
    );

    wp_localize_script(
        'pending-posts-cards',
        'pendingPostsAjax',
        array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('pending-posts-nonce'),
            'is_user_logged_in' => is_user_logged_in(),
            'current_user_can_edit' => current_user_can('edit_posts')
        )
    );
}

// ปรับเปลี่ยนการ query เพื่อให้ผู้ใช้ที่มีสิทธิ์สามารถดูโพสต์ที่มีสถานะ pending ได้
add_action('pre_get_posts', 'allow_pending_preview_for_privileged_users');

function allow_pending_preview_for_privileged_users($query) {
    // ตรวจสอบว่าเป็น main query, frontend และมีการล็อกอิน
    if (!is_admin() && $query->is_main_query() && is_user_logged_in()) {
        // ตรวจสอบว่ามีการดูพรีวิว
        if (isset($_GET['preview']) && $_GET['preview'] === 'true') {
            // วิธีที่ 1: ลองรับ post_id จาก query variable ต่างๆ
            $post_id = 0;
            
            // ตรวจสอบจาก query variable มาตรฐาน
            if (isset($_GET['p'])) {
                $post_id = absint($_GET['p']);
            } elseif (isset($_GET['page_id'])) {
                $post_id = absint($_GET['page_id']);
            } 
            // ตรวจสอบจาก queried object ใน permalink แบบสวยงาม
            elseif ($query->get_queried_object_id() > 0) {
                $post_id = $query->get_queried_object_id();
            }
            
            // วิธีที่ 2: หาก post_id ยังเป็น 0 ให้ตรวจสอบจาก post type specific
            if ($post_id === 0) {
                // ตรวจสอบ custom post type ทั้งหมดที่มีการใช้งาน
                $post_types = array(
                    'egp', 'news', 'mpeople', 'article', 'pha', 
                    'dgallery', 'department', 'complaint'
                );
                
                foreach($post_types as $type) {
                    $type_id_var = $type . '_id';
                    if (isset($_GET[$type_id_var])) {
                        $post_id = absint($_GET[$type_id_var]);
                        break;
                    }
                    
                    // ตรวจสอบจาก query vars ที่ WordPress สร้างโดยอัตโนมัติ
                    if ($query->get($type_id_var) > 0) {
                        $post_id = $query->get($type_id_var);
                        break;
                    }
                }
            }
            
            // ถ้ายังไม่พบ post_id ให้ลองดึงจาก queried object
            if ($post_id === 0 && is_singular()) {
                global $post;
                if ($post) {
                    $post_id = $post->ID;
                }
            }
            
            // ถ้ามี post_id และเป็นการดูพรีวิว
            if ($post_id > 0) {
                // ตรวจสอบสิทธิ์ของผู้ใช้
                $current_user = wp_get_current_user();
                $allowed_roles = array('administrator', 'editor', 'author');
                
                // ตรวจสอบว่าผู้ใช้มีสิทธิ์ในการดูโพสต์ pending
                $has_permission = false;
                foreach ($allowed_roles as $role) {
                    if (in_array($role, $current_user->roles)) {
                        $has_permission = true;
                        break;
                    }
                }
                
                // ถ้าผู้ใช้มีสิทธิ์ให้เพิ่มสถานะ 'pending' เข้าไปใน query
                if ($has_permission) {
                    $post_status = $query->get('post_status');
                    if (!$post_status) {
                        $post_status = array('publish');
                    } elseif (is_string($post_status)) {
                        $post_status = array($post_status);
                    }
                    
                    $post_status[] = 'pending';
                    $query->set('post_status', $post_status);
                    
                    // บันทึกข้อมูลการดีบัก
                    error_log('Pending preview activated for post ID: ' . $post_id);
                }
            }
        }
    }
}

// ปรับปรุงการสร้าง link preview สำหรับโพสต์ที่มีสถานะ pending
add_filter('preview_post_link', 'improve_pending_preview_link', 10, 2);

function improve_pending_preview_link($preview_link, $post) {
    // ตรวจสอบว่าโพสต์มีสถานะ 'pending'
    if ($post && $post->post_status === 'pending') {
        // สร้าง URL แบบ query parameter ซึ่งทำงานได้กับทุก post type
        $post_type = get_post_type($post->ID);
        $preview_link = add_query_arg(
            array(
                'post_type' => $post_type,
                'p' => $post->ID,
                'preview' => 'true',
                'pending_preview' => 'true',
            ),
            home_url('/')
        );
    }
    return $preview_link;
}

// เพิ่มแถบแจ้งเตือนด้านบนของโพสต์ที่มีสถานะ pending
add_action('wp_footer', 'add_pending_notice_bar');

function add_pending_notice_bar() {
    // ตรวจสอบว่าเป็นโพสต์ที่มีสถานะ pending และกำลังดูพรีวิว
    global $post;
    
    if (is_singular() && is_user_logged_in() && 
        isset($_GET['preview']) && $_GET['preview'] === 'true') {
        
        // ถ้าไม่มี $post ให้ลองค้นหาจาก query parameter
        if (!isset($post) || empty($post)) {
            $post_id = 0;
            if (isset($_GET['p'])) {
                $post_id = absint($_GET['p']);
            } elseif (isset($_GET['page_id'])) {
                $post_id = absint($_GET['page_id']);
            }
            
            if ($post_id > 0) {
                $post = get_post($post_id);
            }
        }
        
        // ตรวจสอบว่ามี post และมีสถานะ pending
        if (isset($post) && $post && $post->post_status === 'pending') {
            // ตรวจสอบบทบาทของผู้ใช้
            $current_user = wp_get_current_user();
            $user_roles = $current_user->roles;
            
            // ตรวจสอบว่าผู้ใช้เป็น admin หรือ editor
            $is_admin = in_array('administrator', $user_roles);
            $is_editor = in_array('editor', $user_roles);
            
            // แสดงแถบแจ้งเตือนเฉพาะสำหรับ admin และ editor
            if ($is_admin || $is_editor) {
                ?>
                <style>
                    .pending-notice-box {
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        width: 300px;
                        background-color: #fff;
                        color: #333;
                        border-radius: 8px;
                        padding: 15px;
                        z-index: 9999;
                        box-shadow: 0 2px 15px rgba(0,0,0,0.2);
                        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
                        border-left: 5px solid #ff9800;
                        text-align: left;
                    }
                    
                    .pending-notice-box .notice-title {
                        font-weight: 600;
                        font-size: 16px;
                        margin-bottom: 10px;
                        color: #ff9800;
                        display: flex;
                        align-items: center;
                    }
                    
                    .pending-notice-box .notice-title svg {
                        margin-right: 8px;
                    }
                    
                    .pending-notice-box .action-button {
                        display: block;
                        width: 100%;
                        margin-top: 12px;
                        padding: 10px 15px;
                        color: white;
                        border: none;
                        border-radius: 4px;
                        cursor: pointer;
                        font-weight: 500;
                        transition: all 0.2s ease;
                        text-align: center;
                        font-size: 14px;
                    }
                    
                    .pending-notice-box .approve-button {
                        background: #4CAF50;
                    }
                    
                    .pending-notice-box .approve-button:hover {
                        background: #388E3C;
                    }
                    
                    .pending-notice-box .edit-button {
                        background: #2196F3;
                    }
                    
                    .pending-notice-box .edit-button:hover {
                        background: #1565C0;
                    }
                    
                    .pending-notice-box .action-button:active {
                        transform: scale(0.98);
                    }
                    
                    .pending-notice-box .action-button:disabled {
                        background: #cccccc;
                        cursor: not-allowed;
                    }
                    
                    .pending-notice-box .notice-content {
                        font-size: 14px;
                        line-height: 1.5;
                        margin-bottom: 5px;
                    }
                    
                    .pending-notice-box .close-button {
                        position: absolute;
                        top: 10px;
                        right: 10px;
                        background: none;
                        border: none;
                        cursor: pointer;
                        color: #999;
                        font-size: 18px;
                        line-height: 1;
                        padding: 0;
                        width: 20px;
                        height: 20px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    }
                    
                    .pending-notice-box .close-button:hover {
                        color: #333;
                    }
                    
                    .pending-notice-box .user-info {
                        font-size: 12px;
                        color: #666;
                        margin-top: 5px;
                    }
                    
                    .admin-bar .pending-notice-box {
                        top: 52px;
                    }
                    
                    @media screen and (max-width: 782px) {
                        .admin-bar .pending-notice-box {
                            top: 66px;
                        }
                    }
                    
                    @keyframes slideInRight {
                        from {
                            transform: translateX(100%);
                            opacity: 0;
                        }
                        to {
                            transform: translateX(0);
                            opacity: 1;
                        }
                    }
                    
                    .pending-notice-box {
                        animation: slideInRight 0.3s ease-out forwards;
                    }
                </style>
                
                <div class="pending-notice-box" id="pending-notice-box">
                    <button class="close-button" id="close-pending-notice">×</button>
                    <div class="notice-title">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="#ff9800" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="12" y1="8" x2="12" y2="12"></line>
                            <line x1="12" y1="16" x2="12.01" y2="16"></line>
                        </svg>
                        สถานะ: รอตรวจสอบ
                    </div>
                    <div class="notice-content">
                        คุณกำลังดูโพสต์ที่มีสถานะ "รอตรวจสอบ" (Pending)
                    </div>
                    <div class="user-info">
                        <?php 
                        // แสดงชื่อผู้ตรวจสอบเดิม (ถ้ามี)
                        $reviewer1 = get_post_meta($post->ID, 'at_apv1', true);
                        if (!empty($reviewer1)) {
                            echo 'ตรวจสอบเบื้องต้นโดย: ' . esc_html($reviewer1);
                        }
                        
                        $reviewer2 = get_post_meta($post->ID, 'at_apv2', true);
                        if (!empty($reviewer2)) {
                            echo '<br>อนุมัติโดย: ' . esc_html($reviewer2);
                        }
                        ?>
                    </div>
                    
                    <?php if ($is_admin): ?>
                        <!-- สำหรับ Administrator: ปุ่มอนุมัติและเผยแพร่ -->
                        <button class="action-button approve-button" id="approve-pending-post" data-post-id="<?php echo esc_attr($post->ID); ?>">
                            ยืนยันและเผยแพร่
                        </button>
                    <?php elseif ($is_editor): ?>
                        <!-- สำหรับ Editor: ปุ่มบันทึกการตรวจสอบ -->
                        <button class="action-button edit-button" id="review-pending-post" data-post-id="<?php echo esc_attr($post->ID); ?>">
                            บันทึกการตรวจสอบ
                        </button>
                    <?php endif; ?>
                </div>
                
                <script>
                    document.addEventListener('DOMContentLoaded', function() {
                        // ปุ่มปิดแถบแจ้งเตือน
                        const closeButton = document.getElementById('close-pending-notice');
                        if (closeButton) {
                            closeButton.addEventListener('click', function() {
                                const noticeBox = document.getElementById('pending-notice-box');
                                if (noticeBox) {
                                    noticeBox.style.display = 'none';
                                }
                            });
                        }
                        
                        // ปุ่มอนุมัติโพสต์ (สำหรับ Administrator)
                        const approveButton = document.getElementById('approve-pending-post');
                        if (approveButton) {
                            approveButton.addEventListener('click', function() {
                                if (confirm('คุณต้องการยืนยันและเผยแพร่โพสต์นี้ใช่หรือไม่?')) {
                                    const postId = this.getAttribute('data-post-id');
                                    this.disabled = true;
                                    this.textContent = 'กำลังดำเนินการ...';
                                    
                                    // ส่ง AJAX request เพื่ออนุมัติโพสต์
                                    const xhr = new XMLHttpRequest();
                                    xhr.open('POST', '<?php echo admin_url('admin-ajax.php'); ?>');
                                    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                                    xhr.onload = function() {
                                        if (xhr.status === 200) {
                                            try {
                                                const response = JSON.parse(xhr.responseText);
                                                if (response.success) {
                                                    alert('เผยแพร่โพสต์สำเร็จแล้ว');
                                                    // รีโหลดหน้าเพื่อแสดงสถานะใหม่
                                                    window.location.href = window.location.href.replace('&preview=true', '');
                                                } else {
                                                    alert('เกิดข้อผิดพลาด: ' + (response.data || 'ไม่สามารถเผยแพร่โพสต์ได้'));
                                                    approveButton.disabled = false;
                                                    approveButton.textContent = 'ยืนยันและเผยแพร่';
                                                }
                                            } catch (e) {
                                                alert('เกิดข้อผิดพลาดในการประมวลผลข้อมูล');
                                                approveButton.disabled = false;
                                                approveButton.textContent = 'ยืนยันและเผยแพร่';
                                            }
                                        } else {
                                            alert('เกิดข้อผิดพลาดในการเชื่อมต่อ');
                                            approveButton.disabled = false;
                                            approveButton.textContent = 'ยืนยันและเผยแพร่';
                                        }
                                    };
                                    xhr.send('action=approve_pending_post&post_id=' + postId + '&nonce=<?php echo wp_create_nonce('pending-posts-nonce'); ?>');
                                }
                            });
                        }
                        
                        // ปุ่มบันทึกการตรวจสอบ (สำหรับ Editor)
                        const reviewButton = document.getElementById('review-pending-post');
                        if (reviewButton) {
                            reviewButton.addEventListener('click', function() {
                                if (confirm('คุณต้องการบันทึกการตรวจสอบโพสต์นี้ใช่หรือไม่?')) {
                                    const postId = this.getAttribute('data-post-id');
                                    this.disabled = true;
                                    this.textContent = 'กำลังดำเนินการ...';
                                    
                                    // ส่ง AJAX request เพื่อบันทึกการตรวจสอบ
                                    const xhr = new XMLHttpRequest();
                                    xhr.open('POST', '<?php echo admin_url('admin-ajax.php'); ?>');
                                    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                                    xhr.onload = function() {
                                        if (xhr.status === 200) {
                                            try {
                                                const response = JSON.parse(xhr.responseText);
                                                if (response.success) {
                                                    alert('บันทึกการตรวจสอบสำเร็จแล้ว');
                                                    // รีโหลดหน้าเพื่อแสดงสถานะใหม่
                                                    window.location.reload();
                                                } else {
                                                    alert('เกิดข้อผิดพลาด: ' + (response.data || 'ไม่สามารถบันทึกการตรวจสอบได้'));
                                                    reviewButton.disabled = false;
                                                    reviewButton.textContent = 'บันทึกการตรวจสอบ';
                                                }
                                            } catch (e) {
                                                alert('เกิดข้อผิดพลาดในการประมวลผลข้อมูล');
                                                reviewButton.disabled = false;
                                                reviewButton.textContent = 'บันทึกการตรวจสอบ';
                                            }
                                        } else {
                                            alert('เกิดข้อผิดพลาดในการเชื่อมต่อ');
                                            reviewButton.disabled = false;
                                            reviewButton.textContent = 'บันทึกการตรวจสอบ';
                                        }
                                    };
                                    xhr.send('action=review_pending_post&post_id=' + postId + '&nonce=<?php echo wp_create_nonce('pending-posts-nonce'); ?>');
                                }
                            });
                        }
                    });
                </script>
                <?php
            }
        }
    }
}

// Shortcode function
function display_pending_posts_cards() {
    // Check if user is logged in and has permissions
    if (!is_user_logged_in() || !current_user_can('edit_posts')) {
        return '<div class="error-message">คุณไม่มีสิทธิ์เข้าถึงส่วนนี้</div>';
    }

    // Start output buffering
    ob_start();
    ?>
    <div id="pending-posts-container" class="pending-posts-system">
        <!-- Filter Controls -->
        <div class="filter-controls">
            <div class="filter-group">
                <select id="post-type-filter" class="filter-select">
                    <option value="">ทุกหมวดหมู่</option>
                    <option value="egp">ข้อมูลจัดซื้อจัดจ้าง</option>
                    <option value="news">ข้อมูลทั่วไป</option>
                    <option value="mpeople">คู่มือประชาชน</option>
                    <option value="article">บทความ</option>
                    <option value="pha">ประชาพิจารณ์และกิจกรรม</option>
                    <option value="dgallery">ประมวลภาพกิจกรรม</option>
                    <option value="department">หน่วยงาน</option>
                    <option value="complaint">เรื่องร้องเรียน</option>
                </select>
                <input type="text" id="title-search" class="search-input" placeholder="ค้นหาตามชื่อเรื่อง...">
            </div>
        </div>

        <!-- Status Message -->
        <div id="status-message"></div>

        <!-- Skeleton Loading -->
        <div class="skeleton-loader">
            <?php for($i = 0; $i < 16; $i++): ?>
                <div class="skeleton-card">
                    <div class="skeleton-title"></div>
                    <div class="skeleton-meta"></div>
                    <div class="skeleton-button"></div>
                </div>
            <?php endfor; ?>
        </div>

        <!-- Posts Grid -->
        <div class="pending-posts-grid" id="pending-posts-cards"></div>

        <!-- Pagination -->
        <div class="pagination"></div>
    </div>

    <?php if (!wp_script_is('pending-posts-cards', 'enqueued')): ?>
        <script type="text/javascript">
            // Re-trigger asset loading if not already loaded
            <?php
            $script_url = get_stylesheet_directory_uri() . '/js/pending-posts-cards.js';
            $style_url = get_stylesheet_directory_uri() . '/css/pending-posts-cards.css';
            ?>
            if (!document.querySelector('link[href="<?php echo esc_url($style_url); ?>"]')) {
                var link = document.createElement('link');
                link.rel = 'stylesheet';
                link.href = '<?php echo esc_url($style_url); ?>';
                document.head.appendChild(link);
            }
            if (!document.querySelector('script[src="<?php echo esc_url($script_url); ?>"]')) {
                var script = document.createElement('script');
                script.src = '<?php echo esc_url($script_url); ?>';
                script.defer = true;
                document.body.appendChild(script);
            }
        </script>
    <?php endif; ?>

    <?php
    // Return the buffered content
    return ob_get_clean();
}

// AJAX handler for fetching posts
add_action('wp_ajax_get_pending_posts', 'get_pending_posts');
add_action('wp_ajax_nopriv_get_pending_posts', 'get_pending_posts');

function get_pending_posts() {
    check_ajax_referer('pending-posts-nonce', 'nonce');
    
    if (!current_user_can('edit_posts')) {
        wp_send_json_error('Permission denied');
        return;
    }

    $page = isset($_POST['page']) ? absint($_POST['page']) : 1;
    $posts_per_page = 16;
    $offset = ($page - 1) * $posts_per_page;
    
    // รับค่า filter
    $post_type = isset($_POST['post_type']) ? sanitize_text_field($_POST['post_type']) : '';
    $search_term = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';

    // กำหนด post types ตามเงื่อนไข
    $post_types = $post_type ? array($post_type) : array(
        'egp', 'news', 'mpeople', 'article', 'pha', 
        'dgallery', 'department', 'complaint'
    );

    // Query arguments
    $args = array(
        'post_type' => $post_types,
        'post_status' => 'pending',
        'posts_per_page' => $posts_per_page,
        'offset' => $offset,
        'orderby' => 'date',
        'order' => 'DESC'
    );

    // เพิ่มการค้นหาตาม title
    if (!empty($search_term)) {
        $args['s'] = $search_term;
    }

    $query = new WP_Query($args);
    $total_posts = $query->found_posts;
    $total_pages = ceil($total_posts / $posts_per_page);

    $response = array(
        'posts' => array(),
        'pagination' => array(
            'current_page' => $page,
            'total_pages' => $total_pages,
            'total_posts' => $total_posts
        )
    );

    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            $post_type = get_post_type();
            
            // สร้างลิงก์แบบ query parameter format
            $preview_link = add_query_arg(
                array(
                    'post_type' => $post_type,
                    'p' => $post_id,
                    'preview' => 'true',
                    'pending_preview' => 'true'
                ),
                home_url('/')
            );
            
            $response['posts'][] = array(
                'ID' => $post_id,
                'title' => get_the_title(),
                'type' => $post_type,
                'date' => get_the_date('d/m/Y'),
                'link' => $preview_link,
                'excerpt' => wp_trim_words(get_the_excerpt(), 20),
                'author' => get_the_author(),
                'modified_date' => get_the_modified_date('d/m/Y H:i')
            );
        }
    }

    wp_reset_postdata();
    wp_send_json_success($response);
}

// AJAX handler for approving posts
add_action('wp_ajax_approve_pending_post', 'approve_pending_post');

function approve_pending_post() {
    // ตรวจสอบ nonce
    check_ajax_referer('pending-posts-nonce', 'nonce');
    
    // ตรวจสอบว่าผู้ใช้เป็น administrator
    if (!current_user_can('administrator')) {
        wp_send_json_error('คุณไม่มีสิทธิ์อนุมัติโพสต์');
        return;
    }
    
    // รับ post ID
    $post_id = isset($_POST['post_id']) ? absint($_POST['post_id']) : 0;
    if (!$post_id) {
        wp_send_json_error('ไม่พบ ID ของโพสต์');
        return;
    }
    
    // ตรวจสอบว่าโพสต์มีอยู่จริงและมีสถานะ pending
    $post = get_post($post_id);
    if (!$post || $post->post_status !== 'pending') {
        wp_send_json_error('โพสต์ไม่ถูกต้องหรือไม่ได้อยู่ในสถานะรอตรวจสอบ');
        return;
    }
    
    // อัปเดต custom field "at_apv2" ด้วยชื่อของ administrator
    $current_user = wp_get_current_user();
    update_post_meta($post_id, 'at_apv2', $current_user->display_name);
    
    // เปลี่ยนสถานะโพสต์เป็น publish
    $updated_post = array(
        'ID' => $post_id,
        'post_status' => 'publish'
    );
    
    $result = wp_update_post($updated_post);
    
    if (is_wp_error($result)) {
        wp_send_json_error($result->get_error_message());
    } else {
        // บันทึกล็อก
        error_log(sprintf(
            'โพสต์ #%d ได้รับการอนุมัติโดย %s ในวันที่ %s',
            $post_id,
            $current_user->user_login,
            current_time('mysql')
        ));
        
        wp_send_json_success(array(
            'message' => 'อนุมัติโพสต์เรียบร้อยแล้ว',
            'post_id' => $post_id
        ));
    }
}

// เพิ่ม AJAX handler สำหรับบันทึกการตรวจสอบโดย Editor
add_action('wp_ajax_review_pending_post', 'review_pending_post');

function review_pending_post() {
    // ตรวจสอบ nonce
    check_ajax_referer('pending-posts-nonce', 'nonce');
    
    // ตรวจสอบว่าผู้ใช้เป็น editor
    if (!current_user_can('editor')) {
        wp_send_json_error('คุณไม่มีสิทธิ์บันทึกการตรวจสอบ');
        return;
    }
    
    // รับ post ID
    $post_id = isset($_POST['post_id']) ? absint($_POST['post_id']) : 0;
    if (!$post_id) {
        wp_send_json_error('ไม่พบ ID ของโพสต์');
        return;
    }
    
    // ตรวจสอบว่าโพสต์มีอยู่จริงและมีสถานะ pending
    $post = get_post($post_id);
    if (!$post || $post->post_status !== 'pending') {
        wp_send_json_error('โพสต์ไม่ถูกต้องหรือไม่ได้อยู่ในสถานะรอตรวจสอบ');
        return;
    }
    
    // อัปเดต custom field "at_apv1" ด้วยชื่อของ editor
    $current_user = wp_get_current_user();
    update_post_meta($post_id, 'at_apv1', $current_user->display_name);
    
    // บันทึกล็อก
    error_log(sprintf(
        'โพสต์ #%d ได้รับการตรวจสอบโดย %s (Editor) ในวันที่ %s',
        $post_id,
        $current_user->user_login,
        current_time('mysql')
    ));
    
    wp_send_json_success(array(
        'message' => 'บันทึกการตรวจสอบเรียบร้อยแล้ว',
        'post_id' => $post_id,
        'reviewer' => $current_user->display_name
    ));
}

function pending_posts_cards_activate() {
    // Add custom capabilities to administrator role
    $role = get_role('administrator');
    if ($role) {
        $role->add_cap('approve_pending_posts');
    }
}

// Remove custom capabilities on plugin deactivation
register_deactivation_hook(__FILE__, 'pending_posts_cards_deactivate');

function pending_posts_cards_deactivate() {
    // Remove custom capabilities from administrator role
    $role = get_role('administrator');
    if ($role) {
        $role->remove_cap('approve_pending_posts');
    }
}

// Security functions
function pending_posts_cards_validate_post_type($post_type) {
    $allowed_types = array(
        'egp',
        'news',
        'mpeople',
        'article',
        'pha',
        'dgallery',
        'department',
        'complaint'
    );
    return in_array($post_type, $allowed_types);
}

// Helper function to get post type label in Thai
function get_post_type_thai_label($post_type) {
    $labels = array(
        'egp' => 'ข้อมูลจัดซื้อจัดจ้าง',
        'news' => 'ข้อมูลทั่วไป',
        'mpeople' => 'คู่มือประชาชน',
        'article' => 'บทความ',
        'pha' => 'ประชาพิจารณ์และกิจกรรม',
        'dgallery' => 'ประมวลภาพกิจกรรม',
        'department' => 'หน่วยงาน',
        'complaint' => 'เรื่องร้องเรียน'
    );
    return isset($labels[$post_type]) ? $labels[$post_type] : $post_type;
}

// Add error handling wrapper
function pending_posts_cards_error_handler($callback) {
    try {
        return $callback();
    } catch (Exception $e) {
        error_log('Pending Posts Cards Error: ' . $e->getMessage());
        return false;
    }
}




/**
 * PDPA Cookie Consent Shortcode
 * 
 * สร้าง cookie consent ตามมาตรฐาน PDPA ของประเทศไทย
 * มีปุ่มยอมรับ/ไม่ยอมรับ และตั้งค่าการใช้งาน cookie
 */

// ลงทะเบียน shortcode
function pdpa_cookie_consent_shortcode() {
    // เตรียม assets ทุกครั้ง ไม่ว่าจะมีความยินยอมแล้วหรือไม่
    wp_enqueue_style('pdpa-cookie-consent-style', get_stylesheet_directory_uri() . '/css/pdpa-cookie-consent.css', array(), '1.0.1');
    wp_enqueue_script('pdpa-cookie-consent-script', get_stylesheet_directory_uri() . '/js/pdpa-cookie-consent.js', array('jquery'), '1.0.1', true);
    
    // ตรวจสอบก่อนว่าเคยให้ความยินยอมไปแล้วหรือไม่
    $consent_given = isset($_COOKIE['pdpa_consent_given']) && $_COOKIE['pdpa_consent_given'] === 'yes';
    
    // ส่งค่าสถานะไปยัง JavaScript
    wp_localize_script('pdpa-cookie-consent-script', 'pdpa_consent_data', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('pdpa_cookie_consent_nonce'),
        'consent_given' => $consent_given ? 'yes' : 'no',
        'plugin_url' => get_stylesheet_directory_uri(),
        'debug' => WP_DEBUG
    ));
    
    // เริ่มสร้าง Output
    ob_start();
    ?>
    <div id="pdpa-cookie-consent" class="pdpa-cookie-consent">
        <div class="pdpa-consent-container" <?php echo $consent_given ? 'style="display:none;"' : ''; ?>>
            <div class="pdpa-header">
                <h3>การตั้งค่าความเป็นส่วนตัว</h3>
                <p>เว็บไซต์นี้ใช้คุกกี้เพื่อปรับปรุงประสบการณ์การใช้งานของคุณ</p>
            </div>
            
            <div class="pdpa-content">
                <p>เราใช้คุกกี้เพื่อเพิ่มประสิทธิภาพและประสบการณ์ที่ดีในการใช้งานเว็บไซต์ของคุณ คุณสามารถเลือกตั้งค่าความยินยอมในการใช้คุกกี้ได้ โดยคุกกี้บางประเภทมีความจำเป็นเพื่อการทำงานของเว็บไซต์ ส่วนคุกกี้อื่นๆ คุณสามารถเลือกได้ว่าจะยอมรับหรือไม่</p>
            </div>
            
            <div class="pdpa-actions">
                <button id="pdpa-accept-all" class="pdpa-button pdpa-accept">ยอมรับทั้งหมด</button>
                <button id="pdpa-reject-all" class="pdpa-button pdpa-reject">ปฏิเสธทั้งหมด</button>
                <button id="pdpa-settings-button" class="pdpa-button pdpa-settings">ตั้งค่า</button>
            </div>
            
            <div id="pdpa-settings-panel" class="pdpa-settings-panel" style="display:none;">
                <div class="pdpa-setting-item">
                    <div class="pdpa-setting-info">
                        <h4>คุกกี้ที่จำเป็น</h4>
                        <p>คุกกี้เหล่านี้มีความจำเป็นต่อการทำงานของเว็บไซต์ ไม่สามารถปิดการใช้งานได้</p>
                    </div>
                    <div class="pdpa-toggle-wrapper">
                        <input type="checkbox" id="necessary-cookies" class="pdpa-toggle" checked disabled>
                        <label for="necessary-cookies" class="pdpa-toggle-label"></label>
                    </div>
                </div>
                
                <div class="pdpa-setting-item">
                    <div class="pdpa-setting-info">
                        <h4>คุกกี้เพื่อการวิเคราะห์</h4>
                        <p>ช่วยให้เราเข้าใจวิธีการที่ผู้เข้าชมใช้งานเว็บไซต์ และปรับปรุงประสิทธิภาพการทำงาน</p>
                    </div>
                    <div class="pdpa-toggle-wrapper">
                        <input type="checkbox" id="analytics-cookies" class="pdpa-toggle">
                        <label for="analytics-cookies" class="pdpa-toggle-label"></label>
                    </div>
                </div>
                
                <div class="pdpa-setting-item">
                    <div class="pdpa-setting-info">
                        <h4>คุกกี้เพื่อการตลาด</h4>
                        <p>ใช้เพื่อติดตามผู้เข้าชมในเว็บไซต์ต่างๆ เพื่อวัตถุประสงค์ในการโฆษณาที่เกี่ยวข้อง</p>
                    </div>
                    <div class="pdpa-toggle-wrapper">
                        <input type="checkbox" id="marketing-cookies" class="pdpa-toggle">
                        <label for="marketing-cookies" class="pdpa-toggle-label"></label>
                    </div>
                </div>
                
                <div class="pdpa-setting-item">
                    <div class="pdpa-setting-info">
                        <h4>คุกกี้เพื่อการใช้งานเว็บไซต์</h4>
                        <p>ช่วยให้เว็บไซต์จดจำสิ่งที่คุณเลือกไว้ เช่น ชื่อผู้ใช้ ภาษา หรือรูปแบบการแสดงผล</p>
                    </div>
                    <div class="pdpa-toggle-wrapper">
                        <input type="checkbox" id="functional-cookies" class="pdpa-toggle">
                        <label for="functional-cookies" class="pdpa-toggle-label"></label>
                    </div>
                </div>
                
                <div class="pdpa-setting-actions">
                    <button id="pdpa-save-settings" class="pdpa-button pdpa-save">บันทึกการตั้งค่า</button>
                </div>
            </div>
        </div>
        
        <!-- แก้ไข: กำหนดสถานะแสดง/ซ่อนตั้งแต่ server side -->
        <button id="pdpa-reopen-consent" class="pdpa-reopen-button" <?php echo $consent_given ? '' : 'style="display:none;"'; ?>>
            <span class="pdpa-reopen-icon">🍪</span>
            <span class="pdpa-reopen-text">ตั้งค่าความเป็นส่วนตัว</span>
        </button>

        <style>
            .pdpa-reopen-button {
                display: inline-flex;
                align-items: center;
                background: transparent;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                padding: 8px;
                transition: all 0.3s ease;
            }
            
            .pdpa-reopen-icon {
                font-size: 18px;
            }
            
            .pdpa-reopen-text {
                margin-left: 8px;
                font-size: 14px;
                transition: opacity 0.3s ease, max-width 0.3s ease;
                max-width: 0;
                opacity: 0;
                overflow: hidden;
                white-space: nowrap;
            }
            
            .pdpa-reopen-button:hover {
                background-color: #f5f5f5;
                border: 1px solid #ddd;
                padding: 7px 11px;  /* ลดขนาด padding เพื่อชดเชยขอบ */
            }
            
            .pdpa-reopen-button:hover .pdpa-reopen-text {
                max-width: 200px;
                opacity: 1;
            }
        </style>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('pdpa_cookie_consent', 'pdpa_cookie_consent_shortcode');

/**
 * ฟังก์ชั่นสำหรับจัดการ AJAX requests
 */
function pdpa_save_cookie_consent() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'pdpa_cookie_consent_nonce')) {
        wp_send_json_error('การตรวจสอบความปลอดภัยล้มเหลว');
        die();
    }
    
    $consent_type = sanitize_text_field($_POST['consent_type']);
    $settings = isset($_POST['settings']) ? $_POST['settings'] : array();
    
    // กำหนดระยะเวลาของคุกกี้ (30 วัน)
    $expiry = time() + 30 * DAY_IN_SECONDS;
    $secure = is_ssl();
    $httponly = false; // แก้ไข: ตั้งเป็น false เพื่อให้ JavaScript อ่านค่า cookie ได้
    
    // จัดการตามการเลือกของผู้ใช้
    if ($consent_type === 'accept_all') {
        // ตั้งค่า cookie ทั้งหมด
        setcookie('pdpa_necessary_cookies', 'accepted', $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        setcookie('pdpa_analytics_cookies', 'accepted', $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        setcookie('pdpa_marketing_cookies', 'accepted', $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        setcookie('pdpa_functional_cookies', 'accepted', $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        setcookie('pdpa_consent_given', 'yes', $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        
        // บันทึกลงใน database (ถ้าต้องการ)
        do_action('pdpa_consent_saved', 'accept_all');
        
        wp_send_json_success('บันทึกการตั้งค่าเรียบร้อยแล้ว - ยอมรับทั้งหมด');
    } 
    elseif ($consent_type === 'reject_all') {
        // ตั้งค่าเฉพาะคุกกี้ที่จำเป็น แต่ปฏิเสธคุกกี้อื่นๆ
        setcookie('pdpa_necessary_cookies', 'accepted', $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        setcookie('pdpa_analytics_cookies', 'rejected', $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        setcookie('pdpa_marketing_cookies', 'rejected', $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        setcookie('pdpa_functional_cookies', 'rejected', $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        setcookie('pdpa_consent_given', 'yes', $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        
        // ลบคุกกี้ที่อาจมีอยู่แล้ว (ถ้าเป็นไปได้)
        pdpa_remove_existing_cookies();
        
        // บันทึกลงใน database (ถ้าต้องการ)
        do_action('pdpa_consent_saved', 'reject_all');
        
        wp_send_json_success('บันทึกการตั้งค่าเรียบร้อยแล้ว - ปฏิเสธทั้งหมด (ยกเว้นคุกกี้ที่จำเป็น)');
    } 
    elseif ($consent_type === 'custom_settings') {
        // ตั้งค่าตามการเลือกของผู้ใช้
        setcookie('pdpa_necessary_cookies', 'accepted', $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        
        $analytics = isset($settings['analytics']) && $settings['analytics'] === 'true' ? 'accepted' : 'rejected';
        setcookie('pdpa_analytics_cookies', $analytics, $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        
        $marketing = isset($settings['marketing']) && $settings['marketing'] === 'true' ? 'accepted' : 'rejected';
        setcookie('pdpa_marketing_cookies', $marketing, $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        
        $functional = isset($settings['functional']) && $settings['functional'] === 'true' ? 'accepted' : 'rejected';
        setcookie('pdpa_functional_cookies', $functional, $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        
        setcookie('pdpa_consent_given', 'yes', $expiry, COOKIEPATH, COOKIE_DOMAIN, $secure, $httponly);
        
        // ลบคุกกี้ที่ถูกปฏิเสธ
        if ($analytics === 'rejected' || $marketing === 'rejected' || $functional === 'rejected') {
            pdpa_remove_existing_cookies();
        }
        
        // บันทึกลงใน database (ถ้าต้องการ)
        do_action('pdpa_consent_saved', 'custom', $settings);
        
        wp_send_json_success('บันทึกการตั้งค่าตามที่กำหนดเรียบร้อยแล้ว');
    }
    
    wp_send_json_error('ไม่สามารถบันทึกการตั้งค่าได้');
    die();
}
add_action('wp_ajax_pdpa_save_cookie_consent', 'pdpa_save_cookie_consent');
add_action('wp_ajax_nopriv_pdpa_save_cookie_consent', 'pdpa_save_cookie_consent');

/**
 * ฟังก์ชั่นลบคุกกี้ที่มีอยู่
 */
function pdpa_remove_existing_cookies() {
    // ลบคุกกี้ Google Analytics ถ้ามี
    if (isset($_COOKIE['_ga'])) {
        setcookie('_ga', '', time() - 3600, '/', COOKIE_DOMAIN);
    }
    if (isset($_COOKIE['_gid'])) {
        setcookie('_gid', '', time() - 3600, '/', COOKIE_DOMAIN);
    }
    if (isset($_COOKIE['_gat'])) {
        setcookie('_gat', '', time() - 3600, '/', COOKIE_DOMAIN);
    }
    
    // ลบคุกกี้ Facebook ถ้ามี
    if (isset($_COOKIE['_fbp'])) {
        setcookie('_fbp', '', time() - 3600, '/', COOKIE_DOMAIN);
    }
    
    // เปิดให้ส่วนอื่นๆ สามารถลบคุกกี้เพิ่มเติมได้
    do_action('pdpa_remove_cookies');
}

/**
 * ฟังก์ชั่นตรวจสอบการยินยอม cookie สำหรับใช้ในเทมเพลต
 */
function pdpa_is_cookie_accepted($cookie_type) {
    $cookie_name = 'pdpa_' . $cookie_type . '_cookies';
    
    if (!isset($_COOKIE['pdpa_consent_given']) || $_COOKIE['pdpa_consent_given'] !== 'yes') {
        return false;
    }
    
    if ($cookie_type === 'necessary') {
        return true; // คุกกี้ที่จำเป็นได้รับการยอมรับเสมอ
    }
    
    return isset($_COOKIE[$cookie_name]) && $_COOKIE[$cookie_name] === 'accepted';
}

/**
 * ฟังก์ชั่นสำหรับเพิ่ม script ที่ต้องการการยินยอม
 */
function pdpa_add_consent_script($cookie_type, $script_content) {
    if (pdpa_is_cookie_accepted($cookie_type)) {
        echo $script_content;
    }
}

/**
 * โค้ดสำหรับเพิ่ม Shortcode ให้กับ Widget
 */
function pdpa_register_widget_shortcode() {
    add_filter('widget_text', 'do_shortcode');
}
add_action('init', 'pdpa_register_widget_shortcode');

/**
 * เพิ่ม debugging function
 */
function pdpa_debug_log($message) {
    if (WP_DEBUG === true) {
        if (is_array($message) || is_object($message)) {
            error_log(print_r($message, true));
        } else {
            error_log($message);
        }
    }
}


/**** ฟังก์ชั่นแก้ไข Post ******/

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Main shortcode function
 */
function data_post_e_shortcode() {
    // Check if user can edit posts
    if (!current_user_can('edit_posts')) {
        return '';
    }

    // Get current post ID
    $post_id = get_the_ID();
    
    // Enqueue required scripts and styles
    data_post_e_enqueue_assets();
    
    // Generate output
    $output = data_post_e_generate_html($post_id);
    
    return $output;
}
add_shortcode('data_post_e', 'data_post_e_shortcode');

/**
 * Enqueue all required assets
 */
function data_post_e_enqueue_assets() {
    $post_id = get_the_ID();
    
    // Load WordPress Media Library
    wp_enqueue_media();
    
    // Load jQuery and dependencies
    wp_enqueue_script('jquery');
    wp_enqueue_script('jquery-ui-core');
    wp_enqueue_script('jquery-ui-widget');
    wp_enqueue_script('jquery-ui-dialog');
    
    // TinyMCE 6 from CDN
    $tinymce_version = '6.8.2';
    wp_enqueue_script('tinymce-cdn', 'https://cdn.jsdelivr.net/npm/tinymce@' . $tinymce_version . '/tinymce.min.js', array(), $tinymce_version);
    
    // Custom scripts and styles
    wp_enqueue_style('data-post-e-style', get_stylesheet_directory_uri() . '/css/data-post-e.css', array(), '1.2.0');
    wp_enqueue_script('data-post-e-script', get_stylesheet_directory_uri() . '/js/data-post-e.js', array('jquery'), '1.2.0', true);
    
    // Additional CSS styles
    wp_enqueue_style('dashicons');
    wp_enqueue_style('wp-jquery-ui-dialog');
    
    // Google Fonts for Thai support
    wp_enqueue_style('google-fonts-thai', 'https://fonts.googleapis.com/css2?family=Sarabun:wght@300;400;500;600;700&family=Prompt:wght@300;400;500;600;700&family=Kanit:wght@300;400;500;600;700&family=Noto+Sans+Thai:wght@300;400;500;600;700&display=swap', array(), null);
    
    // Pass data to JavaScript
    wp_localize_script('data-post-e-script', 'data_post_e_vars', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'post_id' => $post_id,
        'nonce' => wp_create_nonce('data_post_e_nonce'),
        'current_content' => get_post_meta($post_id, 'at_content', true),
        'home_url' => home_url(),
        'upload_url' => admin_url('async-upload.php'),
        'tinymce_version' => $tinymce_version,
        'locale' => get_locale()
    ));
}

/**
 * Generate HTML output
 */
function data_post_e_generate_html($post_id) {
    $output = '';
    
    // Edit Icon
    $output .= '<div class="data-post-e-container">';
    $output .= '<a href="#" class="data-post-e-icon" data-post-id="' . $post_id . '"><i class="dashicons dashicons-edit"></i></a>';
    $output .= '</div>';
    
    // Modal Popup
    $output .= '<div id="data-post-e-modal-' . $post_id . '" class="data-post-e-modal">';
    $output .= '<div class="data-post-e-modal-content">';
    $output .= '<span class="data-post-e-close">&times;</span>';
    $output .= '<h2>แก้ไขข้อมูล</h2>';
    $output .= '<form id="data-post-e-form-' . $post_id . '" class="data-post-e-form">';
    
    // Hidden field for Post ID
    $output .= '<input type="hidden" name="post_id" value="' . $post_id . '">';
    
    // Post Title field
    $output .= '<div class="data-post-e-field">';
    $output .= '<label for="post_title">หัวข้อ:</label>';
    $output .= '<input type="text" name="post_title" id="post_title" value="' . esc_attr(get_the_title($post_id)) . '">';
    $output .= '</div>';
    
    // Taxonomy fields
    $output .= data_post_e_generate_taxonomy_fields($post_id);
    
    // Content Editor
    $at_content = get_post_meta($post_id, 'at_content', true);
    $output .= '<div class="data-post-e-field">';
    $output .= '<label for="at_content">เนื้อหา (รองรับ HTML):</label>';
    $output .= '<div id="editor-wrapper-' . $post_id . '" class="editor-wrapper">';
    $output .= '<textarea name="at_content" id="at_content_' . $post_id . '" class="tinymce-editor">' . esc_textarea($at_content) . '</textarea>';
    $output .= '</div>';
    $output .= '<div class="editor-hint">เคล็ดลับ: คุณสามารถแทรกรูปภาพ, เปลี่ยนขนาดตัวอักษร, และจัดรูปแบบข้อความได้ตามต้องการ</div>';
    $output .= '</div>';
    
    // Repeater fields
    $output .= data_post_e_generate_repeater_fields($post_id);
    
    // Action buttons
    $output .= '<div class="data-post-e-actions">';
    $output .= '<button type="submit" class="save-post-btn">บันทึกข้อมูล</button>';
    $output .= '<button type="button" class="delete-post-btn">ลบโพส</button>';
    $output .= '<button type="button" class="cancel-btn">ยกเลิก</button>';
    $output .= '</div>';
    
    $output .= '</form>';
    $output .= '</div>'; // Close modal-content
    $output .= '</div>'; // Close modal
    
    // Notification Modal
    $output .= data_post_e_generate_notification_modal($post_id);
    
    // Delete Confirmation Modal
    $output .= data_post_e_generate_delete_modal($post_id);
    
    return $output;
}

/**
 * Generate taxonomy fields
 */
function data_post_e_generate_taxonomy_fields($post_id) {
    $output = '';
    $taxonomies = get_object_taxonomies(get_post_type($post_id), 'objects');
    
    if (!empty($taxonomies)) {
        foreach ($taxonomies as $taxonomy) {
            if ($taxonomy->hierarchical && $taxonomy->show_ui) {
                $terms = get_terms(array(
                    'taxonomy' => $taxonomy->name,
                    'hide_empty' => false,
                ));
                
                $post_terms = wp_get_post_terms($post_id, $taxonomy->name, array('fields' => 'ids'));
                
                $output .= '<div class="data-post-e-field">';
                $output .= '<label for="taxonomy_' . $taxonomy->name . '">' . $taxonomy->label . ':</label>';
                $output .= '<div class="taxonomy-terms-container">';
                
                // Show selected terms
                if (!empty($post_terms)) {
                    $output .= '<div class="current-terms-label">หมวดหมู่ปัจจุบัน:</div>';
                    $output .= '<div class="current-terms">';
                    foreach ($post_terms as $term_id) {
                        $term = get_term($term_id, $taxonomy->name);
                        if ($term && !is_wp_error($term)) {
                            $output .= '<span class="term-badge">' . $term->name . '</span>';
                        }
                    }
                    $output .= '</div>';
                }
                
                // Select input for editing
                $output .= '<select name="taxonomy_' . $taxonomy->name . '[]" id="taxonomy_' . $taxonomy->name . '" multiple class="taxonomy-select">';
                
                foreach ($terms as $term) {
                    $selected = in_array($term->term_id, $post_terms) ? 'selected="selected"' : '';
                    $output .= '<option value="' . $term->term_id . '" ' . $selected . '>' . $term->name . '</option>';
                }
                
                $output .= '</select>';
                $output .= '<div class="taxonomy-hint">กดปุ่ม Ctrl (หรือ Command บน Mac) เพื่อเลือกหลายหมวดหมู่</div>';
                $output .= '</div>';
                $output .= '</div>';
            }
        }
    }
    
    return $output;
}

/**
 * Generate repeater fields
 */
function data_post_e_generate_repeater_fields($post_id) {
    $output = '<div class="data-post-e-field">';
    $output .= '<label>ไฟล์แนบ:</label>';
    $output .= '<div class="data-post-e-repeater" id="at_file_standard_repeater">';
    
    $at_file_standard = get_post_meta($post_id, 'at_file_standard', true);
    
    if (is_array($at_file_standard) && !empty($at_file_standard)) {
        foreach ($at_file_standard as $index => $file) {
            $file_name = isset($file['at_rp_file_name']) ? $file['at_rp_file_name'] : '';
            $file_create = isset($file['at_rp_file_create']) ? $file['at_rp_file_create'] : '';
            $file_link = isset($file['at_rp_file_link']) ? $file['at_rp_file_link'] : '';
            
            $output .= data_post_e_generate_repeater_row($index, $file_name, $file_create, $file_link);
        }
    } else {
        // Empty row
        $output .= data_post_e_generate_repeater_row(0, '', current_time('d/m/Y'), '');
    }
    
    $output .= '</div>'; // Close repeater
    $output .= '<button type="button" id="add-row-btn" class="add-row-btn">+ เพิ่มไฟล์ใหม่</button>';
    $output .= '</div>'; // Close field
    
    return $output;
}

/**
 * Generate single repeater row
 */
function data_post_e_generate_repeater_row($index, $file_name, $file_create, $file_link) {
    $download_style = empty($file_link) ? 'style="display:none;"' : '';
    
    $output = '<div class="repeater-row">';
    $output .= '<div class="repeater-field">';
    $output .= '<label>ชื่อไฟล์:</label>';
    $output .= '<input type="text" name="at_file_standard[' . $index . '][at_rp_file_name]" value="' . esc_attr($file_name) . '">';
    $output .= '</div>';
    $output .= '<div class="repeater-field">';
    $output .= '<label>วันที่นำเข้า:</label>';
    $output .= '<input type="text" name="at_file_standard[' . $index . '][at_rp_file_create]" value="' . esc_attr($file_create) . '">';
    $output .= '</div>';
    $output .= '<div class="repeater-field file-actions">';
    $output .= '<input type="hidden" name="at_file_standard[' . $index . '][at_rp_file_link]" class="file-link-input" value="' . esc_attr($file_link) . '">';
    $output .= '<a href="' . esc_url($file_link) . '" class="download-file-btn" target="_blank" ' . $download_style . '>ดาวน์โหลดไฟล์</a>';
    $output .= '<button type="button" class="upload-new-file-btn">อัพโหลดไฟล์ใหม่</button>';
    $output .= '<button type="button" class="link-file-btn">ลิงค์</button>';
    $output .= '<button type="button" class="remove-row-btn">ลบ</button>';
    $output .= '</div>';
    $output .= '<div class="repeater-field url-field" style="display:none;">';
    $output .= '<label>URL:</label>';
    $output .= '<input type="text" name="at_file_standard[' . $index . '][at_rp_file_url]" class="manual-url-input" value="' . esc_attr($file_link) . '">';
    $output .= '</div>';
    $output .= '</div>';
    
    return $output;
}

/**
 * Generate notification modal
 */
function data_post_e_generate_notification_modal($post_id) {
    $output = '<div id="notification-modal-' . $post_id . '" class="notification-modal">';
    $output .= '<div class="notification-modal-content">';
    $output .= '<h3>บันทึกแก้ไขโพสเรียบร้อย</h3>';
    $output .= '<p>โพสนี้จะถูกเปลี่ยนสถานะเป็น <strong>รอตรวจสอบ</strong><br>เมื่อตรวจสอบเสร็จแล้วระบบจะเผยแพร่โดยอัตโนมัติอีกรอบ</p>';
    $output .= '<button type="button" class="notification-confirm-btn">ตกลง</button>';
    $output .= '</div>';
    $output .= '</div>';
    
    return $output;
}

/**
 * Generate delete confirmation modal
 */
function data_post_e_generate_delete_modal($post_id) {
    $output = '<div id="delete-confirm-modal-' . $post_id . '" class="delete-confirm-modal">';
    $output .= '<div class="delete-confirm-modal-content">';
    $output .= '<h3>คุณกำลังลบเนื้อหานี้</h3>';
    $output .= '<p>การดำเนินการนี้ไม่สามารถย้อนกลับได้<br>คุณยืนยันที่จะลบเนื้อหานี้หรือไม่?</p>';
    $output .= '<div class="delete-confirm-actions">';
    $output .= '<button type="button" class="confirm-delete-btn">ใช่... ฉันยืนยันลบ</button>';
    $output .= '<button type="button" class="cancel-delete-btn">ไม่... ฉันกดผิด</button>';
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
    
    return $output;
}

/**
 * AJAX handler for saving post data
 */
function data_post_e_ajax_save() {
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'data_post_e_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        exit;
    }
    
    // Check user permissions
    if (!current_user_can('edit_posts')) {
        wp_send_json_error(array('message' => 'You do not have permission to edit posts'));
        exit;
    }
    
    // Get Post ID
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    
    // Verify post exists
    if (!get_post($post_id)) {
        wp_send_json_error(array('message' => 'Post not found'));
        exit;
    }
    
    // Update Post Title
    if (isset($_POST['post_title'])) {
        $post_data = array(
            'ID' => $post_id,
            'post_title' => sanitize_text_field($_POST['post_title']),
            'post_status' => 'pending',
        );
        wp_update_post($post_data);
    }
    
    // Update Taxonomies
    $taxonomies = get_object_taxonomies(get_post_type($post_id), 'objects');
    if (!empty($taxonomies)) {
        foreach ($taxonomies as $taxonomy) {
            if ($taxonomy->hierarchical && $taxonomy->show_ui) {
                $taxonomy_name = $taxonomy->name;
                $term_ids = isset($_POST['taxonomy_' . $taxonomy_name]) ? $_POST['taxonomy_' . $taxonomy_name] : array();
                $term_ids = array_map('intval', (array) $term_ids);
                wp_set_object_terms($post_id, $term_ids, $taxonomy_name);
            }
        }
    }
    
    // Update Custom Field "at_content"
    if (isset($_POST['at_content'])) {
        $old_content = get_post_meta($post_id, 'at_content', true);
        update_post_meta($post_id, 'at_content_previous', $old_content);
        update_post_meta($post_id, 'at_content', wp_kses_post($_POST['at_content']));
    }
    
    // Update Repeater Custom Field "at_file_standard"
    if (isset($_POST['at_file_standard']) && is_array($_POST['at_file_standard'])) {
        $at_file_standard = array();
        
        foreach ($_POST['at_file_standard'] as $file) {
            if (!empty($file['at_rp_file_name']) || !empty($file['at_rp_file_link'])) {
                $at_file_standard[] = array(
                    'at_rp_file_name' => sanitize_text_field($file['at_rp_file_name']),
                    'at_rp_file_create' => sanitize_text_field($file['at_rp_file_create']),
                    'at_rp_file_link' => esc_url_raw($file['at_rp_file_link']),
                );
            }
        }
        
        update_post_meta($post_id, 'at_file_standard', $at_file_standard);
    }
    
    // Add edit tracking
    update_post_meta($post_id, 'last_edited_by', get_current_user_id());
    update_post_meta($post_id, 'last_edited_time', current_time('mysql'));
    
    wp_send_json_success(array(
        'message' => 'อัพเดตข้อมูลเรียบร้อยแล้ว',
        'redirect' => get_permalink($post_id),
    ));
    exit;
}
add_action('wp_ajax_data_post_e_save', 'data_post_e_ajax_save');

/**
 * AJAX handler for deleting post
 */
function data_post_e_ajax_delete() {
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'data_post_e_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        exit;
    }
    
    // Check user permissions
    if (!current_user_can('delete_posts')) {
        wp_send_json_error(array('message' => 'You do not have permission to delete posts'));
        exit;
    }
    
    // Get Post ID
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    
    // Verify post exists
    if (!get_post($post_id)) {
        wp_send_json_error(array('message' => 'Post not found'));
        exit;
    }
    
    // Delete post
    $result = wp_delete_post($post_id, true);
    
    if ($result) {
        wp_send_json_success(array(
            'message' => 'ลบโพสเรียบร้อยแล้ว',
            'redirect' => home_url(),
        ));
    } else {
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดในการลบโพส'));
    }
    exit;
}
add_action('wp_ajax_data_post_e_delete', 'data_post_e_ajax_delete');

/**
 * AJAX handler for uploading images from TinyMCE
 */
function data_post_e_upload_image() {
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'data_post_e_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        exit;
    }
    
    // Check permissions
    if (!current_user_can('upload_files')) {
        wp_send_json_error(array('message' => 'You do not have permission to upload files'));
        exit;
    }
    
    // Verify file exists
    if (!isset($_FILES['file'])) {
        wp_send_json_error(array('message' => 'No file uploaded'));
        exit;
    }
    
    // Allowed file types for images
    $allowed_types = array('jpg', 'jpeg', 'png', 'gif', 'webp');
    $file_info = wp_check_filetype($_FILES['file']['name']);
    
    if (!in_array(strtolower($file_info['ext']), $allowed_types)) {
        wp_send_json_error(array('message' => 'Invalid file type. Only JPG, PNG, GIF, and WebP are allowed.'));
        exit;
    }
    
    // Handle upload
    $upload = wp_handle_upload($_FILES['file'], array('test_form' => false));
    
    if (isset($upload['error']) && $upload['error']) {
        wp_send_json_error(array('message' => $upload['error']));
        exit;
    }
    
    // Create attachment
    $attachment = array(
        'guid' => $upload['url'],
        'post_mime_type' => $upload['type'],
        'post_title' => sanitize_file_name($_FILES['file']['name']),
        'post_content' => '',
        'post_status' => 'inherit'
    );
    
    $attach_id = wp_insert_attachment($attachment, $upload['file']);
    
    if (is_wp_error($attach_id)) {
        wp_send_json_error(array('message' => 'Failed to create attachment'));
        exit;
    }
    
    // Generate metadata
    require_once(ABSPATH . 'wp-admin/includes/image.php');
    $attach_data = wp_generate_attachment_metadata($attach_id, $upload['file']);
    wp_update_attachment_metadata($attach_id, $attach_data);
    
    // Get the attachment URL
    $url = wp_get_attachment_url($attach_id);
    
    if (!$url) {
        wp_send_json_error(array('message' => 'Failed to get attachment URL'));
        exit;
    }
    
    // Send success response with proper structure
    wp_send_json_success(array(
        'url' => $url,
        'id' => $attach_id,
        'title' => get_the_title($attach_id),
        'filename' => basename($upload['file']),
        'link' => get_permalink($attach_id)
    ));
    exit;
}
add_action('wp_ajax_data_post_e_upload_image', 'data_post_e_upload_image');





/***** แสดงตารางไฟล์ในโพสพร้อม PDF Preview และการเข้ารหัสลิงก์ *******/

/**
 * Table Files - ระบบแสดงตารางไฟล์พร้อมระบบเข้ารหัสลิงก์และ PDF Preview
 * 
 * @package     TableFiles
 * @author      คุณชื่อของคุณ (เพิ่มชื่อของคุณตรงนี้)
 * @version     1.0.3
 * 
 * เพิ่มโค้ดนี้ใน functions.php ของธีมหรือสร้างเป็นไฟล์ใหม่แล้ว include ใน functions.php
 */

// ป้องกันการเข้าถึงไฟล์โดยตรง
if (!defined('ABSPATH')) {
    exit;
}

/**
 * ฟังก์ชันเข้ารหัสลิงก์ไฟล์
 * 
 * @param string $url URL ของไฟล์ที่ต้องการเข้ารหัส
 * @param bool $is_preview กำหนดว่าเป็นการเข้ารหัสสำหรับการแสดงตัวอย่างหรือไม่
 * @return string URL ที่เข้ารหัสแล้ว
 */
function encrypt_file_url($url, $is_preview = false) {
    if (empty($url)) return '';
    
    // สร้าง nonce เพื่อความปลอดภัย (มีอายุใช้งาน 24 ชั่วโมง)
    $nonce = wp_create_nonce('secure_download_nonce');
    
    // เข้ารหัส URL ด้วย base64
    $encrypted_url = base64_encode($url);
    
    // สร้าง URL สำหรับ endpoint ที่เหมาะสม
    $action = $is_preview ? 'secure_pdf_preview' : 'secure_file_download';
    $download_url = admin_url('admin-ajax.php');
    $download_url = add_query_arg(array(
        'action' => $action,
        'file' => $encrypted_url,
        'nonce' => $nonce
    ), $download_url);
    
    return $download_url;
}

/**
 * ฟังก์ชัน endpoint สำหรับดาวน์โหลดไฟล์ที่เข้ารหัส
 */
function handle_secure_file_download() {
    // ตรวจสอบ nonce
    if (!isset($_GET['nonce']) || !wp_verify_nonce($_GET['nonce'], 'secure_download_nonce')) {
        wp_die('ลิงก์หมดอายุหรือไม่ถูกต้อง', 'ข้อผิดพลาด', array('response' => 403));
    }
    
    // ตรวจสอบว่ามีพารามิเตอร์ file หรือไม่
    if (!isset($_GET['file']) || empty($_GET['file'])) {
        wp_die('ไม่พบข้อมูลไฟล์', 'ข้อผิดพลาด', array('response' => 400));
    }
    
    // ถอดรหัส URL ของไฟล์
    $file_url = base64_decode($_GET['file']);
    
    // ตรวจสอบความถูกต้องของ URL (เพิ่มความปลอดภัย)
    if (!filter_var($file_url, FILTER_VALIDATE_URL)) {
        wp_die('URL ไม่ถูกต้อง', 'ข้อผิดพลาด', array('response' => 400));
    }
    
    // ตรวจสอบว่า URL เป็นของเว็บไซต์นี้หรือไม่
    $site_url = site_url();
    $upload_url = wp_upload_dir()['baseurl'];
    
    // อนุญาตให้เข้าถึงไฟล์ที่อยู่ในโดเมนเดียวกันหรือในโฟลเดอร์ uploads
    $is_valid_url = (strpos($file_url, $site_url) === 0) || (strpos($file_url, $upload_url) === 0);
    
    if (!$is_valid_url && strpos($file_url, 'http') === 0) {
        wp_die('ไม่อนุญาตให้ดาวน์โหลดไฟล์จากภายนอก', 'ข้อผิดพลาด', array('response' => 403));
    }
    
    // ดึงข้อมูลไฟล์
    $file_info = pathinfo($file_url);
    $file_name = isset($file_info['basename']) ? $file_info['basename'] : 'download';
    
    // ถ้าไฟล์อยู่บนเซิร์ฟเวอร์เดียวกัน พยายามอ่านไฟล์โดยตรง
    $file_path = '';
    
    // แปลง URL เป็นพาธในระบบไฟล์ ถ้าเป็นไปได้
    if (strpos($file_url, $upload_url) === 0) {
        $file_path = str_replace($upload_url, wp_upload_dir()['basedir'], $file_url);
        
        if (file_exists($file_path)) {
            // อ่านไฟล์โดยตรงจากระบบไฟล์
            $file_size = filesize($file_path);
            $mime_type = mime_content_type($file_path);
            
            // ส่งข้อมูลไฟล์ไปยังเบราว์เซอร์
            header('Content-Type: ' . $mime_type);
            header('Content-Disposition: attachment; filename="' . $file_name . '"');
            header('Content-Length: ' . $file_size);
            header('Cache-Control: no-cache, must-revalidate');
            header('Pragma: no-cache');
            header('Expires: 0');
            
            readfile($file_path);
            exit;
        }
    }
    
    // ถ้าไม่สามารถอ่านไฟล์โดยตรงได้ ใช้ WordPress HTTP API
    $response = wp_remote_get($file_url, array(
        'timeout' => 60,
        'sslverify' => false
    ));
    
    // ตรวจสอบข้อผิดพลาด
    if (is_wp_error($response)) {
        wp_die('ไม่สามารถดาวน์โหลดไฟล์ได้: ' . $response->get_error_message(), 'ข้อผิดพลาด', array('response' => 500));
    }
    
    // ตรวจสอบสถานะ HTTP
    if (wp_remote_retrieve_response_code($response) !== 200) {
        wp_die('ไม่สามารถดาวน์โหลดไฟล์ได้', 'ข้อผิดพลาด', array('response' => 500));
    }
    
    // ดึงเนื้อหาไฟล์
    $file_content = wp_remote_retrieve_body($response);
    
    // ดึง MIME type
    $content_type = wp_remote_retrieve_header($response, 'content-type');
    if (empty($content_type)) {
        // พยายามหา MIME type จากนามสกุลไฟล์
        $content_type = mime_content_type($file_url);
        if (empty($content_type)) {
            $content_type = 'application/octet-stream';
        }
    }
    
    // ส่งข้อมูลไฟล์ไปยังเบราว์เซอร์
    header('Content-Type: ' . $content_type);
    header('Content-Disposition: attachment; filename="' . $file_name . '"');
    header('Content-Length: ' . strlen($file_content));
    header('Cache-Control: no-cache, must-revalidate');
    header('Pragma: no-cache');
    header('Expires: 0');
    
    echo $file_content;
    exit;
}

/**
 * ฟังก์ชันสำหรับแสดงตัวอย่าง PDF แบบปลอดภัย
 */
function handle_secure_pdf_preview() {
    // ตรวจสอบ nonce
    if (!isset($_GET['nonce']) || !wp_verify_nonce($_GET['nonce'], 'secure_download_nonce')) {
        wp_die('ลิงก์หมดอายุหรือไม่ถูกต้อง', 'ข้อผิดพลาด', array('response' => 403));
    }
    
    // ตรวจสอบว่ามีพารามิเตอร์ file หรือไม่
    if (!isset($_GET['file']) || empty($_GET['file'])) {
        wp_die('ไม่พบข้อมูลไฟล์', 'ข้อผิดพลาด', array('response' => 400));
    }
    
    // ถอดรหัส URL ของไฟล์
    $file_url = base64_decode($_GET['file']);
    
    // ตรวจสอบความถูกต้องของ URL (เพิ่มความปลอดภัย)
    if (!filter_var($file_url, FILTER_VALIDATE_URL)) {
        wp_die('URL ไม่ถูกต้อง', 'ข้อผิดพลาด', array('response' => 400));
    }
    
    // ตรวจสอบว่า URL เป็นของเว็บไซต์นี้หรือไม่
    $site_url = site_url();
    $upload_url = wp_upload_dir()['baseurl'];
    
    // อนุญาตให้เข้าถึงไฟล์ที่อยู่ในโดเมนเดียวกันหรือในโฟลเดอร์ uploads
    $is_valid_url = (strpos($file_url, $site_url) === 0) || (strpos($file_url, $upload_url) === 0);
    
    if (!$is_valid_url && strpos($file_url, 'http') === 0) {
        wp_die('ไม่อนุญาตให้ดูไฟล์จากภายนอก', 'ข้อผิดพลาด', array('response' => 403));
    }
    
    // ตรวจสอบว่าเป็นไฟล์ PDF หรือไม่
    $file_info = pathinfo($file_url);
    $file_ext = isset($file_info['extension']) ? strtolower($file_info['extension']) : '';
    
    if ($file_ext !== 'pdf') {
        wp_die('ไม่ใช่ไฟล์ PDF', 'ข้อผิดพลาด', array('response' => 400));
    }
    
    // ถ้าไฟล์อยู่บนเซิร์ฟเวอร์เดียวกัน พยายามอ่านไฟล์โดยตรง
    $file_path = '';
    
    // แปลง URL เป็นพาธในระบบไฟล์ ถ้าเป็นไปได้
    if (strpos($file_url, $upload_url) === 0) {
        $file_path = str_replace($upload_url, wp_upload_dir()['basedir'], $file_url);
        
        if (file_exists($file_path)) {
            // อ่านไฟล์โดยตรงจากระบบไฟล์
            $file_size = filesize($file_path);
            
            // ส่งข้อมูลไฟล์ไปยังเบราว์เซอร์
            header('Content-Type: application/pdf');
            header('Content-Length: ' . $file_size);
            header('Cache-Control: no-cache, must-revalidate');
            header('Pragma: no-cache');
            header('Expires: 0');
            
            readfile($file_path);
            exit;
        }
    }
    
    // ถ้าไม่สามารถอ่านไฟล์โดยตรงได้ ใช้ WordPress HTTP API
    $response = wp_remote_get($file_url, array(
        'timeout' => 60,
        'sslverify' => false
    ));
    
    // ตรวจสอบข้อผิดพลาด
    if (is_wp_error($response)) {
        wp_die('ไม่สามารถดูไฟล์ได้: ' . $response->get_error_message(), 'ข้อผิดพลาด', array('response' => 500));
    }
    
    // ตรวจสอบสถานะ HTTP
    if (wp_remote_retrieve_response_code($response) !== 200) {
        wp_die('ไม่สามารถดูไฟล์ได้', 'ข้อผิดพลาด', array('response' => 500));
    }
    
    // ดึงเนื้อหาไฟล์
    $file_content = wp_remote_retrieve_body($response);
    
    // ส่งข้อมูลไฟล์ไปยังเบราว์เซอร์
    header('Content-Type: application/pdf');
    header('Content-Length: ' . strlen($file_content));
    header('Cache-Control: no-cache, must-revalidate');
    header('Pragma: no-cache');
    header('Expires: 0');
    
    echo $file_content;
    exit;
}

/**
 * Shortcode สำหรับแสดงตารางไฟล์
 * 
 * @return string HTML ของตารางไฟล์
 */
function table_files_shortcode() {
    // รับค่า Post ID ปัจจุบัน
    $post_id = get_the_ID();
    
    // เพิ่ม CSS และ JavaScript
    wp_enqueue_style('table-files-style', get_stylesheet_directory_uri() . '/css/table-files.css', array(), '1.0.3');
    wp_enqueue_script('table-files-script', get_stylesheet_directory_uri() . '/js/table-files.js', array('jquery'), '1.0.3', true);
    
    // ส่งข้อมูลไปยัง JavaScript
    wp_localize_script('table-files-script', 'tableFilesData', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('table_files_nonce')
    ));
    
    // ดึงข้อมูล Repeater
    $at_file_standard = get_post_meta($post_id, 'at_file_standard', true);
    
    // เริ่มต้น output buffering
    ob_start();
    
    // ตรวจสอบว่ามีข้อมูลหรือไม่
    if (is_array($at_file_standard) && !empty($at_file_standard)) {
        ?>
        <div class="table-files-container">
            <!-- เพิ่มส่วน PDF Preview -->
            <div class="pdf-preview-container" style="display: none;">
                <div class="pdf-preview-header">
                    <h3>PDF Preview: <span class="pdf-preview-filename"></span></h3>
                    <button class="pdf-preview-close" aria-label="ปิดการแสดงตัวอย่าง PDF">×</button>
                </div>
                <div class="pdf-preview-content">
                    <iframe id="pdf-preview-frame" src="" width="100%" height="500px" title="PDF Preview"></iframe>
                </div>
                <div class="pdf-preview-actions">
                    <a href="#" class="pdf-download-button" target="_blank">
                        <span class="download-icon"></span>
                        <span>ดาวน์โหลดไฟล์นี้</span>
                    </a>
                </div>
            </div>
            
            <div class="table-files-header">
                <h3>เอกสารแนบ</h3>
                <div class="table-files-search">
                    <input type="text" id="file-search-input" placeholder="ค้นหาไฟล์..." aria-label="ค้นหาไฟล์">
                    <div class="search-icon"></div>
                </div>
            </div>
            
            <div class="table-files-wrapper">
                <table class="table-files" role="table" aria-label="ตารางเอกสารแนบ">
                    <thead>
                        <tr>
                            <th class="column-filename" scope="col">ชื่อไฟล์ <span class="sort-icon"></span></th>
                            <th class="column-date" scope="col">วันที่นำเข้า <span class="sort-icon"></span></th>
                            <th class="column-preview" scope="col">ดูตัวอย่าง</th>
                            <th class="column-download" scope="col">ดาวน์โหลด</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php 
                        foreach ($at_file_standard as $file) : 
                            $file_name = isset($file['at_rp_file_name']) ? sanitize_text_field($file['at_rp_file_name']) : '';
                            $file_create = isset($file['at_rp_file_create']) ? sanitize_text_field($file['at_rp_file_create']) : '';
                            $file_link = isset($file['at_rp_file_link']) ? esc_url_raw($file['at_rp_file_link']) : '';
                            
                            // ข้ามถ้าไม่มีชื่อไฟล์หรือลิงก์
                            if (empty($file_name) && empty($file_link)) {
                                continue;
                            }
                            
                            // เข้ารหัสลิงก์สำหรับการดาวน์โหลด
                            $encrypted_link = encrypt_file_url($file_link);
                            
                            // เก็บลิงก์ต้นฉบับสำหรับ PDF preview (จะถูกเข้ารหัสด้วย JavaScript)
                            $original_link = $file_link;
                            
                            // ตรวจสอบว่าเป็นไฟล์ PDF หรือไม่
                            $is_pdf = false;
                            if (!empty($file_link)) {
                                $file_ext = pathinfo($file_link, PATHINFO_EXTENSION);
                                $is_pdf = strtolower($file_ext) === 'pdf';
                            }
                            
                            // ถ้าเป็น PDF ให้เข้ารหัสลิงก์สำหรับ preview ด้วย
                            $preview_link = $is_pdf ? encrypt_file_url($file_link, true) : '';
                        ?>
                        <tr>
                            <td class="column-filename">
                                <div class="file-name"><?php echo esc_html($file_name); ?></div>
                            </td>
                            <td class="column-date"><?php echo esc_html($file_create); ?></td>
                            <td class="column-preview">
                                <?php if (!empty($file_link) && $is_pdf) : ?>
                                    <button class="preview-button" 
                                           data-file="<?php echo esc_attr($preview_link); ?>" 
                                           data-filename="<?php echo esc_attr($file_name); ?>" 
                                           data-secure="<?php echo esc_attr($encrypted_link); ?>"
                                           aria-label="ดูตัวอย่าง <?php echo esc_attr($file_name); ?>">
                                        <span class="preview-icon"></span>
                                        <span class="preview-text">ดูตัวอย่าง</span>
                                    </button>
                                <?php else : ?>
                                    <span class="no-preview">-</span>
                                <?php endif; ?>
                            </td>
                            <td class="column-download">
                                <?php if (!empty($file_link)) : ?>
                                    <?php 
                                    // ตรวจสอบว่าเป็นลิงค์ภายนอกหรือไม่
                                    $is_external = is_external_url($file_link); 
                                    
                                    // กำหนดข้อความและคลาสของปุ่ม
                                    $button_text = $is_external ? 'ลิงค์ภายนอก' : 'ดาวน์โหลด';
                                    $button_class = $is_external ? 'external-button' : 'download-button';
                                    $icon_class = $is_external ? 'external-icon' : 'download-icon';
                                    $text_class = $is_external ? 'external-text' : 'download-text';
                                    
                                    // กำหนด URL สำหรับลิงก์ (ไม่ต้องเข้ารหัสลิงค์ภายนอก)
                                    $link_url = $is_external ? $file_link : esc_url($encrypted_link);
                                    ?>
                                    <a href="<?php echo esc_url($link_url); ?>" 
                                    class="<?php echo esc_attr($button_class); ?>" 
                                    target="_blank"
                                    aria-label="<?php echo $is_external ? 'เปิดลิงค์ภายนอก' : 'ดาวน์โหลด'; ?> <?php echo esc_attr($file_name); ?>">
                                        <span class="<?php echo esc_attr($icon_class); ?>"></span>
                                        <span class="<?php echo esc_attr($text_class); ?>"><?php echo esc_html($button_text); ?></span>
                                    </a>
                                <?php else : ?>
                                    <span class="no-file-link">ไม่มีไฟล์</span>
                                <?php endif; ?>
                            </td>
                        </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
            </div>
            
            <div class="table-files-footer">
                <div class="file-counter">จำนวนไฟล์ทั้งหมด: <span id="file-count"></span></div>
            </div>
        </div>
        <?php
    } else {
        ?>
        <div class="table-files-empty">
            <div class="empty-icon"></div>
            <p>ไม่มีไฟล์แนบสำหรับโพสต์นี้</p>
        </div>
        <?php
    }
    
    // คืนค่า buffer ที่เก็บไว้
    return ob_get_clean();
}

/**
 * ฟังก์ชันสำหรับตรวจสอบว่า URL เป็นลิงค์ภายนอกหรือไม่
 * 
 * @param string $url URL ที่ต้องการตรวจสอบ
 * @return boolean true ถ้าเป็นลิงค์ภายนอก, false ถ้าไม่ใช่
 */
function is_external_url($url) {
    // ถ้าไม่มี URL หรือ URL ว่างเปล่า ให้ถือว่าไม่ใช่ลิงก์ภายนอก
    if (empty($url)) {
        return false;
    }
    
    // ตรวจสอบว่า URL เริ่มต้นด้วย http:// หรือ https://
    if (strpos($url, 'http://') !== 0 && strpos($url, 'https://') !== 0) {
        return false;
    }
    
    // ดึงโดเมนของเว็บไซต์ปัจจุบัน
    $site_url = get_site_url();
    $site_domain = wp_parse_url($site_url, PHP_URL_HOST);
    
    // ดึงโดเมนของ URL ที่ต้องการตรวจสอบ
    $url_domain = wp_parse_url($url, PHP_URL_HOST);
    
    // ถ้าโดเมนเหมือนกัน แสดงว่าไม่ใช่ลิงก์ภายนอก
    if ($site_domain === $url_domain) {
        return false;
    }
    
    // ถ้าผ่านการตรวจสอบทั้งหมด แสดงว่าเป็นลิงก์ภายนอก
    return true;
}

/**
 * ฟังก์ชันสำหรับสร้าง CSS และ JS ไฟล์ถ้ายังไม่มี (ครั้งแรกที่เรียกใช้)
 */
function table_files_create_assets() {
    // ตรวจสอบโฟลเดอร์ CSS
    $css_dir = get_stylesheet_directory() . '/css';
    if (!file_exists($css_dir)) {
        wp_mkdir_p($css_dir);
    }
    
    // ตรวจสอบโฟลเดอร์ JS
    $js_dir = get_stylesheet_directory() . '/js';
    if (!file_exists($js_dir)) {
        wp_mkdir_p($js_dir);
    }
    
    // ตรวจสอบไฟล์ CSS
    $css_file = $css_dir . '/table-files.css';
    if (!file_exists($css_file)) {
        // ดาวน์โหลด CSS จาก GitHub หรือเซิร์ฟเวอร์ของคุณ
        // (ปรับ URL ตามความเหมาะสม)
        $css_content = file_get_contents('YOUR_CSS_URL');
        if ($css_content) {
            file_put_contents($css_file, $css_content);
        }
    }
    
    // ตรวจสอบไฟล์ JS
    $js_file = $js_dir . '/table-files.js';
    if (!file_exists($js_file)) {
        // ดาวน์โหลด JS จาก GitHub หรือเซิร์ฟเวอร์ของคุณ
        // (ปรับ URL ตามความเหมาะสม)
        $js_content = file_get_contents('YOUR_JS_URL');
        if ($js_content) {
            file_put_contents($js_file, $js_content);
        }
    }
}

/**
 * ฟังก์ชันสำหรับการติดตั้ง shortcode นี้
 */
function table_files_init() {
    // ลงทะเบียน shortcode
    add_shortcode('table_files', 'table_files_shortcode');
    
    // ลงทะเบียน AJAX endpoints
    add_action('wp_ajax_secure_file_download', 'handle_secure_file_download');
    add_action('wp_ajax_nopriv_secure_file_download', 'handle_secure_file_download');
    
    add_action('wp_ajax_secure_pdf_preview', 'handle_secure_pdf_preview');
    add_action('wp_ajax_nopriv_secure_pdf_preview', 'handle_secure_pdf_preview');
    
    // สร้างไฟล์ assets ถ้าจำเป็น
    // table_files_create_assets(); // ปิดความเห็นนี้ถ้าต้องการให้สร้างไฟล์อัตโนมัติ
}

// เริ่มต้นการทำงาน
table_files_init();



/****** กราฟแสดงสถิติจัดซื้อจัดจ้าง *******/

// ฟังก์ชันสำหรับโหลด scripts และ styles
function egp_statistics_enqueue_scripts() {
    global $post;
    
    // ตรวจสอบว่าเป็นหน้าที่มี shortcode หรือไม่
    if ( is_a( $post, 'WP_Post' ) && has_shortcode( $post->post_content, 'egp_statistics' ) ) {
        
        // ลงทะเบียน CSS
        wp_enqueue_style(
            'egp-statistics-style', 
            get_stylesheet_directory_uri() . '/css/egp-statistics.css', 
            array(), 
            '1.0.2'
        );
        
        // ลงทะเบียน Chart.js
        wp_enqueue_script(
            'chart-js', 
            'https://cdn.jsdelivr.net/npm/chart.js', 
            array('jquery'), 
            '3.9.1', 
            true
        );
        
        // ลงทะเบียน Custom JavaScript
        wp_enqueue_script(
            'egp-statistics-script', 
            get_stylesheet_directory_uri() . '/js/egp-statistics.js', 
            array('jquery', 'chart-js'), 
            '1.0.2', 
            true
        );
        
        // สร้าง nonce และส่งไปยัง JavaScript
        wp_localize_script('egp-statistics-script', 'egp_ajax_vars', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce'    => wp_create_nonce('egp_statistics_nonce_action'),
            'is_user_logged_in' => is_user_logged_in(),
            'debug'    => WP_DEBUG
        ));
    }
}
add_action('wp_enqueue_scripts', 'egp_statistics_enqueue_scripts', 99);

// สร้าง Shortcode [egp_statistics]
function egp_statistics_shortcode() {
    ob_start();
    ?>
    <div class="egp-statistics-container">
        <div class="egp-filters">
            <h2>สถิติจัดซื้อจัดจ้าง</h2>
            
            <div class="egp-filter-row">
                <div class="egp-filter-group">
                    <label for="egp-view-type">ดูข้อมูลแบบ:</label>
                    <select id="egp-view-type" class="egp-select">
                        <option value="monthly">รายเดือน</option>
                        <option value="yearly">รายปี</option>
                    </select>
                </div>
                
                <div class="egp-filter-group">
                    <label for="egp-year">ปี:</label>
                    <select id="egp-year" class="egp-select">
                        <?php
                        $current_year = date('Y');
                        for ($i = $current_year; $i >= $current_year - 5; $i--) {
                            echo '<option value="' . $i . '">' . ($i + 543) . '</option>';
                        }
                        ?>
                    </select>
                </div>
                
                <div class="egp-filter-group month-filter">
                    <label for="egp-month">เดือน:</label>
                    <select id="egp-month" class="egp-select">
                        <option value="all">ทั้งหมด</option>
                        <option value="1">มกราคม</option>
                        <option value="2">กุมภาพันธ์</option>
                        <option value="3">มีนาคม</option>
                        <option value="4">เมษายน</option>
                        <option value="5">พฤษภาคม</option>
                        <option value="6">มิถุนายน</option>
                        <option value="7">กรกฎาคม</option>
                        <option value="8">สิงหาคม</option>
                        <option value="9">กันยายน</option>
                        <option value="10">ตุลาคม</option>
                        <option value="11">พฤศจิกายน</option>
                        <option value="12">ธันวาคม</option>
                    </select>
                </div>
            </div>
            
            <div class="egp-filter-row">
                <div class="egp-filter-group">
                    <label for="egp-announcement-type">ประเภทประกาศ:</label>
                    <select id="egp-announcement-type" class="egp-select">
                        <option value="all">ทั้งหมด</option>
                        <option value="แผนการจัดซื้อจัดจ้าง">แผนการจัดซื้อจัดจ้าง</option>
                        <option value="ประกาศราคากลาง">ประกาศราคากลาง</option>
                        <option value="ประกาศร่าง TOR/ร่างเอกสารประกวดราคา">ประกาศร่าง TOR/ร่างเอกสารประกวดราคา</option>
                        <option value="ประกาศเชิญชวน">ประกาศเชิญชวน</option>
                        <option value="ประกาศรายชื่อผู้ชนะการเสนอราคา">ประกาศรายชื่อผู้ชนะการเสนอราคา</option>
                        <option value="ยกเลิกประกาศเชิญชวน">ยกเลิกประกาศเชิญชวน</option>
                        <option value="ยกเลิกประกาศรายชื่อผู้ชนะการเสนอราคา / ประกาศผู้ได้รับการคัดเลือก">ยกเลิกประกาศรายชื่อผู้ชนะการเสนอราคา / ประกาศผู้ได้รับการคัดเลือก</option>
                        <option value="เปลี่ยนแปลงประกาศเชิญชวน">เปลี่ยนแปลงประกาศเชิญชวน</option>
                        <option value="เปลี่ยนแปลงประกาศรายชื่อผู้ชนะการเสนอราคา">เปลี่ยนแปลงประกาศรายชื่อผู้ชนะการเสนอราคา</option>
                        <option value="ชี้แจงข้อมูลเพิ่มเติม">ชี้แจงข้อมูลเพิ่มเติม</option>
                        <option value="สาระสำคัญสัญญา">สาระสำคัญสัญญา</option>
                        <option value="ประกาศผู้ชนะการจัดซื้อจัดจ้างหรือผู้ได้รับการคัดเลือกเป็นรายไตรมาส">ประกาศผู้ชนะการจัดซื้อจัดจ้างหรือผู้ได้รับการคัดเลือกเป็นรายไตรมาส</option>
                        <option value="ยกเลิกหรือเปลี่ยนแปลงแผนการจัดซื้อจัดจ้าง">ยกเลิกหรือเปลี่ยนแปลงแผนการจัดซื้อจัดจ้าง</option>
                        <option value="ยกเลิกหรือเปลี่ยนแปลงร่าง TOR/เอกสารประกวดราคา">ยกเลิกหรือเปลี่ยนแปลงร่าง TOR/เอกสารประกวดราคา</option>
                        <option value="ขายทอดตลาด">ขายทอดตลาด</option>
                    </select>
                </div>
                
                <div class="egp-filter-group">
                    <label for="egp-procurement-method">วิธีจัดหา:</label>
                    <select id="egp-procurement-method" class="egp-select">
                        <option value="all">ทั้งหมด</option>
                        <option value="e-bidding">e-bidding</option>
                        <option value="คัดเลือก">คัดเลือก</option>
                        <option value="เฉพาะเจาะจง">เฉพาะเจาะจง</option>
                    </select>
                </div>
                
                <div class="egp-filter-group">
                    <label for="egp-department">สำนัก/กอง:</label>
                    <select id="egp-department" class="egp-select">
                        <option value="all">ทั้งหมด</option>
                        <?php
                        // ดึงค่า unique ของ สำนัก/กอง จาก custom field
                        $departments = get_unique_meta_values('egp_sub_dep', 'egp');
                        foreach ($departments as $dept) {
                            echo '<option value="' . esc_attr($dept) . '">' . esc_html($dept) . '</option>';
                        }
                        ?>
                    </select>
                </div>
            </div>
            
            <div class="egp-filter-row">
                <div class="egp-filter-group">
                    <label for="egp-chart-type">รูปแบบกราฟ:</label>
                    <select id="egp-chart-type" class="egp-select">
                        <option value="bar">กราฟแท่ง</option>
                        <option value="line">กราฟเส้น</option>
                        <option value="pie">กราฟวงกลม</option>
                    </select>
                </div>
                
                <div class="egp-filter-group">
                    <button id="egp-filter-submit" type="button" class="egp-button">แสดงข้อมูล</button>
                </div>
            </div>
        </div>
        
        <div class="egp-results">
            <div class="egp-chart-container">
                <canvas id="egp-chart"></canvas>
            </div>
            
            <div class="egp-summary-container">
                <h3>สรุปข้อมูล</h3>
                <div id="egp-summary-data"></div>
            </div>
            
            <div class="egp-table-container">
                <h3>ตารางข้อมูล</h3>
                <div id="egp-table-data"></div>
            </div>
        </div>
        
        <div id="egp-loading" class="egp-loading">
            <div class="egp-spinner"></div>
            <p>กำลังโหลดข้อมูล...</p>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('egp_statistics', 'egp_statistics_shortcode');

// ฟังก์ชันสำหรับดึงค่า unique จาก custom field
function get_unique_meta_values($meta_key, $post_type) {
    global $wpdb;
    
    $query = $wpdb->prepare(
        "SELECT DISTINCT pm.meta_value FROM {$wpdb->postmeta} pm
        LEFT JOIN {$wpdb->posts} p ON p.ID = pm.post_id
        WHERE pm.meta_key = %s
        AND p.post_type = %s
        AND p.post_status = 'publish'
        ORDER BY pm.meta_value",
        $meta_key,
        $post_type
    );
    
    $meta_values = $wpdb->get_col($query);
    
    return array_filter($meta_values); // กรองค่าว่างออก
}

// AJAX handler function
function egp_statistics_ajax_handler() {
    // Debug logging
    if (WP_DEBUG && WP_DEBUG_LOG) {
        error_log('=== EGP Statistics AJAX Handler Start ===');
        error_log('POST data: ' . print_r($_POST, true));
        error_log('User logged in: ' . (is_user_logged_in() ? 'yes' : 'no'));
        error_log('Received nonce: ' . (isset($_POST['_ajax_nonce']) ? $_POST['_ajax_nonce'] : 'not set'));
    }
    
    // ตรวจสอบ nonce โดยใช้ชื่อ parameter ที่ถูกต้อง
    $nonce = null;
    if (isset($_POST['_ajax_nonce'])) {
        $nonce = $_POST['_ajax_nonce'];
    } elseif (isset($_POST['nonce'])) {
        $nonce = $_POST['nonce'];
    }
    
    if (!$nonce) {
        wp_send_json_error(array(
            'message' => 'Security check failed: No nonce provided',
            'code' => 'no_nonce',
            'debug' => array(
                'post_data' => $_POST
            )
        ));
        return;
    }
    
    // ตรวจสอบ nonce
    $nonce_check = wp_verify_nonce($nonce, 'egp_statistics_nonce_action');
    
    if (!$nonce_check) {
        wp_send_json_error(array(
            'message' => 'Security check failed',
            'code' => 'nonce_failed',
            'debug' => array(
                'nonce_sent' => $nonce,
                'expected_action' => 'egp_statistics_nonce_action',
                'user_logged_in' => is_user_logged_in()
            )
        ));
        return;
    }
    
    // รับค่าจาก request
    $view_type = isset($_POST['view_type']) ? sanitize_text_field($_POST['view_type']) : 'monthly';
    $year = isset($_POST['year']) ? intval($_POST['year']) : date('Y');
    $month = isset($_POST['month']) ? sanitize_text_field($_POST['month']) : 'all';
    $announcement_type = isset($_POST['announcement_type']) ? sanitize_text_field($_POST['announcement_type']) : 'all';
    $procurement_method = isset($_POST['procurement_method']) ? sanitize_text_field($_POST['procurement_method']) : 'all';
    $department = isset($_POST['department']) ? sanitize_text_field($_POST['department']) : 'all';
    
    // สร้าง query arguments
    $args = array(
        'post_type' => 'egp',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'meta_query' => array(
            'relation' => 'AND'
        ),
        'date_query' => array(
            'relation' => 'AND'
        )
    );
    
    // เพิ่ม date query
    if ($view_type === 'yearly') {
        $args['date_query'][] = array(
            'year' => $year
        );
    } else { // monthly
        $args['date_query'][] = array(
            'year' => $year
        );
        
        if ($month !== 'all' && intval($month) > 0) {
            $args['date_query'][] = array(
                'month' => intval($month)
            );
        }
    }
    
    // เพิ่ม meta query ตามเงื่อนไข
    if ($announcement_type !== 'all') {
        $args['meta_query'][] = array(
            'key' => 'egp_type',
            'value' => $announcement_type,
            'compare' => '='
        );
    }
    
    if ($procurement_method !== 'all') {
        $args['meta_query'][] = array(
            'key' => 'egp_way',
            'value' => $procurement_method,
            'compare' => '='
        );
    }
    
    if ($department !== 'all') {
        $args['meta_query'][] = array(
            'key' => 'egp_sub_dep',
            'value' => $department,
            'compare' => '='
        );
    }
    
    try {
        // ประมวลผลข้อมูล
        $results = process_egp_data($args, $view_type);
        
        if (WP_DEBUG && WP_DEBUG_LOG) {
            error_log('Processing successful, total results: ' . $results['total']);
            error_log('=== EGP Statistics AJAX Handler End ===');
        }
        
        // ส่งผลลัพธ์กลับไป
        wp_send_json_success($results);
        
    } catch (Exception $e) {
        if (WP_DEBUG && WP_DEBUG_LOG) {
            error_log('Processing error: ' . $e->getMessage());
        }
        
        wp_send_json_error(array(
            'message' => 'Error processing data: ' . $e->getMessage(),
            'code' => 'processing_error'
        ));
    }
}

// เพิ่ม AJAX handlers
add_action('wp_ajax_egp_statistics', 'egp_statistics_ajax_handler');
add_action('wp_ajax_nopriv_egp_statistics', 'egp_statistics_ajax_handler');

// ฟังก์ชันประมวลผลข้อมูล
function process_egp_data($args, $view_type) {
    $query = new WP_Query($args);
    $posts = $query->posts;
    
    $data_by_type = array();
    $data_by_method = array();
    $data_by_department = array();
    $data_by_date = array();
    
    $thai_months = array(
        1 => 'มกราคม', 2 => 'กุมภาพันธ์', 3 => 'มีนาคม', 4 => 'เมษายน',
        5 => 'พฤษภาคม', 6 => 'มิถุนายน', 7 => 'กรกฎาคม', 8 => 'สิงหาคม',
        9 => 'กันยายน', 10 => 'ตุลาคม', 11 => 'พฤศจิกายน', 12 => 'ธันวาคม'
    );
    
    foreach ($posts as $post) {
        // ดึงค่า custom fields
        $type = get_post_meta($post->ID, 'egp_type', true);
        $method = get_post_meta($post->ID, 'egp_way', true);
        $department = get_post_meta($post->ID, 'egp_sub_dep', true);
        $date_start = get_post_meta($post->ID, 'egp_date_start', true);
        
        // เก็บข้อมูลตามประเภทประกาศ
        if (!empty($type)) {
            if (!isset($data_by_type[$type])) {
                $data_by_type[$type] = 0;
            }
            $data_by_type[$type]++;
        }
        
        // เก็บข้อมูลตามวิธีจัดหา
        if (!empty($method)) {
            if (!isset($data_by_method[$method])) {
                $data_by_method[$method] = 0;
            }
            $data_by_method[$method]++;
        }
        
        // เก็บข้อมูลตามสำนัก/กอง
        if (!empty($department)) {
            if (!isset($data_by_department[$department])) {
                $data_by_department[$department] = 0;
            }
            $data_by_department[$department]++;
        }
        
        // เก็บข้อมูลตามวันที่
        if (!empty($date_start)) {
            $date = strtotime($date_start);
            
            if ($date !== false) {
                $month = date('n', $date);
                $year = date('Y', $date);
                
                if ($view_type === 'monthly') {
                    $key = $thai_months[$month];
                    
                    if (!isset($data_by_date[$key])) {
                        $data_by_date[$key] = 0;
                    }
                    $data_by_date[$key]++;
                } else { // yearly
                    $quarter = ceil($month / 3);
                    $key = 'ไตรมาสที่ ' . $quarter;
                    
                    if (!isset($data_by_date[$key])) {
                        $data_by_date[$key] = 0;
                    }
                    $data_by_date[$key]++;
                }
            }
        }
    }
    
    // เรียงลำดับข้อมูล
    if ($view_type === 'monthly') {
        $sorted_data_by_date = array();
        foreach ($thai_months as $month_num => $month_name) {
            $sorted_data_by_date[$month_name] = isset($data_by_date[$month_name]) ? $data_by_date[$month_name] : 0;
        }
        $data_by_date = $sorted_data_by_date;
    } else { // yearly
        $sorted_data_by_date = array();
        for ($q = 1; $q <= 4; $q++) {
            $key = 'ไตรมาสที่ ' . $q;
            $sorted_data_by_date[$key] = isset($data_by_date[$key]) ? $data_by_date[$key] : 0;
        }
        $data_by_date = $sorted_data_by_date;
    }
    
    // สร้างข้อมูลสำหรับตาราง
    $table_data = array();
    foreach ($posts as $post) {
        $type = get_post_meta($post->ID, 'egp_type', true);
        $method = get_post_meta($post->ID, 'egp_way', true);
        $department = get_post_meta($post->ID, 'egp_sub_dep', true);
        $date_start = get_post_meta($post->ID, 'egp_date_start', true);
        $main_dept = get_post_meta($post->ID, 'egp_dep', true);
        
        $table_data[] = array(
            'title' => $post->post_title,
            'type' => $type,
            'method' => $method,
            'department' => $department,
            'main_department' => $main_dept,
            'date' => $date_start,
            'link' => get_permalink($post->ID)
        );
    }
    
    // สรุปผลลัพธ์
    $result = array(
        'total' => count($posts),
        'by_type' => $data_by_type,
        'by_method' => $data_by_method,
        'by_department' => $data_by_department,
        'by_date' => $data_by_date,
        'table_data' => $table_data
    );
    
    return $result;
}




/***** ฟังก์ชั่นเพิ่มตารางแบบ Dynamic *****/

function dynamic_table_shortcode($atts) {
    // Extract attributes
    $atts = shortcode_atts(
        array(
            'id' => 'dynamic-table-' . uniqid(),
            'title' => 'Dynamic Table',
        ),
        $atts,
        'dynamic_table'
    );
    
    // Check if user has editor or admin privileges
    $can_edit = current_user_can('edit_posts');
    
    // Always enqueue viewer styles
    wp_enqueue_style('dynamic-table-css', get_stylesheet_directory_uri() . '/css/dynamic-table.css', array(), '1.0.1');
    
    // Only enqueue edit scripts if user has permissions
    if ($can_edit) {
        wp_enqueue_script('jquery');
        wp_enqueue_script('dynamic-table-js', get_stylesheet_directory_uri() . '/js/dynamic-table.js', array('jquery'), '1.0.1', true);
        
        // Localize script with AJAX URL and nonce
        wp_localize_script('dynamic-table-js', 'dynamic_table_params', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('dynamic_table_nonce'),
            'table_id' => $atts['id']
        ));
    }
    
    // Default data
    $default_data = array(
        'columns' => array('Column 1', 'Column 2', 'Column 3'),
        'rows' => array(
            array(
                'cells' => array('Row 1, Cell 1', 'Row 1, Cell 2', 'Row 1, Cell 3'),
                'links' => array('', '', '')
            )
        )
    );
    
    // Get saved table data
    $table_data = get_option('dynamic_table_' . $atts['id']);
    
    // Check if table data is valid, otherwise use default
    if (!is_array($table_data) || 
        !isset($table_data['columns']) || 
        !isset($table_data['rows']) || 
        !is_array($table_data['columns']) || 
        !is_array($table_data['rows'])) {
        $table_data = $default_data;
    }
    
    // Start output buffering
    ob_start();
    
    // If user can edit, show edit interface
    if ($can_edit) {
        ?>
        <div class="dynamic-table-container" id="<?php echo esc_attr($atts['id']); ?>-container">
            <h2 class="dynamic-table-title"><?php echo esc_html($atts['title']); ?></h2>
            
            <!-- Debugging Info for Admins -->
            <?php if (current_user_can('administrator')) : ?>
            <div class="debug-info" style="background: #f5f5f5; padding: 10px; margin-bottom: 15px; font-size: 12px; border: 1px solid #ddd;">
                <h4 style="margin-top: 0;">Debug Info (for Admin only):</h4>
                <div>Table ID: <?php echo esc_html($atts['id']); ?></div>
                <div>Columns count: <?php echo count($table_data['columns']); ?></div>
                <div>Rows count: <?php echo count($table_data['rows']); ?></div>
                <button id="toggle-raw-data" class="button">Show/Hide Raw Data</button>
                <pre id="raw-data" style="display: none; max-height: 200px; overflow: auto; margin-top: 10px; background: #fff; padding: 5px;"><?php echo esc_html(print_r($table_data, true)); ?></pre>
            </div>
            <?php endif; ?>
            
            <!-- Table Controls - Only visible to Admins and Editors -->
            <div class="dynamic-table-controls">
                <div class="control-group">
                    <button class="add-column-btn">เพิ่มคอลัมน์</button>
                    <button class="add-row-btn">เพิ่มแถว</button>
                </div>
                <div class="control-group">
                    <button class="save-table-btn">บันทึกตาราง</button>
                </div>
            </div>
            
            <!-- Table Structure -->
            <div class="dynamic-table-wrapper">
                <table class="dynamic-table" id="<?php echo esc_attr($atts['id']); ?>">
                    <thead>
                        <tr>
                            <?php foreach ($table_data['columns'] as $index => $column) : ?>
                            <th>
                                <div class="column-content">
                                    <input type="text" class="column-input" value="<?php echo esc_attr($column); ?>" placeholder="ชื่อคอลัมน์">
                                    <?php if (count($table_data['columns']) > 1) : ?>
                                    <span class="remove-column" data-index="<?php echo esc_attr($index); ?>">×</span>
                                    <?php endif; ?>
                                </div>
                            </th>
                            <?php endforeach; ?>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($table_data['rows'] as $row_index => $row) : ?>
                        <tr>
                            <?php 
                            // Ensure cells and links are arrays
                            $cells = isset($row['cells']) && is_array($row['cells']) ? $row['cells'] : array();
                            $links = isset($row['links']) && is_array($row['links']) ? $row['links'] : array();
                            
                            // Ensure we have a cell for each column
                            while (count($cells) < count($table_data['columns'])) {
                                $cells[] = '';
                            }
                            
                            // Ensure we have a link for each cell
                            while (count($links) < count($cells)) {
                                $links[] = '';
                            }
                            
                            // Output cells
                            foreach ($cells as $cell_index => $cell) : 
                            ?>
                            <td>
                                <div class="cell-content">
                                    <input type="text" class="cell-input" value="<?php echo esc_attr($cell); ?>" placeholder="เนื้อหา">
                                    <input type="text" class="cell-link" value="<?php echo esc_attr($links[$cell_index] ?? ''); ?>" placeholder="URL ลิงก์ (ถ้ามี)">
                                </div>
                            </td>
                            <?php endforeach; ?>
                            <td class="row-actions">
                                <span class="remove-row" data-index="<?php echo esc_attr($row_index); ?>">×</span>
                            </td>
                        </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
            </div>
            
            <!-- Status Messages -->
            <div class="dynamic-table-status"></div>
        </div>
        <?php
    } else {
        // For regular users, only show the read-only table view
        echo '<div class="dynamic-table-container view-only">';
        echo '<h2 class="dynamic-table-title">' . esc_html($atts['title']) . '</h2>';
        echo dynamic_table_display($atts['id']);
        echo '</div>';
    }
    
    // Return output buffer
    return ob_get_clean();
}
add_shortcode('dynamic_table', 'dynamic_table_shortcode');

// AJAX handler for saving table data
function dynamic_table_save_data() {
    // Check nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dynamic_table_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed.'));
    }
    
    // Check user permissions
    if (!current_user_can('edit_posts')) {
        wp_send_json_error(array('message' => 'You do not have permission to edit tables.'));
    }
    
    // Get table data
    $table_id = sanitize_text_field($_POST['table_id']);
    
    // Get and validate columns
    if (!isset($_POST['columns']) || !is_array($_POST['columns'])) {
        wp_send_json_error(array('message' => 'Invalid column data.'));
    }
    $columns = array_map('sanitize_text_field', $_POST['columns']);
    
    // Get and validate cells and links
    if (!isset($_POST['cells']) || !is_array($_POST['cells'])) {
        wp_send_json_error(array('message' => 'Invalid cell data.'));
    }
    
    if (!isset($_POST['links']) || !is_array($_POST['links'])) {
        wp_send_json_error(array('message' => 'Invalid link data.'));
    }
    
    // Prepare rows data with proper validation
    $rows = array();
    foreach ($_POST['cells'] as $row_index => $row_cells) {
        if (!is_array($row_cells)) {
            continue; // Skip invalid rows
        }
        
        $row_links = isset($_POST['links'][$row_index]) && is_array($_POST['links'][$row_index]) 
            ? $_POST['links'][$row_index] 
            : array();
        
        // Ensure we have a link for each cell
        while (count($row_links) < count($row_cells)) {
            $row_links[] = '';
        }
        
        // Sanitize all values
        $sanitized_cells = array_map('sanitize_text_field', $row_cells);
        $sanitized_links = array_map('esc_url_raw', $row_links);
        
        $rows[] = array(
            'cells' => $sanitized_cells,
            'links' => $sanitized_links
        );
    }
    
    // Save data
    $table_data = array(
        'columns' => $columns,
        'rows' => $rows
    );
    
    // Ensure options are serialized properly
    $serialized_data = maybe_serialize($table_data);
    $result = update_option('dynamic_table_' . $table_id, $table_data, false);
    
    if ($result) {
        // Successfully updated
        wp_send_json_success(array(
            'message' => 'ตารางถูกบันทึกเรียบร้อยแล้ว',
            'columns_count' => count($columns),
            'rows_count' => count($rows)
        ));
    } else {
        // Check if it's because no changes were made
        $existing_data = get_option('dynamic_table_' . $table_id);
        if ($existing_data && $existing_data == $table_data) {
            wp_send_json_success(array(
                'message' => 'ไม่มีการเปลี่ยนแปลงข้อมูล',
                'columns_count' => count($columns),
                'rows_count' => count($rows)
            ));
        } else {
            // Something went wrong
            wp_send_json_error(array(
                'message' => 'เกิดข้อผิดพลาดในการบันทึกข้อมูล',
                'existing_data' => is_array($existing_data) ? 'Array' : gettype($existing_data),
                'columns_count' => count($columns),
                'rows_count' => count($rows)
            ));
        }
    }
}
add_action('wp_ajax_dynamic_table_save_data', 'dynamic_table_save_data');

// Function to display the saved table (for viewing mode)
function dynamic_table_display($table_id) {
    // Get table data
    $table_data = get_option('dynamic_table_' . $table_id);
    
    // Default data
    $default_data = array(
        'columns' => array('Column 1', 'Column 2', 'Column 3'),
        'rows' => array(
            array(
                'cells' => array('Row 1, Cell 1', 'Row 1, Cell 2', 'Row 1, Cell 3'),
                'links' => array('', '', '')
            )
        )
    );
    
    // Validate data structure
    if (!is_array($table_data) || 
        !isset($table_data['columns']) || 
        !isset($table_data['rows']) || 
        !is_array($table_data['columns']) || 
        !is_array($table_data['rows']) ||
        empty($table_data['columns']) ||
        empty($table_data['rows'])) {
        
        $table_data = $default_data;
    }
    
    ob_start();
    ?>
    <div class="dynamic-table-display">
        <table class="dynamic-table-view">
            <thead>
                <tr>
                    <?php foreach ($table_data['columns'] as $column) : ?>
                    <th><?php echo esc_html($column); ?></th>
                    <?php endforeach; ?>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($table_data['rows'] as $row) : ?>
                <tr>
                    <?php 
                    // Ensure cells and links are arrays
                    $cells = isset($row['cells']) && is_array($row['cells']) ? $row['cells'] : array();
                    $links = isset($row['links']) && is_array($row['links']) ? $row['links'] : array();
                    
                    // Ensure we have a cell for each column
                    while (count($cells) < count($table_data['columns'])) {
                        $cells[] = '';
                    }
                    
                    // Ensure we have a link for each cell
                    while (count($links) < count($cells)) {
                        $links[] = '';
                    }
                    
                    // Output cells
                    foreach ($cells as $i => $cell) : 
                    ?>
                    <td>
                        <?php if (!empty($links[$i])) : ?>
                        <a href="<?php echo esc_url($links[$i]); ?>"><?php echo esc_html($cell); ?></a>
                        <?php else : ?>
                        <?php echo esc_html($cell); ?>
                        <?php endif; ?>
                    </td>
                    <?php endforeach; ?>
                </tr>
                <?php endforeach; ?>
            </tbody>
        </table>
    </div>
    <?php
    
    return ob_get_clean();
}


/*** ฟังก์ชั่นแสดงตารางโพสทั้งหมดของ Wordpress user logged นั้นๆ ******/

/**
 * Shortcode: [user_posts]
 * Description: แสดงโพสทั้งหมดในระบบที่ผู้ใช้ที่ล็อกอินเป็นผู้สร้าง พร้อมระบบ AJAX
 * 
 * 1. ชื่อ PostType
 * 2. ชื่อ PostTitle 
 * 3. วันที่สร้าง Post
 * 4. ปุ่มดูข้อมูล และเปลี่ยนสถานะเป็น Pending หรือ Public (AJAX)
 * 5. ปุ่มลบโพส พร้อม Modal ยืนยัน
 * 6. ธีมสีน้ำเงิน, สีส้ม, ตัวอักษรสีดำ
 * 7. มีฟังก์ชั่น Filter
 * 8. กำหนดจำนวนแสดงต่อหน้าได้และมี Pagination สมบูรณ์
 */

// สร้าง Shortcode
function user_posts_display_shortcode() {
    // ตรวจสอบว่าผู้ใช้ล็อกอินหรือไม่
    if (!is_user_logged_in()) {
        return '<p class="user-posts-not-logged-in">กรุณาล็อกอินเพื่อดูโพสของคุณ</p>';
    }
    
    // เรียกใช้ไฟล์ JavaScript และ CSS
    wp_enqueue_script('user-posts-js');
    wp_enqueue_style('user-posts-css');
    
    // สร้าง ID ที่ไม่ซ้ำกัน
    $container_id = 'user-posts-container-' . uniqid();
    
    // เริ่ม Output Buffer
    ob_start();
    ?>
    <div id="<?php echo esc_attr($container_id); ?>" class="user-posts-container">
        <div class="user-posts-header">
            <h2>โพสทั้งหมดของคุณ</h2>
            <div class="user-posts-filters">
                <div class="filter-group">
                    <input type="text" id="user-posts-search" placeholder="ค้นหา..." class="user-posts-search-input">
                    <select id="user-posts-type-filter" class="user-posts-select">
                        <option value="">ทุกประเภทโพส</option>
                        <?php
                        // ดึงข้อมูลประเภทโพสทั้งหมด
                        $post_types = get_post_types(array('public' => true), 'objects');
                        foreach ($post_types as $post_type) {
                            echo '<option value="' . esc_attr($post_type->name) . '">' . esc_html($post_type->label) . '</option>';
                        }
                        ?>
                    </select>
                    <select id="user-posts-status-filter" class="user-posts-select">
                        <option value="">ทุกสถานะ</option>
                        <option value="publish">เผยแพร่แล้ว</option>
                        <option value="pending">รออนุมัติ</option>
                        <option value="draft">ฉบับร่าง</option>
                    </select>
                </div>
                
                <div class="per-page-group">
                    <label for="user-posts-per-page">โพสต่อหน้า:</label>
                    <select id="user-posts-per-page" class="user-posts-select">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="30">30</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                </div>
            </div>
        </div>
        
        <div class="user-posts-table-container">
            <table class="user-posts-table">
                <thead>
                    <tr>
                        <th>ประเภทโพส</th>
                        <th>ชื่อเรื่อง</th>
                        <th>วันที่สร้าง</th>
                        <th>สถานะ</th>
                        <th>จัดการ</th>
                    </tr>
                </thead>
                <tbody id="user-posts-list">
                    <!-- ข้อมูลจะถูกโหลดผ่าน AJAX -->
                    <tr>
                        <td colspan="5" class="loading-row"><div class="loading-spinner"></div></td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <div class="user-posts-pagination">
            <!-- Pagination จะถูกโหลดผ่าน AJAX -->
        </div>
    </div>
    
    <script type="text/javascript">
        jQuery(document).ready(function($) {
            // เรียกใช้ฟังก์ชัน init จาก user-posts.js
            if (typeof UserPostsModule !== 'undefined') {
                UserPostsModule.init('<?php echo esc_js($container_id); ?>');
            }
        });
    </script>
    <?php
    return ob_get_clean();
}
add_shortcode('user_posts', 'user_posts_display_shortcode');

// ลงทะเบียน JavaScript และ CSS
function user_posts_register_assets() {
    // ขอที่อยู่ของ Child Theme
    $child_theme_uri = get_stylesheet_directory_uri();
    
    // ลงทะเบียน JavaScript
    wp_register_script(
        'user-posts-js',
        $child_theme_uri . '/js/user-posts.js',
        array('jquery'),
        '1.0.1',
        true
    );
    
    // กำหนดค่าตัวแปรที่จะส่งไปยัง JavaScript
    wp_localize_script(
        'user-posts-js',
        'userPostsData',
        array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('user_posts_nonce'),
            'strings' => array(
                'error' => 'เกิดข้อผิดพลาด กรุณาลองใหม่อีกครั้ง',
                'confirm_status_change' => 'คุณต้องการเปลี่ยนสถานะของโพสนี้ใช่หรือไม่?',
                'no_posts_found' => 'ไม่พบโพสที่คุณสร้าง',
                'loading' => 'กำลังโหลด...',
                'confirm_delete' => 'คุณจะไม่สามารถกู้คืนโพสนี้ได้อีก คุณต้องการลบหรือไม่?',
            )
        )
    );
    
    // ลงทะเบียน CSS
    wp_register_style(
        'user-posts-css',
        $child_theme_uri . '/css/user-posts.css',
        array(),
        '1.0.1'
    );
}
add_action('wp_enqueue_scripts', 'user_posts_register_assets');

// AJAX สำหรับโหลดโพส
function user_posts_load_ajax() {
    // ตรวจสอบ Security nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'user_posts_nonce')) {
        wp_send_json_error(array('message' => 'การตรวจสอบความปลอดภัยล้มเหลว'));
    }
    
    // ดึง ID ของผู้ใช้ที่ล็อกอิน
    $user_id = get_current_user_id();
    if (!$user_id) {
        wp_send_json_error(array('message' => 'ไม่พบข้อมูลผู้ใช้'));
    }
    
    // ดึงพารามิเตอร์
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 10;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $post_type = isset($_POST['post_type']) ? sanitize_text_field($_POST['post_type']) : '';
    $post_status = isset($_POST['post_status']) ? sanitize_text_field($_POST['post_status']) : '';
    
    // กำหนดพารามิเตอร์การค้นหา
    $args = array(
        'author' => $user_id,
        'posts_per_page' => $per_page,
        'paged' => $page,
        'post_status' => $post_status ? $post_status : array('publish', 'pending', 'draft'),
        'orderby' => 'date',
        'order' => 'DESC',
    );
    
    // เพิ่มประเภทโพสถ้ามีการระบุ
    if (!empty($post_type)) {
        $args['post_type'] = $post_type;
    } else {
        $args['post_type'] = 'any';
    }
    
    // เพิ่มคำค้นหาถ้ามีการระบุ
    if (!empty($search)) {
        $args['s'] = $search;
    }
    
    // ดึงข้อมูลโพส
    $query = new WP_Query($args);
    
    // เตรียมข้อมูลโพส
    $posts_data = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            $post_type_obj = get_post_type_object(get_post_type());
            
            $posts_data[] = array(
                'id' => $post_id,
                'type' => $post_type_obj ? $post_type_obj->labels->singular_name : get_post_type(),
                'title' => get_the_title(),
                'date' => get_the_date(),
                'status' => get_post_status(),
                'edit_link' => get_edit_post_link($post_id),
                'view_link' => get_permalink($post_id),
            );
        }
    }
    
    // คืนค่า Post Data
    wp_reset_postdata();
    
    // คำนวณข้อมูลสำหรับ Pagination
    $total_posts = $query->found_posts;
    $total_pages = ceil($total_posts / $per_page);
    
    // ส่งข้อมูลกลับ - ไม่สร้าง HTML ใน PHP แล้ว แต่ให้ JS สร้างแทน
    wp_send_json_success(array(
        'posts' => $posts_data,
        'total_posts' => $total_posts,
        'total_pages' => $total_pages,
        'current_page' => $page,
        'per_page' => $per_page
    ));
}
add_action('wp_ajax_user_posts_load', 'user_posts_load_ajax');

// AJAX สำหรับอัพเดทสถานะโพส
function user_posts_update_status_ajax() {
    // ตรวจสอบ Security nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'user_posts_nonce')) {
        wp_send_json_error(array('message' => 'การตรวจสอบความปลอดภัยล้มเหลว'));
    }
    
    // ดึงพารามิเตอร์
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $new_status = isset($_POST['status']) ? sanitize_text_field($_POST['status']) : '';
    
    // ตรวจสอบความถูกต้องของพารามิเตอร์
    if (!$post_id || !in_array($new_status, array('publish', 'pending'))) {
        wp_send_json_error(array('message' => 'พารามิเตอร์ไม่ถูกต้อง'));
    }
    
    // ตรวจสอบว่าผู้ใช้เป็นเจ้าของโพสหรือไม่
    $post = get_post($post_id);
    if (!$post || $post->post_author != get_current_user_id()) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์แก้ไขโพสนี้'));
    }
    
    // อัพเดทสถานะโพส
    $updated = wp_update_post(array(
        'ID' => $post_id,
        'post_status' => $new_status
    ));
    
    if ($updated) {
        wp_send_json_success(array(
            'message' => 'อัพเดทสถานะโพสเป็น ' . ($new_status == 'publish' ? 'เผยแพร่แล้ว' : 'รออนุมัติ'),
            'new_status' => $new_status
        ));
    } else {
        wp_send_json_error(array('message' => 'ไม่สามารถอัพเดทสถานะโพสได้'));
    }
}
add_action('wp_ajax_user_posts_update_status', 'user_posts_update_status_ajax');

// AJAX สำหรับลบโพส
function user_posts_delete_ajax() {
    // ตรวจสอบ Security nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'user_posts_nonce')) {
        wp_send_json_error(array('message' => 'การตรวจสอบความปลอดภัยล้มเหลว'));
    }
    
    // ดึงพารามิเตอร์
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    
    // ตรวจสอบว่าโพสมีอยู่จริงหรือไม่
    $post = get_post($post_id);
    if (!$post) {
        wp_send_json_error(array('message' => 'ไม่พบโพสที่ต้องการลบ'));
    }
    
    // ตรวจสอบว่าผู้ใช้เป็นเจ้าของโพสหรือไม่
    if ($post->post_author != get_current_user_id()) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์ลบโพสนี้'));
    }
    
    // เก็บข้อมูลโพสก่อนลบเพื่อใช้ในข้อความตอบกลับ
    $post_title = $post->post_title;
    
    // ลบโพส
    $deleted = wp_delete_post($post_id, true); // true = ลบถาวร, ไม่ย้ายไปถังขยะ
    
    if ($deleted) {
        wp_send_json_success(array(
            'message' => 'ลบโพส "' . esc_html($post_title) . '" เรียบร้อยแล้ว',
        ));
    } else {
        wp_send_json_error(array('message' => 'ไม่สามารถลบโพสได้ กรุณาลองใหม่อีกครั้ง'));
    }
}
add_action('wp_ajax_user_posts_delete', 'user_posts_delete_ajax');



/**** Dynamic POST CardItem & ListItem ******/

// ป้องกันการเข้าถึงไฟล์โดยตรง
if (!defined('ABSPATH')) {
    exit;
}

// ลงทะเบียน scripts และ styles
function dynamic_post_cards_enqueue_scripts() {
    $theme_directory = get_stylesheet_directory_uri();
    
    // CSS - อัพเดตเวอร์ชันเป็น 1.0.9
    wp_enqueue_style('dynamic-post-cards-css', $theme_directory . '/css/dynamic-post-cards.css', array(), '1.0.9');
    
    // JavaScript - อัพเดตเวอร์ชันเป็น 1.0.9
    wp_enqueue_script('dynamic-post-cards-js', $theme_directory . '/js/dynamic-post-cards.js', array('jquery'), '1.0.9', true);
    
    // ส่งข้อมูลไปยัง JavaScript
    wp_localize_script('dynamic-post-cards-js', 'dynamic_post_cards_params', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('dynamic_post_cards_nonce')
    ));
}
add_action('wp_enqueue_scripts', 'dynamic_post_cards_enqueue_scripts');

// ฟังก์ชัน shortcode หลัก
function dynamic_post_cards_shortcode($atts) {
    // กำหนดค่าเริ่มต้นของ attributes
    $atts = shortcode_atts(array(
        'post_type' => 'post',
        'posts_per_page' => 6,
        'category' => '',
        'orderby' => 'date',
        'order' => 'DESC',
        'view' => 'card', // card หรือ list
        'show_add_button' => 'false' // เพิ่มพารามิเตอร์ show_add_button
    ), $atts);
    
    // แปลงค่าเป็น boolean
    $show_add_button = filter_var($atts['show_add_button'], FILTER_VALIDATE_BOOLEAN);
    
    // สร้าง unique ID สำหรับ container
    $container_id = 'dynamic-post-cards-' . uniqid();
    
    // สร้างรายการปี (ปีปัจจุบัน - 50 ปี) ในรูปแบบ พ.ศ.
    $current_year = (int)date('Y') + 543; // แปลงเป็น พ.ศ.
    $years = array();
    for ($i = 0; $i <= 50; $i++) {
        $years[] = $current_year - $i;
    }
    
    // เริ่มสร้าง output
    $output = '<div id="' . esc_attr($container_id) . '" class="dynamic-post-cards-container" data-post-type="' . esc_attr($atts['post_type']) . '" data-posts-per-page="' . esc_attr($atts['posts_per_page']) . '" data-category="' . esc_attr($atts['category']) . '" data-orderby="' . esc_attr($atts['orderby']) . '" data-order="' . esc_attr($atts['order']) . '" data-view="' . esc_attr($atts['view']) . '">';
    
    // ส่วนควบคุม (controls)
    $output .= '<div class="dynamic-post-cards-controls">';
    
    // ตัวเลือกมุมมอง (view mode)
    $output .= '<div class="view-mode-controls">';
    $output .= '<button type="button" class="view-mode-btn card-view-btn ' . ($atts['view'] == 'card' ? 'active' : '') . '" aria-label="แสดงแบบการ์ด"><span class="dashicons dashicons-grid-view"></span> การ์ด</button>';
    $output .= '<button type="button" class="view-mode-btn list-view-btn ' . ($atts['view'] == 'list' ? 'active' : '') . '" aria-label="แสดงแบบรายการ"><span class="dashicons dashicons-list-view"></span> รายการ</button>';
    $output .= '</div>';
    
    // เพิ่มช่องค้นหาแบบธรรมดา
    $output .= '<div class="search-control">';
    $output .= '<input type="text" class="search-input" placeholder="ค้นหาเอกสาร..." aria-label="ค้นหาโพสต์">';
    $output .= '</div>';
    
    // ตัวเลือกการกรองและเรียงลำดับ
    $output .= '<div class="filter-controls">';
    
    // ตัวกรองตามปี
    $output .= '<div class="year-filter">';
    $output .= '<label for="' . esc_attr($container_id) . '-year-filter">ปีที่เผยแพร่:</label>';
    $output .= '<select id="' . esc_attr($container_id) . '-year-filter" class="year-filter-select">';
    $output .= '<option value="">ทั้งหมด</option>';
    foreach ($years as $year) {
        $output .= '<option value="' . esc_attr($year) . '">' . esc_html($year) . '</option>';
    }
    $output .= '</select>';
    $output .= '</div>';
    
    // ตัวเลือกการเรียงลำดับ (sorting)
    $output .= '<div class="sorting-controls">';
    $output .= '<label for="' . esc_attr($container_id) . '-sorting">เรียงตาม:</label>';
    $output .= '<select id="' . esc_attr($container_id) . '-sorting" class="sorting-select">';
    $output .= '<option value="date-desc">ล่าสุด</option>';
    $output .= '<option value="date-asc">เก่าสุด</option>';
    $output .= '<option value="title-asc">ชื่อเรื่อง (ก-ฮ)</option>';
    $output .= '<option value="title-desc">ชื่อเรื่อง (ฮ-ก)</option>';
    $output .= '</select>';
    $output .= '</div>';
    
    $output .= '</div>'; // ปิด filter-controls
    
    // เพิ่มปุ่ม "เพิ่ม" ถ้า show_add_button เป็น true
    if ($show_add_button) {
        // ใช้ URL สำหรับเพิ่มโพสต์ใหม่ตาม post_type
        $add_new_url = admin_url('post-new.php?post_type=' . $atts['post_type']);
        $output .= '<div class="add-button-wrapper">';
        $output .= '<a href="' . esc_url($add_new_url) . '" class="add-new-post-btn" target="_blank"><span class="dashicons dashicons-plus"></span> เพิ่มรายการใหม่</a>';
        $output .= '</div>';
    }
    
    $output .= '</div>'; // ปิด controls
    
    // ส่วนแสดงผลโพสต์ (content container)
    $output .= '<div class="dynamic-post-cards-content ' . esc_attr($atts['view']) . '-view">';
    // ส่วนนี้จะถูกเติมด้วย AJAX
    $output .= '<div class="dynamic-post-cards-loading">';
    // Skeleton loaders (จะแสดงระหว่างโหลดข้อมูล)
    for ($i = 0; $i < min(3, $atts['posts_per_page']); $i++) {
        if ($atts['view'] == 'card') {
            $output .= '<div class="card-item skeleton">';
            $output .= '<div class="card-image skeleton-image"></div>';
            $output .= '<div class="card-meta"><div class="skeleton-text skeleton-short"></div></div>';
            $output .= '<div class="card-title"><div class="skeleton-text"></div></div>';
            $output .= '<div class="card-excerpt"><div class="skeleton-text"></div><div class="skeleton-text"></div></div>';
            $output .= '<div class="card-footer"><div class="skeleton-button"></div></div>';
            $output .= '</div>';
        } else {
            $output .= '<div class="list-item skeleton">';
            $output .= '<div class="list-image skeleton-image"></div>';
            $output .= '<div class="list-content">';
            $output .= '<div class="list-title"><div class="skeleton-text"></div></div>';
            $output .= '<div class="list-meta"><div class="skeleton-text skeleton-short"></div></div>';
            $output .= '<div class="list-excerpt"><div class="skeleton-text"></div><div class="skeleton-text"></div></div>';
            $output .= '<div class="list-footer"><div class="skeleton-button"></div></div>';
            $output .= '</div>';
            $output .= '</div>';
        }
    }
    $output .= '</div>'; // ปิด loading
    $output .= '</div>'; // ปิด content container
    
    // ข้อความไม่พบข้อมูล
    $output .= '<div class="no-results-message" style="display:none;">ไม่พบผลลัพธ์ที่ตรงกับการค้นหาของคุณ</div>';
    
    // ปุ่มโหลดเพิ่มเติม (load more)
    $output .= '<div class="dynamic-post-cards-footer">';
    $output .= '<button type="button" class="load-more-btn" style="display:none;">โหลดเพิ่มเติม</button>';
    $output .= '</div>';
    
    $output .= '</div>'; // ปิด main container
    
    return $output;
}
add_shortcode('dynamic_post_cards', 'dynamic_post_cards_shortcode');

// AJAX handler สำหรับโหลดโพสต์
function dynamic_post_cards_load_posts() {
    // ตรวจสอบ nonce
    check_ajax_referer('dynamic_post_cards_nonce', 'nonce');
    
    // รับพารามิเตอร์
    $post_type = sanitize_text_field($_POST['post_type']);
    $posts_per_page = intval($_POST['posts_per_page']);
    $paged = intval($_POST['paged']);
    $category = sanitize_text_field($_POST['category']);
    $orderby = sanitize_text_field($_POST['orderby']);
    $order = sanitize_text_field($_POST['order']);
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $year = isset($_POST['year']) ? intval($_POST['year']) : '';
    
    // สร้างอาร์กิวเมนต์สำหรับ WP_Query
    $args = array(
        'post_type' => $post_type,
        'posts_per_page' => $posts_per_page,
        'paged' => $paged,
        'orderby' => $orderby,
        'order' => $order,
        'post_status' => 'publish'
    );
    
    // กรองตามปี
    if (!empty($year)) {
        $year_be = intval($year) - 543; // แปลงจาก พ.ศ. เป็น ค.ศ.
        $args['date_query'] = array(
            array(
                'year' => $year_be
            )
        );
    }
    
    // เพิ่มการค้นหาใน title และ content
    if (!empty($search)) {
        $args['s'] = $search;
        
        // เพิ่มการค้นหาใน meta fields ด้วย
        $args['meta_query'] = array(
            'relation' => 'OR',
            array(
                'key' => 'at_docnum_1',
                'value' => $search,
                'compare' => 'LIKE'
            ),
            array(
                'key' => 'at_docnum_2',
                'value' => $search,
                'compare' => 'LIKE'
            )
        );
    }
    
    // เพิ่มหมวดหมู่ (category) ถ้ามีการระบุ
    if (!empty($category)) {
        if ($post_type == 'post') {
            // ถ้าเป็น post มาตรฐาน ใช้ category_name
            $args['category_name'] = $category;
        } else {
            // ดึง taxonomies ทั้งหมดที่เกี่ยวข้องกับ post type นี้
            $taxonomies = get_object_taxonomies($post_type);
            
            // เลือก taxonomy ที่จะใช้ตามลำดับความสำคัญ
            $taxonomy_to_use = null;
            
            // 1. ตรวจสอบ {post_type}_category (เช่น news_category)
            $custom_taxonomy = $post_type . '_category';
            if (in_array($custom_taxonomy, $taxonomies)) {
                $taxonomy_to_use = $custom_taxonomy;
            } 
            // 2. ตรวจสอบ {post_type}-category (เช่น news-category)
            elseif (in_array($post_type . '-category', $taxonomies)) {
                $taxonomy_to_use = $post_type . '-category';
            }
            // 3. ตรวจสอบ category ว่ามีใช้กับ post type นี้หรือไม่
            elseif (in_array('category', $taxonomies)) {
                $taxonomy_to_use = 'category';
            }
            // 4. ถ้าไม่มีการตรวจสอบข้างต้น ใช้ taxonomy แรกที่พบ
            elseif (!empty($taxonomies)) {
                $taxonomy_to_use = $taxonomies[0];
            }
            
            // สร้าง tax_query ถ้าพบ taxonomy ที่เหมาะสม
            if ($taxonomy_to_use) {
                $args['tax_query'] = array(
                    array(
                        'taxonomy' => $taxonomy_to_use,
                        'field' => 'slug',
                        'terms' => $category
                    )
                );
            }
        }
    }
    
    // ดึงข้อมูลโพสต์
    $query = new WP_Query($args);
    $posts = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            
            // รูปภาพ featured
            $featured_image = get_the_post_thumbnail_url(get_the_ID(), 'large');
            if (!$featured_image) {
                $featured_image = plugin_dir_url(__FILE__) . 'assets/placeholder.jpg';
            } else {
                // ถ้ามีรูปภาพ ให้ตรวจสอบว่ามีขนาด original หรือไม่
                $original_image = get_the_post_thumbnail_url(get_the_ID(), 'full');
                if ($original_image) {
                    $featured_image = $original_image; // ใช้ขนาดใหญ่สุดเพื่อความคมชัด
                }
            }
            
            // ดึงข้อมูลวันที่โพสต์ในรูปแบบไทย
            $thai_month_names = array(
                '01' => 'ม.ค.', '02' => 'ก.พ.', '03' => 'มี.ค.', '04' => 'เม.ย.',
                '05' => 'พ.ค.', '06' => 'มิ.ย.', '07' => 'ก.ค.', '08' => 'ส.ค.',
                '09' => 'ก.ย.', '10' => 'ต.ค.', '11' => 'พ.ย.', '12' => 'ธ.ค.'
            );
            
            $post_date = get_the_date('d/m/Y');
            $date_parts = explode('/', $post_date);
            if (count($date_parts) == 3) {
                $day = $date_parts[0];
                $month = $thai_month_names[$date_parts[1]] ?? $date_parts[1];
                $year = intval($date_parts[2]) + 543; // แปลงเป็น พ.ศ.
                $thai_date = "$day $month $year";
            } else {
                $thai_date = $post_date;
            }
            
            // ใช้ visitor_counter shortcode ถ้ามี
            $visitor_count = '';
            if (shortcode_exists('visitor_counter')) {
                $visitor_count = do_shortcode('[visitor_counter]');
            }
            
            // ดึงข้อมูล Custom Fields สำหรับเลขที่เอกสาร
            $at_docnum_1 = get_post_meta(get_the_ID(), 'at_docnum_1', true);
            $at_docnum_2 = get_post_meta(get_the_ID(), 'at_docnum_2', true);
            
            // เตรียมข้อมูลโพสต์
            $posts[] = array(
                'id' => get_the_ID(),
                'title' => get_the_title(),
                'permalink' => get_permalink(),
                'featured_image' => $featured_image,
                'date' => $thai_date,
                'visitor_count' => $visitor_count,
                'excerpt' => wp_trim_words(get_the_content(), 90, '...'),
                'at_docnum_1' => $at_docnum_1,
                'at_docnum_2' => $at_docnum_2
            );
        }
        
        wp_reset_postdata();
    }
    
    // ส่งข้อมูลกลับ
    $response = array(
        'success' => true,
        'posts' => $posts,
        'max_pages' => $query->max_num_pages
    );

    // เพิ่ม debug info ถ้าอยู่ใน development mode
    if (defined('WP_DEBUG') && WP_DEBUG) {
        $response['debug'] = array(
            'query_vars' => $query->query_vars,
            'request' => $query->request,
            'search_term' => $search
        );
    }

    wp_send_json($response);
}
add_action('wp_ajax_dynamic_post_cards_load_posts', 'dynamic_post_cards_load_posts');
add_action('wp_ajax_nopriv_dynamic_post_cards_load_posts', 'dynamic_post_cards_load_posts');












/******* CSV และ EXCEL import *******/

// ป้องกันการเข้าถึงโดยตรง
if (!defined('ABSPATH')) {
    exit;
}

class CSV_Excel_Post_Importer {
    
    private $simplexlsx_path;
    
    public function __construct() {
        // กำหนดตำแหน่งของไฟล์ SimpleXLSX.php
        $this->simplexlsx_path = get_stylesheet_directory() . '/src/SimpleXLSX.php';
        
        // ตรวจสอบไฟล์ SimpleXLSX
        $this->check_simplexlsx_exists();
        
        // ลงทะเบียน shortcode
        add_shortcode('csv_excel_importer', array($this, 'render_importer_shortcode'));
        
        // ลงทะเบียน AJAX actions
        add_action('wp_ajax_process_import_file', array($this, 'process_import_file'));
        add_action('wp_ajax_get_imported_posts', array($this, 'get_imported_posts'));
        add_action('wp_ajax_download_template', array($this, 'download_template'));
        
        // เพิ่ม scripts และ styles
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
    }
    
    /**
     * ตรวจสอบไฟล์ SimpleXLSX และแสดงข้อความแจ้งเตือนใน Admin
     */
    public function check_simplexlsx_exists() {
        // ตรวจสอบว่าไฟล์ SimpleXLSX มีอยู่หรือไม่
        if (!file_exists($this->simplexlsx_path)) {
            add_action('admin_notices', function() {
                ?>
                <div class="notice notice-warning is-dismissible">
                    <p>
                        <strong>CSV/Excel Post Importer:</strong> 
                        ไม่พบไฟล์ SimpleXLSX.php ที่จำเป็นสำหรับการนำเข้าไฟล์ Excel 
                        กรุณา<a href="https://github.com/shuchkin/simplexlsx/blob/master/src/SimpleXLSX.php" target="_blank">ดาวน์โหลดที่นี่</a> 
                        และวางไฟล์ไว้ที่ <code><?php echo get_stylesheet_directory(); ?>/src/SimpleXLSX.php</code>
                    </p>
                </div>
                <?php
            });
        }
    }
    
    /**
     * เพิ่ม scripts และ styles ที่จำเป็นสำหรับฟังก์ชัน
     */
    public function enqueue_scripts() {
        global $post;
        if (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'csv_excel_importer')) {
            // เพิ่ม jQuery UI
            wp_enqueue_script('jquery-ui-core');
            wp_enqueue_script('jquery-ui-progressbar');
            
            // เพิ่ม scripts และ styles จาก child theme
            wp_enqueue_script('csv-excel-importer-js', get_stylesheet_directory_uri() . '/js/csv-excel-importer.js', array('jquery'), '1.0', true);
            wp_enqueue_style('csv-excel-importer-css', get_stylesheet_directory_uri() . '/css/csv-excel-importer.css', array(), '1.0');
            
            // ส่งค่า AJAX URL ไปยัง JavaScript
            wp_localize_script('csv-excel-importer-js', 'csvImporterVars', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'nonce' => wp_create_nonce('csv_importer_nonce'),
                'post_types' => $this->get_post_type_labels()
            ));
        }
    }
    
    /**
     * รับค่า labels ของ post types
     */
    private function get_post_type_labels() {
        return array(
            'egp' => 'จัดซื้อจัดจ้าง',
            'news' => 'ข้อมูลทั่วไป',
            'mpeople' => 'คู่มือประชาชน',
            'article' => 'บทความ',
            'pha' => 'ประชาพิจารณ์และกิจกรรม',
            'dgallery' => 'ประมวลภาพกิจกรรม'
        );
    }
    
    /**
     * แสดงผล shortcode
     */
    public function render_importer_shortcode($atts) {
        $post_types = $this->get_post_type_labels();
        
        ob_start();
        ?>
        <div id="csv-excel-importer" class="csv-excel-importer-container">
            <h2>นำเข้าข้อมูลจากไฟล์ CSV/Excel</h2>
            
            <div class="importer-form-section">
                <h3>เลือกประเภทโพส</h3>
                <div class="post-type-selection">
                    <?php foreach ($post_types as $type => $label) : ?>
                    <div class="checkbox-container">
                        <input type="checkbox" name="post_types[]" id="post-type-<?php echo esc_attr($type); ?>" value="<?php echo esc_attr($type); ?>">
                        <label for="post-type-<?php echo esc_attr($type); ?>"><?php echo esc_html($label); ?></label>
                    </div>
                    <?php endforeach; ?>
                </div>
                
                <div class="file-upload-section">
                    <h3>อัปโหลดไฟล์ CSV หรือ Excel</h3>
                    <div class="file-upload-container">
                        <input type="file" name="import_file" id="import-file" accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel">
                        <div class="file-upload-info">รองรับไฟล์ CSV และ Excel (.xlsx, .xls)</div>
                    </div>
                    
                    <div class="template-download">
                        <button id="download-csv-template" class="template-button">
                            <i class="file-icon csv-icon"></i>
                            ดาวน์โหลดแม่แบบ CSV
                        </button>
                        <button id="download-excel-template" class="template-button">
                            <i class="file-icon excel-icon"></i>
                            ดาวน์โหลดแม่แบบ Excel
                        </button>
                    </div>
                </div>
                
                <div class="submit-section">
                    <button id="submit-import" class="primary-button">เริ่มนำเข้าข้อมูล</button>
                </div>
            </div>
            
            <div class="import-progress-section" style="display: none;">
                <h3>กำลังนำเข้าข้อมูล</h3>
                <div class="progress-bar-container">
                    <div id="import-progress-bar"></div>
                    <div class="progress-stats">
                        <span id="processed-count">0</span> จาก <span id="total-count">0</span> รายการ
                    </div>
                </div>
                <div class="progress-details">
                    <div class="success-count">นำเข้าสำเร็จ: <span id="success-count">0</span> รายการ</div>
                    <div class="error-count">เกิดข้อผิดพลาด: <span id="error-count">0</span> รายการ</div>
                </div>
            </div>
            
            <div class="import-results-section" style="display: none;">
                <h3>ผลการนำเข้าข้อมูล</h3>
                <div class="results-summary">
                    <p>นำเข้าสำเร็จทั้งหมด: <span id="total-success-count">0</span> รายการ</p>
                </div>
                
                <div class="results-table-container">
                    <table class="results-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>หัวข้อ</th>
                                <th>ประเภทโพส</th>
                                <th>วันที่</th>
                                <th>ลิงก์</th>
                            </tr>
                        </thead>
                        <tbody id="results-table-body">
                            <!-- Results will be populated here via AJAX -->
                        </tbody>
                    </table>
                    
                    <div class="pagination-container">
                        <div id="pagination" class="pagination">
                            <!-- Pagination will be populated here via AJAX -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <?php
        return ob_get_clean();
    }
    
    /**
     * ประมวลผลไฟล์นำเข้าผ่าน AJAX
     */
    public function process_import_file() {
        // ตรวจสอบ nonce
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'csv_importer_nonce')) {
            wp_send_json_error(array('message' => 'ตรวจสอบความปลอดภัยล้มเหลว'));
            exit;
        }
        
        // ตรวจสอบว่ามีการอัปโหลดไฟล์หรือไม่
        if (!isset($_FILES['import_file']) || empty($_FILES['import_file']['tmp_name'])) {
            wp_send_json_error(array('message' => 'ไม่พบไฟล์ที่อัปโหลด'));
            exit;
        }
        
        // ตรวจสอบว่าเลือกประเภทโพสหรือไม่
        if (!isset($_POST['post_types']) || empty($_POST['post_types'])) {
            wp_send_json_error(array('message' => 'กรุณาเลือกประเภทโพสอย่างน้อย 1 ประเภท'));
            exit;
        }
        
        $file = $_FILES['import_file'];
        $post_types = $_POST['post_types'];
        
        // ตรวจสอบนามสกุลไฟล์
        $file_extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));
        if (!in_array($file_extension, array('csv', 'xlsx', 'xls'))) {
            wp_send_json_error(array('message' => 'รูปแบบไฟล์ไม่ถูกต้อง กรุณาอัปโหลดไฟล์ CSV หรือ Excel'));
            exit;
        }
        
        // ตรวจสอบว่ามีไฟล์ SimpleXLSX.php หรือไม่ (สำหรับ Excel)
        if (in_array($file_extension, array('xlsx', 'xls')) && !file_exists($this->simplexlsx_path)) {
            wp_send_json_error(array(
                'message' => 'ไม่พบไฟล์ SimpleXLSX.php กรุณาดาวน์โหลดไฟล์และวางใน ' . get_stylesheet_directory() . '/src/'
            ));
            exit;
        }
        
        // ประมวลผลไฟล์ตามประเภท
        $imported_posts = array();
        $imported_ids = array();
        
        try {
            if ($file_extension === 'csv') {
                $imported_posts = $this->process_csv_file($file['tmp_name'], $post_types);
            } else {
                // สำหรับไฟล์ Excel (xlsx, xls)
                $imported_posts = $this->process_excel_file($file['tmp_name'], $post_types);
            }
            
            if (!empty($imported_posts)) {
                foreach ($imported_posts as $post) {
                    if (isset($post['id']) && $post['id'] > 0) {
                        $imported_ids[] = $post['id'];
                    }
                }
                
                // เก็บ ID ที่นำเข้าในตัวแปรชั่วคราว
                set_transient('csv_importer_imported_ids_' . get_current_user_id(), $imported_ids, HOUR_IN_SECONDS);
                
                wp_send_json_success(array(
                    'message' => 'นำเข้าข้อมูลสำเร็จ',
                    'imported_count' => count($imported_posts),
                    'imported_ids' => $imported_ids
                ));
            } else {
                wp_send_json_error(array('message' => 'ไม่มีโพสที่ถูกนำเข้า โปรดตรวจสอบรูปแบบไฟล์ของคุณ'));
            }
        } catch (Exception $e) {
            wp_send_json_error(array('message' => 'เกิดข้อผิดพลาด: ' . $e->getMessage()));
        }
        
        exit;
    }
    
    /**
     * ประมวลผลไฟล์ CSV
     */
    private function process_csv_file($file_path, $post_types) {
        $imported_posts = array();
        
        // เปิดไฟล์ CSV
        $handle = fopen($file_path, 'r');
        if ($handle === false) {
            throw new Exception('ไม่สามารถเปิดไฟล์ CSV ได้');
        }
        
        // ข้ามบรรทัดหัวตาราง
        fgetcsv($handle);
        
        // ประมวลผลแต่ละแถว
        $row_number = 1;
        while (($data = fgetcsv($handle)) !== false) {
            $row_number++;
            
            // ตรวจสอบว่าแถวมีคอลัมน์ที่จำเป็นหรือไม่
            if (count($data) < 2) {
                continue; // ข้ามแถวนี้
            }
            
            $title = trim($data[0]);
            $content = trim($data[1]);
            
            if (empty($title)) {
                continue; // ข้ามหากไม่มีหัวข้อ
            }
            
            // ใช้ประเภทโพสแรกที่เลือก (หรือเลือกเป็นรอบๆ)
            $post_type_index = ($row_number - 2) % count($post_types);
            $post_type = $post_types[$post_type_index];
            
            // สร้างโพส
            $post_id = $this->create_post($title, $content, $post_type);
            
            if ($post_id) {
                $imported_posts[] = array(
                    'id' => $post_id,
                    'title' => $title,
                    'post_type' => $post_type
                );
            }
        }
        
        fclose($handle);
        
        return $imported_posts;
    }
    
    /**
     * ประมวลผลไฟล์ Excel ด้วย SimpleXLSX
     */
    private function process_excel_file($file_path, $post_types) {
        $imported_posts = array();
        
        // ตรวจสอบว่าไฟล์ SimpleXLSX มีอยู่
        if (!file_exists($this->simplexlsx_path)) {
            throw new Exception('ไม่พบไฟล์ SimpleXLSX.php ที่จำเป็นต้องใช้สำหรับการนำเข้าไฟล์ Excel');
        }
        
        // โหลดไลบรารี SimpleXLSX
        require_once($this->simplexlsx_path);
        
        // ใช้ SimpleXLSX อ่านไฟล์
        $xlsx = new \SimpleXLSX($file_path);
        if (!$xlsx) {
            throw new Exception('ไม่สามารถอ่านไฟล์ Excel ได้: ' . \SimpleXLSX::parseError());
        }
        
        // รับข้อมูลแถวทั้งหมด
        $rows = $xlsx->rows();
        
        // ข้ามบรรทัดหัวตาราง
        array_shift($rows);
        
        // ประมวลผลแต่ละแถว
        foreach ($rows as $index => $row) {
            // ตรวจสอบว่าแถวมีคอลัมน์ที่จำเป็นหรือไม่
            if (count($row) < 2) {
                continue; // ข้ามแถวนี้
            }
            
            $title = trim($row[0]);
            $content = trim($row[1]);
            
            if (empty($title)) {
                continue; // ข้ามหากไม่มีหัวข้อ
            }
            
            // ใช้ประเภทโพสแรกที่เลือก (หรือเลือกเป็นรอบๆ)
            $post_type_index = $index % count($post_types);
            $post_type = $post_types[$post_type_index];
            
            // สร้างโพส
            $post_id = $this->create_post($title, $content, $post_type);
            
            if ($post_id) {
                $imported_posts[] = array(
                    'id' => $post_id,
                    'title' => $title,
                    'post_type' => $post_type
                );
            }
        }
        
        return $imported_posts;
    }
    
    /**
     * สร้างโพสใน WordPress
     */
    private function create_post($title, $content, $post_type) {
        // สร้างข้อมูลโพส
        $post_arr = array(
            'post_title'    => $title,
            'post_content'  => $content,
            'post_status'   => 'publish',
            'post_author'   => get_current_user_id(),
            'post_type'     => $post_type,
            'post_name'     => '' // จะถูกสร้างอัตโนมัติตาม post ID
        );
        
        // เพิ่มโพส
        $post_id = wp_insert_post($post_arr);
        
        if (!is_wp_error($post_id)) {
            // อัปเดต slug ให้เป็น post ID
            wp_update_post(array(
                'ID'        => $post_id,
                'post_name' => $post_id
            ));
            
            // เพิ่ม custom field
            update_post_meta($post_id, 'at_content', $content);
            
            return $post_id;
        }
        
        return false;
    }
    
    /**
     * รับโพสที่นำเข้าสำหรับแสดงในตารางผลลัพธ์
     */
    public function get_imported_posts() {
        // ตรวจสอบ nonce
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'csv_importer_nonce')) {
            wp_send_json_error(array('message' => 'ตรวจสอบความปลอดภัยล้มเหลว'));
            exit;
        }
        
        $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
        $posts_per_page = 10;
        
        // รับ ID ของโพสที่นำเข้าจากตัวแปรชั่วคราว
        $imported_ids = get_transient('csv_importer_imported_ids_' . get_current_user_id());
        
        if (empty($imported_ids)) {
            wp_send_json_error(array('message' => 'ไม่พบโพสที่นำเข้า'));
            exit;
        }
        
        // คำนวณหน้าที่แสดง
        $total_posts = count($imported_ids);
        $total_pages = ceil($total_posts / $posts_per_page);
        
        // รับโพสสำหรับหน้าปัจจุบัน
        $offset = ($page - 1) * $posts_per_page;
        $current_page_ids = array_slice($imported_ids, $offset, $posts_per_page);
        
        $posts_data = array();
        foreach ($current_page_ids as $post_id) {
            $post = get_post($post_id);
            if ($post) {
                $post_type_obj = get_post_type_object($post->post_type);
                $post_type_label = $post_type_obj ? $post_type_obj->labels->singular_name : $post->post_type;
                
                $posts_data[] = array(
                    'id' => $post->ID,
                    'title' => $post->post_title,
                    'post_type' => $post_type_label,
                    'date' => get_the_date('Y-m-d H:i', $post),
                    'link' => get_permalink($post)
                );
            }
        }
        
        // สร้าง HTML สำหรับการแบ่งหน้า
        $pagination_html = '';
        if ($total_pages > 1) {
            // Add previous button if not on first page
            if ($page > 1) {
                $pagination_html .= '<a href="#" class="page-nav prev" data-page="' . ($page - 1) . '"><span>&laquo;</span></a>';
            }
            
            // Page numbers
            $start_page = max(1, $page - 2);
            $end_page = min($total_pages, $page + 2);
            
            for ($i = $start_page; $i <= $end_page; $i++) {
                $active_class = ($i === $page) ? 'active' : '';
                $pagination_html .= '<a href="#" class="page-num ' . $active_class . '" data-page="' . $i . '">' . $i . '</a>';
            }
            
            // Add next button if not on last page
            if ($page < $total_pages) {
                $pagination_html .= '<a href="#" class="page-nav next" data-page="' . ($page + 1) . '"><span>&raquo;</span></a>';
            }
        }
        
        wp_send_json_success(array(
            'posts' => $posts_data,
            'pagination' => $pagination_html,
            'total_posts' => $total_posts,
            'current_page' => $page,
            'total_pages' => $total_pages
        ));
        
        exit;
    }
    
    /**
     * ดาวน์โหลดไฟล์แม่แบบ
     */
    public function download_template() {
        // ตรวจสอบ nonce
        if (!isset($_REQUEST['nonce']) || !wp_verify_nonce($_REQUEST['nonce'], 'csv_importer_nonce')) {
            wp_die('ตรวจสอบความปลอดภัยล้มเหลว');
        }
        
        $type = isset($_REQUEST['type']) ? sanitize_text_field($_REQUEST['type']) : 'csv';
        
        if ($type === 'csv') {
            $this->download_csv_template();
        } else {
            $this->download_excel_template();
        }
        
        exit;
    }
    
    /**
     * ดาวน์โหลดแม่แบบ CSV
     */
    private function download_csv_template() {
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment; filename="post_import_template.csv"');
        
        $output = fopen('php://output', 'w');
        
        // เพิ่มบรรทัดหัวตาราง
        fputcsv($output, array('หัวข้อโพส (Post Title)', 'เนื้อหาโพส (Post Content)'));
        
        // เพิ่มข้อมูลตัวอย่าง
        fputcsv($output, array('ตัวอย่างหัวข้อโพส', 'ตัวอย่างเนื้อหาโพส'));
        
        fclose($output);
    }
    
    /**
     * ดาวน์โหลดแม่แบบ Excel
     */
    private function download_excel_template() {
        // ตรวจสอบว่าไฟล์ SimpleXLSX มีอยู่
        if (!file_exists($this->simplexlsx_path)) {
            // สำหรับกรณีที่ไม่มี SimpleXLSX เราจะให้ดาวน์โหลดเป็น CSV แทน แต่เปลี่ยนนามสกุลเป็น .xlsx
            header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            header('Content-Disposition: attachment; filename="post_import_template.xlsx"');
            
            $output = fopen('php://output', 'w');
            
            // เพิ่มบรรทัดหัวตาราง
            fputcsv($output, array('หัวข้อโพส (Post Title)', 'เนื้อหาโพส (Post Content)'));
            
            // เพิ่มข้อมูลตัวอย่าง
            fputcsv($output, array('ตัวอย่างหัวข้อโพส', 'ตัวอย่างเนื้อหาโพส'));
            
            fclose($output);
            return;
        }
        
        // สร้างแม่แบบ Excel แบบง่าย
        $filename = "post_import_template.xlsx";
        
        // สร้างไฟล์ CSV ชั่วคราว
        $temp_file = tempnam(sys_get_temp_dir(), 'excel_template');
        $temp_handle = fopen($temp_file, 'w');
        
        // เพิ่มบรรทัดหัวตาราง
        fputcsv($temp_handle, array('หัวข้อโพส (Post Title)', 'เนื้อหาโพส (Post Content)'));
        
        // เพิ่มข้อมูลตัวอย่าง
        fputcsv($temp_handle, array('ตัวอย่างหัวข้อโพส', 'ตัวอย่างเนื้อหาโพส'));
        
        fclose($temp_handle);
        
        // ส่งไฟล์ไปยังเบราว์เซอร์
        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        header('Content-Disposition: attachment; filename="' . $filename . '"');
        header('Content-Length: ' . filesize($temp_file));
        header('Pragma: no-cache');
        
        readfile($temp_file);
        unlink($temp_file); // ลบไฟล์ชั่วคราว
    }
}

// เริ่มต้นปลั๊กอิน
function init_csv_excel_post_importer() {
    new CSV_Excel_Post_Importer();
}
add_action('init', 'init_csv_excel_post_importer');



/**** Badge Style Taxonomy Editor for WordPress *****/

// Enqueue necessary scripts and styles
function wptax_enqueue_scripts() {
    wp_enqueue_style('wptax-editor', get_stylesheet_directory_uri() . '/css/wptax-editor.css');
    wp_enqueue_script('wptax-editor', get_stylesheet_directory_uri() . '/js/wptax-editor.js', array('jquery'), '1.0', true);
    
    wp_localize_script('wptax-editor', 'wptaxAjax', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('wptax_nonce'),
        'isLoggedIn' => is_user_logged_in()
    ));
}
add_action('wp_enqueue_scripts', 'wptax_enqueue_scripts');

/**
 * ฟังก์ชั่นสำหรับดึง taxonomies ที่เกี่ยวข้องกับ post type
 * 
 * @param string $post_type ชื่อของ post type
 * @return array รายการ taxonomy ที่เกี่ยวข้อง
 */
function wptax_get_taxonomies_for_post_type($post_type) {
    $taxonomies = get_object_taxonomies($post_type, 'objects');
    
    // กรองเอาเฉพาะ taxonomy ที่ต้องการแสดง (ไม่รวม taxonomy ของระบบ)
    $exclude_taxonomies = array('post_format', 'wp_theme', 'wp_template_part_area');
    foreach ($exclude_taxonomies as $exclude) {
        if (isset($taxonomies[$exclude])) {
            unset($taxonomies[$exclude]);
        }
    }
    
    return $taxonomies;
}

// Create shortcode function with Badge UI
function wptax_taxonomy_shortcode($atts) {
    // Parse attributes
    $atts = shortcode_atts(array(
        'taxonomy' => '', // ไม่ต้องระบุค่าเริ่มต้น เพราะจะหาโดยอัตโนมัติ
        'show_title' => 'yes', // แสดงชื่อ taxonomy หรือไม่ (yes/no)
        'style' => 'blue', // สีของ badge: blue, orange, green, purple
        'editable' => 'yes' // อนุญาตให้แก้ไขหรือไม่ (yes/no)
    ), $atts);
    
    $post_id = get_the_ID();
    $post_type = get_post_type($post_id);
    $show_title = ($atts['show_title'] === 'yes');
    $is_editable = ($atts['editable'] === 'yes' && is_user_logged_in() && current_user_can('edit_post', $post_id));
    
    // หาก taxonomy ไม่ได้ระบุมา ให้ดึง taxonomies ทั้งหมดที่เกี่ยวข้องกับ post type นี้
    if (empty($atts['taxonomy'])) {
        $taxonomies = wptax_get_taxonomies_for_post_type($post_type);
        
        // ถ้าไม่พบ taxonomy ใดๆ
        if (empty($taxonomies)) {
            return '<div class="wptax-taxonomy-container">ไม่พบ taxonomy ที่เกี่ยวข้อง</div>';
        }
    } else {
        // หาก taxonomy ถูกระบุไว้ใน shortcode ให้ใช้อันนั้น
        $taxonomy = sanitize_key($atts['taxonomy']);
        $taxonomy_obj = get_taxonomy($taxonomy);
        
        if ($taxonomy_obj && is_object($taxonomy_obj)) {
            $taxonomies = array($taxonomy => $taxonomy_obj);
        } else {
            return '<div class="wptax-taxonomy-container">ไม่พบ taxonomy ที่ระบุ</div>';
        }
    }
    
    // Add style class based on attribute
    $style_class = 'wptax-style-' . sanitize_html_class($atts['style']);
    
    $output = '<div class="wptax-taxonomy-container ' . $style_class . '">';
    
    // วนลูปแสดงแต่ละ taxonomy
    foreach ($taxonomies as $taxonomy_name => $taxonomy_obj) {
        $terms = get_the_terms($post_id, $taxonomy_name);
        $current_terms = !empty($terms) && !is_wp_error($terms) ? $terms : array();
        $current_term_ids = array();
        
        if (!empty($current_terms)) {
            foreach ($current_terms as $term) {
                $current_term_ids[] = $term->term_id;
            }
        }
        
        $output .= '<div class="wptax-taxonomy-section">';
        
        // แสดงชื่อ taxonomy หากต้องการ
        if ($show_title) {
            $output .= '<h4 class="wptax-taxonomy-title">' . esc_html($taxonomy_obj->label) . ':</h4>';
        }
        
        // ส่วนแสดงข้อมูลและปุ่มแก้ไข
        $output .= '<div class="wptax-term-display" data-post-id="' . esc_attr($post_id) . '" data-taxonomy="' . esc_attr($taxonomy_name) . '">';
        
        if (!empty($current_terms)) {
            $term_links = array();
            foreach ($current_terms as $term) {
                $term_links[] = '<a href="' . esc_url(get_term_link($term)) . '" class="wptax-term-link" title="' . esc_attr($term->name) . '">' . 
                              esc_html($term->name) . '</a>';
            }
            $output .= '<div class="wptax-terms-container">' . implode('', $term_links) . '</div>';
        } else {
            $output .= '<span class="wptax-no-term">ไม่มีหมวดหมู่กำหนด</span>';
        }
        
        if ($is_editable) {
            $output .= '<button class="wptax-edit-btn" title="แก้ไขหมวดหมู่"><i class="wptax-edit-icon"></i></button>';
            
            // สร้าง checkboxes สำหรับการแก้ไข (ซ่อนไว้โดยค่าเริ่มต้น)
            $output .= '<div class="wptax-edit-form" style="display:none;">';
            $output .= '<div class="wptax-checkbox-container">';
            
            $all_terms = get_terms(array(
                'taxonomy' => $taxonomy_name,
                'hide_empty' => false,
                'orderby' => 'name',
                'order' => 'ASC'
            ));
            
            if (!is_wp_error($all_terms) && !empty($all_terms)) {
                foreach ($all_terms as $term) {
                    $checked = in_array($term->term_id, $current_term_ids) ? 'checked="checked"' : '';
                    $output .= '<div class="wptax-checkbox-item">';
                    $output .= '<input type="checkbox" id="wptax-term-' . esc_attr($term->term_id) . '-' . esc_attr($post_id) . '" 
                                class="wptax-term-checkbox" value="' . esc_attr($term->term_id) . '" ' . $checked . '>';
                    $output .= '<label for="wptax-term-' . esc_attr($term->term_id) . '-' . esc_attr($post_id) . '">' . esc_html($term->name) . '</label>';
                    $output .= '</div>';
                }
            }
            
            $output .= '</div>'; // จบ checkbox container
            $output .= '<div class="wptax-buttons-group">';
            $output .= '<button class="wptax-save-btn">บันทึก</button>';
            $output .= '<button class="wptax-cancel-btn">ยกเลิก</button>';
            $output .= '</div>';
            $output .= '</div>'; // จบฟอร์มแก้ไข
        }
        
        $output .= '</div>'; // จบส่วนแสดง term
        $output .= '</div>'; // จบส่วน taxonomy
    }
    
    $output .= '</div>'; // จบ container
    
    return $output;
}
add_shortcode('wptax_editor', 'wptax_taxonomy_shortcode');

// AJAX handler for updating taxonomy
function wptax_update_taxonomy() {
    check_ajax_referer('wptax_nonce', 'nonce');
    
    if (!current_user_can('edit_posts')) {
        wp_send_json_error('ไม่มีสิทธิ์ในการแก้ไขโพสต์');
        return;
    }
    
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $taxonomy = isset($_POST['taxonomy']) ? sanitize_key($_POST['taxonomy']) : '';
    
    if (empty($taxonomy)) {
        wp_send_json_error('ไม่ได้ระบุ taxonomy');
        return;
    }
    
    if (empty($post_id)) {
        wp_send_json_error('ไม่ได้ระบุรหัสโพสต์');
        return;
    }
    
    // ตรวจสอบว่ามีสิทธิ์แก้ไขโพสต์นี้หรือไม่
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error('คุณไม่มีสิทธิ์แก้ไขโพสต์นี้');
        return;
    }
    
    // รับค่า term_ids จาก POST request
    $term_ids = isset($_POST['term_ids']) ? $_POST['term_ids'] : array();
    
    // Debug
    error_log('Received term_ids: ' . print_r($term_ids, true));
    
    // แปลง term_ids เป็น array และตรวจสอบว่ามีค่าหรือไม่
    if (!is_array($term_ids)) {
        if (empty($term_ids)) {
            $term_ids = array(); // ถ้าไม่มีค่า ให้ใช้ array ว่าง
        } else {
            $term_ids = array($term_ids); // ถ้ามีค่าเดียว ให้แปลงเป็น array
        }
    }
    
    // แน่ใจว่าทุกค่าใน term_ids เป็น integer
    $term_ids = array_map('intval', $term_ids);
    
    // Debug
    error_log('Processed term_ids: ' . print_r($term_ids, true));
    
    // อัพเดต terms
    $result = wp_set_object_terms($post_id, $term_ids, $taxonomy);
    
    if (is_wp_error($result)) {
        wp_send_json_error($result->get_error_message());
    } else {
        // ดึงข้อมูล terms ที่อัพเดตแล้ว
        $updated_terms = get_the_terms($post_id, $taxonomy);
        $terms_data = array();
        
        if (!empty($updated_terms) && !is_wp_error($updated_terms)) {
            foreach ($updated_terms as $term) {
                $terms_data[] = array(
                    'id' => $term->term_id,
                    'name' => $term->name,
                    'link' => get_term_link($term)
                );
            }
        }
        
        wp_send_json_success(array(
            'terms' => $terms_data
        ));
    }
}
add_action('wp_ajax_wptax_update_taxonomy', 'wptax_update_taxonomy');



/**** แสดงโพสต์ที่เกี่ยวข้องตาม Taxonomy ****/


function wptax_related_enqueue_assets() {
    // ไม่ทำงานกับ post type "ckan"
    if (is_singular('ckan')) {
        return;
    }
    
    $theme_version = wp_get_theme()->get('Version');
    
    // Check for child theme CSS
    if (is_child_theme()) {
        $child_style_path = get_stylesheet_directory() . '/css/wptax-related.css';
        $child_style_uri = get_stylesheet_directory_uri() . '/css/wptax-related.css';
        
        if (file_exists($child_style_path)) {
            wp_enqueue_style('wptax-related-style', $child_style_uri, array(), $theme_version);
        } else {
            wp_enqueue_style('wptax-related-style', get_template_directory_uri() . '/css/wptax-related.css', array(), $theme_version);
        }
        
        // Check for child theme JS
        $child_script_path = get_stylesheet_directory() . '/js/wptax-related.js';
        $child_script_uri = get_stylesheet_directory_uri() . '/js/wptax-related.js';
        
        if (file_exists($child_script_path)) {
            wp_enqueue_script('wptax-related-script', $child_script_uri, array('jquery'), $theme_version, true);
        } else {
            wp_enqueue_script('wptax-related-script', get_template_directory_uri() . '/js/wptax-related.js', array('jquery'), $theme_version, true);
        }
    } else {
        wp_enqueue_style('wptax-related-style', get_template_directory_uri() . '/css/wptax-related.css', array(), $theme_version);
        wp_enqueue_script('wptax-related-script', get_template_directory_uri() . '/js/wptax-related.js', array('jquery'), $theme_version, true);
    }
}
add_action('wp_enqueue_scripts', 'wptax_related_enqueue_assets');

// Related posts shortcode function
function wptax_related_shortcode($atts) {

    // ไม่ทำงานกับ post type "ckan"
    if (get_post_type() === 'ckan') {
        return '';
    }
    
    // Parse attributes
    $atts = shortcode_atts(array(
        'posts_per_page' => 3,
        'exclude_current' => 'yes',
        'post_type' => '' // ถ้าไม่ระบุจะใช้ post type ปัจจุบัน
    ), $atts);
    
    
    // Get current post's taxonomies and terms
    $current_post_id = get_the_ID();
    $post_type = !empty($atts['post_type']) ? $atts['post_type'] : get_post_type($current_post_id);
    $taxonomies = get_object_taxonomies($post_type);
    $current_terms = array();
    
    foreach ($taxonomies as $taxonomy) {
        $terms = wp_get_post_terms($current_post_id, $taxonomy, array('fields' => 'ids'));
        if (!empty($terms) && !is_wp_error($terms)) {
            $current_terms[$taxonomy] = $terms;
        }
    }
    
    // Build tax query
    $tax_query = array('relation' => 'OR');
    foreach ($current_terms as $taxonomy => $terms) {
        $tax_query[] = array(
            'taxonomy' => $taxonomy,
            'field' => 'id',
            'terms' => $terms
        );
    }
    
    // Setup query arguments
    $query_args = array(
        'post_type' => $post_type,
        'posts_per_page' => $atts['posts_per_page'],
        'post_status' => 'publish',
        'orderby' => 'date',
        'order' => 'DESC'
    );
    
    // Add tax_query if we have terms
    if (!empty($current_terms)) {
        $query_args['tax_query'] = $tax_query;
    }
    
    // Exclude current post if specified
    if ($atts['exclude_current'] === 'yes') {
        $query_args['post__not_in'] = array($current_post_id);
    }
    
    $query = new WP_Query($query_args);
    
    ob_start();
    
    if ($query->have_posts()) : ?>
        <div class="wptax-related-container">
            <div class="wptax-related-wrapper">
                <?php while ($query->have_posts()) : $query->the_post(); ?>
                    <article class="wptax-related-item">
                        <a href="<?php the_permalink(); ?>" class="wptax-related-link">
                            <div class="wptax-related-image">
                                <?php if (has_post_thumbnail()) : ?>
                                    <?php the_post_thumbnail('medium', array('class' => 'wptax-related-thumbnail')); ?>
                                <?php else : ?>
                                    <div class="wptax-related-no-image"></div>
                                <?php endif; ?>
                                <?php
                                    // Get all taxonomies for this post
                                    $post_taxonomies = get_object_taxonomies(get_post_type());
                                    $first_term = null;

                                    // Loop through taxonomies to find the first term
                                    foreach ($post_taxonomies as $taxonomy) {
                                        $terms = get_the_terms(get_the_ID(), $taxonomy);
                                        if (!empty($terms) && !is_wp_error($terms)) {
                                            $first_term = $terms[0];
                                            break; // ใช้ term แรกที่เจอ
                                        }
                                    }

                                    // Display the term name if found
                                    if ($first_term) : ?>
                                        <span class="wptax-related-badge"><?php echo esc_html($first_term->name); ?></span>
                                    <?php endif; ?>
                                    
                            </div>
                            <div class="wptax-related-content">
                                <h3 class="wptax-related-title"><?php the_title(); ?></h3>
                                <div class="wptax-related-meta">
                                    <span class="wptax-related-time"><?php echo human_time_diff(get_the_time('U'), current_time('timestamp')); ?> ที่แล้ว</span>
                                    <span class="wptax-related-separator">•</span>
                                    <span class="wptax-related-readmore">อ่านต่อ</span>
                                </div>
                            </div>
                        </a>
                    </article>
                <?php endwhile; ?>
            </div>
        </div>
    <?php else: ?>
        <div class="wptax-related-empty">ไม่พบโพสต์ที่เกี่ยวข้อง</div>
    <?php endif;
    
    wp_reset_postdata();
    
    return ob_get_clean();
}
add_shortcode('wptax_related', 'wptax_related_shortcode');


/**** Modal Popup บังคับกำหนดหมวดหมู่สำหรับ Post ****/

// Enqueue necessary scripts and styles
function wptax_category_modal_enqueue_assets() {
    // ไม่ทำงานกับ post type "ckan"
    if (is_singular() && get_post_type() !== 'ckan') { 
        $theme_version = wp_get_theme()->get('Version');
        
        // Enqueue CSS
        wp_enqueue_style('wptax-modal-style', get_stylesheet_directory_uri() . '/css/wptax-modal.css', array(), $theme_version);
        
        // Enqueue JavaScript
        wp_enqueue_script('wptax-modal-script', get_stylesheet_directory_uri() . '/js/wptax-modal.js', array('jquery'), $theme_version, true);
        
        // ส่งค่าที่ต้องใช้ไปยัง JavaScript
        wp_localize_script('wptax-modal-script', 'wptaxModal', array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('wptax_modal_nonce'),
            'saveText' => 'บันทึกหมวดหมู่',
            'closeText' => 'ยกเลิก',
            'modalTitle' => 'กำหนดหมวดหมู่สำหรับเนื้อหานี้',
            'modalDesc' => 'กรุณาเลือกหมวดหมู่ที่เหมาะสมสำหรับเนื้อหานี้',
            'successMessage' => 'บันทึกหมวดหมู่เรียบร้อยแล้ว',
            'errorMessage' => 'เกิดข้อผิดพลาด กรุณาลองใหม่อีกครั้ง'
        ));
    }
}
add_action('wp_enqueue_scripts', 'wptax_category_modal_enqueue_assets');

/**
 * ฟังก์ชั่นดึง Taxonomies ที่เกี่ยวข้องกับ post type
 */
function wptax_get_posttype_taxonomies($post_type) {
    $taxonomies = get_object_taxonomies($post_type, 'objects');
    
    // กรองเอาเฉพาะ taxonomy ที่ต้องการแสดง (ไม่รวม taxonomy ของระบบ)
    $exclude_taxonomies = array('post_format', 'wp_theme', 'wp_template_part_area');
    foreach ($exclude_taxonomies as $exclude) {
        if (isset($taxonomies[$exclude])) {
            unset($taxonomies[$exclude]);
        }
    }
    
    return $taxonomies;
}

/**
 * ฟังก์ชั่นตรวจสอบว่า post มีการกำหนด term ใน taxonomy หรือไม่
 */
function wptax_post_has_terms($post_id, $taxonomy) {
    $terms = wp_get_post_terms($post_id, $taxonomy);
    return !empty($terms) && !is_wp_error($terms);
}

/**
 * Shortcode function
 */
function wptax_category_modal_shortcode($atts) {
    // ไม่ทำงานกับ post type "ckan"
    if (get_post_type() === 'ckan') {
        return '';
    }
    
    // Parse attributes
    $atts = shortcode_atts(array(
        'taxonomy' => '', // ถ้าไม่ระบุจะตรวจสอบทุก taxonomy
    ), $atts);
    
    // ถ้าไม่ได้ login หรือไม่มีสิทธิ์แก้ไข ไม่ต้องแสดงอะไร
    if (!is_user_logged_in() || !current_user_can('edit_posts')) {
        return '';
    }
    
    $post_id = get_the_ID();
    $post_type = get_post_type($post_id);
    
    // ดึง taxonomies ที่เกี่ยวข้องกับ post type นี้
    if (!empty($atts['taxonomy'])) {
        // ถ้ามีการระบุ taxonomy ให้ใช้เฉพาะ taxonomy ที่ระบุ
        $taxonomy_obj = get_taxonomy($atts['taxonomy']);
        if ($taxonomy_obj) {
            $taxonomies = array($atts['taxonomy'] => $taxonomy_obj);
        } else {
            return '<div class="wptax-error">ไม่พบ Taxonomy ที่ระบุ</div>';
        }
    } else {
        // ถ้าไม่ระบุ ให้ดึงทุก taxonomy ที่เกี่ยวข้อง
        $taxonomies = wptax_get_posttype_taxonomies($post_type);
    }
    
    if (empty($taxonomies)) {
        return '<div class="wptax-error">ไม่พบ Taxonomy ที่เกี่ยวข้อง</div>';
    }
    
    // ตรวจสอบว่ามี term ใน taxonomy หรือยัง
    $missing_taxonomies = array();
    foreach ($taxonomies as $tax_name => $tax_obj) {
        if (!wptax_post_has_terms($post_id, $tax_name)) {
            $missing_taxonomies[$tax_name] = $tax_obj;
        }
    }
    
    // ถ้าไม่มี taxonomy ที่ขาดหมวดหมู่ ไม่ต้องแสดง modal
    if (empty($missing_taxonomies)) {
        return '';
    }
    
    // เริ่มสร้าง output
    ob_start();
    ?>
    <div id="wptax-category-modal" class="wptax-modal" data-post-id="<?php echo esc_attr($post_id); ?>">
        <div class="wptax-modal-overlay"></div>
        <div class="wptax-modal-container">
            <div class="wptax-modal-header">
                <h3>กำหนดหมวดหมู่สำหรับเนื้อหานี้</h3>
                <button class="wptax-modal-close">&times;</button>
            </div>
            <div class="wptax-modal-body">
                <p class="wptax-modal-desc">กรุณาเลือกหมวดหมู่ที่เหมาะสมสำหรับเนื้อหานี้</p>
                
                <?php foreach ($missing_taxonomies as $tax_name => $tax_obj) : ?>
                <div class="wptax-taxonomy-section" data-taxonomy="<?php echo esc_attr($tax_name); ?>">
                    <h4 class="wptax-taxonomy-title"><?php echo esc_html($tax_obj->label); ?></h4>
                    
                    <div class="wptax-term-select-container">
                        <select class="wptax-term-select" name="wptax_term_<?php echo esc_attr($tax_name); ?>">
                            <option value="">-- เลือกหมวดหมู่ --</option>
                            <?php 
                            $terms = get_terms(array(
                                'taxonomy' => $tax_name,
                                'hide_empty' => false,
                            ));
                            
                            if (!is_wp_error($terms) && !empty($terms)) {
                                foreach ($terms as $term) {
                                    echo '<option value="' . esc_attr($term->term_id) . '">' . 
                                         esc_html($term->name) . '</option>';
                                }
                            }
                            ?>
                        </select>
                    </div>
                </div>
                <?php endforeach; ?>
                
                <div class="wptax-message-container"></div>
            </div>
            <div class="wptax-modal-footer">
                <button class="wptax-save-btn">บันทึกหมวดหมู่</button>
                <button class="wptax-cancel-btn">ยกเลิก</button>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('wptax_category_modal', 'wptax_category_modal_shortcode');

/**
 * AJAX handler for saving taxonomy terms
 */
function wptax_save_category_terms() {
    check_ajax_referer('wptax_modal_nonce', 'nonce');
    
    if (!current_user_can('edit_posts')) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์ในการแก้ไข'));
        return;
    }
    
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $terms = isset($_POST['terms']) ? $_POST['terms'] : array();
    
    if (empty($post_id) || empty($terms) || !is_array($terms)) {
        wp_send_json_error(array('message' => 'ข้อมูลไม่ถูกต้อง'));
        return;
    }
    
    // ตรวจสอบว่ามีสิทธิ์แก้ไขโพสต์นี้หรือไม่
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์แก้ไขเนื้อหานี้'));
        return;
    }
    
    $success = true;
    $updated_terms = array();
    
    foreach ($terms as $taxonomy => $term_id) {
        if (empty($term_id)) continue;
        
        $result = wp_set_object_terms($post_id, intval($term_id), sanitize_key($taxonomy));
        
        if (is_wp_error($result)) {
            $success = false;
        } else {
            $term = get_term($term_id);
            if (!is_wp_error($term)) {
                $updated_terms[] = array(
                    'taxonomy' => $taxonomy,
                    'term_name' => $term->name,
                    'term_link' => get_term_link($term)
                );
            }
        }
    }
    
    if ($success) {
        wp_send_json_success(array(
            'message' => 'บันทึกหมวดหมู่เรียบร้อยแล้ว',
            'updated_terms' => $updated_terms
        ));
    } else {
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดระหว่างการบันทึก'));
    }
}
add_action('wp_ajax_wptax_save_category_terms', 'wptax_save_category_terms');

/**
 * Auto-insert shortcode at the beginning of content
 */
function wptax_insert_category_modal($content) {
    // ไม่ทำงานกับ post type "ckan"
    if (is_singular() && is_user_logged_in() && current_user_can('edit_posts') && get_post_type() !== 'ckan') {
        $shortcode = do_shortcode('[wptax_category_modal]');
        return $shortcode . $content;
    }
    return $content;
}
add_filter('the_content', 'wptax_insert_category_modal', 5);



/***** ฟังก์ชั่นแสดง OIT **********/

// ลงทะเบียน shortcode และ enqueue scripts/styles
function register_oitform_shortcode() {
    add_shortcode('oitform', 'oitform_shortcode');
    
    // ลงทะเบียน script และ style
    add_action('wp_enqueue_scripts', 'enqueue_oitform_scripts');
}
add_action('init', 'register_oitform_shortcode');

// Enqueue scripts และ styles
function enqueue_oitform_scripts() {
    wp_register_style('oitform-styles', get_stylesheet_directory_uri() . '/css/oitform.css', array(), '1.0.0');
    wp_register_script('oitform-script', get_stylesheet_directory_uri() . '/js/oitform.js', array('jquery'), '1.0.0', true);
    
    // ส่งค่า AJAX URL ไปยัง JavaScript
    wp_localize_script('oitform-script', 'oitform_params', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'security' => wp_create_nonce('oitform-nonce')
    ));
}

// ฟังก์ชั่น shortcode หลัก
function oitform_shortcode($atts) {
    // Enqueue script และ style เมื่อใช้ shortcode
    wp_enqueue_style('oitform-styles');
    wp_enqueue_script('oitform-script');
    wp_enqueue_style('dashicons');
    
    // เริ่มต้น output buffering
    ob_start();
    
    // ดึงข้อมูลตัวชี้วัดจากฐานข้อมูล
    $indicators = get_option('oitform_indicators', array());
    
    ?>
    <div class="oitform-container" role="region" aria-label="แบบวัด OIT">
        <h2 class="oitform-title">แบบวัด OIT</h2>
        
        <!-- ส่วนควบคุมสำหรับ Admin -->
        <?php if(current_user_can('manage_options')): ?>
        <div class="oitform-admin-controls">
            <h3>จัดการตัวชี้วัดย่อย</h3>
            <form id="oitform-add-indicator" class="oitform-admin-form">
                <div class="form-group">
                    <label for="indicator-name">ชื่อตัวชี้วัดย่อย:</label>
                    <input type="text" id="indicator-name" name="indicator_name" required aria-required="true">
                </div>
                <div class="form-group">
                    <label for="indicator-description">คำอธิบาย:</label>
                    <textarea id="indicator-description" name="indicator_description" rows="3" aria-required="true"></textarea>
                </div>
                <button type="submit" class="oitform-btn oitform-btn-primary">เพิ่มตัวชี้วัดย่อย</button>
            </form>
        </div>
        <?php endif; ?>
        
        <!-- แสดงตัวชี้วัด -->
        <div id="oitform-indicators-list" class="oitform-indicators">
            <?php if(empty($indicators)): ?>
                <p class="oitform-empty-message">ยังไม่มีตัวชี้วัดย่อย</p>
            <?php else: ?>
                <?php foreach($indicators as $index => $indicator): ?>
                <div class="oitform-indicator" data-id="<?php echo esc_attr($index); ?>">
                    <div class="oitform-indicator-header">
                        <h3><?php echo esc_html($indicator['name']); ?></h3>
                        <?php if(current_user_can('manage_options')): ?>
                        <div class="oitform-indicator-actions">
                            <button class="oitform-btn oitform-btn-edit" aria-label="แก้ไขตัวชี้วัด <?php echo esc_attr($indicator['name']); ?>">
                                <span class="dashicons dashicons-edit"></span>
                            </button>
                            <button class="oitform-btn oitform-btn-delete" aria-label="ลบตัวชี้วัด <?php echo esc_attr($indicator['name']); ?>">
                                <span class="dashicons dashicons-trash"></span>
                            </button>
                        </div>
                        <?php endif; ?>
                    </div>
                    
                    <div class="oitform-indicator-description">
                        <?php echo wpautop(esc_html($indicator['description'])); ?>
                    </div>
                    
                    <!-- เนื้อหาของตัวชี้วัด -->
                    <div class="oitform-content-items">
                        <h4>เนื้อหา:</h4>
                        <?php if(empty($indicator['content_items'])): ?>
                            <p class="oitform-empty-message">ยังไม่มีเนื้อหา</p>
                        <?php else: ?>
                            <ul class="oitform-content-list">
                                <?php foreach($indicator['content_items'] as $content_index => $content): ?>
                                <li class="oitform-content-item" data-id="<?php echo esc_attr($content_index); ?>">
                                    <div class="oitform-content-title">
                                        <?php echo esc_html($content['title']); ?>
                                    </div>
                                    <div class="oitform-content-description">
                                        <?php echo wpautop(esc_html($content['description'])); ?>
                                    </div>
                                    <?php if(!empty($content['url'])): ?>
                                    <div class="oitform-content-url">
                                        <a href="<?php echo esc_url($content['url']); ?>" target="_blank" rel="noopener">
                                            ดูเนื้อหา <span class="dashicons dashicons-external"></span>
                                        </a>
                                    </div>
                                    <?php endif; ?>
                                    
                                    <?php if(current_user_can('manage_options')): ?>
                                    <div class="oitform-content-actions">
                                        <button class="oitform-btn oitform-btn-edit-content" aria-label="แก้ไขเนื้อหา <?php echo esc_attr($content['title']); ?>">
                                            <span class="dashicons dashicons-edit"></span>
                                        </button>
                                        <button class="oitform-btn oitform-btn-delete-content" aria-label="ลบเนื้อหา <?php echo esc_attr($content['title']); ?>">
                                            <span class="dashicons dashicons-trash"></span>
                                        </button>
                                    </div>
                                    <?php endif; ?>
                                </li>
                                <?php endforeach; ?>
                            </ul>
                        <?php endif; ?>
                        
                        <?php if(current_user_can('manage_options')): ?>
                        <div class="oitform-add-content">
                            <button class="oitform-btn oitform-btn-add-content" data-indicator-id="<?php echo esc_attr($index); ?>">
                                เพิ่มเนื้อหา <span class="dashicons dashicons-plus"></span>
                            </button>
                        </div>
                        <?php endif; ?>
                    </div>
                </div>
                <?php endforeach; ?>
            <?php endif; ?>
        </div>
        
        <!-- Modal สำหรับฟอร์ม -->
        <?php if(current_user_can('manage_options')): ?>
        <div id="oitform-modal" class="oitform-modal" aria-hidden="true">
            <div class="oitform-modal-overlay"></div>
            <div class="oitform-modal-container" role="dialog" aria-modal="true" aria-labelledby="modal-title">
                <div class="oitform-modal-header">
                    <h3 id="modal-title">ฟอร์ม</h3>
                    <button class="oitform-modal-close" aria-label="ปิด">×</button>
                </div>
                <div class="oitform-modal-content">
                    <!-- เนื้อหาของฟอร์มจะถูกเพิ่มโดย JavaScript -->
                </div>
            </div>
        </div>
        <?php endif; ?>
    </div>
    <?php
    
    // คืนค่า HTML
    return ob_get_clean();
}

/**
 * AJAX handlers สำหรับแบบวัด OIT
 */
 
// เพิ่มตัวชี้วัด
function oitform_add_indicator() {
    // ตรวจสอบ nonce
    check_ajax_referer('oitform-nonce', 'security');
    
    // ตรวจสอบสิทธิ์
    if(!current_user_can('manage_options')) {
        wp_send_json_error('ไม่มีสิทธิ์ดำเนินการ');
    }
    
    $name = sanitize_text_field($_POST['name']);
    $description = sanitize_textarea_field($_POST['description']);
    
    if(empty($name)) {
        wp_send_json_error('กรุณาระบุชื่อตัวชี้วัด');
    }
    
    // ดึงข้อมูลตัวชี้วัดที่มีอยู่
    $indicators = get_option('oitform_indicators', array());
    
    // เพิ่มตัวชี้วัดใหม่
    $indicators[] = array(
        'name' => $name,
        'description' => $description,
        'content_items' => array()
    );
    
    // บันทึกลงฐานข้อมูล
    update_option('oitform_indicators', $indicators);
    
    // ส่งผลลัพธ์กลับ
    wp_send_json_success(array(
        'index' => count($indicators) - 1,
        'indicator' => end($indicators)
    ));
}
add_action('wp_ajax_oitform_add_indicator', 'oitform_add_indicator');

// แก้ไขตัวชี้วัด
function oitform_edit_indicator() {
    // ตรวจสอบ nonce
    check_ajax_referer('oitform-nonce', 'security');
    
    // ตรวจสอบสิทธิ์
    if(!current_user_can('manage_options')) {
        wp_send_json_error('ไม่มีสิทธิ์ดำเนินการ');
    }
    
    $index = intval($_POST['index']);
    $name = sanitize_text_field($_POST['name']);
    $description = sanitize_textarea_field($_POST['description']);
    
    if(empty($name)) {
        wp_send_json_error('กรุณาระบุชื่อตัวชี้วัด');
    }
    
    // ดึงข้อมูลตัวชี้วัดที่มีอยู่
    $indicators = get_option('oitform_indicators', array());
    
    // ตรวจสอบว่ามีตัวชี้วัดนี้หรือไม่
    if(!isset($indicators[$index])) {
        wp_send_json_error('ไม่พบตัวชี้วัด');
    }
    
    // อัปเดตตัวชี้วัด
    $indicators[$index]['name'] = $name;
    $indicators[$index]['description'] = $description;
    
    // บันทึกลงฐานข้อมูล
    update_option('oitform_indicators', $indicators);
    
    // ส่งผลลัพธ์กลับ
    wp_send_json_success(array(
        'indicator' => $indicators[$index]
    ));
}
add_action('wp_ajax_oitform_edit_indicator', 'oitform_edit_indicator');

// ลบตัวชี้วัด
function oitform_delete_indicator() {
    // ตรวจสอบ nonce
    check_ajax_referer('oitform-nonce', 'security');
    
    // ตรวจสอบสิทธิ์
    if(!current_user_can('manage_options')) {
        wp_send_json_error('ไม่มีสิทธิ์ดำเนินการ');
    }
    
    $index = intval($_POST['index']);
    
    // ดึงข้อมูลตัวชี้วัดที่มีอยู่
    $indicators = get_option('oitform_indicators', array());
    
    // ตรวจสอบว่ามีตัวชี้วัดนี้หรือไม่
    if(!isset($indicators[$index])) {
        wp_send_json_error('ไม่พบตัวชี้วัด');
    }
    
    // ลบตัวชี้วัด
    array_splice($indicators, $index, 1);
    
    // บันทึกลงฐานข้อมูล
    update_option('oitform_indicators', $indicators);
    
    // ส่งผลลัพธ์กลับ
    wp_send_json_success();
}
add_action('wp_ajax_oitform_delete_indicator', 'oitform_delete_indicator');

// เพิ่มเนื้อหา
function oitform_add_content() {
    // ตรวจสอบ nonce
    check_ajax_referer('oitform-nonce', 'security');
    
    // ตรวจสอบสิทธิ์
    if(!current_user_can('manage_options')) {
        wp_send_json_error('ไม่มีสิทธิ์ดำเนินการ');
    }
    
    $indicator_index = intval($_POST['indicator_index']);
    $title = sanitize_text_field($_POST['title']);
    $description = sanitize_textarea_field($_POST['description']);
    $url = esc_url_raw($_POST['url']);
    
    if(empty($title)) {
        wp_send_json_error('กรุณาระบุหัวข้อเนื้อหา');
    }
    
    // ดึงข้อมูลตัวชี้วัดที่มีอยู่
    $indicators = get_option('oitform_indicators', array());
    
    // ตรวจสอบว่ามีตัวชี้วัดนี้หรือไม่
    if(!isset($indicators[$indicator_index])) {
        wp_send_json_error('ไม่พบตัวชี้วัด');
    }
    
    // เพิ่มเนื้อหาใหม่
    $indicators[$indicator_index]['content_items'][] = array(
        'title' => $title,
        'description' => $description,
        'url' => $url
    );
    
    // บันทึกลงฐานข้อมูล
    update_option('oitform_indicators', $indicators);
    
    // ส่งผลลัพธ์กลับ
    $content_index = count($indicators[$indicator_index]['content_items']) - 1;
    wp_send_json_success(array(
        'content_index' => $content_index,
        'content' => $indicators[$indicator_index]['content_items'][$content_index]
    ));
}
add_action('wp_ajax_oitform_add_content', 'oitform_add_content');

// แก้ไขเนื้อหา
function oitform_edit_content() {
    // ตรวจสอบ nonce
    check_ajax_referer('oitform-nonce', 'security');
    
    // ตรวจสอบสิทธิ์
    if(!current_user_can('manage_options')) {
        wp_send_json_error('ไม่มีสิทธิ์ดำเนินการ');
    }
    
    $indicator_index = intval($_POST['indicator_index']);
    $content_index = intval($_POST['content_index']);
    $title = sanitize_text_field($_POST['title']);
    $description = sanitize_textarea_field($_POST['description']);
    $url = esc_url_raw($_POST['url']);
    
    if(empty($title)) {
        wp_send_json_error('กรุณาระบุหัวข้อเนื้อหา');
    }
    
    // ดึงข้อมูลตัวชี้วัดที่มีอยู่
    $indicators = get_option('oitform_indicators', array());
    
    // ตรวจสอบว่ามีตัวชี้วัดและเนื้อหานี้หรือไม่
    if(!isset($indicators[$indicator_index]) || !isset($indicators[$indicator_index]['content_items'][$content_index])) {
        wp_send_json_error('ไม่พบเนื้อหา');
    }
    
    // อัปเดตเนื้อหา
    $indicators[$indicator_index]['content_items'][$content_index] = array(
        'title' => $title,
        'description' => $description,
        'url' => $url
    );
    
    // บันทึกลงฐานข้อมูล
    update_option('oitform_indicators', $indicators);
    
    // ส่งผลลัพธ์กลับ
    wp_send_json_success(array(
        'content' => $indicators[$indicator_index]['content_items'][$content_index]
    ));
}
add_action('wp_ajax_oitform_edit_content', 'oitform_edit_content');

// ลบเนื้อหา
function oitform_delete_content() {
    // ตรวจสอบ nonce
    check_ajax_referer('oitform-nonce', 'security');
    
    // ตรวจสอบสิทธิ์
    if(!current_user_can('manage_options')) {
        wp_send_json_error('ไม่มีสิทธิ์ดำเนินการ');
    }
    
    $indicator_index = intval($_POST['indicator_index']);
    $content_index = intval($_POST['content_index']);
    
    // ดึงข้อมูลตัวชี้วัดที่มีอยู่
    $indicators = get_option('oitform_indicators', array());
    
    // ตรวจสอบว่ามีตัวชี้วัดและเนื้อหานี้หรือไม่
    if(!isset($indicators[$indicator_index]) || !isset($indicators[$indicator_index]['content_items'][$content_index])) {
        wp_send_json_error('ไม่พบเนื้อหา');
    }
    
    // ลบเนื้อหา
    array_splice($indicators[$indicator_index]['content_items'], $content_index, 1);
    
    // บันทึกลงฐานข้อมูล
    update_option('oitform_indicators', $indicators);
    
    // ส่งผลลัพธ์กลับ
    wp_send_json_success();
}
add_action('wp_ajax_oitform_delete_content', 'oitform_delete_content');



/***** เพิ่มลิงค์หน่วยงาน ภายใน/ภายนอก ******/

// Don't allow direct access to the file
if (!defined('ABSPATH')) {
    exit;
}

// Enqueue necessary scripts and styles
function org_links_enqueue_scripts() {
    // ตรวจสอบว่ากำลังอยู่ในหน้า admin หรือไม่
    $is_admin_page = is_admin() && isset($_GET['page']) && $_GET['page'] === 'org-links-settings';
    
    // Enqueue styles for frontend and admin
    if (!is_admin() || $is_admin_page) {
        wp_enqueue_style('org-links-style', get_stylesheet_directory_uri() . '/css/org-links.css', array(), '1.0.1');
        wp_enqueue_style('org-links-modal-style', get_stylesheet_directory_uri() . '/css/org-links-modal.css', array(), '1.0.1');
    }
    
    // Admin only styles
    if ($is_admin_page) {
        wp_enqueue_style('org-links-admin-style', get_stylesheet_directory_uri() . '/css/org-links-admin.css', array(), '1.0.1');
    }
    
    // Enqueue main script for frontend and admin
    if (!is_admin() || $is_admin_page) {
        wp_enqueue_media(); // เพิ่ม media uploader ทั้งใน frontend และ admin
        wp_enqueue_script('org-links-script', get_stylesheet_directory_uri() . '/js/organization-links.js', array('jquery', 'jquery-ui-sortable'), '1.0.1', true);
        
        // Pass data to JavaScript
        wp_localize_script('org-links-script', 'org_links_data', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('org_links_nonce'),
            'admin_nonce' => wp_create_nonce('org_links_admin_nonce'),
            'is_admin' => is_admin() ? 'true' : 'false',
            'can_manage' => current_user_can('manage_options') ? 'true' : 'false'
        ));
    }
}
add_action('wp_enqueue_scripts', 'org_links_enqueue_scripts');
add_action('admin_enqueue_scripts', 'org_links_enqueue_scripts');

/**
 * Create custom database table on plugin activation or theme setup
 */
function org_links_create_table() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'organization_links';
    
    // ตรวจสอบว่าตารางมีอยู่แล้วหรือไม่
    if ($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {
        $charset_collate = $wpdb->get_charset_collate();
        
        $sql = "CREATE TABLE $table_name (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            title text NOT NULL,
            logo text NOT NULL,
            url varchar(255) NOT NULL,
            type varchar(20) NOT NULL,
            order_num int(11) DEFAULT 0,
            PRIMARY KEY  (id)
        ) $charset_collate;";
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        dbDelta($sql);
    }
}

// สำหรับเริ่มต้นเมื่อใช้เป็น plugin
register_activation_hook(__FILE__, 'org_links_create_table');

// สำหรับใช้ใน theme's functions.php
add_action('after_switch_theme', 'org_links_create_table');
add_action('after_setup_theme', function() {
    // ตรวจสอบว่าเคยสร้างตารางหรือยัง (เก็บค่าใน option)
    if (!get_option('org_links_table_created')) {
        org_links_create_table();
        update_option('org_links_table_created', true);
    }
});

// Register AJAX handlers
function org_links_get_items() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'org_links_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        return;
    }
    
    // รับพารามิเตอร์
    $view = isset($_POST['view']) ? sanitize_text_field($_POST['view']) : 'card';
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $filter_type = isset($_POST['filter_type']) ? sanitize_text_field($_POST['filter_type']) : 'all';
    
    try {
        global $wpdb;
        $table_name = $wpdb->prefix . 'organization_links';
        
        // ตรวจสอบว่าตารางมีอยู่หรือไม่
        if ($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {
            // สร้างตารางหากยังไม่มี
            org_links_create_table();
            
            // ส่งคืนข้อความว่าไม่มีข้อมูล (เพราะเพิ่งสร้างตาราง)
            wp_send_json_success(array(
                'html' => '<div class="org-links-no-results">ยังไม่มีข้อมูลหน่วยงาน กรุณาเพิ่มข้อมูลใหม่</div>'
            ));
            return;
        }
        
        // สร้างคำสั่ง WHERE
        $where = array();
        $params = array();
        
        // เพิ่มเงื่อนไขการค้นหา
        if (!empty($search)) {
            $where[] = "title LIKE %s";
            $params[] = '%' . $wpdb->esc_like($search) . '%';
        }
        
        // เพิ่มตัวกรองประเภท
        if ($filter_type !== 'all') {
            $where[] = "type = %s";
            $params[] = $filter_type;
        }
        
        // สร้างคำสั่ง SQL
        $where_clause = !empty($where) ? "WHERE " . implode(" AND ", $where) : "";
        $sql = "SELECT * FROM {$table_name} {$where_clause} ORDER BY order_num ASC, title ASC";
        
        // ใส่พารามิเตอร์ในคำสั่ง SQL
        if (!empty($params)) {
            $sql = $wpdb->prepare($sql, $params);
        }
        
        // ทำการ query
        $items = $wpdb->get_results($sql, ARRAY_A);
        
        // สร้าง HTML response
        ob_start();
        
        if (empty($items)) {
            echo '<div class="org-links-no-results">ไม่พบข้อมูลที่ค้นหา</div>';
        } else {
            // แบ่งรายการตามประเภท
            $internal_items = array_filter($items, function($item) {
                return $item['type'] === 'internal';
            });
            
            $external_items = array_filter($items, function($item) {
                return $item['type'] === 'external';
            });
            
            if ($view == 'card') {
                // แสดงแบบการ์ด
                if (!empty($internal_items)) {
                    echo '<div class="org-links-section">';
                    echo '<h3 class="org-links-section-title">หน่วยงานภายใน</h3>';
                    echo '<div class="org-links-grid">';
                    foreach ($internal_items as $item) {
                        ?>
                        <div class="org-links-card internal">
                            <a href="<?php echo esc_url($item['url']); ?>" target="_blank" rel="noopener">
                                <div class="org-links-logo">
                                    <img src="<?php echo esc_url($item['logo']); ?>" alt="<?php echo esc_attr($item['title']); ?>">
                                </div>
                                <h3 class="org-links-title"><?php echo esc_html($item['title']); ?></h3>
                            </a>
                        </div>
                        <?php
                    }
                    echo '</div>';
                    echo '</div>';
                }
                
                if (!empty($external_items)) {
                    echo '<div class="org-links-section">';
                    echo '<h3 class="org-links-section-title">หน่วยงานภายนอก</h3>';
                    echo '<div class="org-links-grid">';
                    foreach ($external_items as $item) {
                        ?>
                        <div class="org-links-card external">
                            <a href="<?php echo esc_url($item['url']); ?>" target="_blank" rel="noopener">
                                <div class="org-links-logo">
                                    <img src="<?php echo esc_url($item['logo']); ?>" alt="<?php echo esc_attr($item['title']); ?>">
                                </div>
                                <h3 class="org-links-title"><?php echo esc_html($item['title']); ?></h3>
                            </a>
                        </div>
                        <?php
                    }
                    echo '</div>';
                    echo '</div>';
                }
            } else {
                // แสดงแบบรายการ
                echo '<div class="org-links-list">';
                
                if (!empty($internal_items)) {
                    echo '<div class="org-links-list-section">';
                    echo '<h3 class="org-links-section-title">หน่วยงานภายใน</h3>';
                    foreach ($internal_items as $item) {
                        ?>
                        <div class="org-links-list-item internal">
                            <a href="<?php echo esc_url($item['url']); ?>" target="_blank" rel="noopener">
                                <div class="org-links-list-logo">
                                    <img src="<?php echo esc_url($item['logo']); ?>" alt="<?php echo esc_attr($item['title']); ?>">
                                </div>
                                <h3 class="org-links-list-title"><?php echo esc_html($item['title']); ?></h3>
                            </a>
                        </div>
                        <?php
                    }
                    echo '</div>';
                }
                
                if (!empty($external_items)) {
                    echo '<div class="org-links-list-section">';
                    echo '<h3 class="org-links-section-title">หน่วยงานภายนอก</h3>';
                    foreach ($external_items as $item) {
                        ?>
                        <div class="org-links-list-item external">
                            <a href="<?php echo esc_url($item['url']); ?>" target="_blank" rel="noopener">
                                <div class="org-links-list-logo">
                                    <img src="<?php echo esc_url($item['logo']); ?>" alt="<?php echo esc_attr($item['title']); ?>">
                                </div>
                                <h3 class="org-links-list-title"><?php echo esc_html($item['title']); ?></h3>
                            </a>
                        </div>
                        <?php
                    }
                    echo '</div>';
                }
                
                echo '</div>';
            }
        }
        
        $html = ob_get_clean();
        
        // ส่งคืนข้อมูล HTML
        wp_send_json_success(array(
            'html' => $html
        ));
        
    } catch (Exception $e) {
        // บันทึกข้อผิดพลาดและส่งคืนข้อความผิดพลาด
        error_log('Organization Links Error: ' . $e->getMessage());
        wp_send_json_error(array(
            'message' => 'เกิดข้อผิดพลาดในระบบ: ' . $e->getMessage()
        ));
    }
}
add_action('wp_ajax_org_links_get_items', 'org_links_get_items');
add_action('wp_ajax_nopriv_org_links_get_items', 'org_links_get_items');

// Get organization names for autocomplete
function org_links_get_autocomplete() {
    check_ajax_referer('org_links_nonce', 'nonce');
    
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    
    global $wpdb;
    $table_name = $wpdb->prefix . 'organization_links';
    
    $sql = $wpdb->prepare(
        "SELECT title FROM {$table_name} WHERE title LIKE %s ORDER BY title ASC",
        '%' . $wpdb->esc_like($search) . '%'
    );
    
    $results = $wpdb->get_col($sql);
    
    wp_send_json_success(array(
        'items' => $results
    ));
}
add_action('wp_ajax_org_links_get_autocomplete', 'org_links_get_autocomplete');
add_action('wp_ajax_nopriv_org_links_get_autocomplete', 'org_links_get_autocomplete');

// Register shortcode
function org_links_shortcode($atts) {
    $atts = shortcode_atts(array(
        'title' => 'หน่วยงานที่เกี่ยวข้อง',
        'type' => 'all', // all, internal, external
        'show_add_button' => 'false' // ควบคุมการแสดงปุ่มเพิ่มหน่วยงาน
    ), $atts, 'org_links');
    
    // เตรียมปุ่มเพิ่มหน่วยงาน (แสดงเฉพาะเมื่อผู้ใช้มีสิทธิ์)
    $add_button_html = '';
    if ($atts['show_add_button'] === 'true' && current_user_can('manage_options')) {
        $add_button_html = '
        <div class="org-links-add-button-container">
            <button type="button" class="org-links-add-button" id="orgLinksAddButton">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
                เพิ่มหน่วยงาน
            </button>
        </div>';
    }
    
    // Start output buffering
    ob_start();
    ?>
    <div class="org-links-container" data-type="<?php echo esc_attr($atts['type']); ?>">
        <div class="org-links-header">
            <h2 class="org-links-main-title"><?php echo esc_html($atts['title']); ?></h2>
            
            <div class="org-links-controls">
                <div class="org-links-search">
                    <input type="text" id="org-links-search-input" placeholder="ค้นหาหน่วยงาน...">
                    <div class="org-links-autocomplete"></div>
                </div>
                
                <div class="org-links-filter">
                    <select id="org-links-type-filter">
                        <option value="all">ทั้งหมด</option>
                        <option value="internal">หน่วยงานภายใน</option>
                        <option value="external">หน่วยงานภายนอก</option>
                    </select>
                </div>
                
                <div class="org-links-view-switcher">
                    <button type="button" class="view-btn active" data-view="card" aria-label="Card View">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="7" height="7"></rect><rect x="14" y="3" width="7" height="7"></rect><rect x="14" y="14" width="7" height="7"></rect><rect x="3" y="14" width="7" height="7"></rect></svg>
                    </button>
                    <button type="button" class="view-btn" data-view="list" aria-label="List View">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg>
                    </button>
                </div>
            </div>
            
            <?php echo $add_button_html; ?>
        </div>
        
        <div class="org-links-content">
            <!-- Skeleton loading placeholders -->
            <div class="org-links-skeleton">
                <div class="org-links-skeleton-section">
                    <h3 class="org-links-skeleton-section-title"></h3>
                    <div class="org-links-skeleton-grid">
                        <?php for ($i = 0; $i < 3; $i++) : ?>
                        <div class="org-links-skeleton-card">
                            <div class="org-links-skeleton-logo"></div>
                            <div class="org-links-skeleton-title"></div>
                        </div>
                        <?php endfor; ?>
                    </div>
                </div>
                <div class="org-links-skeleton-section">
                    <h3 class="org-links-skeleton-section-title"></h3>
                    <div class="org-links-skeleton-grid">
                        <?php for ($i = 0; $i < 3; $i++) : ?>
                        <div class="org-links-skeleton-card">
                            <div class="org-links-skeleton-logo"></div>
                            <div class="org-links-skeleton-title"></div>
                        </div>
                        <?php endfor; ?>
                    </div>
                </div>
            </div>
            
            <!-- Content will be loaded here via AJAX -->
            <div class="org-links-items"></div>
        </div>
    </div>
    <?php
    
    // ถ้าผู้ใช้มีสิทธิ์และเปิดใช้งานปุ่มเพิ่ม ให้แสดง modal ด้วย
    if ($atts['show_add_button'] === 'true' && current_user_can('manage_options')) {
        org_links_modal_html();
    }
    
    return ob_get_clean();
}
add_shortcode('org_links', 'org_links_shortcode');

// Create admin form for adding links
function org_links_admin_menu() {
    add_menu_page(
        'Organization Links',
        'Organization Links',
        'manage_options',
        'org-links-settings',
        'org_links_settings_page',
        'dashicons-networking',
        30
    );
}
add_action('admin_menu', 'org_links_admin_menu');

// Admin settings page
function org_links_settings_page() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'organization_links';
    
    // ตรวจสอบว่าตารางมีอยู่หรือไม่
    if ($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {
        org_links_create_table();
    }
    
    // Handle form submission
    if (isset($_POST['org_links_save']) && check_admin_referer('org_links_admin', 'org_links_nonce')) {
        $title = sanitize_text_field($_POST['title']);
        $url = esc_url_raw($_POST['url']);
        $type = sanitize_text_field($_POST['type']);
        
        // Handle logo upload or URL
        if (!empty($_FILES['logo']['name'])) {
            require_once(ABSPATH . 'wp-admin/includes/image.php');
            require_once(ABSPATH . 'wp-admin/includes/file.php');
            require_once(ABSPATH . 'wp-admin/includes/media.php');
            
            $attachment_id = media_handle_upload('logo', 0);
            
            if (is_wp_error($attachment_id)) {
                $logo_url = '';
                $error_message = $attachment_id->get_error_message();
                echo '<div class="notice notice-error"><p>เกิดข้อผิดพลาดในการอัปโหลดไฟล์: ' . esc_html($error_message) . '</p></div>';
            } else {
                $logo_url = wp_get_attachment_url($attachment_id);
            }
        } else {
            $logo_url = sanitize_text_field($_POST['logo_url']);
        }
        
        // Get max order number
        $max_order = $wpdb->get_var("SELECT MAX(order_num) FROM $table_name");
        $order_num = $max_order ? $max_order + 1 : 1;
        
        // Insert new link
        $result = $wpdb->insert(
            $table_name,
            array(
                'title' => $title,
                'logo' => $logo_url,
                'url' => $url,
                'type' => $type,
                'order_num' => $order_num
            ),
            array('%s', '%s', '%s', '%s', '%d')
        );
        
        if ($result) {
            echo '<div class="notice notice-success"><p>บันทึกลิงค์เรียบร้อยแล้ว</p></div>';
        } else {
            echo '<div class="notice notice-error"><p>เกิดข้อผิดพลาดในการบันทึกข้อมูล</p></div>';
        }
    }
    
    // Handle delete action
    if (isset($_GET['action']) && $_GET['action'] == 'delete' && isset($_GET['id']) && check_admin_referer('delete_org_link')) {
        $id = intval($_GET['id']);
        
        $wpdb->delete(
            $table_name,
            array('id' => $id),
            array('%d')
        );
        
        echo '<div class="notice notice-success"><p>ลบลิงค์เรียบร้อยแล้ว</p></div>';
    }
    
    // Get all items
    $items = $wpdb->get_results("SELECT * FROM $table_name ORDER BY order_num ASC, title ASC", ARRAY_A);
    
    // Display settings form and item list
    ?>
    <div class="wrap org-links-admin">
        <h1>Organization Links</h1>
        
        <div class="org-links-admin-container">
            <div class="org-links-admin-list">
                <h2>รายการลิงค์หน่วยงาน</h2>
                
                <!-- ปุ่มเพิ่มหน่วยงานใหม่ -->
                <div class="org-links-add-button-container">
                    <button type="button" class="org-links-add-button" id="orgLinksAddButton">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
                        เพิ่มหน่วยงาน
                    </button>
                </div>
                
                <?php if (empty($items)) : ?>
                    <p>ยังไม่มีรายการลิงค์</p>
                <?php else : ?>
                    <table class="wp-list-table widefat fixed striped">
                        <thead>
                            <tr>
                                <th>โลโก้</th>
                                <th>ชื่อหน่วยงาน</th>
                                <th>URL</th>
                                <th>ประเภท</th>
                                <th>จัดการ</th>
                            </tr>
                        </thead>
                        <tbody id="org-links-sortable">
                            <?php foreach ($items as $item) : ?>
                                <tr data-id="<?php echo esc_attr($item['id']); ?>">
                                    <td class="org-link-logo">
                                        <img src="<?php echo esc_url($item['logo']); ?>" alt="" width="60">
                                    </td>
                                    <td><?php echo esc_html($item['title']); ?></td>
                                    <td><a href="<?php echo esc_url($item['url']); ?>" target="_blank"><?php echo esc_url($item['url']); ?></a></td>
                                    <td><?php echo $item['type'] === 'internal' ? 'หน่วยงานภายใน' : 'หน่วยงานภายนอก'; ?></td>
                                    <td>
                                        <a href="<?php echo wp_nonce_url(add_query_arg(array('action' => 'delete', 'id' => $item['id']), admin_url('admin.php?page=org-links-settings')), 'delete_org_link'); ?>" class="button button-small" onclick="return confirm('คุณแน่ใจหรือไม่ที่ต้องการลบรายการนี้?');">ลบ</a>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                    <p class="description">ลากและวางเพื่อจัดลำดับรายการ</p>
                <?php endif; ?>
            </div>
        </div>
        
        <div class="org-links-shortcode-info">
            <h2>วิธีใช้งาน Shortcode</h2>
            <p>คัดลอก shortcode ด้านล่างนี้ไปวางในหน้าเว็บที่ต้องการให้แสดงลิงค์หน่วยงาน:</p>
            <code>[org_links title="หน่วยงานที่เกี่ยวข้อง" type="all"]</code>
            
            <p>หากต้องการให้แสดงปุ่มเพิ่มหน่วยงานในหน้าเว็บ (สำหรับผู้ดูแลระบบเท่านั้น):</p>
            <code>[org_links title="หน่วยงานที่เกี่ยวข้อง" type="all" show_add_button="true"]</code>
            
            <p>พารามิเตอร์:</p>
            <ul>
                <li><code>title</code> - หัวข้อของส่วนแสดงลิงค์หน่วยงาน</li>
                <li><code>type</code> - ประเภทของหน่วยงานที่ต้องการแสดง (<code>all</code> = ทั้งหมด, <code>internal</code> = หน่วยงานภายใน, <code>external</code> = หน่วยงานภายนอก)</li>
                <li><code>show_add_button</code> - แสดงปุ่มเพิ่มหน่วยงานหรือไม่ (<code>true</code> หรือ <code>false</code>)</li>
            </ul>
        </div>
    </div>
    
    <?php
    // แสดง Modal ใน admin page
    org_links_modal_html();
}

// Update item order via AJAX
function org_links_update_order() {
    check_ajax_referer('org_links_admin_nonce', 'nonce');
    
    if (!current_user_can('manage_options')) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์เพียงพอ'));
        return;
    }
    
    $items = isset($_POST['items']) ? $_POST['items'] : array();
    
    if (empty($items)) {
        wp_send_json_error(array('message' => 'ไม่มีข้อมูลที่จะบันทึก'));
        return;
    }
    
    global $wpdb;
    $table_name = $wpdb->prefix . 'organization_links';
    
    $success = true;
    
    foreach ($items as $index => $id) {
        $id = intval($id);
        $order = intval($index);
        
        $result = $wpdb->update(
            $table_name,
            array('order_num' => $order),
            array('id' => $id),
            array('%d'),
            array('%d')
        );
        
        if ($result === false) {
            $success = false;
        }
    }
    
    if ($success) {
        wp_send_json_success(array('message' => 'บันทึกการเรียงลำดับเรียบร้อยแล้ว'));
    } else {
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดในการบันทึกลำดับ'));
    }
}
add_action('wp_ajax_org_links_update_order', 'org_links_update_order');

// Add modal HTML
function org_links_modal_html() {
    ?>
    <!-- Modal Popup -->
    <div class="org-links-modal" id="orgLinksModal">
        <div class="org-links-modal-content">
            <div class="org-links-modal-header">
                <h2>เพิ่มองค์กรหน่วยงานใหม่</h2>
                <button type="button" class="org-links-modal-close" id="orgLinksModalClose">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                </button>
            </div>
            
            <div class="org-links-modal-body">
                <form id="orgLinksForm" method="post" enctype="multipart/form-data">
                    <?php wp_nonce_field('org_links_admin', 'org_links_nonce'); ?>
                    
                    <div class="org-links-form-group">
                        <label for="title">
                            ชื่อหน่วยงาน
                            <span class="required">*</span>
                        </label>
                        <input type="text" name="title" id="title" required>
                    </div>
                    
                    <div class="org-links-form-group">
                        <label for="url">
                            URL
                            <span class="required">*</span>
                        </label>
                        <input type="url" name="url" id="url" required>
                    </div>
                    
                    <div class="org-links-form-group">
                        <label for="logo">
                            โลโก้
                            <span class="required">*</span>
                        </label>
                        <div class="org-links-logo-upload">
                            <div class="org-links-logo-preview" id="logoPreview"></div>
                            <div class="org-links-logo-actions">
                                <button type="button" class="org-links-logo-select" id="logoSelect">เลือกรูปภาพ</button>
                                <button type="button" class="org-links-logo-remove" id="logoRemove">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>
                                </button>
                            </div>
                            <input type="hidden" name="logo_url" id="logoUrl">
                            <p class="org-links-logo-hint">ขนาดที่แนะนำ: 300×150 พิกเซล</p>
                        </div>
                    </div>
                    
                    <div class="org-links-form-group">
                        <label for="type">
                            ประเภทหน่วยงาน
                            <span class="required">*</span>
                        </label>
                        <div class="org-links-radio-group">
                            <label class="org-links-radio">
                                <input type="radio" name="type" value="internal" checked>
                                <span class="org-links-radio-icon internal"></span>
                                <span class="org-links-radio-label">หน่วยงานภายใน</span>
                            </label>
                            <label class="org-links-radio">
                                <input type="radio" name="type" value="external">
                                <span class="org-links-radio-icon external"></span>
                                <span class="org-links-radio-label">หน่วยงานภายนอก</span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="org-links-modal-footer">
                        <button type="button" class="org-links-modal-cancel" id="orgLinksModalCancel">ยกเลิก</button>
                        <button type="submit" name="org_links_save" class="org-links-modal-submit">บันทึก</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <!-- Modal backdrop -->
    <div class="org-links-modal-backdrop" id="orgLinksModalBackdrop"></div>
    <?php
}

// Add AJAX handler for form submission
function org_links_add_item() {
    // ตรวจสอบ nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'org_links_admin')) {
        wp_send_json_error(array('message' => 'การตรวจสอบความปลอดภัยล้มเหลว'));
        return;
    }
    
    if (!current_user_can('manage_options')) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์เพียงพอ'));
        return;
    }
    
    // ดึงและตรวจสอบข้อมูล
    $title = isset($_POST['title']) ? sanitize_text_field($_POST['title']) : '';
    $url = isset($_POST['url']) ? esc_url_raw($_POST['url']) : '';
    $logo_url = isset($_POST['logo_url']) ? esc_url_raw($_POST['logo_url']) : '';
    $type = isset($_POST['type']) ? sanitize_text_field($_POST['type']) : 'internal';
    
    if (empty($title) || empty($url) || empty($logo_url)) {
        wp_send_json_error(array('message' => 'กรุณากรอกข้อมูลให้ครบถ้วน'));
        return;
    }
    
    try {
        global $wpdb;
        $table_name = $wpdb->prefix . 'organization_links';
        
        // ตรวจสอบว่าตารางมีอยู่หรือไม่
        if ($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {
            org_links_create_table();
        }
        
        // ดึงลำดับสูงสุด
        $max_order = $wpdb->get_var("SELECT MAX(order_num) FROM $table_name");
        $order_num = $max_order ? $max_order + 1 : 1;
        
        // เพิ่มข้อมูลใหม่
        $result = $wpdb->insert(
            $table_name,
            array(
                'title' => $title,
                'logo' => $logo_url,
                'url' => $url,
                'type' => $type,
                'order_num' => $order_num
            ),
            array('%s', '%s', '%s', '%s', '%d')
        );
        
        if ($result) {
            // บันทึกสำเร็จ
            wp_send_json_success(array(
                'message' => 'บันทึกหน่วยงานเรียบร้อยแล้ว',
                'item' => array(
                    'id' => $wpdb->insert_id,
                    'title' => $title,
                    'logo' => $logo_url,
                    'url' => $url,
                    'type' => $type,
                    'order_num' => $order_num
                )
            ));
        } else {
            // มีข้อผิดพลาด
            wp_send_json_error(array(
                'message' => 'เกิดข้อผิดพลาดในการบันทึกข้อมูล: ' . $wpdb->last_error
            ));
        }
        
    } catch (Exception $e) {
        // บันทึกข้อผิดพลาดและส่งคืนข้อความผิดพลาด
        error_log('Organization Links Error: ' . $e->getMessage());
        wp_send_json_error(array(
            'message' => 'เกิดข้อผิดพลาดในระบบ: ' . $e->getMessage()
        ));
    }
}
add_action('wp_ajax_org_links_add_item', 'org_links_add_item');


/******* CKAN *********/

/***** ฟังก์ชั่น เพิ่มหมดวหมู่ องค์กร (corg) ******/

// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function corg_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/corg-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/corg-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/corg-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/corg-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('corg-add-taxo', $js_path, array('jquery'), '1.0.0', true);
    wp_enqueue_style('corg-add-taxo', $css_path, array(), '1.0.0');
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('corg-add-taxo', 'corg_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('corg_add_term_nonce'),
    ));
}
add_action('wp_enqueue_scripts', 'corg_enqueue_assets');

/**
 * Shortcode function to display the "Add Organization" button
 */
function corg_add_term_shortcode() {
    ob_start();
    ?>
    <div class="corg-add-container">
        <button id="corg-add-button" class="corg-button">เพิ่มองค์กร</button>
        
        <!-- Modal Popup -->
        <div id="corg-modal" class="corg-modal">
            <div class="corg-modal-content">
                <span class="corg-close">&times;</span>
                <h2>เพิ่มองค์กร</h2>
                <form id="corg-add-form">
                    <div class="corg-form-group">
                        <label for="corg-name">กำหนดชื่อองค์กร:</label>
                        <input type="text" id="corg-name" name="corg-name" required>
                    </div>
                    <div class="corg-form-group">
                        <label for="corg-slug">Term slug URL:</label>
                        <div class="corg-slug-container">
                            <span class="corg-slug-prefix">corg-</span>
                            <input type="text" id="corg-slug" name="corg-slug" readonly>
                        </div>
                        <p class="corg-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="corg-form-actions">
                        <button type="button" class="corg-button corg-cancel">ยกเลิก</button>
                        <button type="submit" class="corg-button corg-submit">บันทึก</button>
                    </div>
                </form>
                <div id="corg-message" class="corg-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('corg_add_term', 'corg_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function corg_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('corg_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        'taxonomy' => 'corg',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_corg_get_term_count', 'corg_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_corg_get_term_count', 'corg_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function corg_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('corg_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์ในการเพิ่มองค์กร'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array('message' => 'กรุณากรอกชื่อองค์กร'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        'taxonomy' => 'corg',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'corg-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'corg',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array('message' => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            'message' => 'เพิ่มองค์กรสำเร็จแล้ว',
            'term_id' => $term['term_id'],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_corg_add_term', 'corg_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms


/***** ฟังก์ชั่น เพิ่มหมดวหมู่ กลุ่ม (cgroup) ******/

// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function cgroup_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/cgroup-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/cgroup-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/cgroup-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/cgroup-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('cgroup-add-taxo', $js_path, array('jquery'), '1.0.0', true);
    wp_enqueue_style('cgroup-add-taxo', $css_path, array(), '1.0.0');
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('cgroup-add-taxo', 'cgroup_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('cgroup_add_term_nonce'),
    ));
}
add_action('wp_enqueue_scripts', 'cgroup_enqueue_assets');

/**
 * Shortcode function to display the "Add Group" button
 */
function cgroup_add_term_shortcode() {
    ob_start();
    ?>
    <div class="cgroup-add-container">
        <button id="cgroup-add-button" class="cgroup-button">เพิ่มกลุ่ม</button>
        
        <!-- Modal Popup -->
        <div id="cgroup-modal" class="cgroup-modal">
            <div class="cgroup-modal-content">
                <span class="cgroup-close">&times;</span>
                <h2>เพิ่มกลุ่ม</h2>
                <form id="cgroup-add-form">
                    <div class="cgroup-form-group">
                        <label for="cgroup-name">กำหนดชื่อกลุ่ม:</label>
                        <input type="text" id="cgroup-name" name="cgroup-name" required>
                    </div>
                    <div class="cgroup-form-group">
                        <label for="cgroup-slug">Term slug URL:</label>
                        <div class="cgroup-slug-container">
                            <span class="cgroup-slug-prefix">cgroup-</span>
                            <input type="text" id="cgroup-slug" name="cgroup-slug" readonly>
                        </div>
                        <p class="cgroup-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="cgroup-form-actions">
                        <button type="button" class="cgroup-button cgroup-cancel">ยกเลิก</button>
                        <button type="submit" class="cgroup-button cgroup-submit">บันทึก</button>
                    </div>
                </form>
                <div id="cgroup-message" class="cgroup-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('cgroup_add_term', 'cgroup_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function cgroup_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cgroup_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        'taxonomy' => 'cgroup',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_cgroup_get_term_count', 'cgroup_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_cgroup_get_term_count', 'cgroup_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function cgroup_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cgroup_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์ในการเพิ่มกลุ่ม'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array('message' => 'กรุณากรอกชื่อกลุ่ม'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        'taxonomy' => 'cgroup',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'cgroup-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'cgroup',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array('message' => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            'message' => 'เพิ่มกลุ่มสำเร็จแล้ว',
            'term_id' => $term['term_id'],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_cgroup_add_term', 'cgroup_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms


/***** ฟังก์ชั่น เพิ่มหมดวหมู่ ชุดข้้อมูล (cdata) ******/

// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function cdata_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/cdata-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/cdata-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/cdata-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/cdata-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('cdata-add-taxo', $js_path, array('jquery'), '1.0.0', true);
    wp_enqueue_style('cdata-add-taxo', $css_path, array(), '1.0.0');
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('cdata-add-taxo', 'cdata_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('cdata_add_term_nonce'),
    ));
}
add_action('wp_enqueue_scripts', 'cdata_enqueue_assets');

/**
 * Shortcode function to display the "Add Data Set Type" button
 */
function cdata_add_term_shortcode() {
    ob_start();
    ?>
    <div class="cdata-add-container">
        <button id="cdata-add-button" class="cdata-button">เพิ่มประเภทชุดข้อมูล</button>
        
        <!-- Modal Popup -->
        <div id="cdata-modal" class="cdata-modal">
            <div class="cdata-modal-content">
                <span class="cdata-close">&times;</span>
                <h2>เพิ่มประเภทชุดข้อมูล</h2>
                <form id="cdata-add-form">
                    <div class="cdata-form-group">
                        <label for="cdata-name">กำหนดชื่อชุดข้อมูล:</label>
                        <input type="text" id="cdata-name" name="cdata-name" required>
                    </div>
                    <div class="cdata-form-group">
                        <label for="cdata-slug">Term slug URL:</label>
                        <div class="cdata-slug-container">
                            <span class="cdata-slug-prefix">cdata-</span>
                            <input type="text" id="cdata-slug" name="cdata-slug" readonly>
                        </div>
                        <p class="cdata-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="cdata-form-actions">
                        <button type="button" class="cdata-button cdata-cancel">ยกเลิก</button>
                        <button type="submit" class="cdata-button cdata-submit">บันทึก</button>
                    </div>
                </form>
                <div id="cdata-message" class="cdata-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('cdata_add_term', 'cdata_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function cdata_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cdata_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        'taxonomy' => 'cdata',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_cdata_get_term_count', 'cdata_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_cdata_get_term_count', 'cdata_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function cdata_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cdata_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์ในการเพิ่มประเภทชุดข้อมูล'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array('message' => 'กรุณากรอกชื่อชุดข้อมูล'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        'taxonomy' => 'cdata',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'cdata-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'cdata',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array('message' => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            'message' => 'เพิ่มประเภทชุดข้อมูลสำเร็จแล้ว',
            'term_id' => $term['term_id'],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_cdata_add_term', 'cdata_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms


/***** ฟังก์ชั่น เพิ่มหมวดหมู่ตามธรรมาภิบาลข้อมูล (cgov) ******/

// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function cgov_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/cgov-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/cgov-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/cgov-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/cgov-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('cgov-add-taxo', $js_path, array('jquery'), '1.0.0', true);
    wp_enqueue_style('cgov-add-taxo', $css_path, array(), '1.0.0');
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('cgov-add-taxo', 'cgov_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('cgov_add_term_nonce'),
    ));
}
add_action('wp_enqueue_scripts', 'cgov_enqueue_assets');

/**
 * Shortcode function to display the "Add Data Governance Category" button
 */
function cgov_add_term_shortcode() {
    ob_start();
    ?>
    <div class="cgov-add-container">
        <button id="cgov-add-button" class="cgov-button">เพิ่มหมวดหมู่ตามธรรมาภิบาลข้อมูล</button>
        
        <!-- Modal Popup -->
        <div id="cgov-modal" class="cgov-modal">
            <div class="cgov-modal-content">
                <span class="cgov-close">&times;</span>
                <h2>เพิ่มหมวดหมู่ตามธรรมาภิบาลข้อมูล</h2>
                <form id="cgov-add-form">
                    <div class="cgov-form-group">
                        <label for="cgov-name">กำหนดชื่อหมวดหมู่ตามธรรมาภิบาลข้อมูล:</label>
                        <input type="text" id="cgov-name" name="cgov-name" required>
                    </div>
                    <div class="cgov-form-group">
                        <label for="cgov-slug">Term slug URL:</label>
                        <div class="cgov-slug-container">
                            <span class="cgov-slug-prefix">cgov-</span>
                            <input type="text" id="cgov-slug" name="cgov-slug" readonly>
                        </div>
                        <p class="cgov-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="cgov-form-actions">
                        <button type="button" class="cgov-button cgov-cancel">ยกเลิก</button>
                        <button type="submit" class="cgov-button cgov-submit">บันทึก</button>
                    </div>
                </form>
                <div id="cgov-message" class="cgov-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('cgov_add_term', 'cgov_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function cgov_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cgov_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        'taxonomy' => 'cgov',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_cgov_get_term_count', 'cgov_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_cgov_get_term_count', 'cgov_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function cgov_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cgov_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์ในการเพิ่มหมวดหมู่ตามธรรมาภิบาลข้อมูล'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array('message' => 'กรุณากรอกชื่อหมวดหมู่ตามธรรมาภิบาลข้อมูล'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        'taxonomy' => 'cgov',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'cgov-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'cgov',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array('message' => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            'message' => 'เพิ่มหมวดหมู่ตามธรรมาภิบาลข้อมูลสำเร็จแล้ว',
            'term_id' => $term['term_id'],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_cgov_add_term', 'cgov_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms


/***** ฟังก์ชั่น เพิ่มหมวดหมู่การเข้าถึง (caccess) ******/

// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function caccess_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/caccess-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/caccess-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/caccess-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/caccess-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('caccess-add-taxo', $js_path, array('jquery'), '1.0.0', true);
    wp_enqueue_style('caccess-add-taxo', $css_path, array(), '1.0.0');
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('caccess-add-taxo', 'caccess_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('caccess_add_term_nonce'),
    ));
}
add_action('wp_enqueue_scripts', 'caccess_enqueue_assets');

/**
 * Shortcode function to display the "Add Access" button
 */
function caccess_add_term_shortcode() {
    ob_start();
    ?>
    <div class="caccess-add-container">
        <button id="caccess-add-button" class="caccess-button">เพิ่มการเข้าถึง</button>
        
        <!-- Modal Popup -->
        <div id="caccess-modal" class="caccess-modal">
            <div class="caccess-modal-content">
                <span class="caccess-close">&times;</span>
                <h2>เพิ่มการเข้าถึง</h2>
                <form id="caccess-add-form">
                    <div class="caccess-form-group">
                        <label for="caccess-name">กำหนดชื่อการเข้าถึง:</label>
                        <input type="text" id="caccess-name" name="caccess-name" required>
                    </div>
                    <div class="caccess-form-group">
                        <label for="caccess-slug">Term slug URL:</label>
                        <div class="caccess-slug-container">
                            <span class="caccess-slug-prefix">caccess-</span>
                            <input type="text" id="caccess-slug" name="caccess-slug" readonly>
                        </div>
                        <p class="caccess-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="caccess-form-actions">
                        <button type="button" class="caccess-button caccess-cancel">ยกเลิก</button>
                        <button type="submit" class="caccess-button caccess-submit">บันทึก</button>
                    </div>
                </form>
                <div id="caccess-message" class="caccess-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('caccess_add_term', 'caccess_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function caccess_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('caccess_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        'taxonomy' => 'caccess',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_caccess_get_term_count', 'caccess_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_caccess_get_term_count', 'caccess_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function caccess_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('caccess_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์ในการเพิ่มการเข้าถึง'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array('message' => 'กรุณากรอกชื่อการเข้าถึง'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        'taxonomy' => 'caccess',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'caccess-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'caccess',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array('message' => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            'message' => 'เพิ่มการเข้าถึงสำเร็จแล้ว',
            'term_id' => $term['term_id'],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_caccess_add_term', 'caccess_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms


/***** ฟังก์ชั่น เพิ่มรูปแบบ (cformat) ******/


// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function cformat_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/cformat-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/cformat-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/cformat-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/cformat-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('cformat-add-taxo', $js_path, array('jquery'), '1.0.0', true);
    wp_enqueue_style('cformat-add-taxo', $css_path, array(), '1.0.0');
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('cformat-add-taxo', 'cformat_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('cformat_add_term_nonce'),
    ));
}
add_action('wp_enqueue_scripts', 'cformat_enqueue_assets');

/**
 * Shortcode function to display the "Add Format" button
 */
function cformat_add_term_shortcode() {
    ob_start();
    ?>
    <div class="cformat-add-container">
        <button id="cformat-add-button" class="cformat-button">เพิ่มรูปแบบ</button>
        
        <!-- Modal Popup -->
        <div id="cformat-modal" class="cformat-modal">
            <div class="cformat-modal-content">
                <span class="cformat-close">&times;</span>
                <h2>เพิ่มรูปแบบ</h2>
                <form id="cformat-add-form">
                    <div class="cformat-form-group">
                        <label for="cformat-name">กำหนดรูปแบบ:</label>
                        <input type="text" id="cformat-name" name="cformat-name" required>
                    </div>
                    <div class="cformat-form-group">
                        <label for="cformat-slug">Term slug URL:</label>
                        <div class="cformat-slug-container">
                            <span class="cformat-slug-prefix">cformat-</span>
                            <input type="text" id="cformat-slug" name="cformat-slug" readonly>
                        </div>
                        <p class="cformat-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="cformat-form-actions">
                        <button type="button" class="cformat-button cformat-cancel">ยกเลิก</button>
                        <button type="submit" class="cformat-button cformat-submit">บันทึก</button>
                    </div>
                </form>
                <div id="cformat-message" class="cformat-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('cformat_add_term', 'cformat_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function cformat_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cformat_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        'taxonomy' => 'cformat',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_cformat_get_term_count', 'cformat_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_cformat_get_term_count', 'cformat_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function cformat_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('cformat_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์ในการเพิ่มรูปแบบ'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array('message' => 'กรุณากรอกรูปแบบ'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        'taxonomy' => 'cformat',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'cformat-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'cformat',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array('message' => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            'message' => 'เพิ่มรูปแบบสำเร็จแล้ว',
            'term_id' => $term['term_id'],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_cformat_add_term', 'cformat_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms



/***** ฟังก์ชั่น เพิ่มสัญญาอนุญาต (clicense) ******/

// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function clicense_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/clicense-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/clicense-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/clicense-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/clicense-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('clicense-add-taxo', $js_path, array('jquery'), '1.0.0', true);
    wp_enqueue_style('clicense-add-taxo', $css_path, array(), '1.0.0');
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('clicense-add-taxo', 'clicense_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('clicense_add_term_nonce'),
    ));
}
add_action('wp_enqueue_scripts', 'clicense_enqueue_assets');

/**
 * Shortcode function to display the "Add License" button
 */
function clicense_add_term_shortcode() {
    ob_start();
    ?>
    <div class="clicense-add-container">
        <button id="clicense-add-button" class="clicense-button">เพิ่มสัญญาอนุญาต</button>
        
        <!-- Modal Popup -->
        <div id="clicense-modal" class="clicense-modal">
            <div class="clicense-modal-content">
                <span class="clicense-close">&times;</span>
                <h2>เพิ่มสัญญาอนุญาต</h2>
                <form id="clicense-add-form">
                    <div class="clicense-form-group">
                        <label for="clicense-name">กำหนดชื่อสัญญาอนุญาต:</label>
                        <input type="text" id="clicense-name" name="clicense-name" required>
                    </div>
                    <div class="clicense-form-group">
                        <label for="clicense-slug">Term slug URL:</label>
                        <div class="clicense-slug-container">
                            <span class="clicense-slug-prefix">clicense-</span>
                            <input type="text" id="clicense-slug" name="clicense-slug" readonly>
                        </div>
                        <p class="clicense-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="clicense-form-actions">
                        <button type="button" class="clicense-button clicense-cancel">ยกเลิก</button>
                        <button type="submit" class="clicense-button clicense-submit">บันทึก</button>
                    </div>
                </form>
                <div id="clicense-message" class="clicense-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('clicense_add_term', 'clicense_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function clicense_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('clicense_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        'taxonomy' => 'clicense',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_clicense_get_term_count', 'clicense_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_clicense_get_term_count', 'clicense_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function clicense_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('clicense_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์ในการเพิ่มสัญญาอนุญาต'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array('message' => 'กรุณากรอกชื่อสัญญาอนุญาต'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        'taxonomy' => 'clicense',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'clicense-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'clicense',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array('message' => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            'message' => 'เพิ่มสัญญาอนุญาตสำเร็จแล้ว',
            'term_id' => $term['term_id'],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_clicense_add_term', 'clicense_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms


/***** ฟังก์ชั่น เพิ่มแท็ค (ctag) ******/


// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register and enqueue scripts and styles
 */
function ctag_enqueue_assets() {
    // Check if we're in a child theme
    if (get_stylesheet_directory() !== get_template_directory()) {
        $js_path = get_stylesheet_directory_uri() . '/js/ctag-add-taxo.js';
        $css_path = get_stylesheet_directory_uri() . '/css/ctag-add-taxo.css';
    } else {
        // Assume we're in a plugin
        $js_path = plugins_url('/js/ctag-add-taxo.js', __FILE__);
        $css_path = plugins_url('/css/ctag-add-taxo.css', __FILE__);
    }
    
    wp_enqueue_script('ctag-add-taxo', $js_path, array('jquery'), '1.0.0', true);
    wp_enqueue_style('ctag-add-taxo', $css_path, array(), '1.0.0');
    
    // Add the WordPress AJAX URL to our script
    wp_localize_script('ctag-add-taxo', 'ctag_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('ctag_add_term_nonce'),
    ));
}
add_action('wp_enqueue_scripts', 'ctag_enqueue_assets');

/**
 * Shortcode function to display the "Add Tag" button
 */
function ctag_add_term_shortcode() {
    ob_start();
    ?>
    <div class="ctag-add-container">
        <button id="ctag-add-button" class="ctag-button">เพิ่มแท็ค</button>
        
        <!-- Modal Popup -->
        <div id="ctag-modal" class="ctag-modal">
            <div class="ctag-modal-content">
                <span class="ctag-close">&times;</span>
                <h2>เพิ่มแท็ค</h2>
                <form id="ctag-add-form">
                    <div class="ctag-form-group">
                        <label for="ctag-name">กำหนดชื่อแท็ค:</label>
                        <input type="text" id="ctag-name" name="ctag-name" required>
                    </div>
                    <div class="ctag-form-group">
                        <label for="ctag-slug">Term slug URL:</label>
                        <div class="ctag-slug-container">
                            <span class="ctag-slug-prefix">ctag-</span>
                            <input type="text" id="ctag-slug" name="ctag-slug" readonly>
                        </div>
                        <p class="ctag-slug-desc">Slug จะถูกสร้างอัตโนมัติ</p>
                    </div>
                    <div class="ctag-form-actions">
                        <button type="button" class="ctag-button ctag-cancel">ยกเลิก</button>
                        <button type="submit" class="ctag-button ctag-submit">บันทึก</button>
                    </div>
                </form>
                <div id="ctag-message" class="ctag-message"></div>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('ctag_add_term', 'ctag_add_term_shortcode');

/**
 * AJAX handler to get the current term count for generating the next ID
 */
function ctag_get_term_count_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('ctag_add_term_nonce', 'nonce');
    
    // Get the count of existing terms
    $terms = get_terms(array(
        'taxonomy' => 'ctag',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    
    wp_send_json_success(array('next_id' => $next_id));
}
add_action('wp_ajax_ctag_get_term_count', 'ctag_get_term_count_ajax_handler');
add_action('wp_ajax_nopriv_ctag_get_term_count', 'ctag_get_term_count_ajax_handler');

/**
 * AJAX handler to add a new term to the taxonomy
 */
function ctag_add_term_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('ctag_add_term_nonce', 'nonce');
    
    // Check if user has permission
    if (!current_user_can('manage_categories')) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์ในการเพิ่มแท็ค'));
    }
    
    // Get the term name from the AJAX request
    $term_name = isset($_POST['term_name']) ? sanitize_text_field($_POST['term_name']) : '';
    
    if (empty($term_name)) {
        wp_send_json_error(array('message' => 'กรุณากรอกชื่อแท็ค'));
    }
    
    // Get the count of existing terms to create the next ID
    $terms = get_terms(array(
        'taxonomy' => 'ctag',
        'hide_empty' => false,
    ));
    
    $next_id = is_wp_error($terms) ? 1 : count($terms) + 1;
    $slug = 'ctag-' . $next_id;
    
    // Insert the term
    $term = wp_insert_term(
        $term_name,
        'ctag',
        array(
            'slug' => $slug,
        )
    );
    
    if (is_wp_error($term)) {
        wp_send_json_error(array('message' => $term->get_error_message()));
    } else {
        wp_send_json_success(array(
            'message' => 'เพิ่มแท็คสำเร็จแล้ว',
            'term_id' => $term['term_id'],
            'term_name' => $term_name,
            'term_slug' => $slug,
        ));
    }
}
add_action('wp_ajax_ctag_add_term', 'ctag_add_term_ajax_handler');
// Note: Only logged-in users with manage_categories permission can add terms



/****** ฟอร์มเพิ่ม ชุดขอมูล CKAN *******/

// Register shortcode and scripts
function ckan_fadd_init() {
    add_shortcode('ckan_fadd', 'ckan_fadd_shortcode');
    
    // Register scripts and styles
    wp_register_style('ckan-fadd-css', get_stylesheet_directory_uri() . '/css/ckan-fadd.css', array(), '1.0.1');
    wp_register_style('select2-css', 'https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css', array(), '4.0.13');
    wp_register_script('jquery-ui-datepicker', '', array('jquery', 'jquery-ui-core'), '1.12.1', true);
    wp_register_script('select2-js', 'https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js', array('jquery'), '4.0.13', true);
    wp_register_script('ckan-fadd-js', get_stylesheet_directory_uri() . '/js/ckan-fadd.js', array('jquery', 'jquery-ui-datepicker', 'select2-js'), '1.0.1', true);
    
    // Localize script with AJAX URL and nonce
    wp_localize_script('ckan-fadd-js', 'ckan_fadd_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('ckan_fadd_nonce'),
        'form_messages' => array(
            'success' => 'ข้อมูลถูกบันทึกเรียบร้อยแล้ว',
            'error' => 'เกิดข้อผิดพลาด กรุณาลองใหม่อีกครั้ง',
            'required' => 'กรุณากรอกข้อมูลให้ครบถ้วน'
        )
    ));
    
    // Add AJAX handlers
    add_action('wp_ajax_ckan_fadd_submit', 'ckan_fadd_ajax_handler');
    add_action('wp_ajax_nopriv_ckan_fadd_submit', 'ckan_fadd_ajax_handler_not_logged_in');
}
add_action('init', 'ckan_fadd_init');

// AJAX handler for logged in users
function ckan_fadd_ajax_handler() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_fadd_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        wp_die();
    }
    
    // Process form data
    $form_data = $_POST['form_data'];
    
    // Create post
    $post_title = sanitize_text_field($form_data['dataset_name']);
    
    $post_data = array(
        'post_title'    => $post_title,
        'post_status'   => 'publish',
        'post_type'     => 'ckan',
    );
    
    // Insert post
    $post_id = wp_insert_post($post_data);
    
    if (is_wp_error($post_id)) {
        wp_send_json_error(array('message' => $post_id->get_error_message()));
        wp_die();
    }
    
    // กำหนด slug URL เป็น post ID
    $post_update = array(
        'ID'        => $post_id,
        'post_name' => strval($post_id)
    );
    wp_update_post($post_update);
    
    // บันทึก taxonomy terms (แบบเลือกได้หลายค่า)
    // ประเภทชุดข้อมูล
    if (!empty($form_data['dataset_type']) && is_array($form_data['dataset_type'])) {
        $dataset_type_ids = array_map('intval', $form_data['dataset_type']);
        wp_set_object_terms($post_id, $dataset_type_ids, 'cdata');
        
        // บันทึกชื่อ term ที่เลือกทั้งหมดไว้ใน meta field
        $term_names = array();
        foreach ($dataset_type_ids as $term_id) {
            $term = get_term($term_id, 'cdata');
            if ($term && !is_wp_error($term)) {
                $term_names[] = $term->name;
            }
        }
        update_post_meta($post_id, 'ckan_cdata', implode(', ', $term_names));
    }
    
    // รูปแบบการเก็บข้อมูล
    if (!empty($form_data['data_format']) && is_array($form_data['data_format'])) {
        $data_format_ids = array_map('intval', $form_data['data_format']);
        wp_set_object_terms($post_id, $data_format_ids, 'cformat');
        
        // บันทึกชื่อ term ที่เลือกทั้งหมดไว้ใน meta field
        $term_names = array();
        foreach ($data_format_ids as $term_id) {
            $term = get_term($term_id, 'cformat');
            if ($term && !is_wp_error($term)) {
                $term_names[] = $term->name;
            }
        }
        update_post_meta($post_id, 'ckan_cformat', implode(', ', $term_names));
    }
    
    // หมวดหมู่ข้อมูลตามธรรมาภิบาลข้อมูลภาครัฐ
    if (!empty($form_data['data_governance']) && is_array($form_data['data_governance'])) {
        $data_governance_ids = array_map('intval', $form_data['data_governance']);
        wp_set_object_terms($post_id, $data_governance_ids, 'cgov');
        
        // บันทึกชื่อ term ที่เลือกทั้งหมดไว้ใน meta field
        $term_names = array();
        foreach ($data_governance_ids as $term_id) {
            $term = get_term($term_id, 'cgov');
            if ($term && !is_wp_error($term)) {
                $term_names[] = $term->name;
            }
        }
        update_post_meta($post_id, 'ckan_cgov', implode(', ', $term_names));
    }
    
    // Update custom fields
    update_post_meta($post_id, 'ckan_gd_agree', sanitize_text_field($form_data['gd_agree']));
    update_post_meta($post_id, 'ckan_org_name', sanitize_text_field($form_data['contact_name']));
    update_post_meta($post_id, 'ckan_org_mail', sanitize_email($form_data['contact_email']));
    update_post_meta($post_id, 'ckan_objective', sanitize_textarea_field($form_data['objective']));
    update_post_meta($post_id, 'ckan_fr_update', sanitize_text_field($form_data['frequency_unit']));
    update_post_meta($post_id, 'ckan_fr_year', sanitize_text_field($form_data['frequency_value']));
    update_post_meta($post_id, 'ckan_area', sanitize_text_field($form_data['geographic_area']));
    update_post_meta($post_id, 'ckan_source', sanitize_text_field($form_data['source']));
    update_post_meta($post_id, 'ckan_url', esc_url_raw($form_data['url']));
    update_post_meta($post_id, 'ckan_language', sanitize_text_field($form_data['language']));
    update_post_meta($post_id, 'ckan_data_create', sanitize_text_field($form_data['creation_date']));
    update_post_meta($post_id, 'ckan_data_update', sanitize_text_field($form_data['last_update_date']));
    
    // Set creator and dates
    $current_user = wp_get_current_user();
    update_post_meta($post_id, 'ckan_create_by', $current_user->display_name);
    
    // Get current date in Thai Buddhist year format
    $current_date = current_time('timestamp');
    $thai_date = date('d/m/', $current_date) . (date('Y', $current_date) + 543);
    
    update_post_meta($post_id, 'ckan_auto_createpost', $thai_date);
    update_post_meta($post_id, 'ckan_auto_updatepost', $thai_date);
    
    // Return success with post ID and URL
    wp_send_json_success(array(
        'post_id' => $post_id,
        'post_url' => get_permalink($post_id),
        'message' => 'ข้อมูลถูกบันทึกเรียบร้อยแล้ว'
    ));
    
    wp_die();
}

// AJAX handler for non-logged in users (returns error)
function ckan_fadd_ajax_handler_not_logged_in() {
    wp_send_json_error(array('message' => 'กรุณาเข้าสู่ระบบก่อนทำการบันทึกข้อมูล'));
    wp_die();
}

// Shortcode function
function ckan_fadd_shortcode($atts) {
    // Enqueue styles and scripts
    wp_enqueue_style('ckan-fadd-css');
    wp_enqueue_style('select2-css');
    wp_enqueue_style('jquery-ui', 'https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css');
    wp_enqueue_script('jquery-ui-datepicker');
    wp_enqueue_script('select2-js');
    wp_enqueue_script('ckan-fadd-js');
    
    // Check if user is logged in
    if (!is_user_logged_in()) {
        return '<div class="ckan-fadd-error">กรุณาเข้าสู่ระบบก่อนทำการบันทึกข้อมูล</div>';
    }
    
    // Start output buffering
    ob_start();
    
    // Get taxonomy terms for dropdowns
    $cdata_terms = get_terms(array(
        'taxonomy' => 'cdata',
        'hide_empty' => false,
    ));
    
    $cformat_terms = get_terms(array(
        'taxonomy' => 'cformat',
        'hide_empty' => false,
    ));
    
    $cgov_terms = get_terms(array(
        'taxonomy' => 'cgov',
        'hide_empty' => false,
    ));
    
    // Get current user info
    $current_user = wp_get_current_user();
    
    // Get current date in Thai Buddhist year format
    $current_date = current_time('timestamp');
    $thai_date = date('d/m/', $current_date) . (date('Y', $current_date) + 543);
    
    // Form HTML
    ?>
    <div class="ckan-fadd-container">
        <div class="ckan-fadd-status" style="display: none;">
            <div class="ckan-fadd-status-message"></div>
        </div>
        
        <form id="ckan-fadd-form" class="ckan-fadd-form">
            <div class="ckan-fadd-form-skeleton" style="display: none;">
                <div class="ckan-fadd-skeleton-item"></div>
                <div class="ckan-fadd-skeleton-item"></div>
                <div class="ckan-fadd-skeleton-item"></div>
                <div class="ckan-fadd-skeleton-item"></div>
                <div class="ckan-fadd-skeleton-item"></div>
            </div>
            
            <div class="ckan-fadd-form-content">
                <h2 class="ckan-fadd-title">เพิ่มชุดข้อมูล</h2>
                
                <!-- Field 1: ชื่อชุดข้อมูล -->
                <div class="ckan-fadd-field">
                    <label for="dataset_name">ชื่อชุดข้อมูล <span class="required">*</span></label>
                    <input type="text" id="dataset_name" name="dataset_name" required>
                </div>
                
                <!-- Field 2: ประเภทชุดข้อมูล (แบบเลือกได้หลายค่า) -->
                <div class="ckan-fadd-field">
                    <label for="dataset_type">
                        ประเภทชุดข้อมูล <span class="required">*</span>
                        <span class="tooltip-icon" data-tooltip="เลือกประเภทของชุดข้อมูล (เลือกได้หลายประเภท)">?</span>
                    </label>
                    <select id="dataset_type" name="dataset_type[]" class="ckan-select2" multiple="multiple" required>
                        <?php foreach($cdata_terms as $term): ?>
                            <option value="<?php echo $term->term_id; ?>"><?php echo $term->name; ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                
                <!-- Field 3: ยินยอมให้นำชื่อชุดข้อมูลไปใช้ที่ GD-Catalog -->
                <div class="ckan-fadd-field">
                    <label>
                        ยินยอมให้นำชื่อชุดข้อมูลไปใช้ที่ GD-Catalog <span class="required">*</span>
                        <span class="tooltip-icon" data-tooltip="ยินยอมให้นำข้อมูลไปใช้ใน GD-Catalog">?</span>
                    </label>
                    <div class="ckan-fadd-radio-group">
                        <label class="ckan-fadd-radio">
                            <input type="radio" name="gd_agree" value="ยินยอม" required> ยินยอม
                        </label>
                        <label class="ckan-fadd-radio">
                            <input type="radio" name="gd_agree" value="ไม่ยินยอม"> ไม่ยินยอม
                        </label>
                    </div>
                </div>
                
                <!-- Field 4: ชื่อผู้ติดต่อ -->
                <div class="ckan-fadd-field">
                    <label for="contact_name">
                        ชื่อผู้ติดต่อ <span class="required">*</span>
                        <span class="tooltip-icon" data-tooltip="ชื่อผู้ที่สามารถติดต่อได้เกี่ยวกับชุดข้อมูลนี้">?</span>
                    </label>
                    <input type="text" id="contact_name" name="contact_name" required>
                </div>
                
                <!-- Field 5: อีเมลผู้ติดต่อ -->
                <div class="ckan-fadd-field">
                    <label for="contact_email">
                        อีเมลผู้ติดต่อ <span class="required">*</span>
                        <span class="tooltip-icon" data-tooltip="อีเมลสำหรับติดต่อเกี่ยวกับชุดข้อมูลนี้">?</span>
                    </label>
                    <input type="email" id="contact_email" name="contact_email" required>
                </div>
                
                <!-- Field 6: วัตถุประสงค์ -->
                <div class="ckan-fadd-field">
                    <label for="objective">
                        วัตถุประสงค์ <span class="required">*</span>
                        <span class="tooltip-icon" data-tooltip="วัตถุประสงค์ของชุดข้อมูลนี้">?</span>
                    </label>
                    <textarea id="objective" name="objective" required></textarea>
                </div>
                
                <!-- Field 7-8: หน่วยความถี่และค่าความถี่ของการปรับปรุงข้อมูล -->
                <div class="ckan-fadd-field-group">
                    <div class="ckan-fadd-field half">
                        <label for="frequency_unit">
                            หน่วยความถี่ของการปรับปรุงข้อมูล <span class="required">*</span>
                            <span class="tooltip-icon" data-tooltip="หน่วยความถี่ในการปรับปรุงข้อมูล">?</span>
                        </label>
                        <select id="frequency_unit" name="frequency_unit" required>
                            <option value="">-- เลือกหน่วย --</option>
                            <option value="เดือน">เดือน</option>
                            <option value="ปี">ปี</option>
                        </select>
                    </div>
                    
                    <div class="ckan-fadd-field half">
                        <label for="frequency_value">
                            ค่าความถี่ของการปรับปรุงข้อมูล <span class="required">*</span>
                            <span class="tooltip-icon" data-tooltip="ค่าความถี่ของการปรับปรุงข้อมูล (ความถี่น้อยที่สุด)">?</span>
                        </label>
                        <input type="number" id="frequency_value" name="frequency_value" min="1" required>
                    </div>
                </div>
                
                <!-- Field 9: ขอบเขตเชิงภูมิศาสตร์หรือเชิงพื้นที่ -->
                <div class="ckan-fadd-field">
                    <label for="geographic_area">
                        ขอบเขตเชิงภูมิศาสตร์หรือเชิงพื้นที่ <span class="required">*</span>
                        <span class="tooltip-icon" data-tooltip="ขอบเขตเชิงภูมิศาสตร์หรือเชิงพื้นที่ของข้อมูล">?</span>
                    </label>
                    <input type="text" id="geographic_area" name="geographic_area" required>
                </div>
                
                <!-- Field 10: แหล่งที่มา -->
                <div class="ckan-fadd-field">
                    <label for="source">
                        แหล่งที่มา <span class="required">*</span>
                        <span class="tooltip-icon" data-tooltip="แหล่งที่มาของข้อมูล">?</span>
                    </label>
                    <input type="text" id="source" name="source" required>
                </div>
                
                <!-- Field 11: รูปแบบการเก็บข้อมูล (แบบเลือกได้หลายค่า) -->
                <div class="ckan-fadd-field">
                    <label for="data_format">
                        รูปแบบการเก็บข้อมูล <span class="required">*</span>
                        <span class="tooltip-icon" data-tooltip="รูปแบบการเก็บข้อมูล เช่น CSV, JSON, XML (เลือกได้หลายรูปแบบ)">?</span>
                    </label>
                    <select id="data_format" name="data_format[]" class="ckan-select2" multiple="multiple" required>
                        <?php foreach($cformat_terms as $term): ?>
                            <option value="<?php echo $term->term_id; ?>"><?php echo $term->name; ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                
                <!-- Field 12: หมวดหมู่ข้อมูลตามธรรมาภิบาลข้อมูลภาครัฐ (แบบเลือกได้หลายค่า) -->
                <div class="ckan-fadd-field">
                    <label for="data_governance">
                        หมวดหมู่ข้อมูลตามธรรมาภิบาลข้อมูลภาครัฐ <span class="required">*</span>
                        <span class="tooltip-icon" data-tooltip="หมวดหมู่ข้อมูลตามธรรมาภิบาลข้อมูลภาครัฐ (เลือกได้หลายหมวดหมู่)">?</span>
                    </label>
                    <select id="data_governance" name="data_governance[]" class="ckan-select2" multiple="multiple" required>
                        <?php foreach($cgov_terms as $term): ?>
                            <option value="<?php echo $term->term_id; ?>"><?php echo $term->name; ?></option>
                        <?php endforeach; ?>
                    </select>
                </div>
                
                <!-- Field 13: URL -->
                <div class="ckan-fadd-field">
                    <label for="url">
                        URL <span class="required">*</span>
                        <span class="tooltip-icon" data-tooltip="URL ที่เกี่ยวข้องกับชุดข้อมูล">?</span>
                    </label>
                    <input type="url" id="url" name="url" required>
                </div>
                
                <!-- Field 14: ภาษาที่ใช้ -->
                <div class="ckan-fadd-field">
                    <label for="language">
                        ภาษาที่ใช้ <span class="required">*</span>
                        <span class="tooltip-icon" data-tooltip="ภาษาที่ใช้ในชุดข้อมูล">?</span>
                    </label>
                    <input type="text" id="language" name="language" required>
                </div>
                
                <!-- Field 15-16: วันที่เริ่มต้นสร้างและวันที่ปรับปรุงข้อมูลล่าสุด -->
                <div class="ckan-fadd-field-group">
                    <div class="ckan-fadd-field half">
                        <label for="creation_date">
                            วันที่เริ่มต้นสร้าง <span class="required">*</span>
                        </label>
                        <input type="text" id="creation_date" name="creation_date" class="thai-datepicker" required>
                    </div>
                    
                    <div class="ckan-fadd-field half">
                        <label for="last_update_date">
                            วันที่ปรับปรุงข้อมูลล่าสุด <span class="required">*</span>
                        </label>
                        <input type="text" id="last_update_date" name="last_update_date" class="thai-datepicker" required>
                    </div>
                </div>
                
                <!-- Field 17-19: ข้อมูลผู้สร้างและวันที่ -->
                <div class="ckan-fadd-field-group">
                    <div class="ckan-fadd-field third">
                        <label>สร้างโดย</label>
                        <div class="ckan-fadd-static-field"><?php echo $current_user->display_name; ?></div>
                    </div>
                    
                    <div class="ckan-fadd-field third">
                        <label>สร้างในระบบเมื่อ</label>
                        <div class="ckan-fadd-static-field"><?php echo $thai_date; ?></div>
                    </div>
                    
                    <div class="ckan-fadd-field third">
                        <label>ปรับปรุงครั้งล่าสุดในระบบเมื่อ</label>
                        <div class="ckan-fadd-static-field"><?php echo $thai_date; ?></div>
                    </div>
                </div>
                
                <!-- Submit button -->
                <div class="ckan-fadd-submit">
                    <button type="submit" class="ckan-fadd-submit-btn">บันทึกข้อมูล</button>
                </div>
            </div>
        </form>
    </div>
    <?php
    
    // Return the buffered content
    return ob_get_clean();
}


/****** CKAN LIST *******/

function ckan_list_init() {
    add_shortcode('ckan_list', 'ckan_list_shortcode');
    
    // Register scripts and styles
    wp_register_style('ckan-list-css', get_stylesheet_directory_uri() . '/css/ckan-list.css', array(), '1.0.0');
    wp_register_script('ckan-list-js', get_stylesheet_directory_uri() . '/js/ckan-list.js', array('jquery'), '1.0.0', true);
    
    // Localize script with AJAX URL and nonce
    wp_localize_script('ckan-list-js', 'ckan_list_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('ckan_list_nonce')
    ));
    
    // Add AJAX handlers
    add_action('wp_ajax_ckan_list_search', 'ckan_list_search_handler');
    add_action('wp_ajax_nopriv_ckan_list_search', 'ckan_list_search_handler');
    
    // Add AJAX handler for post view count
    add_action('wp_ajax_ckan_list_count_view', 'ckan_list_count_view_handler');
    add_action('wp_ajax_nopriv_ckan_list_count_view', 'ckan_list_count_view_handler');
}
add_action('init', 'ckan_list_init');

// AJAX handler for search
function ckan_list_search_handler() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_list_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
    }
    
    $search_term = sanitize_text_field($_POST['search_term']);
    
    // Setup query arguments
    $args = array(
        'post_type' => 'ckan',
        'posts_per_page' => 20,
        'paged' => 1,
        's' => $search_term,
    );
    
    // Get search results
    $query = new WP_Query($args);
    $results = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            
            // Get taxonomy terms
            $caccess_terms = get_the_terms(get_the_ID(), 'caccess');
            $cdata_terms = get_the_terms(get_the_ID(), 'cdata');
            $cgov_terms = get_the_terms(get_the_ID(), 'cgov');
            $cgroup_terms = get_the_terms(get_the_ID(), 'cgroup');
            $ctag_terms = get_the_terms(get_the_ID(), 'ctag');
            $cformat_terms = get_the_terms(get_the_ID(), 'cformat');
            $clicense_terms = get_the_terms(get_the_ID(), 'clicense');
            $corg_terms = get_the_terms(get_the_ID(), 'corg');
            
            // Format taxonomy terms
            $taxonomy_row1 = array();
            $taxonomy_row3 = array();
            $taxonomy_row4 = array();
            
            if ($caccess_terms && !is_wp_error($caccess_terms)) {
                foreach ($caccess_terms as $term) {
                    $taxonomy_row1[] = array('term' => $term->name, 'taxonomy' => 'caccess');
                }
            }
            
            if ($cdata_terms && !is_wp_error($cdata_terms)) {
                foreach ($cdata_terms as $term) {
                    $taxonomy_row1[] = array('term' => $term->name, 'taxonomy' => 'cdata');
                }
            }
            
            if ($cgov_terms && !is_wp_error($cgov_terms)) {
                foreach ($cgov_terms as $term) {
                    $taxonomy_row1[] = array('term' => $term->name, 'taxonomy' => 'cgov');
                }
            }
            
            if ($cgroup_terms && !is_wp_error($cgroup_terms)) {
                foreach ($cgroup_terms as $term) {
                    $taxonomy_row1[] = array('term' => $term->name, 'taxonomy' => 'cgroup');
                }
            }
            
            if ($ctag_terms && !is_wp_error($ctag_terms)) {
                foreach ($ctag_terms as $term) {
                    $taxonomy_row3[] = array('term' => $term->name, 'taxonomy' => 'ctag');
                }
            }
            
            if ($cformat_terms && !is_wp_error($cformat_terms)) {
                foreach ($cformat_terms as $term) {
                    $taxonomy_row3[] = array('term' => $term->name, 'taxonomy' => 'cformat');
                }
            }
            
            if ($clicense_terms && !is_wp_error($clicense_terms)) {
                foreach ($clicense_terms as $term) {
                    $taxonomy_row3[] = array('term' => $term->name, 'taxonomy' => 'clicense');
                }
            }
            
            if ($corg_terms && !is_wp_error($corg_terms)) {
                foreach ($corg_terms as $term) {
                    $taxonomy_row4[] = array('term' => $term->name, 'taxonomy' => 'corg');
                }
            }
            
            // Get post views
            $total_views = get_post_meta(get_the_ID(), 'ckan_total_views', true) ?: 0;
            $recent_views = get_post_meta(get_the_ID(), 'ckan_recent_views', true) ?: 0;
            
            // Get creation date
            $creation_date = get_post_meta(get_the_ID(), 'ckan_auto_createpost', true) ?: '';
            
            // Add to results
            $results[] = array(
                'id' => get_the_ID(),
                'title' => get_the_title(),
                'permalink' => get_permalink(),
                'excerpt' => wp_trim_words(get_the_content(), 200, '...'),
                'total_views' => $total_views,
                'recent_views' => $recent_views,
                'taxonomy_row1' => $taxonomy_row1,
                'taxonomy_row3' => $taxonomy_row3,
                'taxonomy_row4' => $taxonomy_row4,
                'creation_date' => $creation_date
            );
        }
        wp_reset_postdata();
    }
    
    wp_send_json_success(array('posts' => $results));
}

// AJAX handler for post view count
function ckan_list_count_view_handler() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_list_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
    }
    
    $post_id = intval($_POST['post_id']);
    
    // Get current counts
    $total_views = get_post_meta($post_id, 'ckan_total_views', true);
    $recent_views = get_post_meta($post_id, 'ckan_recent_views', true);
    
    // Update counts
    if (!$total_views) {
        $total_views = 1;
        add_post_meta($post_id, 'ckan_total_views', $total_views, true);
    } else {
        $total_views++;
        update_post_meta($post_id, 'ckan_total_views', $total_views);
    }
    
    if (!$recent_views) {
        $recent_views = 1;
        add_post_meta($post_id, 'ckan_recent_views', $recent_views, true);
    } else {
        $recent_views++;
        update_post_meta($post_id, 'ckan_recent_views', $recent_views);
    }
    
    // Reset recent views weekly (optional)
    $last_reset = get_post_meta($post_id, 'ckan_views_last_reset', true);
    $now = time();
    
    if (!$last_reset || ($now - $last_reset) > 604800) { // 604800 = 1 week in seconds
        update_post_meta($post_id, 'ckan_recent_views', 1);
        update_post_meta($post_id, 'ckan_views_last_reset', $now);
    }
    
    wp_send_json_success(array(
        'total_views' => $total_views,
        'recent_views' => $recent_views
    ));
}

// Shortcode function
function ckan_list_shortcode($atts) {
    // Parse attributes
    $atts = shortcode_atts(array(
        'posts_per_page' => 20,
        'paged' => get_query_var('paged') ? get_query_var('paged') : 1,
        'orderby' => 'title',
        'order' => 'ASC',
    ), $atts);
    
    // Enqueue styles and scripts
    wp_enqueue_style('ckan-list-css');
    wp_enqueue_script('ckan-list-js');
    
    // Start output buffering
    ob_start();
    
    // Setup query arguments
    $args = array(
        'post_type' => 'ckan',
        'posts_per_page' => $atts['posts_per_page'],
        'paged' => $atts['paged'],
        'orderby' => $atts['orderby'],
        'order' => $atts['order'],
    );
    
    // Check if we're sorting by popularity
    if ($atts['orderby'] === 'popularity') {
        $args['meta_key'] = 'ckan_total_views';
        $args['orderby'] = 'meta_value_num';
        $args['order'] = 'DESC';
    }
    
    // Check if we're sorting by last modified
    if ($atts['orderby'] === 'modified') {
        $args['orderby'] = 'modified';
    }
    
    // Run the query
    $query = new WP_Query($args);
    $max_pages = $query->max_num_pages;
    
    // Output container
    ?>
    <div class="ckan-list-container">
        <!-- Controls and search bar -->
        <div class="ckan-list-controls">
            <div class="ckan-list-search">
                <input type="text" id="ckan-list-search-input" placeholder="ค้นหาชุดข้อมูล...">
                <button id="ckan-list-search-button">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>
                </button>
                <div id="ckan-list-search-results" class="ckan-list-search-results" style="display: none;"></div>
            </div>
            
            <div class="ckan-list-options">
                <div class="ckan-list-sort">
                    <label for="ckan-list-sort-select">เรียงโดย:</label>
                    <select id="ckan-list-sort-select">
                        <option value="title-asc" <?php selected($atts['orderby'] . '-' . $atts['order'], 'title-ASC'); ?>>เรียงชื่อตามลำดับอักษร (ก-ฮ)</option>
                        <option value="title-desc" <?php selected($atts['orderby'] . '-' . $atts['order'], 'title-DESC'); ?>>เรียงชื่อตามลำดับอักษร (ฮ-ก)</option>
                        <option value="modified-desc" <?php selected($atts['orderby'], 'modified'); ?>>ถูกแก้ไขครั้งสุดท้าย</option>
                        <option value="popularity-desc" <?php selected($atts['orderby'], 'popularity'); ?>>มีความสนใจมากสุด</option>
                    </select>
                </div>
                
                <div class="ckan-list-view-toggle">
                    <button id="ckan-list-grid-view" class="active" aria-label="Grid view">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="7" height="7"></rect><rect x="14" y="3" width="7" height="7"></rect><rect x="14" y="14" width="7" height="7"></rect><rect x="3" y="14" width="7" height="7"></rect></svg>
                    </button>
                    <button id="ckan-list-list-view" aria-label="List view">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg>
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Skeleton loading -->
        <div id="ckan-list-skeleton" class="ckan-list-grid">
            <?php for ($i = 0; $i < 8; $i++) : ?>
            <div class="ckan-list-skeleton-item">
                <div class="ckan-list-skeleton-title"></div>
                <div class="ckan-list-skeleton-tags"></div>
                <div class="ckan-list-skeleton-excerpt"></div>
                <div class="ckan-list-skeleton-tags"></div>
                <div class="ckan-list-skeleton-meta"></div>
            </div>
            <?php endfor; ?>
        </div>
        
        <!-- Content -->
        <div id="ckan-list-content" class="ckan-list-grid" style="display: none;">
            <?php
            if ($query->have_posts()) :
                while ($query->have_posts()) :
                    $query->the_post();
                    $post_id = get_the_ID();
                    
                    // Get taxonomy terms
                    $caccess_terms = get_the_terms($post_id, 'caccess');
                    $cdata_terms = get_the_terms($post_id, 'cdata');
                    $cgov_terms = get_the_terms($post_id, 'cgov');
                    $cgroup_terms = get_the_terms($post_id, 'cgroup');
                    $ctag_terms = get_the_terms($post_id, 'ctag');
                    $cformat_terms = get_the_terms($post_id, 'cformat');
                    $clicense_terms = get_the_terms($post_id, 'clicense');
                    $corg_terms = get_the_terms($post_id, 'corg');
                    
                    // Get view count
                    $total_views = get_post_meta($post_id, 'ckan_total_views', true) ?: 0;
                    $recent_views = get_post_meta($post_id, 'ckan_recent_views', true) ?: 0;
                    
                    // Get creation date
                    $creation_date = get_post_meta($post_id, 'ckan_auto_createpost', true) ?: '';
                    
                    // Excerpt
                    $excerpt = wp_trim_words(get_the_content(), 200, '...');
                    ?>
                    <div class="ckan-list-item" data-post-id="<?php echo $post_id; ?>">
                        <div class="ckan-list-item-header">
                            <h3 class="ckan-list-item-title">
                                <a href="<?php the_permalink(); ?>" data-post-id="<?php echo $post_id; ?>" class="ckan-list-item-link">
                                    <?php the_title(); ?>
                                </a>
                            </h3>
                            <div class="ckan-list-item-views">
                                <span class="ckan-list-item-total-views" title="จำนวนการเข้าชมทั้งหมด">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                                    <?php echo $total_views; ?>
                                </span>
                                <span class="ckan-list-item-recent-views" title="จำนวนการเข้าชมล่าสุด">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>
                                    <?php echo $recent_views; ?>
                                </span>
                            </div>
                        </div>
                        
                        <div class="ckan-list-item-taxonomies">
                            <?php
                            // Display 1st row taxonomy terms
                            if ($caccess_terms && !is_wp_error($caccess_terms)) {
                                foreach ($caccess_terms as $term) {
                                    echo '<span class="ckan-list-taxonomy-tag tag-caccess">' . esc_html($term->name) . '</span>';
                                }
                            }
                            
                            if ($cdata_terms && !is_wp_error($cdata_terms)) {
                                foreach ($cdata_terms as $term) {
                                    echo '<span class="ckan-list-taxonomy-tag tag-cdata">' . esc_html($term->name) . '</span>';
                                }
                            }
                            
                            if ($cgov_terms && !is_wp_error($cgov_terms)) {
                                foreach ($cgov_terms as $term) {
                                    echo '<span class="ckan-list-taxonomy-tag tag-cgov">' . esc_html($term->name) . '</span>';
                                }
                            }
                            
                            if ($cgroup_terms && !is_wp_error($cgroup_terms)) {
                                foreach ($cgroup_terms as $term) {
                                    echo '<span class="ckan-list-taxonomy-tag tag-cgroup">' . esc_html($term->name) . '</span>';
                                }
                            }
                            ?>
                        </div>
                        
                        <div class="ckan-list-item-excerpt">
                            <?php echo $excerpt; ?>
                        </div>
                        
                        <div class="ckan-list-item-taxonomies-row3">
                            <?php
                            // Display 3rd row taxonomy terms
                            if ($ctag_terms && !is_wp_error($ctag_terms)) {
                                foreach ($ctag_terms as $term) {
                                    echo '<span class="ckan-list-taxonomy-tag tag-ctag">' . esc_html($term->name) . '</span>';
                                }
                            }
                            
                            if ($cformat_terms && !is_wp_error($cformat_terms)) {
                                foreach ($cformat_terms as $term) {
                                    echo '<span class="ckan-list-taxonomy-tag tag-cformat">' . esc_html($term->name) . '</span>';
                                }
                            }
                            
                            if ($clicense_terms && !is_wp_error($clicense_terms)) {
                                foreach ($clicense_terms as $term) {
                                    echo '<span class="ckan-list-taxonomy-tag tag-clicense">' . esc_html($term->name) . '</span>';
                                }
                            }
                            ?>
                        </div>
                        
                        <div class="ckan-list-item-footer">
                            <div class="ckan-list-item-org">
                                <?php
                                // Display 4th row taxonomy terms
                                if ($corg_terms && !is_wp_error($corg_terms)) {
                                    foreach ($corg_terms as $term) {
                                        echo '<span class="ckan-list-taxonomy-tag tag-corg">' . esc_html($term->name) . '</span>';
                                    }
                                }
                                ?>
                            </div>
                            <div class="ckan-list-item-date">
                                <?php echo $creation_date; ?>
                            </div>
                        </div>
                    </div>
                <?php
                endwhile;
            else :
                ?>
                <div class="ckan-list-no-results">
                    <p>ไม่พบชุดข้อมูลที่ค้นหา</p>
                </div>
            <?php endif; wp_reset_postdata(); ?>
        </div>
        
        <!-- Pagination -->
        <?php if ($max_pages > 1) : ?>
        <div class="ckan-list-pagination">
            <?php
            $current_page = max(1, get_query_var('paged'));
            $base_url = add_query_arg(array(), remove_query_arg('paged'));
            
            if ($current_page > 1) {
                echo '<a href="' . esc_url(add_query_arg('paged', $current_page - 1, $base_url)) . '" class="ckan-list-pagination-prev">&laquo; หน้าก่อนหน้า</a>';
            }
            
            $start_page = max(1, $current_page - 2);
            $end_page = min($max_pages, $current_page + 2);
            
            if ($start_page > 1) {
                echo '<a href="' . esc_url(add_query_arg('paged', 1, $base_url)) . '" class="ckan-list-pagination-number">1</a>';
                if ($start_page > 2) {
                    echo '<span class="ckan-list-pagination-dots">...</span>';
                }
            }
            
            for ($i = $start_page; $i <= $end_page; $i++) {
                if ($i == $current_page) {
                    echo '<span class="ckan-list-pagination-current">' . $i . '</span>';
                } else {
                    echo '<a href="' . esc_url(add_query_arg('paged', $i, $base_url)) . '" class="ckan-list-pagination-number">' . $i . '</a>';
                }
            }
            
            if ($end_page < $max_pages) {
                if ($end_page < $max_pages - 1) {
                    echo '<span class="ckan-list-pagination-dots">...</span>';
                }
                echo '<a href="' . esc_url(add_query_arg('paged', $max_pages, $base_url)) . '" class="ckan-list-pagination-number">' . $max_pages . '</a>';
            }
            
            if ($current_page < $max_pages) {
                echo '<a href="' . esc_url(add_query_arg('paged', $current_page + 1, $base_url)) . '" class="ckan-list-pagination-next">หน้าถัดไป &raquo;</a>';
            }
            ?>
        </div>
        <?php endif; ?>
    </div>
    
    <?php
    // Return the buffered content
    return ob_get_clean();
}


/**** แสดง CKAN TAXONOMY LIST แบบ Widget ตามสิทธิ์ผู้ใช้ *****/

// Register shortcode และ scripts
function ckan_taxo_list_init() {
    add_shortcode('ckan_term', 'ckan_taxo_list_shortcode');
    
    // Register scripts and styles
    wp_register_style('ckan-taxo-list-css', get_stylesheet_directory_uri() . '/css/ckan-taxo-list.css', array(), '1.0.0');
    wp_register_script('ckan-taxo-list-js', get_stylesheet_directory_uri() . '/js/ckan-taxo-list.js', array('jquery'), '1.0.0', true);
    
    // Localize script with AJAX URL and nonce
    wp_localize_script('ckan-taxo-list-js', 'ckan_taxo_list_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('ckan_taxo_list_nonce')
    ));
    
    // Add AJAX handler
    add_action('wp_ajax_ckan_taxo_filter', 'ckan_taxo_filter_handler');
    add_action('wp_ajax_nopriv_ckan_taxo_filter', 'ckan_taxo_filter_handler');
}
add_action('init', 'ckan_taxo_list_init');

/**
 * ตรวจสอบว่าผู้ใช้มีสิทธิ์เข้าถึง term หรือไม่
 * 
 * @param int $term_id ID ของ term ที่ต้องการตรวจสอบ
 * @param string $taxonomy ชื่อ taxonomy ของ term
 * @return bool true ถ้ามีสิทธิ์เข้าถึง, false ถ้าไม่มีสิทธิ์
 */
function ckan_taxo_user_can_access_term($term_id, $taxonomy) {
    // Admin มีสิทธิ์เข้าถึงทุก term
    if (current_user_can('administrator')) {
        return true;
    }
    
    // ดึงการตั้งค่าการเข้าถึง
    $settings = get_option('ckan_permission_settings', array());
    
    // ถ้าไม่มีการตั้งค่าสำหรับ taxonomy นี้ ให้เข้าถึงได้ทั้งหมด
    if (empty($settings[$taxonomy])) {
        return true;
    }
    
    // ถ้าไม่มีการตั้งค่าสำหรับ term นี้ ให้เข้าถึงได้ทั้งหมด
    if (empty($settings[$taxonomy][$term_id])) {
        return true;
    }
    
    // กรณีมีการตั้งค่า หมายความว่าต้องมี role ที่กำหนดถึงจะเข้าถึงได้
    $current_user = wp_get_current_user();
    $user_roles = $current_user->roles;
    
    if (empty($user_roles)) {
        return false; // ผู้ใช้ไม่มี role (คนทั่วไป)
    }
    
    foreach ($user_roles as $role) {
        if (isset($settings[$taxonomy][$term_id][$role]) && $settings[$taxonomy][$term_id][$role]) {
            return true;
        }
    }
    
    return false;
}

/**
 * ฟังก์ชันเพื่อดึง term ที่ผู้ใช้มีสิทธิ์เข้าถึง
 */
function ckan_taxo_get_accessible_terms($taxonomy) {
    // ดึงข้อมูล term ทั้งหมดในระบบ
    $all_terms = get_terms(array(
        'taxonomy' => $taxonomy,
        'hide_empty' => true,
    ));
    
    // ถ้าไม่มี term หรือมีข้อผิดพลาด ให้ return array ว่าง
    if (is_wp_error($all_terms) || empty($all_terms)) {
        return array();
    }
    
    // ถ้าเป็น admin ให้เข้าถึงได้ทั้งหมด
    if (current_user_can('administrator')) {
        return $all_terms;
    }
    
    // ดึงข้อมูล setting การเข้าถึง
    $settings = get_option('ckan_permission_settings', array());
    
    // ถ้าไม่มีการตั้งค่าสำหรับ taxonomy นี้ ให้เข้าถึงได้ทั้งหมด
    if (empty($settings[$taxonomy])) {
        return $all_terms;
    }
    
    // ดึง roles ของผู้ใช้ปัจจุบัน
    $current_user = wp_get_current_user();
    $user_roles = $current_user->roles;
    
    if (empty($user_roles)) {
        // ผู้ใช้ไม่มี role (คนทั่วไป) - ตรวจสอบว่ามี term ใดที่เปิดให้เข้าถึงโดยไม่ต้องมี role
        $accessible_terms = array();
        foreach ($all_terms as $term) {
            if (empty($settings[$taxonomy][$term->term_id])) {
                $accessible_terms[] = $term;
            }
        }
        return $accessible_terms;
    }
    
    // กรอง term ที่ผู้ใช้มีสิทธิ์เข้าถึง
    $accessible_terms = array();
    
    foreach ($all_terms as $term) {
        $has_access = false;
        
        // ถ้าไม่มีการตั้งค่าสำหรับ term นี้ ให้เข้าถึงได้ทุกคน
        if (empty($settings[$taxonomy][$term->term_id])) {
            $has_access = true;
        } else {
            // ตรวจสอบว่าผู้ใช้มี role ที่สามารถเข้าถึง term นี้ได้หรือไม่
            foreach ($user_roles as $role) {
                if (isset($settings[$taxonomy][$term->term_id][$role]) && $settings[$taxonomy][$term->term_id][$role]) {
                    $has_access = true;
                    break;
                }
            }
        }
        
        if ($has_access) {
            $accessible_terms[] = $term;
        }
    }
    
    return $accessible_terms;
}

// AJAX handler for taxonomy filtering
function ckan_taxo_filter_handler() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_taxo_list_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        wp_die();
    }
    
    $taxonomy = sanitize_text_field($_POST['taxonomy']);
    $term_id = intval($_POST['term_id']);
    
    // ตรวจสอบสิทธิ์การเข้าถึง term
    if ($term_id > 0 && !ckan_taxo_user_can_access_term($term_id, $taxonomy)) {
        wp_send_json_error(array('message' => 'Access denied'));
        wp_die();
    }
    
    // Setup query arguments
    $args = array(
        'post_type' => 'ckan',
        'posts_per_page' => 20,
        'paged' => 1,
    );
    
    // กรณีค้นหาตาม term
    if ($term_id > 0) {
        $args['tax_query'] = array(
            array(
                'taxonomy' => $taxonomy,
                'field' => 'term_id',
                'terms' => $term_id
            )
        );
    }
    
    // Run query
    $query = new WP_Query($args);
    $results = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            
            // ตรวจสอบสิทธิ์การเข้าถึง post
            if (!ckan_permission_user_can_access(get_the_ID(), wp_get_current_user()->roles)) {
                continue; // ข้ามหากไม่มีสิทธิ์เข้าถึง
            }
            
            // Get taxonomy terms
            $caccess_terms = get_the_terms(get_the_ID(), 'caccess');
            $cdata_terms = get_the_terms(get_the_ID(), 'cdata');
            $cgov_terms = get_the_terms(get_the_ID(), 'cgov');
            $cgroup_terms = get_the_terms(get_the_ID(), 'cgroup');
            $ctag_terms = get_the_terms(get_the_ID(), 'ctag');
            $cformat_terms = get_the_terms(get_the_ID(), 'cformat');
            $clicense_terms = get_the_terms(get_the_ID(), 'clicense');
            $corg_terms = get_the_terms(get_the_ID(), 'corg');
            
            // Format taxonomy terms
            $taxonomy_row1 = array();
            $taxonomy_row3 = array();
            $taxonomy_row4 = array();
            
            if ($caccess_terms && !is_wp_error($caccess_terms)) {
                foreach ($caccess_terms as $term) {
                    if (ckan_taxo_user_can_access_term($term->term_id, 'caccess')) {
                        $taxonomy_row1[] = array('term' => $term->name, 'taxonomy' => 'caccess');
                    }
                }
            }
            
            if ($cdata_terms && !is_wp_error($cdata_terms)) {
                foreach ($cdata_terms as $term) {
                    if (ckan_taxo_user_can_access_term($term->term_id, 'cdata')) {
                        $taxonomy_row1[] = array('term' => $term->name, 'taxonomy' => 'cdata');
                    }
                }
            }
            
            if ($cgov_terms && !is_wp_error($cgov_terms)) {
                foreach ($cgov_terms as $term) {
                    if (ckan_taxo_user_can_access_term($term->term_id, 'cgov')) {
                        $taxonomy_row1[] = array('term' => $term->name, 'taxonomy' => 'cgov');
                    }
                }
            }
            
            if ($cgroup_terms && !is_wp_error($cgroup_terms)) {
                foreach ($cgroup_terms as $term) {
                    if (ckan_taxo_user_can_access_term($term->term_id, 'cgroup')) {
                        $taxonomy_row1[] = array('term' => $term->name, 'taxonomy' => 'cgroup');
                    }
                }
            }
            
            if ($ctag_terms && !is_wp_error($ctag_terms)) {
                foreach ($ctag_terms as $term) {
                    if (ckan_taxo_user_can_access_term($term->term_id, 'ctag')) {
                        $taxonomy_row3[] = array('term' => $term->name, 'taxonomy' => 'ctag');
                    }
                }
            }
            
            if ($cformat_terms && !is_wp_error($cformat_terms)) {
                foreach ($cformat_terms as $term) {
                    if (ckan_taxo_user_can_access_term($term->term_id, 'cformat')) {
                        $taxonomy_row3[] = array('term' => $term->name, 'taxonomy' => 'cformat');
                    }
                }
            }
            
            if ($clicense_terms && !is_wp_error($clicense_terms)) {
                foreach ($clicense_terms as $term) {
                    if (ckan_taxo_user_can_access_term($term->term_id, 'clicense')) {
                        $taxonomy_row3[] = array('term' => $term->name, 'taxonomy' => 'clicense');
                    }
                }
            }
            
            if ($corg_terms && !is_wp_error($corg_terms)) {
                foreach ($corg_terms as $term) {
                    if (ckan_taxo_user_can_access_term($term->term_id, 'corg')) {
                        $taxonomy_row4[] = array('term' => $term->name, 'taxonomy' => 'corg');
                    }
                }
            }
            
            // Get post views
            $total_views = get_post_meta(get_the_ID(), 'ckan_total_views', true) ?: 0;
            $recent_views = get_post_meta(get_the_ID(), 'ckan_recent_views', true) ?: 0;
            
            // Get creation date
            $creation_date = get_post_meta(get_the_ID(), 'ckan_auto_createpost', true) ?: '';
            
            // Add to results
            $results[] = array(
                'id' => get_the_ID(),
                'title' => get_the_title(),
                'permalink' => get_permalink(),
                'excerpt' => wp_trim_words(get_the_content(), 30, '...'),
                'total_views' => $total_views,
                'recent_views' => $recent_views,
                'taxonomy_row1' => $taxonomy_row1,
                'taxonomy_row3' => $taxonomy_row3,
                'taxonomy_row4' => $taxonomy_row4,
                'creation_date' => $creation_date
            );
        }
        wp_reset_postdata();
    }
    
    // Get term information
    $term_name = 'ทั้งหมด';
    if ($term_id > 0) {
        $term = get_term($term_id, $taxonomy);
        $term_name = $term ? $term->name : '';
    }
    
    wp_send_json_success(array(
        'posts' => $results,
        'term_id' => $term_id,
        'term_name' => $term_name,
        'taxonomy' => $taxonomy,
        'found_posts' => count($results), // จำนวน post ที่มีสิทธิ์เข้าถึง
        'max_pages' => ceil(count($results) / 20) // คำนวณจำนวนหน้าใหม่
    ));
    
    wp_die();
}

// Shortcode function
function ckan_taxo_list_shortcode($atts) {
    // Parse attributes
    $atts = shortcode_atts(array(
        'taxo' => 'corg', // Default taxonomy is 'corg'
        'title' => '' // Optional custom title
    ), $atts);
    
    $taxonomy = sanitize_text_field($atts['taxo']);
    
    // Set default title based on taxonomy if not provided
    $title = !empty($atts['title']) ? sanitize_text_field($atts['title']) : '';
    
    if (empty($title)) {
        switch ($taxonomy) {
            case 'corg':
                $title = 'ข้อมูลองค์กร';
                break;
            case 'cdata':
                $title = 'ประเภทชุดข้อมูล';
                break;
            case 'cgov':
                $title = 'ธรรมาภิบาลข้อมูลภาครัฐ';
                break;
            case 'cgroup':
                $title = 'กลุ่มข้อมูล';
                break;
            case 'caccess':
                $title = 'การเข้าถึงข้อมูล';
                break;
            case 'cformat':
                $title = 'รูปแบบการเก็บข้อมูล';
                break;
            case 'clicense':
                $title = 'สิทธิการใช้งาน';
                break;
            case 'ctag':
                $title = 'แท็ก';
                break;
            default:
                $taxonomy_obj = get_taxonomy($taxonomy);
                $title = $taxonomy_obj ? $taxonomy_obj->labels->name : 'หมวดหมู่';
        }
    }
    
    // Enqueue styles and scripts
    wp_enqueue_style('ckan-taxo-list-css');
    wp_enqueue_script('ckan-taxo-list-js');
    
    // Start output buffering
    ob_start();
    
    // ดึง term ที่ผู้ใช้มีสิทธิ์เข้าถึง
    $terms = ckan_taxo_get_accessible_terms($taxonomy);
    
    // Check if taxonomy exists and has terms
    if (empty($terms)) {
        return sprintf('<div class="ckan-taxo-error">ไม่พบข้อมูลสำหรับ "%s" หรือคุณไม่มีสิทธิ์เข้าถึง</div>', esc_html($taxonomy));
    }
    
    // นับจำนวน post ทั้งหมดของ terms ที่มีสิทธิ์เข้าถึง
    $total_posts = 0;
    $accessible_posts_by_term = array();
    
    foreach ($terms as $term) {
        // ดึง post ที่เกี่ยวข้องกับ term นี้
        $args = array(
            'post_type' => 'ckan',
            'posts_per_page' => -1,
            'fields' => 'ids', // ดึงเฉพาะ ID เพื่อความเร็ว
            'tax_query' => array(
                array(
                    'taxonomy' => $taxonomy,
                    'field' => 'term_id',
                    'terms' => $term->term_id
                )
            )
        );
        
        $posts = get_posts($args);
        
        // ตรวจสอบการเข้าถึงสำหรับแต่ละ post
        $accessible_count = 0;
        $current_user_roles = wp_get_current_user()->roles;
        
        foreach ($posts as $post_id) {
            if (function_exists('ckan_permission_user_can_access') && ckan_permission_user_can_access($post_id, $current_user_roles)) {
                $accessible_count++;
            }
        }
        
        // จัดเก็บจำนวน posts ที่เข้าถึงได้
        $accessible_posts_by_term[$term->term_id] = $accessible_count;
        $total_posts += $accessible_count;
    }
    
    // Unique container ID to allow multiple instances on same page
    $container_id = 'ckan-taxo-' . uniqid();
    
    // Output container
    ?>
    <div id="<?php echo esc_attr($container_id); ?>" class="ckan-taxo-container" data-taxonomy="<?php echo esc_attr($taxonomy); ?>">
        <div class="ckan-taxo-header">
            <h3 class="ckan-taxo-title"><?php echo esc_html($title); ?></h3>
        </div>
        
        <!-- Skeleton loading -->
        <div class="ckan-taxo-skeleton">
            <?php for ($i = 0; $i < 5; $i++) : ?>
            <div class="ckan-taxo-skeleton-item">
                <div class="ckan-taxo-skeleton-name"></div>
                <div class="ckan-taxo-skeleton-count"></div>
            </div>
            <?php endfor; ?>
        </div>
        
        <!-- Content -->
        <div class="ckan-taxo-content" style="display: none;">
            <ul class="ckan-taxo-list">
                <li class="ckan-taxo-item <?php echo empty($_GET['term_id']) ? 'active' : ''; ?>" data-term-id="0">
                    <span class="ckan-taxo-item-name">ทั้งหมด</span>
                    <span class="ckan-taxo-item-count"><?php echo $total_posts; ?></span>
                </li>
                
                <?php foreach ($terms as $term) : ?>
                    <?php 
                    // ดึงจำนวน posts ที่เข้าถึงได้
                    $count = isset($accessible_posts_by_term[$term->term_id]) ? $accessible_posts_by_term[$term->term_id] : 0;
                    
                    // แสดงเฉพาะ term ที่มี post ที่เข้าถึงได้
                    if ($count > 0) : 
                    ?>
                    <li class="ckan-taxo-item <?php echo isset($_GET['term_id']) && $_GET['term_id'] == $term->term_id ? 'active' : ''; ?>" data-term-id="<?php echo $term->term_id; ?>">
                        <span class="ckan-taxo-item-name"><?php echo esc_html($term->name); ?></span>
                        <span class="ckan-taxo-item-count"><?php echo $count; ?></span>
                    </li>
                    <?php endif; ?>
                <?php endforeach; ?>
            </ul>
        </div>
    </div>
    <?php
    
    // Return the buffered content
    return ob_get_clean();
}




/**** ฟังก์ชั่นอัพเดตไฟล์ใน CKAN Repeater ******/

function ckan_rp_list($atts) {
    
    // Enqueue necessary styles and scripts
    wp_enqueue_style('font-awesome', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
    wp_enqueue_style('ckan-rp-list-css', get_stylesheet_directory_uri() . '/css/ckan-rp-list.css');
    wp_enqueue_style('ckan-data-preview-css', get_stylesheet_directory_uri() . '/css/ckan-data-preview.css');
    wp_enqueue_style('ckan-data-preview-filter-css', get_stylesheet_directory_uri() . '/css/ckan-data-preview-filter.css'); // เพิ่มไฟล์ CSS ใหม่
    
    // เพิ่ม CSS สำหรับ API
    wp_enqueue_style('ckan-api-css', get_stylesheet_directory_uri() . '/css/ckan-api.css');
    
    wp_enqueue_script('xlsx-js', 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js', array(), null, true);
    wp_enqueue_script('ckan-rp-list-js', get_stylesheet_directory_uri() . '/js/ckan-rp-list.js', array('jquery'), null, true);
    wp_enqueue_script('ckan-data-preview-js', get_stylesheet_directory_uri() . '/js/ckan-data-preview.js', array('jquery', 'xlsx-js'), null, true);
    wp_enqueue_script('ckan-data-preview-filter-js', get_stylesheet_directory_uri() . '/js/ckan-data-preview-filter.js', array('jquery'), null, true); // เพิ่มไฟล์ JavaScript ใหม่
    
    // เพิ่ม JavaScript สำหรับ API
    wp_enqueue_script('ckan-api-js', get_stylesheet_directory_uri() . '/js/ckan-api.js', array('jquery'), null, true);
    
    wp_add_inline_script('ckan-data-preview-js', 'var get_stylesheet_directory_uri = "' . get_stylesheet_directory_uri() . '";', 'before');
    
    // Localize script with AJAX URL and nonce
    wp_localize_script('ckan-rp-list-js', 'ckan_rp_list_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('ckan_rp_list_nonce')
    ));
    
    // Get current post ID
    $post_id = get_the_ID();
    
    // สร้าง resource_id สำหรับใช้ในตัวอย่าง API
    $resource_id = 'b8a8a6b5-' . substr(md5($post_id), 0, 4) . '-' . substr(md5($post_id), 4, 4) . '-' . substr(md5($post_id), 8, 4) . '-' . substr(md5($post_id), 12, 12);
    
    // Get repeater field values (using ACF)
    $ckan_assets = get_field('ckan_asset', $post_id);
    
    // Start output buffering to capture HTML
    ob_start();
    
    // Main container
    echo '<div class="ckan-assets-container" data-post-id="' . $post_id . '">';
    
    // Table header
    echo '<div class="ckan-assets-header">';
    echo '<h3>ข้อมูลและทรัพยากร</h3>';
    echo '<button class="ckan-add-asset-btn"><i class="fa fa-plus-circle"></i> เพิ่มรายการ</button>';
    echo '</div>';
    
    // Assets table
    echo '<div class="ckan-assets-table">';
    
    // Display assets if they exist
    if ($ckan_assets && is_array($ckan_assets) && count($ckan_assets) > 0) {
        foreach ($ckan_assets as $index => $asset) {
            $name = isset($asset['ckan_asset_name']) ? $asset['ckan_asset_name'] : '';
            $description = isset($asset['ckan_asset_discription']) ? $asset['ckan_asset_discription'] : '';
            $file_url = isset($asset['ckan_asset_link']) ? $asset['ckan_asset_link'] : '';
            
            // Get file extension and icon
            $file_ext = pathinfo($file_url, PATHINFO_EXTENSION);
            $file_icon = get_file_icon_class($file_ext);
            
            // Encode file URL for security
            $encoded_url = base64_encode($file_url);
            
            echo '<div class="ckan-asset-item" data-index="' . $index . '">';
            echo '<div class="ckan-asset-icon"><i class="' . $file_icon . '"></i></div>';
            echo '<div class="ckan-asset-info">';
            echo '<div class="ckan-asset-name">' . esc_html($name) . '</div>';
            echo '<div class="ckan-asset-description">' . esc_html($description) . '</div>';
            echo '</div>';
            echo '<div class="ckan-asset-actions">';
            echo '<button class="ckan-download-btn" data-url="' . esc_attr($encoded_url) . '">ดาวน์โหลด</button>';
            echo '<button class="ckan-preview-btn" data-url="' . esc_attr($encoded_url) . '" data-index="' . $index . '">ดูตัวอย่าง</button>';
            echo '<button class="ckan-edit-btn" data-index="' . $index . '"><i class="fa fa-pencil"></i></button>';
            echo '<button class="ckan-delete-btn" data-index="' . $index . '"><i class="fa fa-trash"></i></button>';
            echo '</div>';
            echo '</div>';
        }
    } else {
        echo '<div class="ckan-no-assets">ไม่มีรายการไฟล์</div>';
    }
    
    echo '</div>'; // End assets table
    
    // Modal for adding/editing assets
    echo '<div class="ckan-modal" id="ckan-asset-modal">';
    echo '<div class="ckan-modal-content">';
    echo '<span class="ckan-modal-close">&times;</span>';
    echo '<h3 class="ckan-modal-title">เพิ่มรายการไฟล์</h3>';
    
    echo '<form id="ckan-asset-form" enctype="multipart/form-data">';
    echo '<input type="hidden" id="ckan-asset-index" name="asset_index" value="">';
    echo '<input type="hidden" id="ckan-asset-file-id" name="asset_file_id" value="">';
    echo '<input type="hidden" id="ckan-asset-file-url" name="asset_file_url" value="">';
    
    echo '<div class="ckan-form-group">';
    echo '<label for="ckan-asset-name">ชื่อไฟล์</label>';
    echo '<input type="text" id="ckan-asset-name" name="asset_name" required>';
    echo '</div>';
    
    echo '<div class="ckan-form-group">';
    echo '<label for="ckan-asset-description">คำอธิบายไฟล์</label>';
    echo '<textarea id="ckan-asset-description" name="asset_description"></textarea>';
    echo '</div>';
    
    echo '<div class="ckan-form-group">';
    echo '<label for="ckan-asset-file">อัพโหลดไฟล์</label>';
    echo '<div class="ckan-file-upload-wrapper">';
    echo '<input type="file" id="ckan-asset-file" name="asset_file">';
    echo '<div class="ckan-upload-status"></div>';
    echo '</div>';
    echo '<div class="ckan-current-file-container" style="display:none;">';
    echo '<span class="ckan-current-file-label">ไฟล์ปัจจุบัน: </span>';
    echo '<span id="ckan-current-file"></span>';
    echo '</div>';
    echo '</div>';
    
    echo '<div class="ckan-form-actions">';
    echo '<button type="submit" class="ckan-submit-btn">บันทึก</button>';
    echo '<button type="button" class="ckan-cancel-btn">ยกเลิก</button>';
    echo '</div>';
    
    echo '</form>';
    echo '</div>'; // End modal content
    echo '</div>'; // End modal
    
    // เพิ่ม Modal สำหรับแสดงตัวอย่างไฟล์ (Preview Modal)
    echo '<div class="ckan-preview-modal" id="ckan-preview-modal">';
    echo '<div class="ckan-preview-modal-content">';
    echo '<span class="ckan-preview-modal-close">&times;</span>';
    echo '<h3 class="ckan-preview-modal-title">ดูตัวอย่าง</h3>';
    // เพิ่มปุ่ม DATA API ที่นี่
    echo '<button class="data-api-btn">DATA API</button>';
    echo '<div class="ckan-preview-modal-body">';
    echo '<div class="ckan-preview-loading"><i class="fa fa-spinner fa-spin"></i> กำลังโหลด...</div>';
    echo '<div class="ckan-preview-data"></div>';
    echo '</div>'; // End modal body
    echo '</div>'; // End modal content
    echo '</div>'; // End modal
    
    // เพิ่ม Modal สำหรับแสดง API (API Modal)
    echo '<div class="ckan-api-modal" id="ckan-api-modal">';
    echo '<div class="ckan-api-modal-content">';
    echo '<span class="ckan-api-modal-close">&times;</span>';
    echo '<h3 class="ckan-api-modal-title">Data API</h3>';
    echo '<input type="hidden" id="current-file-index" value="">';
    echo '<div class="ckan-api-modal-body">';
    
    echo '<div class="ckan-api-tabs">';
    echo '<div class="ckan-api-tab active" data-tab="ckan-api-info">ข้อมูลทั่วไป</div>';
    echo '<div class="ckan-api-tab" data-tab="ckan-api-endpoints">Endpoints</div>';
    echo '<div class="ckan-api-tab" data-tab="ckan-api-file-data">ข้อมูลไฟล์</div>';
    echo '<div class="ckan-api-tab" data-tab="ckan-api-examples">ตัวอย่างการใช้งาน</div>';
    echo '</div>';
    
    // Tab ข้อมูลทั่วไป
    echo '<div id="ckan-api-info" class="ckan-api-tab-content active">';
    echo '<p>เข้าถึงทรัพยากรข้อมูลผ่าน API ของเว็บด้วยภาษาสอนถามที่กำหนดไว้. Further information in the main <a href="https://docs.ckan.org/en/latest/api/" target="_blank">CKAN Data API</a> and <a href="https://docs.ckan.org/en/latest/api/datastore.html" target="_blank">DataStore</a> documentation.</p>';
    
    echo '<div class="ckan-api-table-container">';
    echo '<table class="ckan-api-table">';
    echo '<thead><tr><th>Action</th><th>Endpoint</th></tr></thead>';
    echo '<tbody>';
    echo '<tr><td>สร้าง</td><td><code>' . home_url('/wp-json/ckan/v1/create') . '</code></td></tr>';
    echo '<tr><td>ปรับปรุง/เพิ่ม</td><td><code>' . home_url('/wp-json/ckan/v1/upsert') . '</code></td></tr>';
    echo '<tr><td>เรียกดูข้อมูล</td><td><code>' . home_url('/wp-json/ckan/v1/search') . '</code></td></tr>';
    echo '</tbody>';
    echo '</table>';
    echo '</div>';
    
    echo '<p>กำลังเรียกดูข้อมูล » <strong>(จำกัดผลลัพธ์ 10,000 เรคคอร์ด)</strong></p>';
    
    // ตัวอย่างการเรียกดูข้อมูล
    echo '<h3>ตัวอย่างเรียกดูข้อมูล (5 ผลลัพธ์แรก)</h3>';
    echo '<div class="ckan-api-code">';
    echo '<a href="' . home_url('/wp-json/ckan/v1/search?limit=5&resource_id=' . $resource_id) . '" target="_blank">' . home_url('/wp-json/ckan/v1/search?limit=5&resource_id=' . $resource_id) . '</a>';
    echo '</div>';
    
    echo '<h3>ตัวอย่างเรียกดูข้อมูล (ผลลัพธ์ที่มีคำว่า \'jones\')</h3>';
    echo '<div class="ckan-api-code">';
    echo '<a href="' . home_url('/wp-json/ckan/v1/search?q=jones&resource_id=' . $resource_id) . '" target="_blank">' . home_url('/wp-json/ckan/v1/search?q=jones&resource_id=' . $resource_id) . '</a>';
    echo '</div>';
    
    echo '</div>'; // End Tab ข้อมูลทั่วไป
    
    // Tab Endpoints
    echo '<div id="ckan-api-endpoints" class="ckan-api-tab-content">';
    echo '<h3>GET API สำหรับข้อมูลชุดนี้</h3>';
    echo '<div class="ckan-api-code">';
    echo '<code id="ckan-api-get-endpoint">' . home_url('/wp-json/ckan/v1/data/' . $post_id) . '</code>';
    echo '</div>';
    
    echo '<h3>SEARCH API สำหรับข้อมูลชุดนี้</h3>';
    echo '<div class="ckan-api-code">';
    echo '<code id="ckan-api-search-endpoint">' . home_url('/wp-json/ckan/v1/search?q=' . $post_id) . '</code>';
    echo '</div>';
    
    echo '<h3>FILE API สำหรับไฟล์นี้</h3>';
    echo '<div class="ckan-api-code">';
    echo '<code id="ckan-api-file-endpoint"></code>';
    echo '</div>';
    
    echo '<h3>ตัวอย่างการเรียกดูข้อมูล (5 ผลลัพธ์แรก)</h3>';
    echo '<div class="ckan-api-code">';
    echo '<a href="' . home_url('/wp-json/ckan/v1/search?limit=5&resource_id=' . $resource_id) . '" target="_blank">' . home_url('/wp-json/ckan/v1/search?limit=5&resource_id=' . $resource_id) . '</a>';
    echo '</div>';
    
    echo '<h3>ตัวอย่างการเรียกดูข้อมูล (ผลลัพธ์ที่มีคำว่า \'jones\')</h3>';
    echo '<div class="ckan-api-code">';
    echo '<a href="' . home_url('/wp-json/ckan/v1/search?q=jones&resource_id=' . $resource_id) . '" target="_blank">' . home_url('/wp-json/ckan/v1/search?q=jones&resource_id=' . $resource_id) . '</a>';
    echo '</div>';
    echo '</div>'; // End Tab Endpoints
    
    // Tab ข้อมูลไฟล์
    echo '<div id="ckan-api-file-data" class="ckan-api-tab-content">';
    echo '<h3>ข้อมูลจากไฟล์นี้ (JSON)</h3>';
    echo '<p>ข้อมูลจากไฟล์จะถูกแปลงเป็น JSON format ตามโครงสร้างของไฟล์ต้นฉบับ:</p>';
    echo '<div class="ckan-api-code">';
    echo '<a href="#" id="ckan-api-file-data-link" target="_blank">คลิกเพื่อดูข้อมูล JSON จากไฟล์นี้</a>';
    echo '</div>';
    
    echo '<h3>ตัวอย่างโครงสร้างข้อมูล JSON</h3>';
    echo '<pre class="ckan-api-json-example">';
    echo '{
  "success": true,
  "result": {
    "resource_id": "' . $post_id . '_x",
    "file_name": "example_file.csv",
    "format": "csv",
    "data": {
      "title": "ข้อมูลตัวอย่าง",
      "fields": [
        {"id": "field1", "type": "text"},
        {"id": "field2", "type": "text"},
        {"id": "field3", "type": "text"}
      ],
      "records": [
        {"field1": "value1", "field2": "value2", "field3": "value3"},
        {"field1": "value4", "field2": "value5", "field3": "value6"}
      ]
    }
  }
}';
    echo '</pre>';
    echo '</div>'; // End Tab ข้อมูลไฟล์
    
    // Tab ตัวอย่างการใช้งาน
    echo '<div id="ckan-api-examples" class="ckan-api-tab-content">';
    echo '<div class="ckan-api-example">';
    echo '<h3>ตัวอย่าง: Javascript</h3>';
    echo '<pre>';
    echo "// jQuery เริ่มต้น
$.ajax({
  url: '" . home_url('/wp-json/ckan/v1/data/' . $post_id) . "',
  dataType: 'json',
  success: function(data) {
    alert('Total results: ' + data.result.total)
  }
});

// JavaScript (ES6) สำหรับข้อมูลไฟล์
fetch(document.getElementById('ckan-api-file-endpoint').textContent)
  .then(response => response.json())
  .then(data => {
    console.log('File data:', data.result.data.records)
  });";
    echo '</pre>';
    echo '</div>';
    
    echo '<div class="ckan-api-example">';
    echo '<h3>ตัวอย่าง: Python</h3>';
    echo '<pre>';
    echo "import urllib.request
import json
import pprint

# ตัวอย่างการดึงข้อมูลไฟล์
url = document.getElementById('ckan-api-file-endpoint').textContent
fileobj = urllib.request.urlopen(url)
response_dict = json.loads(fileobj.read())

# เข้าถึงข้อมูลไฟล์
result = response_dict['result']
file_data = result['data']
records = file_data['records']

# แสดงผลข้อมูล
print('File name:', result['file_name'])
print('Total records:', len(records))
pprint.pprint(records[0])  # แสดงข้อมูลแรก";
    echo '</pre>';
    echo '</div>';
    echo '</div>'; // End Tab ตัวอย่างการใช้งาน
    
    echo '</div>'; // End API modal body
    echo '</div>'; // End API modal content
    echo '</div>'; // End API modal
    
    echo '</div>'; // End main container
    
    // Return the buffered content
    return ob_get_clean();
}
add_shortcode('ckan_rp_list', 'ckan_rp_list');


// AJAX handler for file preview
function ckan_get_file_preview() {
    // Check nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_rp_list_nonce')) {
        wp_send_json_error('Security check failed');
    }
    
    // Get file URL
    $file_url = isset($_POST['file_url']) ? esc_url_raw($_POST['file_url']) : '';
    
    if (empty($file_url)) {
        wp_send_json_error('Invalid file URL');
    }
    
    // Get file extension
    $file_ext = strtolower(pathinfo($file_url, PATHINFO_EXTENSION));
    
    // Use WordPress HTTP API to get file content
    $response = wp_remote_get($file_url, array(
        'timeout' => 60,
        'sslverify' => false
    ));
    
    if (is_wp_error($response)) {
        wp_send_json_error($response->get_error_message());
    }
    
    $file_content = wp_remote_retrieve_body($response);
    
    if (empty($file_content)) {
        wp_send_json_error('File is empty or could not be read');
    }
    
    // For Excel files, send as base64 to handle binary data
    if ($file_ext === 'xls' || $file_ext === 'xlsx') {
        wp_send_json_success(array(
            'content' => base64_encode($file_content),
            'type' => 'excel',
            'extension' => $file_ext
        ));
    } else {
        // For text-based files, send as is
        wp_send_json_success(array(
            'content' => $file_content,
            'type' => 'text',
            'extension' => $file_ext
        ));
    }
}
add_action('wp_ajax_ckan_get_file_preview', 'ckan_get_file_preview');
add_action('wp_ajax_nopriv_ckan_get_file_preview', 'ckan_get_file_preview');


// Function to get file icon class based on extension
function get_file_icon_class($ext) {
    $ext = strtolower($ext);
    
    $icons = array(
        'pdf' => 'fa fa-file-pdf-o',
        'doc' => 'fa fa-file-word-o',
        'docx' => 'fa fa-file-word-o',
        'xls' => 'fa fa-file-excel-o',
        'xlsx' => 'fa fa-file-excel-o',
        'ppt' => 'fa fa-file-powerpoint-o',
        'pptx' => 'fa fa-file-powerpoint-o',
        'jpg' => 'fa fa-file-image-o',
        'jpeg' => 'fa fa-file-image-o',
        'png' => 'fa fa-file-image-o',
        'gif' => 'fa fa-file-image-o',
        'zip' => 'fa fa-file-archive-o',
        'rar' => 'fa fa-file-archive-o',
        'txt' => 'fa fa-file-text-o',
    );
    
    return isset($icons[$ext]) ? $icons[$ext] : 'fa fa-file-o';
}

// AJAX handler for file download
function ckan_handle_file_download() {
    // Check nonce
    if (!isset($_GET['nonce']) || !wp_verify_nonce($_GET['nonce'], 'ckan_rp_list_nonce')) {
        wp_die('Security check failed');
    }
    
    // Get encoded URL and decode
    if (isset($_GET['file']) && !empty($_GET['file'])) {
        $file_url = base64_decode($_GET['file']);
        
        // Redirect to file
        wp_redirect($file_url);
        exit;
    }
    
    wp_die('Invalid file request');
}
add_action('wp_ajax_ckan_download_file', 'ckan_handle_file_download');
add_action('wp_ajax_nopriv_ckan_download_file', 'ckan_handle_file_download');

// AJAX handler for file upload to Media Library
function ckan_upload_file() {
    // Check nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_rp_list_nonce')) {
        wp_send_json_error('Security check failed');
    }
    
    // Check if file exists
    if (!isset($_FILES['file']) || empty($_FILES['file']['name'])) {
        wp_send_json_error('No file was uploaded');
    }
    
    // Set up the required input for media_handle_upload
    $_FILES['upload_file'] = $_FILES['file'];
    
    // Handle the upload - automatically adds to media library
    $attachment_id = media_handle_upload('upload_file', 0);
    
    if (is_wp_error($attachment_id)) {
        wp_send_json_error($attachment_id->get_error_message());
    } else {
        // Get file URL
        $file_url = wp_get_attachment_url($attachment_id);
        
        wp_send_json_success(array(
            'file_id' => $attachment_id,
            'file_url' => $file_url,
            'file_name' => basename($file_url)
        ));
    }
}
add_action('wp_ajax_ckan_upload_file', 'ckan_upload_file');

// AJAX handler for saving asset
function ckan_save_asset() {
    // Check nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_rp_list_nonce')) {
        wp_send_json_error('Security check failed');
    }
    
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $index = isset($_POST['index']) && $_POST['index'] !== '' ? intval($_POST['index']) : -1;
    $name = isset($_POST['name']) ? sanitize_text_field($_POST['name']) : '';
    $description = isset($_POST['description']) ? sanitize_textarea_field($_POST['description']) : '';
    $file_url = isset($_POST['file_url']) ? esc_url_raw($_POST['file_url']) : '';
    
    // Get current assets
    $ckan_assets = get_field('ckan_asset', $post_id);
    
    if (!is_array($ckan_assets)) {
        $ckan_assets = array();
    }
    
    // Update or add new asset
    $asset = array(
        'ckan_asset_name' => $name,
        'ckan_asset_discription' => $description,
        'ckan_asset_link' => $file_url
    );
    
    if ($index >= 0 && isset($ckan_assets[$index])) {
        // Update existing asset
        $ckan_assets[$index] = $asset;
    } else {
        // Add new asset
        $ckan_assets[] = $asset;
    }
    
    // Update the field
    update_field('ckan_asset', $ckan_assets, $post_id);
    
    wp_send_json_success(array(
        'message' => 'Asset saved successfully',
        'assets' => $ckan_assets
    ));
}
add_action('wp_ajax_ckan_save_asset', 'ckan_save_asset');

// AJAX handler for deleting asset
function ckan_delete_asset() {
    // Check nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_rp_list_nonce')) {
        wp_send_json_error('Security check failed');
    }
    
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $index = isset($_POST['index']) ? intval($_POST['index']) : -1;
    
    // Get current assets
    $ckan_assets = get_field('ckan_asset', $post_id);
    
    if (!is_array($ckan_assets) || !isset($ckan_assets[$index])) {
        wp_send_json_error('Asset not found');
    }
    
    // Remove asset
    array_splice($ckan_assets, $index, 1);
    
    // Update the field
    update_field('ckan_asset', $ckan_assets, $post_id);
    
    wp_send_json_success(array(
        'message' => 'Asset deleted successfully',
        'assets' => $ckan_assets
    ));
}
add_action('wp_ajax_ckan_delete_asset', 'ckan_delete_asset');

// Make sure we have the required WordPress file upload functionality
function ckan_includes_for_media_upload() {
    if (!function_exists('wp_handle_upload')) {
        require_once(ABSPATH . 'wp-admin/includes/file.php');
    }
    if (!function_exists('wp_generate_attachment_metadata')) {
        require_once(ABSPATH . 'wp-admin/includes/image.php');
    }
    if (!function_exists('media_handle_upload')) {
        require_once(ABSPATH . 'wp-admin/includes/media.php');
    }
}
add_action('init', 'ckan_includes_for_media_upload');




/**** ฟังก์ชั่นแสดง CKAN METADA *****/

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

// Shortcode function for displaying CKAN metadata fields
function ckan_metafield($atts) {
    // Enqueue necessary styles and scripts
    wp_enqueue_style('ckan-metafield-css');
    wp_enqueue_script('ckan-metafield-js');
    
    // Get current post ID
    $post_id = get_the_ID();
    
    // Define metadata fields and their labels
    $metadata_fields = ckan_get_metadata_fields();
    
    // Start output buffering to capture HTML
    ob_start();
    
    // เช็คว่าผู้ใช้ปัจจุบันเป็น admin หรือไม่
    $is_admin = current_user_can('administrator');
    
    // ดึงค่า API Endpoint URL จาก custom field ของโพสนี้
    $api_endpoint = get_field('ckan_api_endpoint', $post_id);
    
    // Main container - เพิ่ม class สำหรับ admin
    echo '<div class="ckan-metadata-container' . ($is_admin ? ' ckan-metadata-admin' : '') . '" data-post-id="' . $post_id . '">';
    
    // Section header
    echo '<div class="ckan-metadata-header">';
    echo '<h3>ข้อมูลชุดข้อมูล</h3>';
    
    // เพิ่มปุ่มสำหรับ admin
    if ($is_admin) {
        echo '<div class="ckan-admin-actions">';
        echo '<button type="button" class="ckan-api-update-btn" data-endpoint="' . esc_attr($api_endpoint) . '">อัพเดต API</button>';
        echo '<button type="button" class="ckan-api-test-btn">ทดสอบข้อมูล API</button>';
        echo '<button type="button" class="ckan-csv-export-btn">ส่งออกเป็น CSV</button>';
        
        // เพิ่มลิงก์เปิด modal ตั้งค่า API Endpoint
        echo '<a href="#" class="ckan-settings-link" title="ตั้งค่า API Endpoint">
            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>
        </a>';
        
        echo '</div>';
        
        // Modal ตั้งค่า API Endpoint URL
        echo '<div id="ckan-endpoint-modal" class="ckan-modal" style="display:none;">
            <div class="ckan-modal-content">
                <div class="ckan-modal-header">
                    <h4>ตั้งค่า API Endpoint</h4>
                    <span class="ckan-modal-close">&times;</span>
                </div>
                <div class="ckan-modal-body">
                    <div class="ckan-endpoint-form">
                        <label for="ckan-endpoint-url">API Endpoint URL:</label>
                        <input type="url" id="ckan-endpoint-url" class="ckan-endpoint-url-input" value="' . esc_attr($api_endpoint) . '" placeholder="https://api.example.com/endpoint" />
                        <p class="ckan-endpoint-description">กำหนด URL ปลายทางสำหรับส่งข้อมูล CKAN ของโพสนี้</p>
                    </div>
                    <div class="ckan-endpoint-actions">
                        <button type="button" class="ckan-save-endpoint-btn">บันทึก</button>
                        <button type="button" class="ckan-cancel-endpoint-btn">ยกเลิก</button>
                    </div>
                    <div class="ckan-endpoint-status" style="display:none;"></div>
                </div>
            </div>
        </div>';
        
        // Container สำหรับแสดง JSON output
        echo '<div class="ckan-api-response-container" style="display:none;">
            <div class="ckan-api-response-header">
                <h4>JSON Output</h4>
                <button type="button" class="ckan-close-json-btn">✕</button>
            </div>
            <pre class="ckan-api-response-json"></pre>
        </div>';
    }
    
    echo '</div>';
    
    // Metadata table
    echo '<div class="ckan-metadata-table">';
    
    // Display all fields directly
    foreach ($metadata_fields as $field) {
        $field_value = get_field($field['field'], $post_id);
        
        // Format value based on type
        $formatted_value = ckan_format_field_value($field_value, $field['type']);
        
        echo '<div class="ckan-metadata-row" data-field="' . esc_attr($field['field']) . '" data-type="' . esc_attr($field['type']) . '">';
        echo '<div class="ckan-metadata-label">' . esc_html($field['label']);
        
        // เพิ่มไอคอนแก้ไขสำหรับ admin
        if ($is_admin) {
            echo '<span class="ckan-edit-icon" title="แก้ไข">
                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17 3a2.85 2.85 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path></svg>
            </span>';
        }
        
        echo '</div>';
        echo '<div class="ckan-metadata-value" data-original-value="' . esc_attr($field_value) . '">' . $formatted_value . '</div>';
        echo '</div>';
    }
    
    echo '</div>'; // End metadata table
    
    echo '</div>'; // End main container
    
    // Return the buffered content
    return ob_get_clean();
}
add_shortcode('ckan_metafield', 'ckan_metafield');

/**
 * Get metadata fields configuration
 */
function ckan_get_metadata_fields() {
    return array(
        // หมวดที่ 1
        array(
            'label' => 'ประเภทชุดข้อมูล',
            'field' => 'ckan_cdata',
            'type' => 'text'
        ),
        array(
            'label' => 'ยินยอมให้นำข้อมูลชุดข้อมูลไปใช้ที่ GD-Catalog',
            'field' => 'ckan_gd_agree',
            'type' => 'boolean'
        ),
        // ฟิลด์อื่นๆ ตามเดิม...
        array(
            'label' => 'ชื่อผู้ติดต่อ',
            'field' => 'ckan_org_name',
            'type' => 'text'
        ),
        array(
            'label' => 'อีเมล์ผู้ติดต่อ',
            'field' => 'ckan_org_mail',
            'type' => 'email'
        ),
        array(
            'label' => 'วัตถุประสงค์',
            'field' => 'ckan_objective',
            'type' => 'text'
        ),
        array(
            'label' => 'หน่วยความถี่ของการปรับปรุงข้อมูล',
            'field' => 'ckan_fr_update',
            'type' => 'text'
        ),
        array(
            'label' => 'ค่าความถี่ของการปรับปรุงข้อมูล (ความถี่เป็นปี)',
            'field' => 'ckan_fr_year',
            'type' => 'text'
        ),
        array(
            'label' => 'ขอบเขตเชิงภูมิศาสตร์หรือเชิงพื้นที่',
            'field' => 'ckan_area',
            'type' => 'text'
        ),
        array(
            'label' => 'แหล่งที่มา',
            'field' => 'ckan_source',
            'type' => 'text'
        ),
        array(
            'label' => 'รูปแบบการเก็บข้อมูล',
            'field' => 'ckan_cformat',
            'type' => 'text'
        ),
        array(
            'label' => 'หมวดหมู่ข้อมูลตามธรรมาภิบาลข้อมูลภาครัฐ',
            'field' => 'ckan_gov',
            'type' => 'text'
        ),
        array(
            'label' => 'สัญญาอนุญาตให้ใช้ข้อมูล',
            'field' => 'ckan_clicense',
            'type' => 'text'
        ),
        // หมวดที่ 2
        array(
            'label' => 'เงื่อนไขในการเข้าถึงข้อมูล',
            'field' => 'ckan_caccess',
            'type' => 'text'
        ),
        array(
            'label' => 'URL',
            'field' => 'ckan_url',
            'type' => 'url'
        ),
        array(
            'label' => 'ภาษาที่ใช้',
            'field' => 'ckan_language',
            'type' => 'text'
        ),
        array(
            'label' => 'วันที่เริ่มสร้าง',
            'field' => 'ckan_data_create',
            'type' => 'date'
        ),
        array(
            'label' => 'วันที่ปรับปรุง',
            'field' => 'ckan_data_update',
            'type' => 'date'
        ),
        array(
            'label' => 'ชุดข้อมูลที่มีคุณค่าสูง',
            'field' => 'ckan_height_value',
            'type' => 'text'
        ),
        array(
            'label' => 'ข้อมูลอ้างอิง',
            'field' => 'ckan_ref',
            'type' => 'text'
        ),
        array(
            'label' => 'สร้างโดย',
            'field' => 'ckan_create_by',
            'type' => 'text'
        ),
        array(
            'label' => 'สร้างในระบบเมื่อ',
            'field' => 'ckan_auto_createpost',
            'type' => 'datetime'
        ),
        array(
            'label' => 'ปรับปรุงครั้งล่าสุดในระบบเมื่อ',
            'field' => 'ckan_auto_updatepost',
            'type' => 'datetime'
        )
    );
}

/**
 * Helper function to format field values based on type
 */
function ckan_format_field_value($value, $type) {
    if (empty($value) && $value !== '0' && $value !== 0) {
        return '<span class="ckan-empty-value">ไม่มีข้อมูล</span>';
    }
    
    switch ($type) {
        case 'boolean':
            if ($value === true || $value === 1 || $value === '1' || strtolower($value) === 'true' || strtolower($value) === 'yes') {
                return '<span class="boolean-true">ใช่</span>';
            } else {
                return '<span class="boolean-false">ไม่ใช่</span>';
            }
            
        case 'email':
            return '<a href="mailto:' . esc_attr($value) . '">' . esc_html($value) . '</a>';
            
        case 'url':
            $display_url = esc_html($value);
            // ตัดข้อความ URL ที่ยาวเกินไปและแสดงเป็น tooltip
            if (strlen($display_url) > 50) {
                $display_url = substr($display_url, 0, 47) . '...';
            }
            return '<a href="' . esc_url($value) . '" target="_blank" title="' . esc_attr($value) . '">' . $display_url . '</a>';
            
        case 'date':
            // Assuming value is in standard format or timestamp
            if (is_numeric($value)) {
                return date_i18n(get_option('date_format'), $value);
            } elseif (strtotime($value)) {
                return date_i18n(get_option('date_format'), strtotime($value));
            } else {
                return esc_html($value);
            }
            
        case 'datetime':
            // Assuming value is in standard format or timestamp
            if (is_numeric($value)) {
                return date_i18n(get_option('date_format') . ' ' . get_option('time_format'), $value);
            } elseif (strtotime($value)) {
                return date_i18n(get_option('date_format') . ' ' . get_option('time_format'), strtotime($value));
            } else {
                return esc_html($value);
            }
            
        default:
            return esc_html($value);
    }
}

/**
 * Register and enqueue styles and scripts
 */
function ckan_metafield_enqueue_scripts() {
    wp_register_style('ckan-metafield-css', get_stylesheet_directory_uri() . '/css/ckan-metafield.css', array(), '1.0.4');
    wp_register_script('ckan-metafield-js', get_stylesheet_directory_uri() . '/js/ckan-metafield.js', array('jquery'), '1.0.4', true);
    
    // เพิ่ม admin-specific JS และ localize script
    if (current_user_can('administrator')) {
        wp_register_script('ckan-metafield-admin-js', get_stylesheet_directory_uri() . '/js/ckan-metafield-admin.js', array('jquery', 'ckan-metafield-js'), '1.0.3', true);
        
        // ส่ง data ไปยัง JavaScript
        wp_localize_script('ckan-metafield-admin-js', 'ckanMetafieldAdmin', array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('ckan_edit_nonce'),
            'isAdmin' => true,
            'editIcon' => '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17 3a2.85 2.85 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path></svg>',
            'saveText' => 'บันทึก',
            'cancelText' => 'ยกเลิก',
            'editingText' => 'กำลังแก้ไข...',
            'successText' => 'บันทึกสำเร็จ',
            'errorText' => 'เกิดข้อผิดพลาด',
            'apiUpdateText' => 'กำลังอัพเดต API...',
            'apiSuccessText' => 'อัพเดต API สำเร็จ',
            'apiErrorText' => 'เกิดข้อผิดพลาดในการอัพเดต API',
            'endpointEmptyText' => 'กรุณากำหนด API Endpoint สำหรับโพสนี้',
            'exportCsvText' => 'กำลังสร้างไฟล์ CSV...',
            'endpointSavingText' => 'กำลังบันทึก API Endpoint...',
            'endpointSavedText' => 'บันทึก API Endpoint สำเร็จ',
            'taxonomyLoadingText' => 'กำลังโหลดข้อมูล Taxonomy...',
            'taxonomyLoadedText' => 'โหลดข้อมูล Taxonomy สำเร็จ',
            'taxonomyErrorText' => 'เกิดข้อผิดพลาดในการโหลดข้อมูล Taxonomy',
            'assetsLoadingText' => 'กำลังโหลดข้อมูลไฟล์แนบ...',
            'assetsLoadedText' => 'โหลดข้อมูลไฟล์แนบสำเร็จ',
            'assetsErrorText' => 'เกิดข้อผิดพลาดในการโหลดข้อมูลไฟล์แนบ'
        ));
        
        // Enqueue ทันทีหากเป็น admin
        wp_enqueue_script('ckan-metafield-admin-js');
    }
}
add_action('wp_enqueue_scripts', 'ckan_metafield_enqueue_scripts');


/**
 * AJAX handler สำหรับการดึงข้อมูล Taxonomy ของโพสต์
 */
function ckan_get_taxonomies_handler() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_edit_nonce')) {
        wp_send_json_error('Security check failed');
        die();
    }

    // รับข้อมูลจาก POST
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;

    // ตรวจสอบว่า post นี้มีอยู่จริง
    if (empty($post_id) || !get_post($post_id)) {
        wp_send_json_error('Invalid post ID');
        die();
    }

    // รายการ Taxonomy ที่ต้องการดึงข้อมูล
    $taxonomies = array(
        'ctag' => 'CKAN TAG',
        'cgroup' => 'CKAN กลุ่ม',
        'caccess' => 'CKAN การเข้าถึง',
        'cdata' => 'CKAN ชุดข้อมูล',
        'cformat' => 'CKAN รูปแบบ',
        'clicense' => 'CKAN สัญญาอนุญาต',
        'cgov' => 'CKAN หมวดหมู่ตามธรรมาภิบาลข้อมูล',
        'corg' => 'CKAN องค์กร'
    );

    $taxonomy_data = array();

    // ดึงข้อมูล terms จากแต่ละ taxonomy
    foreach ($taxonomies as $tax_slug => $tax_name) {
        $terms = get_the_terms($post_id, $tax_slug);
        $terms_data = array();

        if (!empty($terms) && !is_wp_error($terms)) {
            foreach ($terms as $term) {
                $terms_data[] = array(
                    'term_id' => $term->term_id,
                    'name' => $term->name,
                    'slug' => $term->slug
                );
            }
        }

        $taxonomy_data[$tax_slug] = array(
            'label' => $tax_name,
            'terms' => $terms_data
        );
    }

    wp_send_json_success($taxonomy_data);
    die();
}

// เพิ่ม AJAX handler สำหรับดึงข้อมูล Taxonomy
add_action('wp_ajax_ckan_get_taxonomies', 'ckan_get_taxonomies_handler');
add_action('wp_ajax_nopriv_ckan_get_taxonomies', '__return_false');


/**
 * AJAX handler สำหรับการดึงข้อมูล Assets จาก ACF Repeater field
 */
function ckan_get_assets_handler() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_edit_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        die();
    }

    // รับข้อมูลจาก POST
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;

    // ตรวจสอบว่า post นี้มีอยู่จริง
    if (empty($post_id) || !get_post($post_id)) {
        wp_send_json_error(array('message' => 'Invalid post ID'));
        die();
    }

    // ตรวจสอบว่ามี ACF plugin ทำงานอยู่หรือไม่
    if (!function_exists('get_field') || !function_exists('have_rows') || !function_exists('the_row')) {
        wp_send_json_error(array('message' => 'ACF functions not available'));
        die();
    }

    $assets = array();
    $method_used = '';
    
    // วิธีที่ 1: ใช้ get_field สำหรับดึงข้อมูลทั้งหมดในครั้งเดียว (แนะนำ)
    $asset_rows = get_field('ckan_asset', $post_id);
    
    if (!empty($asset_rows) && is_array($asset_rows)) {
        $method_used = 'get_field';
        
        foreach ($asset_rows as $row) {
            if (is_array($row)) {
                $assets[] = array(
                    'name' => isset($row['ckan_asset_name']) ? $row['ckan_asset_name'] : '',
                    'description' => isset($row['ckan_asset_discription']) ? $row['ckan_asset_discription'] : '',
                    'link' => isset($row['ckan_asset_link']) ? $row['ckan_asset_link'] : ''
                );
            }
        }
    } 
    // วิธีที่ 2: ใช้ have_rows และ the_row หากวิธีที่ 1 ไม่ได้ผล
    elseif (have_rows('ckan_asset', $post_id)) {
        $method_used = 'have_rows';
        
        while (have_rows('ckan_asset', $post_id)) {
            the_row();
            
            $assets[] = array(
                'name' => get_sub_field('ckan_asset_name') ?: '',
                'description' => get_sub_field('ckan_asset_discription') ?: '',
                'link' => get_sub_field('ckan_asset_link') ?: ''
            );
        }
    }
    
    // วิธีที่ 3: ใช้ get_post_meta หากทั้งสองวิธีไม่ได้ผล
    if (empty($assets)) {
        $method_used = 'get_post_meta';
        // ACF เก็บข้อมูล repeater ในรูปแบบ serialized array
        $meta_key = 'ckan_asset';
        $count_key = $meta_key . '_count';
        
        $count = get_post_meta($post_id, $count_key, true);
        if (!empty($count) && is_numeric($count)) {
            for ($i = 0; $i < intval($count); $i++) {
                $name = get_post_meta($post_id, $meta_key . '_' . $i . '_ckan_asset_name', true);
                $description = get_post_meta($post_id, $meta_key . '_' . $i . '_ckan_asset_discription', true);
                $link = get_post_meta($post_id, $meta_key . '_' . $i . '_ckan_asset_link', true);
                
                if (!empty($name) || !empty($description) || !empty($link)) {
                    $assets[] = array(
                        'name' => $name ?: '',
                        'description' => $description ?: '',
                        'link' => $link ?: ''
                    );
                }
            }
        }
    }

    // ส่งกลับผลลัพธ์พร้อมกับข้อมูลเพิ่มเติมสำหรับการแก้ไขข้อผิดพลาด
    wp_send_json_success(array(
        'assets' => $assets,
        'debug_info' => array(
            'method_used' => $method_used,
            'post_id' => $post_id,
            'acf_active' => function_exists('get_field'),
            'count' => count($assets)
        )
    ));
    die();
}

// เพิ่ม AJAX handler สำหรับดึงข้อมูล Assets
add_action('wp_ajax_ckan_get_assets', 'ckan_get_assets_handler');
add_action('wp_ajax_nopriv_ckan_get_assets', '__return_false');



/**** เพิ่ม AJAX handler functions ****/
function ckan_metafield_ajax_handlers() {
    // AJAX สำหรับบันทึกข้อมูล
    add_action('wp_ajax_ckan_update_field', 'ckan_update_field_handler');
    add_action('wp_ajax_nopriv_ckan_update_field', '__return_false'); // ไม่อนุญาตให้ non-logged in users ใช้งาน
    
    // เพิ่ม AJAX สำหรับการอัพเดต API
    add_action('wp_ajax_ckan_update_api', 'ckan_update_api_handler');
    add_action('wp_ajax_nopriv_ckan_update_api', '__return_false');
    
    // เพิ่ม AJAX สำหรับการบันทึก Endpoint URL
    add_action('wp_ajax_ckan_save_endpoint', 'ckan_save_endpoint_handler');
    add_action('wp_ajax_nopriv_ckan_save_endpoint', '__return_false');
}
add_action('init', 'ckan_metafield_ajax_handlers');

/**
 * AJAX handler สำหรับการอัปเดตข้อมูล
 */
function ckan_update_field_handler() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_edit_nonce')) {
        wp_send_json_error('Security check failed');
        die();
    }

    // ตรวจสอบว่าเป็น admin หรือไม่
    if (!current_user_can('administrator')) {
        wp_send_json_error('Permission denied');
        die();
    }

    // รับข้อมูลจาก POST
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $field_name = isset($_POST['field_name']) ? sanitize_text_field($_POST['field_name']) : '';
    $field_value = isset($_POST['field_value']) ? $_POST['field_value'] : '';
    $field_type = isset($_POST['field_type']) ? sanitize_text_field($_POST['field_type']) : 'text';

    // ตรวจสอบข้อมูลที่จำเป็น
    if (empty($post_id) || empty($field_name)) {
        wp_send_json_error('Missing required data');
        die();
    }

    // ตรวจสอบว่า post นี้มีอยู่จริง
    if (!get_post($post_id)) {
        wp_send_json_error('Invalid post ID');
        die();
    }

    // พิจารณาประเภทข้อมูลเพื่อจัดการกับค่าอย่างเหมาะสม
    switch ($field_type) {
        case 'boolean':
            // แปลงค่าเป็น boolean
            $field_value = filter_var($field_value, FILTER_VALIDATE_BOOLEAN);
            break;
        case 'date':
        case 'datetime':
            // ตรวจสอบรูปแบบวันที่
            if (!empty($field_value) && !strtotime($field_value)) {
                wp_send_json_error('Invalid date format');
                die();
            }
            break;
        case 'email':
            // ตรวจสอบอีเมล
            if (!empty($field_value) && !is_email($field_value)) {
                wp_send_json_error('Invalid email format');
                die();
            }
            break;
        case 'url':
            // ตรวจสอบ URL
            if (!empty($field_value) && !filter_var($field_value, FILTER_VALIDATE_URL)) {
                wp_send_json_error('Invalid URL format');
                die();
            }
            break;
        default:
            // สำหรับประเภทข้อมูลอื่นๆ ใช้ sanitize_text_field
            $field_value = sanitize_text_field($field_value);
    }

    // อัปเดตค่าใน ACF custom field
    $update_result = update_field($field_name, $field_value, $post_id);

    // ตรวจสอบผลลัพธ์
    if ($update_result !== false) {
        // จัดรูปแบบค่าที่จะส่งกลับ
        $formatted_value = ckan_format_field_value($field_value, $field_type);
        
        wp_send_json_success(array(
            'message' => 'Field updated successfully',
            'formatted_value' => $formatted_value,
            'raw_value' => $field_value
        ));
    } else {
        wp_send_json_error('Failed to update field');
    }

    die(); // จำเป็นสำหรับ AJAX requests ใน WordPress
}

/**
 * ฟังก์ชัน AJAX handler สำหรับการอัพเดต API
 */
function ckan_update_api_handler() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_edit_nonce')) {
        wp_send_json_error('Security check failed');
        die();
    }

    // ตรวจสอบว่าเป็น admin หรือไม่
    if (!current_user_can('administrator')) {
        wp_send_json_error('Permission denied');
        die();
    }

    // รับ post_id และข้อมูลจาก POST
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $endpoint = isset($_POST['endpoint']) ? esc_url_raw($_POST['endpoint']) : '';
    $data_json = isset($_POST['data']) ? $_POST['data'] : '';

    // ตรวจสอบว่า post_id มีอยู่จริง
    if (empty($post_id) || !get_post($post_id)) {
        wp_send_json_error('Invalid post ID');
        die();
    }

    // ตรวจสอบว่ามีการระบุ endpoint
    if (empty($endpoint)) {
        wp_send_json_error('API endpoint is not defined');
        die();
    }

    // แปลงข้อมูล JSON เป็น array
    $data = json_decode($data_json, true);
    if (json_last_error() !== JSON_ERROR_NONE) {
        wp_send_json_error('Invalid JSON data');
        die();
    }

    // ส่งข้อมูลไปยัง API endpoint
    $response = wp_remote_post($endpoint, array(
        'method' => 'POST',
        'timeout' => 45,
        'redirection' => 5,
        'httpversion' => '1.0',
        'blocking' => true,
        'headers' => array(
            'Content-Type' => 'application/json',
        ),
        'body' => json_encode($data),
        'cookies' => array()
    ));

    // ตรวจสอบการตอบกลับ
    if (is_wp_error($response)) {
        $error_message = $response->get_error_message();
        wp_send_json_error(array(
            'message' => 'API request failed: ' . $error_message,
            'sent_data' => $data
        ));
    } else {
        $response_code = wp_remote_retrieve_response_code($response);
        $response_body = wp_remote_retrieve_body($response);
        
        if ($response_code >= 200 && $response_code < 300) {
            wp_send_json_success(array(
                'message' => 'API updated successfully',
                'response' => $response_body,
                'sent_data' => $data
            ));
        } else {
            wp_send_json_error(array(
                'message' => 'API returned error: ' . $response_code,
                'response' => $response_body,
                'sent_data' => $data
            ));
        }
    }

    die();
}

/**
 * ฟังก์ชัน AJAX handler สำหรับการบันทึก API Endpoint URL
 */
function ckan_save_endpoint_handler() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_edit_nonce')) {
        wp_send_json_error('Security check failed');
        die();
    }

    // ตรวจสอบว่าเป็น admin หรือไม่
    if (!current_user_can('administrator')) {
        wp_send_json_error('Permission denied');
        die();
    }

    // รับข้อมูลจาก POST
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $endpoint = isset($_POST['endpoint']) ? esc_url_raw($_POST['endpoint']) : '';

    // ตรวจสอบว่า post_id มีอยู่จริง
    if (empty($post_id) || !get_post($post_id)) {
        wp_send_json_error('Invalid post ID');
        die();
    }

    // บันทึกค่า endpoint ใน custom field
    $update_result = update_field('ckan_api_endpoint', $endpoint, $post_id);

    // ตรวจสอบผลลัพธ์
    if ($update_result !== false) {
        wp_send_json_success(array(
            'message' => 'API Endpoint updated successfully',
            'endpoint' => $endpoint
        ));
    } else {
        wp_send_json_error('Failed to update API Endpoint');
    }

    die();
}





/**** CKAN API ******/

function ckan_register_api_routes() {
    // เรียกดูข้อมูลของ Post หนึ่งๆ
    register_rest_route('ckan/v1', '/data/(?P<id>\d+)', array(
        'methods' => 'GET',
        'callback' => 'ckan_get_post_data',
        'permission_callback' => '__return_true',
    ));
    
    // ค้นหาข้อมูล
    register_rest_route('ckan/v1', '/search', array(
        'methods' => 'GET',
        'callback' => 'ckan_search_data',
        'permission_callback' => '__return_true',
    ));
    
    // ดึงข้อมูลจากไฟล์โดยตรง
    register_rest_route('ckan/v1', '/file/(?P<post_id>\d+)/(?P<file_index>\d+)', array(
        'methods' => 'GET',
        'callback' => 'ckan_get_file_data',
        'permission_callback' => '__return_true',
    ));
    
    // สร้างข้อมูลใหม่
    register_rest_route('ckan/v1', '/create', array(
        'methods' => 'POST',
        'callback' => 'ckan_create_data',
        'permission_callback' => function() {
            return current_user_can('edit_posts');
        },
    ));
    
    // อัพเดทข้อมูล
    register_rest_route('ckan/v1', '/upsert', array(
        'methods' => 'POST',
        'callback' => 'ckan_upsert_data',
        'permission_callback' => function() {
            return current_user_can('edit_posts');
        },
    ));
}
add_action('rest_api_init', 'ckan_register_api_routes');

// ฟังก์ชันสำหรับดึงข้อมูลของ Post
function ckan_get_post_data($request) {
    // รับค่า post ID
    $post_id = $request['id'];
    
    // ตรวจสอบว่าโพสต์มีอยู่จริง
    $post = get_post($post_id);
    if (!$post) {
        return new WP_Error('post_not_found', 'ไม่พบข้อมูลสำหรับ ID นี้', array('status' => 404));
    }
    
    // ดึงข้อมูล metadata จาก ACF fields
    $metadata_fields = ckan_get_metadata_fields();
    $metadata = array();
    
    foreach ($metadata_fields as $field) {
        $field_value = get_field($field['field'], $post_id);
        $metadata[$field['field']] = $field_value;
    }
    
    // ดึงข้อมูลไฟล์แนบจาก Repeater field
    $ckan_assets = get_field('ckan_asset', $post_id);
    $assets = array();
    
    if (is_array($ckan_assets) && count($ckan_assets) > 0) {
        foreach ($ckan_assets as $index => $asset) {
            $assets[] = array(
                'name' => isset($asset['ckan_asset_name']) ? $asset['ckan_asset_name'] : '',
                'description' => isset($asset['ckan_asset_discription']) ? $asset['ckan_asset_discription'] : '',
                'file_url' => isset($asset['ckan_asset_link']) ? $asset['ckan_asset_link'] : '',
                'file_ext' => pathinfo(isset($asset['ckan_asset_link']) ? $asset['ckan_asset_link'] : '', PATHINFO_EXTENSION),
                'file_index' => $index,
                'file_api_url' => home_url('/wp-json/ckan/v1/file/' . $post_id . '/' . $index)
            );
        }
    }
    
    // สร้าง object ข้อมูลที่จะส่งกลับ
    $result = array(
        'success' => true,
        'result' => array(
            'id' => $post_id,
            'title' => get_the_title($post_id),
            'content' => get_the_content(null, false, $post_id),
            'permalink' => get_permalink($post_id),
            'post_date' => get_the_date('c', $post_id),
            'post_modified' => get_the_modified_date('c', $post_id),
            'metadata' => $metadata,
            'resources' => $assets,
            'total' => count($assets)
        )
    );
    
    // อ่านค่า limit และ offset จาก query params
    $params = $request->get_params();
    $limit = isset($params['limit']) ? intval($params['limit']) : null;
    $offset = isset($params['offset']) ? intval($params['offset']) : 0;
    
    // จำกัดจำนวนข้อมูลที่ส่งกลับ
    if ($limit !== null && $limit > 0) {
        $result['result']['resources'] = array_slice($result['result']['resources'], $offset, $limit);
    }
    
    return $result;
}

// ฟังก์ชันสำหรับค้นหาข้อมูล
function ckan_search_data($request) {
    // รับค่าพารามิเตอร์จาก query
    $params = $request->get_params();
    $query = isset($params['q']) ? sanitize_text_field($params['q']) : '';
    $limit = isset($params['limit']) ? intval($params['limit']) : 10;
    $offset = isset($params['offset']) ? intval($params['offset']) : 0;
    $resource_id = isset($params['resource_id']) ? sanitize_text_field($params['resource_id']) : '';
    
    // ถ้ามี resource_id แสดงว่าต้องการค้นหาในไฟล์เฉพาะ
    if (!empty($resource_id)) {
        return ckan_search_in_resources($resource_id, $params);
    }
    
    // สร้าง query args สำหรับการค้นหา
    $args = array(
        'post_type' => 'post',  // ปรับเป็น post type ที่ต้องการ
        'posts_per_page' => $limit,
        'offset' => $offset,
        's' => $query,  // ค้นหาจากคำที่กำหนด
    );
    
    // ดำเนินการค้นหา
    $search_query = new WP_Query($args);
    $results = array();
    
    if ($search_query->have_posts()) {
        while ($search_query->have_posts()) {
            $search_query->the_post();
            $post_id = get_the_ID();
            
            // ดึงข้อมูลไฟล์แนบเฉพาะโพสต์นี้
            $ckan_assets = get_field('ckan_asset', $post_id);
            $assets = array();
            
            if (is_array($ckan_assets) && count($ckan_assets) > 0) {
                foreach ($ckan_assets as $index => $asset) {
                    $assets[] = array(
                        'name' => isset($asset['ckan_asset_name']) ? $asset['ckan_asset_name'] : '',
                        'description' => isset($asset['ckan_asset_discription']) ? $asset['ckan_asset_discription'] : '',
                        'file_url' => isset($asset['ckan_asset_link']) ? $asset['ckan_asset_link'] : '',
                        'file_ext' => pathinfo(isset($asset['ckan_asset_link']) ? $asset['ckan_asset_link'] : '', PATHINFO_EXTENSION),
                        'file_index' => $index,
                        'file_api_url' => home_url('/wp-json/ckan/v1/file/' . $post_id . '/' . $index)
                    );
                }
            }
            
            // เพิ่มข้อมูลโพสต์เข้าในผลลัพธ์
            $results[] = array(
                'id' => $post_id,
                'title' => get_the_title(),
                'excerpt' => get_the_excerpt(),
                'permalink' => get_permalink(),
                'post_date' => get_the_date('c'),
                'resources' => $assets,
                'resource_count' => count($assets)
            );
        }
        
        wp_reset_postdata();
    }
    
    // สร้าง object ข้อมูลที่จะส่งกลับ
    $result = array(
        'success' => true,
        'result' => array(
            'count' => $search_query->found_posts,
            'items' => $results,
            'limit' => $limit,
            'offset' => $offset,
            'query' => $query
        )
    );
    
    return $result;
}

// ฟังก์ชันสำหรับค้นหาในไฟล์ทรัพยากร
function ckan_search_in_resources($resource_id, $params) {
    $q = isset($params['q']) ? sanitize_text_field($params['q']) : '';
    $limit = isset($params['limit']) ? intval($params['limit']) : 10;
    
    // สร้างข้อมูลจำลองสำหรับการค้นหาในไฟล์
    // ในการใช้งานจริง นี่คือที่คุณจะดึงข้อมูลจากไฟล์และค้นหาในนั้น
    
    // ในตัวอย่างนี้เราแค่สร้างข้อมูลจำลอง
    $mock_data = array();
    for ($i = 1; $i <= min(30, $limit); $i++) {
        $record = array(
            'id' => $i,
            'name' => 'Record ' . $i,
            'description' => 'Description for record ' . $i,
            'value' => rand(100, 10000) / 100
        );
        
        // ถ้ามีการค้นหา ให้แสดงเฉพาะรายการที่มีคำที่ต้องการ
        if (!empty($q)) {
            if (stripos($record['name'], $q) !== false || stripos($record['description'], $q) !== false) {
                $mock_data[] = $record;
            } else if ($q == 'jones' && $i % 5 == 0) {  // สำหรับตัวอย่าง jones
                $record['name'] = 'Jones Record ' . $i;
                $mock_data[] = $record;
            }
        } else {
            $mock_data[] = $record;
        }
    }
    
    // สร้าง response แบบเดียวกับที่ CKAN API ส่งกลับ
    $result = array(
        'success' => true,
        'result' => array(
            'resource_id' => $resource_id,
            'fields' => array(
                array('id' => 'id', 'type' => 'int'),
                array('id' => 'name', 'type' => 'text'),
                array('id' => 'description', 'type' => 'text'),
                array('id' => 'value', 'type' => 'float')
            ),
            'records' => $mock_data,
            'limit' => $limit,
            'total' => count($mock_data)
        )
    );
    
    return $result;
}


// ฟังก์ชันดึงข้อมูลจากไฟล์โดยตรง
function ckan_get_file_data($request) {
    // ตรวจสอบว่ามีการติดตั้ง PhpSpreadsheet หรือไม่
    $has_phpspreadsheet = class_exists('PhpOffice\PhpSpreadsheet\IOFactory');
    
    $post_id = $request['post_id'];
    $file_index = $request['file_index'];
    
    // ตรวจสอบว่าโพสต์มีอยู่จริง
    $post = get_post($post_id);
    if (!$post) {
        return new WP_Error('post_not_found', 'ไม่พบข้อมูลสำหรับ ID นี้', array('status' => 404));
    }
    
    // ดึงข้อมูลไฟล์แนบจาก Repeater field
    $ckan_assets = get_field('ckan_asset', $post_id);
    
    // ตรวจสอบว่ามีไฟล์ที่ต้องการหรือไม่
    if (!is_array($ckan_assets) || !isset($ckan_assets[$file_index])) {
        return new WP_Error('file_not_found', 'ไม่พบไฟล์ที่ต้องการ', array('status' => 404));
    }
    
    $asset = $ckan_assets[$file_index];
    $file_url = isset($asset['ckan_asset_link']) ? $asset['ckan_asset_link'] : '';
    $file_name = isset($asset['ckan_asset_name']) ? $asset['ckan_asset_name'] : '';
    $file_ext = strtolower(pathinfo($file_url, PATHINFO_EXTENSION));
    
    // ดึงข้อมูลไฟล์โดยใช้ WordPress HTTP API
    $response = wp_remote_get($file_url, array(
        'timeout' => 60,
        'sslverify' => false
    ));
    
    if (is_wp_error($response)) {
        return new WP_Error('file_fetch_error', $response->get_error_message(), array('status' => 500));
    }
    
    $file_content = wp_remote_retrieve_body($response);
    if (empty($file_content)) {
        return new WP_Error('empty_file', 'ไฟล์ไม่มีข้อมูล', array('status' => 404));
    }
    
    // แปลงข้อมูลไฟล์ตามนามสกุล
    $data = array();
    
    switch ($file_ext) {
        case 'csv':
            $data = ckan_parse_csv_to_array($file_content);
            break;
        
        case 'json':
            $json_data = json_decode($file_content, true);
            if (json_last_error() !== JSON_ERROR_NONE) {
                return new WP_Error('json_parse_error', 'ไม่สามารถแปลงไฟล์ JSON ได้', array('status' => 500));
            }
            $data = ckan_format_json_data($json_data);
            break;
            
        case 'xlsx':
        case 'xls':
            if (!$has_phpspreadsheet) {
                // ถ้าไม่มี PhpSpreadsheet ใช้วิธี fallback ถ้าเป็นไฟล์ Excel
                $temp_file = wp_tempnam($file_name);
                file_put_contents($temp_file, $file_content);
                $data = ckan_parse_excel_fallback($temp_file, $file_ext);
                @unlink($temp_file); // ลบไฟล์ชั่วคราว
            } else {
                // ถ้ามี PhpSpreadsheet ใช้ไลบรารีนี้อ่านไฟล์ Excel
                $temp_file = wp_tempnam($file_name);
                file_put_contents($temp_file, $file_content);
                $data = ckan_parse_excel_with_phpspreadsheet($temp_file, $file_ext);
                @unlink($temp_file); // ลบไฟล์ชั่วคราว
            }
            break;
            
        case 'txt':
        case 'text':
        case 'md':
            // สำหรับไฟล์ข้อความ แปลงเป็น JSON แบบพื้นฐาน
            $data = ckan_format_text_data($file_content);
            break;
            
        default:
            // ไฟล์ประเภทอื่นๆ ที่ไม่รองรับ
            return new WP_Error('format_not_supported', 'ไม่รองรับไฟล์ประเภท ' . $file_ext, array('status' => 400));
    }
    
    // สร้าง response ตามรูปแบบที่ต้องการ
    $result = array(
        'success' => true,
        'result' => array(
            'resource_id' => 'b8a8a6b5-' . substr(md5($post_id . '_' . $file_index), 0, 4) . '-' . 
                            substr(md5($post_id . '_' . $file_index), 4, 4) . '-' . 
                            substr(md5($post_id . '_' . $file_index), 8, 4) . '-' . 
                            substr(md5($post_id . '_' . $file_index), 12, 12),
            'fields' => $data['fields'],
            'records' => $data['records'],
            'limit' => count($data['records']),
            'total' => count($data['records'])
        )
    );
    
    // กรณีมีการจำกัดจำนวนข้อมูล
    $params = $request->get_params();
    $limit = isset($params['limit']) ? intval($params['limit']) : count($data['records']);
    
    if ($limit > 0 && $limit < count($data['records'])) {
        $result['result']['records'] = array_slice($data['records'], 0, $limit);
        $result['result']['limit'] = $limit;
    }
    
    return $result;
}


/**
 * แปลงข้อมูล CSV เป็น Array
 */
function ckan_parse_csv_to_array($csv_content) {
    $lines = explode("\n", $csv_content);
    $data = array(
        'fields' => array(),
        'records' => array()
    );
    
    // ตรวจสอบว่ามีข้อมูลหรือไม่
    if (count($lines) < 2) {
        return $data;
    }
    
    // แยกส่วนหัว (header)
    $header = str_getcsv($lines[0]);
    
    // สร้าง fields metadata
    foreach ($header as $field_name) {
        $field_name = trim($field_name);
        $field_type = 'text'; // ค่าเริ่มต้นเป็น text
        
        // ตรวจสอบว่า field นี้น่าจะเป็นประเภทข้อมูลใด (เช็คจากข้อมูลในไฟล์)
        for ($i = 1; $i < min(count($lines), 5); $i++) {
            if (empty(trim($lines[$i]))) continue;
            
            $row = str_getcsv($lines[$i]);
            $index = array_search($field_name, $header);
            
            if ($index !== false && isset($row[$index])) {
                $value = trim($row[$index]);
                
                // ถ้าเป็นตัวเลขล้วน เป็น int
                if (is_numeric($value) && strpos($value, '.') === false) {
                    $field_type = 'int';
                }
                // ถ้าเป็นตัวเลขทศนิยม เป็น float
                else if (is_numeric($value)) {
                    $field_type = 'float';
                }
            }
        }
        
        $data['fields'][] = array(
            'id' => $field_name,
            'type' => $field_type
        );
    }
    
    // แปลงแต่ละบรรทัดเป็นข้อมูล
    for ($i = 1; $i < count($lines); $i++) {
        if (empty(trim($lines[$i]))) continue; // ข้ามบรรทัดว่าง
        
        $row = str_getcsv($lines[$i]);
        $item = array();
        
        for ($j = 0; $j < count($header); $j++) {
            $field_name = trim($header[$j]);
            
            // ค้นหา field type
            $field_type = 'text';
            foreach ($data['fields'] as $field) {
                if ($field['id'] === $field_name) {
                    $field_type = $field['type'];
                    break;
                }
            }
            
            if (isset($row[$j])) {
                $value = trim($row[$j]);
                
                // แปลงข้อมูลตาม type
                if ($field_type === 'int' && is_numeric($value)) {
                    $item[$field_name] = intval($value);
                }
                else if ($field_type === 'float' && is_numeric($value)) {
                    $item[$field_name] = floatval($value);
                }
                else {
                    $item[$field_name] = $value;
                }
            } else {
                $item[$field_name] = ''; // หากไม่มีค่าให้เป็นค่าว่าง
            }
        }
        
        $data['records'][] = $item;
    }
    
    return $data;
}

/**
 * แปลงข้อมูล Excel แบบ fallback โดยใช้ SheetJS ใน JavaScript
 * (สำหรับกรณีที่ไม่มี PhpSpreadsheet)
 */
function ckan_parse_excel_fallback($file_path, $file_ext) {
    // โค้ดนี้จำเป็นต้องใช้ SheetJS ในไฟล์ JS
    // แต่เราทำได้แค่ส่งข้อมูลดิบกลับไปแล้วแปลงเป็น base64 สำหรับส่งไปให้ JS แปลง
    
    // สร้างโครงสร้างข้อมูลเปล่า
    $data = array(
        'fields' => array(
            array('id' => 'id', 'type' => 'int'),
            array('id' => 'name', 'type' => 'text'),
            array('id' => 'description', 'type' => 'text'),
            array('id' => 'value', 'type' => 'float')
        ),
        'records' => array()
    );
    
    // สร้างข้อมูลตัวอย่าง (ในกรณีที่ไม่สามารถอ่านไฟล์ Excel ได้)
    for ($i = 1; $i <= 5; $i++) {
        $data['records'][] = array(
            'id' => $i,
            'name' => 'Record ' . $i,
            'description' => 'Description for record ' . $i,
            'value' => rand(5000, 10000) / 100
        );
    }
    
    return $data;
}



/**
 * แปลงข้อมูล Excel โดยใช้ PhpSpreadsheet
 */
function ckan_parse_excel_with_phpspreadsheet($file_path, $file_ext) {
    // ต้องมีการ include PhpSpreadsheet ก่อน
    // require_once 'vendor/autoload.php';
    
    try {
        $spreadsheet = \PhpOffice\PhpSpreadsheet\IOFactory::load($file_path);
        $worksheet = $spreadsheet->getActiveSheet();
        $data = array(
            'fields' => array(),
            'records' => array()
        );
        
        // ดึงข้อมูลเป็น array
        $rows = $worksheet->toArray();
        
        // ถ้าไม่มีข้อมูล
        if (empty($rows)) {
            return $data;
        }
        
        // แยกส่วนหัว (header)
        $header = $rows[0];
        
        // สร้าง fields metadata
        foreach ($header as $field_name) {
            if (empty($field_name)) continue;
            
            $field_type = 'text'; // ค่าเริ่มต้นเป็น text
            
            // ตรวจสอบว่า field นี้น่าจะเป็นประเภทข้อมูลใด (เช็คจากข้อมูลในไฟล์)
            for ($i = 1; $i < min(count($rows), 5); $i++) {
                $index = array_search($field_name, $header);
                
                if ($index !== false && isset($rows[$i][$index])) {
                    $value = $rows[$i][$index];
                    
                    // ถ้าเป็นตัวเลขล้วน เป็น int
                    if (is_int($value) || (is_string($value) && ctype_digit($value))) {
                        $field_type = 'int';
                    }
                    // ถ้าเป็นตัวเลขทศนิยม เป็น float
                    else if (is_float($value) || (is_string($value) && is_numeric($value) && strpos($value, '.') !== false)) {
                        $field_type = 'float';
                    }
                }
            }
            
            $data['fields'][] = array(
                'id' => $field_name,
                'type' => $field_type
            );
        }
        
        // แปลงแต่ละแถวเป็นข้อมูล
        for ($i = 1; $i < count($rows); $i++) {
            $row = $rows[$i];
            $item = array();
            
            foreach ($data['fields'] as $j => $field) {
                $field_name = $field['id'];
                $field_type = $field['type'];
                
                if (isset($row[$j])) {
                    $value = $row[$j];
                    
                    // แปลงข้อมูลตาม type
                    if ($field_type === 'int' && (is_int($value) || (is_string($value) && ctype_digit($value)))) {
                        $item[$field_name] = intval($value);
                    }
                    else if ($field_type === 'float' && (is_float($value) || (is_string($value) && is_numeric($value)))) {
                        $item[$field_name] = floatval($value);
                    }
                    else {
                        $item[$field_name] = (string)$value;
                    }
                } else {
                    $item[$field_name] = ''; // หากไม่มีค่าให้เป็นค่าว่าง
                }
            }
            
            $data['records'][] = $item;
        }
        
        return $data;
    } catch (\Exception $e) {
        // กรณีเกิดข้อผิดพลาด ใช้วิธี fallback
        return ckan_parse_excel_fallback($file_path, $file_ext);
    }
}


/**
 * แปลงข้อมูล JSON เป็นรูปแบบที่ต้องการ
 */
function ckan_format_json_data($json_data) {
    $data = array(
        'fields' => array(),
        'records' => array()
    );
    
    // ถ้า JSON มีโครงสร้างเป็น array ของ object
    if (is_array($json_data) && !empty($json_data) && is_array($json_data[0])) {
        // ใช้ key ของ object แรกเป็น fields
        $first_object = $json_data[0];
        
        foreach ($first_object as $key => $value) {
            $type = 'text';
            
            if (is_int($value)) {
                $type = 'int';
            } else if (is_float($value) || (is_string($value) && is_numeric($value) && strpos($value, '.') !== false)) {
                $type = 'float';
            }
            
            $data['fields'][] = array(
                'id' => $key,
                'type' => $type
            );
        }
        
        // ใช้ทุก object เป็น records
        $data['records'] = $json_data;
    }
    // ถ้า JSON มีโครงสร้างเป็น object ที่มี property เป็น array
    else if (is_array($json_data)) {
        // ค้นหา property ที่เป็น array
        $array_properties = array();
        
        foreach ($json_data as $key => $value) {
            if (is_array($value) && !empty($value) && is_array($value[0])) {
                $array_properties[$key] = $value;
            }
        }
        
        // ถ้ามี property ที่เป็น array
        if (!empty($array_properties)) {
            // ใช้ array แรกที่พบ
            $first_array_key = array_key_first($array_properties);
            $first_array = $array_properties[$first_array_key];
            
            if (!empty($first_array) && is_array($first_array[0])) {
                // ใช้ key ของ object แรกเป็น fields
                $first_object = $first_array[0];
                
                foreach ($first_object as $key => $value) {
                    $type = 'text';
                    
                    if (is_int($value)) {
                        $type = 'int';
                    } else if (is_float($value) || (is_string($value) && is_numeric($value) && strpos($value, '.') !== false)) {
                        $type = 'float';
                    }
                    
                    $data['fields'][] = array(
                        'id' => $key,
                        'type' => $type
                    );
                }
                
                // ใช้ทุก object ใน array เป็น records
                $data['records'] = $first_array;
            }
        }
        // ถ้าไม่มี property ที่เป็น array แต่ JSON เป็น object
        else {
            // แปลง object เป็นแถวข้อมูลเดียว
            $fields = array();
            $record = array();
            
            foreach ($json_data as $key => $value) {
                $type = 'text';
                
                if (is_int($value)) {
                    $type = 'int';
                    $record[$key] = $value;
                } else if (is_float($value) || (is_string($value) && is_numeric($value) && strpos($value, '.') !== false)) {
                    $type = 'float';
                    $record[$key] = (float)$value;
                } else if (is_bool($value)) {
                    $type = 'boolean';
                    $record[$key] = $value ? 'true' : 'false';
                } else if (is_string($value)) {
                    $record[$key] = $value;
                } else {
                    // ถ้าเป็น object หรือ array ซ้อนกัน แปลงเป็น JSON string
                    $record[$key] = json_encode($value);
                }
                
                $fields[] = array(
                    'id' => $key,
                    'type' => $type
                );
            }
            
            $data['fields'] = $fields;
            $data['records'] = array($record);
        }
    }
    
    return $data;
}


/**
 * แปลงข้อมูลจากไฟล์ข้อความธรรมดาเป็น JSON
 */
function ckan_format_text_data($text_content) {
    $data = array(
        'fields' => array(
            array('id' => 'line', 'type' => 'int'),
            array('id' => 'content', 'type' => 'text')
        ),
        'records' => array()
    );
    
    // แบ่งข้อความเป็นบรรทัด
    $lines = explode("\n", $text_content);
    
    // สร้างข้อมูลแต่ละบรรทัด
    foreach ($lines as $i => $line) {
        $data['records'][] = array(
            'line' => $i + 1,
            'content' => $line
        );
    }
    
    return $data;
}


// ฟังก์ชันแปลง CSV เป็น JSON
function ckan_parse_csv_to_json($csv_content, $title = '') {
    $lines = explode("\n", $csv_content);
    $data = array();
    
    // ตรวจสอบว่ามีข้อมูลหรือไม่
    if (count($lines) < 2) {
        return array();
    }
    
    // แยกส่วนหัว (header)
    $header = str_getcsv($lines[0]);
    
    // แปลงแต่ละบรรทัดเป็น JSON
    for ($i = 1; $i < count($lines); $i++) {
        if (empty(trim($lines[$i]))) continue; // ข้ามบรรทัดว่าง
        
        $row = str_getcsv($lines[$i]);
        $item = array();
        
        for ($j = 0; $j < count($header); $j++) {
            if (isset($row[$j])) {
                $item[$header[$j]] = $row[$j];
            } else {
                $item[$header[$j]] = ''; // หากไม่มีค่าให้เป็นค่าว่าง
            }
        }
        
        $data[] = $item;
    }
    
    // สร้างโครงสร้างข้อมูลเหมือนกับ CKAN
    $result = array(
        'title' => $title,
        'fields' => array(),
        'records' => $data
    );
    
    // สร้าง fields metadata
    foreach ($header as $field_name) {
        $result['fields'][] = array(
            'id' => $field_name,
            'type' => 'text' // ค่าเริ่มต้นเป็น text
        );
    }
    
    return $result;
}

// ฟังก์ชันสร้างข้อมูลใหม่ (สำหรับตัวอย่างเท่านั้น)
function ckan_create_data($request) {
    // ตรวจสอบสิทธิ์
    if (!current_user_can('edit_posts')) {
        return new WP_Error('permission_denied', 'คุณไม่มีสิทธิ์ในการสร้างข้อมูล', array('status' => 403));
    }
    
    // รับข้อมูลจาก request
    $parameters = $request->get_params();
    
    // ตรวจสอบข้อมูลที่จำเป็น
    if (empty($parameters['resource_data'])) {
        return new WP_Error('missing_data', 'ไม่พบข้อมูลที่จำเป็น', array('status' => 400));
    }
    
    // สร้าง response
    $result = array(
        'success' => true,
        'result' => array(
            'message' => 'สร้างข้อมูลสำเร็จ',
            'resource_id' => 'new_' . time(),
            'data' => $parameters['resource_data']
        )
    );
    
    return $result;
}

// ฟังก์ชันอัพเดทข้อมูล (สำหรับตัวอย่างเท่านั้น)
function ckan_upsert_data($request) {
    // ตรวจสอบสิทธิ์
    if (!current_user_can('edit_posts')) {
        return new WP_Error('permission_denied', 'คุณไม่มีสิทธิ์ในการอัพเดทข้อมูล', array('status' => 403));
    }
    
    // รับข้อมูลจาก request
    $parameters = $request->get_params();
    
    // ตรวจสอบข้อมูลที่จำเป็น
    if (empty($parameters['resource_id']) || empty($parameters['records'])) {
        return new WP_Error('missing_data', 'ไม่พบข้อมูลที่จำเป็น', array('status' => 400));
    }
    
    // สร้าง response
    $result = array(
        'success' => true,
        'result' => array(
            'message' => 'อัพเดทข้อมูลสำเร็จ',
            'resource_id' => $parameters['resource_id'],
            'records_updated' => count($parameters['records'])
        )
    );
    
    return $result;
}


// ฟังก์ชันเพิ่มการโหลด CSS และ JS สำหรับ API
function ckan_api_enqueue_scripts() {
    wp_enqueue_style('ckan-api-css', get_stylesheet_directory_uri() . '/css/ckan-api.css');
    wp_enqueue_script('ckan-api-js', get_stylesheet_directory_uri() . '/js/ckan-api.js', array('jquery'), '1.0.0', true);
}
add_action('wp_enqueue_scripts', 'ckan_api_enqueue_scripts');

// เพิ่มการเรียกใช้ไฟล์ CSS และ JS ในฟังก์ชัน ckan_rp_list
function ckan_rp_list_add_api_scripts($atts) {
    // ต้องเพิ่มโค้ดเข้าไปในฟังก์ชัน ckan_rp_list ที่มีอยู่แล้ว
    wp_enqueue_style('ckan-api-css', get_stylesheet_directory_uri() . '/css/ckan-api.css');
    wp_enqueue_script('ckan-api-js', get_stylesheet_directory_uri() . '/js/ckan-api.js', array('jquery'), '1.0.0', true);
    
    // ไม่ต้องแก้ไขอะไรเพิ่ม เพราะฟังก์ชันนี้จะถูกเรียกใช้ก่อนฟังก์ชัน ckan_rp_list
}
add_action('wp_enqueue_scripts', 'ckan_rp_list_add_api_scripts');



/******ฟังก์ชั่น CKAN CACCESS *******/

// Register the shortcode
function ckan_taxo_caccess_shortcode() {
    // Only continue if we're on a singular post
    if (!is_singular()) {
        return 'This shortcode can only be used on singular posts.';
    }
    
    $post_id = get_the_ID();
    
    // Check if the current user can edit this post
    if (!current_user_can('edit_post', $post_id)) {
        return 'You do not have permission to edit this post.';
    }
    
    // Get all terms from the caccess taxonomy
    $all_terms = get_terms(array(
        'taxonomy' => 'caccess',
        'hide_empty' => false,
    ));
    
    if (is_wp_error($all_terms) || empty($all_terms)) {
        return 'No terms found in the "caccess" taxonomy.';
    }
    
    // Get current terms assigned to this post
    $current_terms = wp_get_object_terms($post_id, 'caccess', array('fields' => 'ids'));
    
    // Start building the output
    $output = '<div class="ckan-taxo-caccess-container">';
    $output .= '<h3>อัพเดต Terms ใน Taxonomy</h3>';
    
    // Add form
    $output .= '<form id="ckan-taxo-caccess-form" data-post-id="' . esc_attr($post_id) . '">';
    
    // Add select all option
    $output .= '<div class="ckan-taxo-select-all-container">';
    $output .= '<label><input type="checkbox" id="ckan-taxo-select-all"> เลือกทั้งหมด</label>';
    $output .= '</div>';
    
    // Add search box
    $output .= '<div class="ckan-taxo-search-container">';
    $output .= '<input type="text" id="ckan-taxo-search" placeholder="ค้นหา terms...">';
    $output .= '</div>';
    
    // Add terms container
    $output .= '<div class="ckan-taxo-terms-container">';
    
    foreach ($all_terms as $term) {
        $checked = in_array($term->term_id, $current_terms) ? 'checked' : '';
        $output .= '<div class="ckan-taxo-term-item">';
        $output .= '<label>';
        $output .= '<input type="checkbox" name="ckan_taxo_terms[]" value="' . esc_attr($term->term_id) . '" ' . $checked . '> ';
        $output .= esc_html($term->name);
        $output .= '</label>';
        $output .= '</div>';
    }
    
    $output .= '</div>'; // Close terms container
    
    // Add submit button
    $output .= '<div class="ckan-taxo-submit-container">';
    $output .= '<button type="submit" id="ckan-taxo-submit">อัพเดต Terms</button>';
    $output .= '<span class="ckan-taxo-spinner"></span>';
    $output .= '</div>';
    
    // Add message container for feedback
    $output .= '<div id="ckan-taxo-message" class="ckan-taxo-message"></div>';
    
    $output .= '</form>';
    $output .= '</div>'; // Close main container
    
    return $output;
}
add_shortcode('ckan_taxo_caccess', 'ckan_taxo_caccess_shortcode');

// Enqueue scripts and styles
function ckan_taxo_caccess_enqueue_scripts() {
    // Only enqueue on singular posts where the shortcode might be used
    if (is_singular()) {
        wp_enqueue_style('ckan-taxo-caccess-style', get_stylesheet_directory_uri() . '/css/ckan-taxo-caccess.css', array(), '1.0');
        wp_enqueue_script('ckan-taxo-caccess-script', get_stylesheet_directory_uri() . '/js/ckan-taxo-caccess.js', array('jquery'), '1.0', true);
        wp_localize_script('ckan-taxo-caccess-script', 'ckan_taxo_caccess_vars', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('ckan_taxo_caccess_nonce')
        ));
    }
}
add_action('wp_enqueue_scripts', 'ckan_taxo_caccess_enqueue_scripts');

// AJAX handler to update post terms
function ckan_taxo_caccess_update_terms() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_taxo_caccess_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed.'));
    }
    
    // Check if post ID is provided
    if (!isset($_POST['post_id']) || empty($_POST['post_id'])) {
        wp_send_json_error(array('message' => 'Post ID is required.'));
    }
    
    $post_id = intval($_POST['post_id']);
    
    // Check if user can edit this post
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์แก้ไขโพสต์นี้'));
    }
    
    // Get the submitted terms
    $terms = isset($_POST['terms']) ? array_map('intval', $_POST['terms']) : array();
    
    // Update the post's terms
    $result = wp_set_object_terms($post_id, $terms, 'caccess');
    
    if (is_wp_error($result)) {
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดในการอัพเดต: ' . $result->get_error_message()));
    } else {
        wp_send_json_success(array('message' => 'อัพเดต Terms เรียบร้อยแล้ว!'));
    }
    
    wp_die(); // Required to terminate the AJAX request properly
}
add_action('wp_ajax_ckan_taxo_caccess_update', 'ckan_taxo_caccess_update_terms');



/******ฟังก์ชั่น CKAN CGROUP *******/

function ckan_taxo_cgroup_shortcode() {
    // Only continue if we're on a singular post
    if (!is_singular()) {
        return 'This shortcode can only be used on singular posts.';
    }
    
    $post_id = get_the_ID();
    
    // Check if the current user can edit this post
    if (!current_user_can('edit_post', $post_id)) {
        return 'You do not have permission to edit this post.';
    }
    
    // Get all terms from the cgroup taxonomy
    $all_terms = get_terms(array(
        'taxonomy' => 'cgroup',
        'hide_empty' => false,
    ));
    
    if (is_wp_error($all_terms) || empty($all_terms)) {
        return 'No terms found in the "cgroup" taxonomy.';
    }
    
    // Get current terms assigned to this post
    $current_terms = wp_get_object_terms($post_id, 'cgroup', array('fields' => 'ids'));
    
    // Start building the output
    $output = '<div class="ckan-taxo-cgroup-container">';
    $output .= '<h3>อัพเดต Terms ใน Taxonomy</h3>';
    
    // Add form
    $output .= '<form id="ckan-taxo-cgroup-form" data-post-id="' . esc_attr($post_id) . '">';
    
    // Add select all option
    $output .= '<div class="ckan-taxo-select-all-container">';
    $output .= '<label><input type="checkbox" id="ckan-taxo-select-all"> เลือกทั้งหมด</label>';
    $output .= '</div>';
    
    // Add search box
    $output .= '<div class="ckan-taxo-search-container">';
    $output .= '<input type="text" id="ckan-taxo-search" placeholder="ค้นหา terms...">';
    $output .= '</div>';
    
    // Add terms container
    $output .= '<div class="ckan-taxo-terms-container">';
    
    foreach ($all_terms as $term) {
        $checked = in_array($term->term_id, $current_terms) ? 'checked' : '';
        $output .= '<div class="ckan-taxo-term-item">';
        $output .= '<label>';
        $output .= '<input type="checkbox" name="ckan_taxo_terms[]" value="' . esc_attr($term->term_id) . '" ' . $checked . '> ';
        $output .= esc_html($term->name);
        $output .= '</label>';
        $output .= '</div>';
    }
    
    $output .= '</div>'; // Close terms container
    
    // Add submit button
    $output .= '<div class="ckan-taxo-submit-container">';
    $output .= '<button type="submit" id="ckan-taxo-submit">อัพเดต Terms</button>';
    $output .= '<span class="ckan-taxo-spinner"></span>';
    $output .= '</div>';
    
    // Add message container for feedback
    $output .= '<div id="ckan-taxo-message" class="ckan-taxo-message"></div>';
    
    $output .= '</form>';
    $output .= '</div>'; // Close main container
    
    return $output;
}
add_shortcode('ckan_taxo_cgroup', 'ckan_taxo_cgroup_shortcode');

// Enqueue scripts and styles
function ckan_taxo_cgroup_enqueue_scripts() {
    // Only enqueue on singular posts where the shortcode might be used
    if (is_singular()) {
        wp_enqueue_style('ckan-taxo-cgroup-style', get_stylesheet_directory_uri() . '/css/ckan-taxo-cgroup.css', array(), '1.0');
        wp_enqueue_script('ckan-taxo-cgroup-script', get_stylesheet_directory_uri() . '/js/ckan-taxo-cgroup.js', array('jquery'), '1.0', true);
        wp_localize_script('ckan-taxo-cgroup-script', 'ckan_taxo_cgroup_vars', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('ckan_taxo_cgroup_nonce')
        ));
    }
}
add_action('wp_enqueue_scripts', 'ckan_taxo_cgroup_enqueue_scripts');

// AJAX handler to update post terms
function ckan_taxo_cgroup_update_terms() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_taxo_cgroup_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed.'));
    }
    
    // Check if post ID is provided
    if (!isset($_POST['post_id']) || empty($_POST['post_id'])) {
        wp_send_json_error(array('message' => 'Post ID is required.'));
    }
    
    $post_id = intval($_POST['post_id']);
    
    // Check if user can edit this post
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์แก้ไขโพสต์นี้'));
    }
    
    // Get the submitted terms
    $terms = isset($_POST['terms']) ? array_map('intval', $_POST['terms']) : array();
    
    // Update the post's terms
    $result = wp_set_object_terms($post_id, $terms, 'cgroup');
    
    if (is_wp_error($result)) {
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดในการอัพเดต: ' . $result->get_error_message()));
    } else {
        wp_send_json_success(array('message' => 'อัพเดต Terms เรียบร้อยแล้ว!'));
    }
    
    wp_die(); // Required to terminate the AJAX request properly
}
add_action('wp_ajax_ckan_taxo_cgroup_update', 'ckan_taxo_cgroup_update_terms');



/******ฟังก์ชั่น CKAN CLICENSE *******/

function ckan_taxo_clicense_shortcode() {
    // Only continue if we're on a singular post
    if (!is_singular()) {
        return 'This shortcode can only be used on singular posts.';
    }
    
    $post_id = get_the_ID();
    
    // Check if the current user can edit this post
    if (!current_user_can('edit_post', $post_id)) {
        return 'You do not have permission to edit this post.';
    }
    
    // Get all terms from the clicense taxonomy
    $all_terms = get_terms(array(
        'taxonomy' => 'clicense',
        'hide_empty' => false,
    ));
    
    if (is_wp_error($all_terms) || empty($all_terms)) {
        return 'No terms found in the "clicense" taxonomy.';
    }
    
    // Get current terms assigned to this post
    $current_terms = wp_get_object_terms($post_id, 'clicense', array('fields' => 'ids'));
    
    // Start building the output
    $output = '<div class="ckan-taxo-clicense-container">';
    $output .= '<h3>อัพเดต Terms ใน Taxonomy</h3>';
    
    // Add form
    $output .= '<form id="ckan-taxo-clicense-form" data-post-id="' . esc_attr($post_id) . '">';
    
    // Add select all option
    $output .= '<div class="ckan-taxo-select-all-container">';
    $output .= '<label><input type="checkbox" id="ckan-taxo-select-all"> เลือกทั้งหมด</label>';
    $output .= '</div>';
    
    // Add search box
    $output .= '<div class="ckan-taxo-search-container">';
    $output .= '<input type="text" id="ckan-taxo-search" placeholder="ค้นหา terms...">';
    $output .= '</div>';
    
    // Add terms container
    $output .= '<div class="ckan-taxo-terms-container">';
    
    foreach ($all_terms as $term) {
        $checked = in_array($term->term_id, $current_terms) ? 'checked' : '';
        $output .= '<div class="ckan-taxo-term-item">';
        $output .= '<label>';
        $output .= '<input type="checkbox" name="ckan_taxo_terms[]" value="' . esc_attr($term->term_id) . '" ' . $checked . '> ';
        $output .= esc_html($term->name);
        $output .= '</label>';
        $output .= '</div>';
    }
    
    $output .= '</div>'; // Close terms container
    
    // Add submit button
    $output .= '<div class="ckan-taxo-submit-container">';
    $output .= '<button type="submit" id="ckan-taxo-submit">อัพเดต Terms</button>';
    $output .= '<span class="ckan-taxo-spinner"></span>';
    $output .= '</div>';
    
    // Add message container for feedback
    $output .= '<div id="ckan-taxo-message" class="ckan-taxo-message"></div>';
    
    $output .= '</form>';
    $output .= '</div>'; // Close main container
    
    return $output;
}
add_shortcode('ckan_taxo_clicense', 'ckan_taxo_clicense_shortcode');

// Enqueue scripts and styles
function ckan_taxo_clicense_enqueue_scripts() {
    // Only enqueue on singular posts where the shortcode might be used
    if (is_singular()) {
        wp_enqueue_style('ckan-taxo-clicense-style', get_stylesheet_directory_uri() . '/css/ckan-taxo-clicense.css', array(), '1.0');
        wp_enqueue_script('ckan-taxo-clicense-script', get_stylesheet_directory_uri() . '/js/ckan-taxo-clicense.js', array('jquery'), '1.0', true);
        wp_localize_script('ckan-taxo-clicense-script', 'ckan_taxo_clicense_vars', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('ckan_taxo_clicense_nonce')
        ));
    }
}
add_action('wp_enqueue_scripts', 'ckan_taxo_clicense_enqueue_scripts');

// AJAX handler to update post terms
function ckan_taxo_clicense_update_terms() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_taxo_clicense_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed.'));
    }
    
    // Check if post ID is provided
    if (!isset($_POST['post_id']) || empty($_POST['post_id'])) {
        wp_send_json_error(array('message' => 'Post ID is required.'));
    }
    
    $post_id = intval($_POST['post_id']);
    
    // Check if user can edit this post
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์แก้ไขโพสต์นี้'));
    }
    
    // Get the submitted terms
    $terms = isset($_POST['terms']) ? array_map('intval', $_POST['terms']) : array();
    
    // Update the post's terms
    $result = wp_set_object_terms($post_id, $terms, 'clicense');
    
    if (is_wp_error($result)) {
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดในการอัพเดต: ' . $result->get_error_message()));
    } else {
        wp_send_json_success(array('message' => 'อัพเดต Terms เรียบร้อยแล้ว!'));
    }
    
    wp_die(); // Required to terminate the AJAX request properly
}
add_action('wp_ajax_ckan_taxo_clicense_update', 'ckan_taxo_clicense_update_terms');



/****** ฟังก์ชั่น CKAN TAG ******/

// Register shortcode สำหรับแสดงและจัดการ taxonomy ctag
function ckan_add_tag_shortcode() {
    global $post;
    
    // ถ้าไม่มีโพสต์ให้คืนค่าว่าง
    if (!isset($post)) {
        return '';
    }
    
    // รับ ID ของโพสต์ปัจจุบัน
    $post_id = $post->ID;
    
    // รับ terms ที่เกี่ยวข้องกับโพสต์นี้
    $post_terms = wp_get_object_terms($post_id, 'ctag');
    
    // เริ่มสร้าง output
    $output = '<div class="ckan-tag-container">';
    
    // แสดง tags ที่มีอยู่
    $output .= '<div class="ckan-tags-list">';
    if (!empty($post_terms) && !is_wp_error($post_terms)) {
        foreach ($post_terms as $term) {
            $output .= '<span class="ckan-tag" data-term-id="' . esc_attr($term->term_id) . '">';
            $output .= esc_html($term->name);
            $output .= '</span>';
        }
    }
    $output .= '</div>';
    
    // แสดงปุ่ม "เพิ่ม TAG" เฉพาะสำหรับผู้ดูแลระบบ, บรรณาธิการ, และผู้เขียน
    if (current_user_can('edit_post', $post_id)) {
        $output .= '<button class="ckan-add-tag-btn" data-post-id="' . esc_attr($post_id) . '">';
        $output .= '<span class="dashicons dashicons-edit"></span> เพิ่ม TAG';
        $output .= '</button>';
        
        // เพิ่ม HTML ของ modal popup (ซ่อนไว้เริ่มต้น)
        $output .= '<div id="ckan-tag-modal" class="ckan-modal" style="display:none;">';
        $output .= '<div class="ckan-modal-content">';
        $output .= '<span class="ckan-modal-close">&times;</span>';
        $output .= '<h3>เลือก Tag</h3>';
        $output .= '<div class="ckan-modal-tags">';
        
        // ส่วนนี้จะถูกเติมด้วย JavaScript/AJAX
        $output .= '</div>';
        $output .= '<div class="ckan-modal-footer">';
        $output .= '<button class="ckan-save-tags-btn">บันทึก</button>';
        $output .= '</div>';
        $output .= '</div>';
        $output .= '</div>';
    }
    
    $output .= '</div>';
    
    // เรียกใช้ไฟล์ CSS และ JavaScript ที่จำเป็น
    wp_enqueue_style('dashicons');
    wp_enqueue_style('ckan-add-tag-css', get_stylesheet_directory_uri() . '/css/ckan-add-tag.css');
    wp_enqueue_script('ckan-add-tag-js', get_stylesheet_directory_uri() . '/js/ckan-add-tag.js', array('jquery'), null, true);
    
    // ส่งข้อมูลที่จำเป็นไปยัง JavaScript
    wp_localize_script('ckan-add-tag-js', 'ckanTagData', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('ckan_tag_nonce')
    ));
    
    return $output;
}
add_shortcode('ckan_add_tag', 'ckan_add_tag_shortcode');

// AJAX handler สำหรับดึงข้อมูล terms ทั้งหมด
function ckan_get_all_terms() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('ckan_tag_nonce', 'nonce');
    
    // ดึง terms ทั้งหมดจาก taxonomy ctag
    $terms = get_terms(array(
        'taxonomy' => 'ctag',
        'hide_empty' => false,
    ));
    
    // ดึง terms ของโพสต์ปัจจุบัน
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $post_terms = array();
    
    if ($post_id > 0) {
        $post_term_objects = wp_get_object_terms($post_id, 'ctag');
        if (!is_wp_error($post_term_objects)) {
            foreach ($post_term_objects as $term) {
                $post_terms[] = $term->term_id;
            }
        }
    }
    
    $terms_array = array();
    
    if (!empty($terms) && !is_wp_error($terms)) {
        foreach ($terms as $term) {
            $terms_array[] = array(
                'id' => $term->term_id,
                'name' => $term->name,
                'selected' => in_array($term->term_id, $post_terms)
            );
        }
    }
    
    wp_send_json_success($terms_array);
}
add_action('wp_ajax_ckan_get_all_terms', 'ckan_get_all_terms');

// AJAX handler สำหรับอัพเดต terms ของโพสต์
function ckan_update_post_terms() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('ckan_tag_nonce', 'nonce');
    
    // รับพารามิเตอร์
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $term_ids = isset($_POST['term_ids']) ? $_POST['term_ids'] : array();
    
    // แปลง string IDs เป็น integers
    $term_ids = array_map('intval', $term_ids);
    
    // ตรวจสอบสิทธิ์
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์แก้ไขโพสต์นี้'));
        return;
    }
    
    // อัพเดต terms ของโพสต์
    $result = wp_set_object_terms($post_id, $term_ids, 'ctag');
    
    if (is_wp_error($result)) {
        wp_send_json_error(array('message' => $result->get_error_message()));
    } else {
        // ดึงข้อมูล terms ที่อัพเดตแล้วเพื่อรีเฟรชการแสดงผล
        $updated_terms = wp_get_object_terms($post_id, 'ctag');
        $terms_output = array();
        
        if (!empty($updated_terms) && !is_wp_error($updated_terms)) {
            foreach ($updated_terms as $term) {
                $terms_output[] = array(
                    'id' => $term->term_id,
                    'name' => $term->name
                );
            }
        }
        
        wp_send_json_success(array(
            'message' => 'อัพเดต Tags เรียบร้อยแล้ว',
            'terms' => $terms_output
        ));
    }
}
add_action('wp_ajax_ckan_update_post_terms', 'ckan_update_post_terms');

/***** ฟังก์ชั่น Active-Inactive ประกาศ *****/

// 1. ลงทะเบียน Shortcode
function at_status_toggle_shortcode() {
    // รับ ID ของโพสต์ปัจจุบัน
    $post_id = get_the_ID();
    
    // ดึงค่าสถานะปัจจุบันจาก custom field, ถ้าไม่มีให้ใช้ค่าเริ่มต้นเป็น 'active'
    $current_status = get_post_meta($post_id, 'at_status', true);
    if (empty($current_status)) {
        $current_status = 'active';
        update_post_meta($post_id, 'at_status', $current_status);
    }
    
    // ตรวจสอบว่าสถานะเป็น active หรือไม่
    $is_active = ($current_status === 'active');
    
    // สร้าง ID เฉพาะสำหรับ toggle นี้
    $toggle_id = 'at-status-toggle-' . $post_id;
    
    // สร้าง HTML สำหรับ toggle switch
    $output = '<div class="at-status-toggle-container" data-post-id="' . esc_attr($post_id) . '">';
    $output .= '<div class="at-status-toggle-switch ' . ($is_active ? 'active' : 'inactive') . '" id="' . esc_attr($toggle_id) . '">';
    $output .= '<div class="at-status-toggle-slider"></div>';
    $output .= '</div>';
    $output .= '<div class="at-status-toggle-label">' . esc_html(ucfirst($current_status)) . '</div>';
    $output .= '<div class="at-status-toggle-message"></div>';
    $output .= '</div>';
    
    // เรียกใช้ script และ style
    wp_enqueue_script('at-status-toggle-script');
    wp_enqueue_style('at-status-toggle-style');
    
    return $output;
}
add_shortcode('post_status_toggle', 'at_status_toggle_shortcode');

// 2. ลงทะเบียน scripts และ styles
function at_status_toggle_enqueue_scripts() {
    // ลงทะเบียน CSS
    wp_register_style(
        'at-status-toggle-style',
        get_stylesheet_directory_uri() . '/css/at-status-toggle.css',
        array(),
        '1.0.0'
    );
    
    // ลงทะเบียน JavaScript
    wp_register_script(
        'at-status-toggle-script',
        get_stylesheet_directory_uri() . '/js/at-status-toggle.js',
        array('jquery'),
        '1.0.0',
        true
    );
    
    // ส่งค่า AJAX URL และ nonce ไปยัง JavaScript
    wp_localize_script(
        'at-status-toggle-script',
        'atStatusToggle',
        array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce'   => wp_create_nonce('at_status_toggle_nonce')
        )
    );
}
add_action('wp_enqueue_scripts', 'at_status_toggle_enqueue_scripts');

// 3. จัดการ AJAX request
function at_status_toggle_ajax_handler() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'at_status_toggle_nonce')) {
        wp_send_json_error(array('message' => 'การตรวจสอบความปลอดภัยล้มเหลว'));
        wp_die();
    }
    
    // รับค่า post ID และสถานะใหม่
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $new_status = isset($_POST['status']) ? sanitize_text_field($_POST['status']) : '';
    
    // ตรวจสอบค่า post ID
    if ($post_id <= 0) {
        wp_send_json_error(array('message' => 'ID โพสต์ไม่ถูกต้อง'));
        wp_die();
    }
    
    // ตรวจสอบค่าสถานะ
    if ($new_status !== 'active' && $new_status !== 'inactive') {
        wp_send_json_error(array('message' => 'ค่าสถานะไม่ถูกต้อง'));
        wp_die();
    }
    
    // อัพเดท post meta
    $result = update_post_meta($post_id, 'at_status', $new_status);
    
    if ($result) {
        wp_send_json_success(array(
            'message' => 'อัพเดตสถานะเรียบร้อยแล้ว',
            'status' => $new_status
        ));
    } else {
        wp_send_json_error(array('message' => 'ไม่สามารถอัพเดตสถานะได้'));
    }
    
    wp_die();
}
add_action('wp_ajax_at_status_toggle', 'at_status_toggle_ajax_handler');
add_action('wp_ajax_nopriv_at_status_toggle', 'at_status_toggle_ajax_handler'); // สำหรับผู้ใช้ที่ไม่ได้ล็อกอิน (ถ้าจำเป็น)


/**** ฟังก์ชั่นแสดง ประกาศที่ inactive ******/

// 1. ลงทะเบียน Shortcode สำหรับแสดงรายการ inactive news
function at_inactive_news_list_shortcode() {
    // ลงทะเบียน scripts และ styles
    wp_enqueue_style('at-inactive-news-list-style');
    wp_enqueue_script('at-inactive-news-list-script');
    
    // ใช้ function ของ toggle switch ที่มีอยู่แล้ว
    if (function_exists('at_status_toggle_enqueue_scripts')) {
        at_status_toggle_enqueue_scripts();
    }

    // สร้าง HTML container สำหรับแสดงรายการ
    $output = '<div class="at-inactive-news-container">';
    
    // ส่วนค้นหาและฟิลเตอร์
    $output .= '<div class="at-search-filter">
                    <div class="at-search-box">
                        <input type="text" id="at-news-search" placeholder="ค้นหาข่าว, มสพร., มรด. ...">
                        <button id="at-news-search-btn"><i class="at-search-icon"></i>ค้นหา</button>
                    </div>
                    <div class="at-filter-info">
                        <span>แสดงเฉพาะข่าวที่มีสถานะ Inactive</span>
                    </div>
                </div>';
    
    // ส่วนแสดงรายการและโหลดข้อมูล
    $output .= '<div class="at-news-table-container">
                    <table class="at-news-table">
                        <thead>
                            <tr>
                                <th width="5%">ID</th>
                                <th width="15%">วันที่</th>
                                <th width="40%">หัวข้อ</th>
                                <th width="15%">เลขที่ประกาศ</th>
                                <th width="10%" class="at-action-column">สถานะ</th>
                                <th width="15%" class="at-action-column">การกระทำ</th>
                            </tr>
                        </thead>
                        <tbody id="at-news-table-body">
                            <tr>
                                <td colspan="6" class="at-loading-data">กำลังโหลดข้อมูล...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>';
    
    // ส่วน pagination
    $output .= '<div class="at-news-pagination" id="at-news-pagination"></div>';
    
    // ส่วนแสดงข้อความสถานะ
    $output .= '<div class="at-news-status-message" id="at-news-status-message"></div>';
    
    $output .= '</div>';
    
    return $output;
}
add_shortcode('inactive_news_list', 'at_inactive_news_list_shortcode');

// 2. ลงทะเบียน scripts และ styles
function at_inactive_news_list_enqueue_scripts() {
    // ลงทะเบียน CSS
    wp_register_style(
        'at-inactive-news-list-style',
        get_stylesheet_directory_uri() . '/css/at-inactive-news-list.css',
        array(),
        '1.0.0'
    );
    
    // ลงทะเบียน JavaScript
    wp_register_script(
        'at-inactive-news-list-script',
        get_stylesheet_directory_uri() . '/js/at-inactive-news-list.js',
        array('jquery'),
        '1.0.0',
        true
    );
    
    // ส่งค่า AJAX URL และ nonce ไปยัง JavaScript
    wp_localize_script(
        'at-inactive-news-list-script',
        'atInactiveNewsList',
        array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'nonce'   => wp_create_nonce('at_inactive_news_list_nonce'),
            'perPage' => 20 // จำนวนรายการต่อหน้า
        )
    );
}
add_action('wp_enqueue_scripts', 'at_inactive_news_list_enqueue_scripts');

// 3. จัดการ AJAX request สำหรับการโหลดข้อมูล
function at_load_inactive_news_ajax_handler() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'at_inactive_news_list_nonce')) {
        wp_send_json_error(array('message' => 'การตรวจสอบความปลอดภัยล้มเหลว'));
        wp_die();
    }
    
    // รับพารามิเตอร์
    $search_query = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 20;
    
    // คำนวนการเรียงลำดับ (offset)
    $offset = ($page - 1) * $per_page;
    
    // สร้าง meta_query สำหรับการค้นหาและฟิลเตอร์
    $meta_query = array(
        'relation' => 'AND',
        array(
            'key'     => 'at_status',
            'value'   => 'inactive',
            'compare' => '='
        )
    );
    
    // สร้าง WP_Query
    $args = array(
        'post_type'      => 'news',
        'posts_per_page' => $per_page,
        'offset'         => $offset,
        'post_status'    => 'publish',
        'orderby'        => 'date',
        'order'          => 'DESC',
        'meta_query'     => $meta_query
    );
    
    // เพิ่มการค้นหาหากมีข้อความค้นหา
    if (!empty($search_query)) {
        // ค้นหาใน title/content ปกติ หรือค้นหาใน custom field
        $args['_at_custom_search'] = $search_query; // ใช้ flag สำหรับการค้นหาแบบกำหนดเอง
    }
    
    // ประกาศ action สำหรับแทรกการค้นหาแบบกำหนดเอง
    add_filter('posts_where', 'at_custom_search_where', 10, 2);
    
    
    $query = new WP_Query($args);
    
    // คืนค่าตัวกรองเพื่อไม่ให้กระทบกับ query อื่น
    remove_filter('posts_where', 'at_custom_search_where', 10);
    
    // คำนวนจำนวนหน้าทั้งหมด
    $total_posts = $query->found_posts;
    $total_pages = ceil($total_posts / $per_page);
    
    $news_items = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            
            // ดึงสถานะ custom field
            $status = get_post_meta(get_the_ID(), 'at_status', true);
            if (empty($status)) {
                $status = 'active'; // ค่าเริ่มต้น
            }
            
            // ดึงเลขที่ประกาศจาก custom field
            $docnum_1 = get_post_meta(get_the_ID(), 'at_docnum_1', true);
            $docnum_2 = get_post_meta(get_the_ID(), 'at_docnum_2', true);
            
            // เพิ่มข้อมูลลงในอาร์เรย์
            $news_items[] = array(
                'id'         => get_the_ID(),
                'date'       => get_the_date('d/m/Y'),
                'title'      => get_the_title(),
                'permalink'  => get_permalink(),
                'docnum_1'   => $docnum_1 ? $docnum_1 : '-',
                'docnum_2'   => $docnum_2 ? $docnum_2 : '-',
                'status'     => $status
            );
        }
    }
    
    wp_reset_postdata();
    
    // ส่งข้อมูลกลับไปยัง JavaScript
    wp_send_json_success(array(
        'news'        => $news_items,
        'total_posts' => $total_posts,
        'total_pages' => $total_pages,
        'current_page'=> $page
    ));
    
    wp_die();
}
add_action('wp_ajax_at_load_inactive_news', 'at_load_inactive_news_ajax_handler');
add_action('wp_ajax_nopriv_at_load_inactive_news', 'at_load_inactive_news_ajax_handler');

// ฟังก์ชันสำหรับค้นหาแบบกำหนดเอง (ค้นหาใน title, content และ custom field)
function at_custom_search_where($where, $wp_query) {
    global $wpdb;
    
    // ตรวจสอบว่ามีการกำหนด flag การค้นหาแบบกำหนดเองหรือไม่
    if ($search_term = $wp_query->get('_at_custom_search')) {
        // เอา ' ออกเพื่อป้องกัน SQL injection
        $search_term = $wpdb->esc_like($search_term);
        $search_term = "'%" . $search_term . "%'";
        
        // ค้นหาใน title และ content (ส่วนของ WordPress ปกติ)
        $where .= " AND (
            $wpdb->posts.post_title LIKE $search_term 
            OR $wpdb->posts.post_content LIKE $search_term
            OR $wpdb->posts.ID IN (
                SELECT post_id FROM $wpdb->postmeta 
                WHERE (meta_key = 'at_docnum_1' AND meta_value LIKE $search_term)
                OR (meta_key = 'at_docnum_2' AND meta_value LIKE $search_term)
            )
        )";
    }
    
    return $where;
}

// 4. จัดการ AJAX request สำหรับการอัพเดตสถานะ
function at_direct_status_toggle_ajax_handler() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'at_inactive_news_list_nonce')) {
        wp_send_json_error(array('message' => 'การตรวจสอบความปลอดภัยล้มเหลว'));
        wp_die();
    }
    
    // รับค่า post ID และสถานะใหม่
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $new_status = isset($_POST['status']) ? sanitize_text_field($_POST['status']) : '';
    
    // ตรวจสอบค่า post ID
    if ($post_id <= 0) {
        wp_send_json_error(array('message' => 'ID โพสต์ไม่ถูกต้อง'));
        wp_die();
    }
    
    // ตรวจสอบค่าสถานะ
    if ($new_status !== 'active' && $new_status !== 'inactive') {
        wp_send_json_error(array('message' => 'ค่าสถานะไม่ถูกต้อง'));
        wp_die();
    }
    
    // อัพเดท post meta
    $result = update_post_meta($post_id, 'at_status', $new_status);
    
    if ($result) {
        wp_send_json_success(array(
            'message' => 'อัพเดตสถานะเรียบร้อยแล้ว',
            'status' => $new_status
        ));
    } else {
        wp_send_json_error(array('message' => 'ไม่สามารถอัพเดตสถานะได้'));
    }
    
    wp_die();
}
add_action('wp_ajax_at_direct_status_toggle', 'at_direct_status_toggle_ajax_handler');
add_action('wp_ajax_nopriv_at_direct_status_toggle', 'at_direct_status_toggle_ajax_handler');





/**** ฟังก์ชั่นแก้ไข term taxonomy "corg" ******/

function ckan_edit_corg_shortcode() {
    global $post;
    
    // ถ้าไม่มีโพสต์ให้คืนค่าว่าง
    if (!isset($post)) {
        return '';
    }
    
    // รับ ID ของโพสต์ปัจจุบัน
    $post_id = $post->ID;
    
    // รับ term ที่เกี่ยวข้องกับโพสต์นี้ (ใช้ get_the_terms เพราะเราต้องการเพียง term เดียว)
    $post_terms = get_the_terms($post_id, 'corg');
    $current_term = !empty($post_terms) && !is_wp_error($post_terms) ? $post_terms[0] : null;
    
    // เริ่มสร้าง output
    $output = '<div class="ckan-corg-container">';
    
    // แสดง label term ปัจจุบัน - อยู่ด้านบน
    $output .= '<div class="ckan-corg-label">';
    if ($current_term) {
        $output .= '<span class="ckan-corg-name">' . esc_html($current_term->name) . '</span>';
    } else {
        $output .= '<span class="ckan-corg-name ckan-corg-empty">ยังไม่มีข้อมูลองค์กร</span>';
    }
    $output .= '</div>';
    
    // แสดงปุ่ม "แก้ไขข้อมูล" - อยู่ด้านล่าง
    if (current_user_can('edit_post', $post_id)) {
        $output .= '<button class="ckan-edit-corg-btn" data-post-id="' . esc_attr($post_id) . '">';
        $output .= '<span class="dashicons dashicons-edit"></span> แก้ไขข้อมูล';
        $output .= '</button>';
        
        // เพิ่ม HTML ของ modal popup (ซ่อนไว้เริ่มต้น)
        $output .= '<div id="ckan-corg-modal" class="ckan-modal" style="display:none;">';
        $output .= '<div class="ckan-modal-content">';
        $output .= '<span class="ckan-modal-close">&times;</span>';
        $output .= '<h3>เลือกองค์กร</h3>';
        $output .= '<div class="ckan-modal-form">';
        $output .= '<div class="ckan-form-group">';
        $output .= '<label for="ckan-corg-select">องค์กร:</label>';
        $output .= '<select id="ckan-corg-select" class="ckan-corg-select">';
        $output .= '<option value="">-- เลือกองค์กร --</option>';
        // ส่วนนี้จะถูกเติมด้วย JavaScript/AJAX
        $output .= '</select>';
        $output .= '</div>';
        $output .= '</div>';
        $output .= '<div class="ckan-modal-footer">';
        $output .= '<button class="ckan-update-corg-btn">อัพเดตข้อมูล</button>';
        $output .= '</div>';
        $output .= '</div>';
        $output .= '</div>';
    }
    
    $output .= '</div>';
    
    // เรียกใช้ไฟล์ CSS และ JavaScript ที่จำเป็น
    wp_enqueue_style('dashicons');
    wp_enqueue_style('ckan-edit-org-css', get_stylesheet_directory_uri() . '/css/ckan-edit-org.css');
    wp_enqueue_script('ckan-edit-org-js', get_stylesheet_directory_uri() . '/js/ckan-edit-org.js', array('jquery'), null, true);
    
    // ส่งข้อมูลที่จำเป็นไปยัง JavaScript
    wp_localize_script('ckan-edit-org-js', 'ckanCorgData', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('ckan_corg_nonce')
    ));
    
    return $output;
}
add_shortcode('ckan_edit_corg', 'ckan_edit_corg_shortcode');

// AJAX handler สำหรับดึงข้อมูล terms ทั้งหมด
function ckan_get_all_corg_terms() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('ckan_corg_nonce', 'nonce');
    
    // ดึง terms ทั้งหมดจาก taxonomy corg
    $terms = get_terms(array(
        'taxonomy' => 'corg',
        'hide_empty' => false,
    ));
    
    // ดึง term ของโพสต์ปัจจุบัน
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $current_term_id = 0;
    
    if ($post_id > 0) {
        $post_terms = get_the_terms($post_id, 'corg');
        if (!empty($post_terms) && !is_wp_error($post_terms)) {
            $current_term_id = $post_terms[0]->term_id;
        }
    }
    
    $terms_array = array();
    
    if (!empty($terms) && !is_wp_error($terms)) {
        foreach ($terms as $term) {
            $terms_array[] = array(
                'id' => $term->term_id,
                'name' => $term->name,
                'selected' => ($term->term_id == $current_term_id)
            );
        }
    }
    
    wp_send_json_success(array(
        'terms' => $terms_array,
        'current_term_id' => $current_term_id
    ));
}
add_action('wp_ajax_ckan_get_all_corg_terms', 'ckan_get_all_corg_terms');

// AJAX handler สำหรับอัพเดต term ของโพสต์
function ckan_update_post_corg() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('ckan_corg_nonce', 'nonce');
    
    // รับพารามิเตอร์
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $term_id = isset($_POST['term_id']) ? intval($_POST['term_id']) : 0;
    
    // ตรวจสอบสิทธิ์
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์แก้ไขโพสต์นี้'));
        return;
    }
    
    // อัพเดต term ของโพสต์ (แทนที่ term ที่มีอยู่)
    $result = wp_set_object_terms($post_id, $term_id ? array($term_id) : array(), 'corg');
    
    if (is_wp_error($result)) {
        wp_send_json_error(array('message' => $result->get_error_message()));
    } else {
        // ดึงข้อมูล term ที่อัพเดตแล้ว
        $term_name = '';
        if ($term_id) {
            $term = get_term($term_id, 'corg');
            if (!is_wp_error($term)) {
                $term_name = $term->name;
            }
        }
        
        wp_send_json_success(array(
            'message' => 'อัพเดตข้อมูลองค์กรเรียบร้อยแล้ว',
            'term_id' => $term_id,
            'term_name' => $term_name
        ));
    }
}
add_action('wp_ajax_ckan_update_post_corg', 'ckan_update_post_corg');



/***** CKAN HISTORY  *******/

function ckan_history_create_table() {
    global $wpdb;
    $table_name = $wpdb->prefix . 'ckan_post_history';
    
    $charset_collate = $wpdb->get_charset_collate();
    
    $sql = "CREATE TABLE IF NOT EXISTS $table_name (
        id bigint(20) NOT NULL AUTO_INCREMENT,
        post_id bigint(20) NOT NULL,
        user_id bigint(20) NOT NULL,
        revision_date datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
        old_title text,
        new_title text,
        old_content longtext,
        new_content longtext,
        PRIMARY KEY (id),
        KEY post_id (post_id),
        KEY user_id (user_id),
        KEY revision_date (revision_date)
    ) $charset_collate;";
    
    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
    dbDelta($sql);
    
    // สร้าง log เพื่อตรวจสอบ
    error_log('CKAN History: ตรวจสอบและสร้างตารางในฐานข้อมูล');
}
// ทำการสร้างตารางเมื่อเปิดใช้งานปลั๊กอิน
register_activation_hook(__FILE__, 'ckan_history_create_table');
// สร้างตารางเมื่อเรียกใช้ฟังก์ชันนี้ (เพื่อให้แน่ใจว่าตารางถูกสร้าง)
add_action('plugins_loaded', 'ckan_history_create_table');

/**
 * ฟังก์ชันสำหรับแสดงระยะเวลาที่ผ่านมาเป็นภาษาไทย
 */
function ckan_time_elapsed_string($datetime) {
    $now = new DateTime;
    $ago = new DateTime($datetime);
    $diff = $now->diff($ago);

    $diff->w = floor($diff->d / 7);
    $diff->d -= $diff->w * 7;

    $string = array(
        'y' => 'ปี',
        'm' => 'เดือน',
        'w' => 'สัปดาห์',
        'd' => 'วัน',
        'h' => 'ชั่วโมง',
        'i' => 'นาที',
        's' => 'วินาที',
    );

    foreach ($string as $k => &$v) {
        if ($diff->$k) {
            $v = $diff->$k . ' ' . $v . ($diff->$k > 1 ? '' : '');
        } else {
            unset($string[$k]);
        }
    }

    if (!$string) {
        return 'เมื่อสักครู่';
    }

    $string = array_slice($string, 0, 1);
    return 'เมื่อ ' . implode(', ', $string) . 'ที่แล้ว';
}


/**
 * ฟังก์ชันแสดงประวัติการแก้ไขเพื่อตรวจสอบการทำงาน
 */
function ckan_debug_history($post_id = null) {
    if (!current_user_can('manage_options')) {
        return;
    }
    
    if ($post_id === null) {
        $post_id = get_the_ID();
    }
    
    global $wpdb;
    $table_name = $wpdb->prefix . 'ckan_post_history';
    
    $history_items = $wpdb->get_results(
        $wpdb->prepare(
            "SELECT * FROM $table_name WHERE post_id = %d ORDER BY revision_date DESC",
            $post_id
        )
    );
    
    echo '<div style="background:#f1f1f1; padding:15px; margin:20px 0; border:1px solid #ddd;">';
    echo '<h3>ข้อมูลประวัติการแก้ไขสำหรับตรวจสอบ (เฉพาะผู้ดูแลระบบ)</h3>';
    
    if (empty($history_items)) {
        echo '<p>ไม่พบประวัติการแก้ไขในฐานข้อมูล</p>';
        
        // ตรวจสอบว่าตารางถูกสร้างหรือยัง
        $table_exists = $wpdb->get_var("SHOW TABLES LIKE '$table_name'");
        echo '<p>สถานะตาราง: ' . ($table_exists ? 'มีตารางในฐานข้อมูล' : 'ไม่พบตารางในฐานข้อมูล') . '</p>';
    } else {
        echo '<p>พบประวัติการแก้ไขทั้งหมด: ' . count($history_items) . ' รายการ</p>';
        echo '<ul>';
        foreach ($history_items as $item) {
            $user_info = get_userdata($item->user_id);
            $username = $user_info ? $user_info->display_name : 'ไม่ระบุ';
            
            echo '<li>';
            echo 'วันที่: ' . $item->revision_date . ' | ';
            echo 'ผู้แก้ไข: ' . $username . ' | ';
            echo 'หัวข้อใหม่: ' . esc_html(wp_trim_words($item->new_title, 5));
            echo '</li>';
        }
        echo '</ul>';
    }
    
    echo '</div>';
}


/**
 * Shortcode สำหรับตรวจสอบการทำงาน
 */
function ckan_debug_history_shortcode($atts) {
    $atts = shortcode_atts(
        array(
            'post_id' => get_the_ID(),
        ),
        $atts,
        'ckan_debug_history'
    );
    
    ob_start();
    ckan_debug_history($atts['post_id']);
    return ob_get_clean();
}
add_shortcode('ckan_debug_history', 'ckan_debug_history_shortcode');


// ตรวจสอบการทำงานของ hook
add_action('init', 'ckan_check_history_table');
function ckan_check_history_table() {
    if (current_user_can('manage_options') && isset($_GET['check_ckan_history'])) {
        global $wpdb;
        $table_name = $wpdb->prefix . 'ckan_post_history';
        
        // ตรวจสอบว่าตารางมีอยู่หรือไม่
        $table_exists = $wpdb->get_var("SHOW TABLES LIKE '$table_name'");
        
        // ถ้าตารางไม่มีอยู่ ให้สร้างใหม่
        if (!$table_exists) {
            ckan_history_create_table();
            wp_die('สร้างตาราง CKAN History เรียบร้อยแล้ว');
        } else {
            // ตรวจสอบจำนวนรายการในตาราง
            $count = $wpdb->get_var("SELECT COUNT(*) FROM $table_name");
            wp_die("ตาราง CKAN History มีอยู่แล้ว และมีข้อมูลทั้งหมด $count รายการ");
        }
    }
}

// เพิ่ม hook ใหม่สำหรับตรวจจับการแก้ไขโพสต์
add_action('edit_post', 'ckan_log_post_edit', 10, 2);
function ckan_log_post_edit($post_id, $post) {
    // ตรวจสอบว่าเป็น post type "ckan" หรือไม่
    if ($post->post_type !== 'ckan') {
        return;
    }
    
    // บันทึก log เพื่อตรวจสอบ
    error_log('CKAN History: มีการแก้ไขโพสต์ ID: ' . $post_id);
    
    // สร้างข้อมูลใหม่
    $new_data = array(
        'post_type' => $post->post_type,
        'post_title' => $post->post_title,
        'post_content' => $post->post_content
    );
    
    // บันทึกประวัติ
    if (function_exists('ckan_save_revision_history')) {
        ckan_save_revision_history($post_id, $new_data);
    }
}

// เพิ่ม shortcode สำหรับตรวจสอบสถานะตาราง
add_shortcode('check_ckan_table', 'check_ckan_table_shortcode');
function check_ckan_table_shortcode() {
    if (!current_user_can('manage_options')) {
        return 'คุณไม่มีสิทธิ์เข้าถึงข้อมูลนี้';
    }
    
    global $wpdb;
    $table_name = $wpdb->prefix . 'ckan_post_history';
    
    // ตรวจสอบว่าตารางมีอยู่หรือไม่
    $table_exists = $wpdb->get_var("SHOW TABLES LIKE '$table_name'");
    
    if (!$table_exists) {
        return '<div style="padding:15px;background:#f8d7da;border:1px solid #f5c6cb;color:#721c24;border-radius:4px;">ไม่พบตาราง CKAN History ในฐานข้อมูล</div>';
    }
    
    // ตรวจสอบจำนวนรายการในตาราง
    $count = $wpdb->get_var("SELECT COUNT(*) FROM $table_name");
    
    // แสดงข้อมูลล่าสุด 5 รายการ
    $latest_items = $wpdb->get_results("SELECT * FROM $table_name ORDER BY revision_date DESC LIMIT 5");
    
    $output = '<div style="padding:15px;background:#d4edda;border:1px solid #c3e6cb;color:#155724;border-radius:4px;margin-bottom:20px;">';
    $output .= '<p>พบตาราง CKAN History ในฐานข้อมูล ทั้งหมด ' . $count . ' รายการ</p>';
    $output .= '</div>';
    
    if (!empty($latest_items)) {
        $output .= '<div style="padding:15px;background:#f8f9fa;border:1px solid #e9ecef;border-radius:4px;">';
        $output .= '<h4>รายการล่าสุด 5 รายการ</h4>';
        $output .= '<table style="width:100%;border-collapse:collapse;">';
        $output .= '<tr style="background:#f1f1f1;"><th style="padding:8px;border:1px solid #ddd;">ID</th><th style="padding:8px;border:1px solid #ddd;">Post ID</th><th style="padding:8px;border:1px solid #ddd;">User</th><th style="padding:8px;border:1px solid #ddd;">Date</th><th style="padding:8px;border:1px solid #ddd;">Title</th></tr>';
        
        foreach ($latest_items as $item) {
            $user_info = get_userdata($item->user_id);
            $username = $user_info ? $user_info->display_name : 'ไม่ระบุ';
            
            $output .= '<tr>';
            $output .= '<td style="padding:8px;border:1px solid #ddd;">' . $item->id . '</td>';
            $output .= '<td style="padding:8px;border:1px solid #ddd;">' . $item->post_id . '</td>';
            $output .= '<td style="padding:8px;border:1px solid #ddd;">' . $username . '</td>';
            $output .= '<td style="padding:8px;border:1px solid #ddd;">' . $item->revision_date . '</td>';
            $output .= '<td style="padding:8px;border:1px solid #ddd;">' . esc_html(wp_trim_words($item->new_title, 5)) . '</td>';
            $output .= '</tr>';
        }
        
        $output .= '</table>';
        $output .= '</div>';
    }
    
    return $output;
}

// เพิ่ม URL พารามิเตอร์สำหรับบังคับให้สร้างตาราง
add_action('init', 'force_create_ckan_table');
function force_create_ckan_table() {
    if (current_user_can('manage_options') && isset($_GET['create_ckan_table'])) {
        ckan_history_create_table();
        wp_die('สร้างตาราง CKAN History เรียบร้อยแล้ว กรุณาลองใช้งานอีกครั้ง');
    }
}




/**
 * Hook เข้ากับการบันทึก Post เพื่อเก็บประวัติการแก้ไข
 */
function ckan_save_post_history($post_id, $post, $update) {
    // ตรวจสอบการแก้ไขเบื้องต้น
    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }
    
    if (wp_is_post_revision($post_id) || $post->post_status == 'auto-draft') {
        return;
    }
    
    // สร้างข้อมูลที่จำเป็น
    $new_data = array(
        'post_type' => $post->post_type,
        'post_title' => $post->post_title,
        'post_content' => $post->post_content
    );
    
    // ดึงข้อมูลเก่าถ้าเป็นการอัพเดต
    $old_data = null;
    if ($update) {
        $old_post = wp_get_post_revision($post_id);
        if ($old_post) {
            $old_data = array(
                'post_title' => $old_post->post_title,
                'post_content' => $old_post->post_content
            );
        }
    }
    
    // บันทึกประวัติ
    ckan_save_revision_history($post_id, $new_data, $old_data);
}
add_action('wp_insert_post', 'ckan_save_post_history', 10, 3);

/**
 * Hook สำหรับ Frontend Forms (ตัวอย่างสำหรับ ACF)
 * หมายเหตุ: ต้องปรับ hook ให้ตรงกับ plugin ที่ใช้สำหรับ frontend editing
 */
function ckan_acf_save_post($post_id) {
    // ตรวจสอบว่าเป็น post type "ckan" หรือไม่
    $post_type = get_post_type($post_id);
    if ($post_type !== 'ckan') {
        return;
    }
    
    // สร้างข้อมูลใหม่
    $post = get_post($post_id);
    $new_data = array(
        'post_type' => $post_type,
        'post_title' => $post->post_title,
        'post_content' => $post->post_content
    );
    
    // บันทึกประวัติ
    ckan_save_revision_history($post_id, $new_data);
}
add_action('acf/save_post', 'ckan_acf_save_post', 20);


/**
 * Hook ทั่วไปสำหรับจับการแก้ไขโพสต์
 */
function ckan_catch_post_update($post_ID, $post_after, $post_before) {
    // ตรวจสอบว่าเป็น post type "ckan" หรือไม่
    if ($post_after->post_type !== 'ckan') {
        return;
    }
    
    // ข้อมูลใหม่
    $new_data = array(
        'post_type' => $post_after->post_type,
        'post_title' => $post_after->post_title,
        'post_content' => $post_after->post_content
    );
    
    // ข้อมูลเก่า
    $old_data = array(
        'post_title' => $post_before->post_title,
        'post_content' => $post_before->post_content
    );
    
    // บันทึกประวัติ
    ckan_save_revision_history($post_ID, $new_data, $old_data);
}
add_action('post_updated', 'ckan_catch_post_update', 10, 3);


/**
 * เพิ่ม API Endpoint สำหรับบันทึกประวัติจาก Frontend ด้วย AJAX
 */
function ckan_save_frontend_history() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('ckan_frontend_nonce', 'nonce');
    
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $new_title = isset($_POST['new_title']) ? sanitize_text_field($_POST['new_title']) : '';
    $new_content = isset($_POST['new_content']) ? wp_kses_post($_POST['new_content']) : '';
    
    if (!$post_id) {
        wp_send_json_error(array('message' => 'ไม่พบ Post ID'));
        return;
    }
    
    // ตรวจสอบว่าเป็น post type "ckan" หรือไม่
    $post_type = get_post_type($post_id);
    if ($post_type !== 'ckan') {
        wp_send_json_error(array('message' => 'ไม่ใช่ประเภทโพสต์ที่รองรับ'));
        return;
    }
    
    // ดึงข้อมูลเก่า
    $old_post = get_post($post_id);
    
    // สร้างข้อมูลใหม่
    $new_data = array(
        'post_type' => $post_type,
        'post_title' => $new_title,
        'post_content' => $new_content
    );
    
    // ข้อมูลเก่า
    $old_data = array(
        'post_title' => $old_post->post_title,
        'post_content' => $old_post->post_content
    );
    
    // บันทึกประวัติ
    ckan_save_revision_history($post_id, $new_data, $old_data);
    
    wp_send_json_success(array('message' => 'บันทึกประวัติการแก้ไขเรียบร้อยแล้ว'));
}
add_action('wp_ajax_ckan_save_frontend_history', 'ckan_save_frontend_history');

/**
 * Shortcode สำหรับแสดงประวัติการแก้ไข
 */
function ckan_history_shortcode($atts) {
    $atts = shortcode_atts(
        array(
            'post_id' => get_the_ID(),
            'limit' => 5
        ),
        $atts,
        'ckan_history'
    );
    
    $post_id = intval($atts['post_id']);
    $limit = intval($atts['limit']);
    
    // ตรวจสอบว่า post นี้เป็น type "ckan" หรือไม่
    $post_type = get_post_type($post_id);
    if ($post_type !== 'ckan') {
        return '<div class="ckan-history-error">ไม่พบข้อมูลประวัติการแก้ไข</div>';
    }
    
    // ดึงข้อมูลประวัติการแก้ไข
    global $wpdb;
    $table_name = $wpdb->prefix . 'ckan_post_history';
    
    $history_items = $wpdb->get_results(
        $wpdb->prepare(
            "SELECT * FROM $table_name WHERE post_id = %d ORDER BY revision_date DESC LIMIT %d",
            $post_id,
            $limit
        )
    );
    
    // ตรวจสอบจำนวนรายการทั้งหมด
    $total_items = $wpdb->get_var(
        $wpdb->prepare(
            "SELECT COUNT(*) FROM $table_name WHERE post_id = %d",
            $post_id
        )
    );
    
    // ถ้าไม่มีประวัติการแก้ไข
    if (empty($history_items)) {
        return '<div class="ckan-history-container"><p>ยังไม่มีประวัติการแก้ไข</p></div>';
    }
    
    // เริ่มสร้าง output
    $output = '<div class="ckan-history-container" data-post-id="' . esc_attr($post_id) . '">';
    $output .= '<h3 class="ckan-history-title">ประวัติการแก้ไข</h3>';
    $output .= '<div class="ckan-history-list">';
    
    // สร้างรายการประวัติการแก้ไข
    foreach ($history_items as $item) {
        $user_info = get_userdata($item->user_id);
        $username = $user_info ? $user_info->display_name : 'ไม่ระบุ';
        $date_time = mysql2date('j F Y เวลา H:i', $item->revision_date);
        $time_elapsed = ckan_time_elapsed_string($item->revision_date);
        
        $output .= '<div class="ckan-history-item" data-history-id="' . esc_attr($item->id) . '">';
        $output .= '<div class="ckan-history-meta">';
        $output .= '<span class="ckan-history-user"><i class="dashicons dashicons-admin-users"></i> ' . esc_html($username) . '</span>';
        $output .= '<span class="ckan-history-date"><i class="dashicons dashicons-calendar-alt"></i> ' . esc_html($date_time) . '</span>';
        $output .= '<span class="ckan-history-elapsed"><i class="dashicons dashicons-clock"></i> ' . esc_html($time_elapsed) . '</span>';
        $output .= '</div>';
        $output .= '<div class="ckan-history-title-changed">';
        $output .= '<h4>' . esc_html($item->new_title) . '</h4>';
        $output .= '</div>';
        
        // เพิ่มการแสดงตัวอย่างการเปลี่ยนแปลงเนื้อหาแบบย่อ
        $content_preview = wp_trim_words(strip_tags($item->new_content), 20, '...');
        $output .= '<div class="ckan-history-content-preview">' . esc_html($content_preview) . '</div>';
        
        $output .= '<button class="ckan-view-diff-btn" data-history-id="' . esc_attr($item->id) . '">';
        $output .= '<i class="dashicons dashicons-visibility"></i> ดูความเปลี่ยนแปลง';
        $output .= '</button>';
        $output .= '</div>';
    }
    
    $output .= '</div>';
    
    // ถ้ามีรายการมากกว่าที่กำหนด แสดงปุ่ม "ดูทั้งหมด"
    if ($total_items > $limit) {
        $output .= '<button class="ckan-view-all-history-btn" data-post-id="' . esc_attr($post_id) . '">';
        $output .= 'ดูประวัติทั้งหมด (' . esc_html($total_items) . ' รายการ)';
        $output .= '</button>';
    }
    
    // เพิ่ม Modal สำหรับแสดงประวัติทั้งหมด
    $output .= '<div id="ckan-history-modal" class="ckan-modal">';
    $output .= '<div class="ckan-modal-content">';
    $output .= '<span class="ckan-modal-close">&times;</span>';
    $output .= '<h3>ประวัติการแก้ไขทั้งหมด</h3>';
    $output .= '<div class="ckan-modal-history-list">';
    // ส่วนนี้จะถูกเติมด้วย JavaScript/AJAX
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
    
    // เพิ่ม Modal สำหรับแสดงความเปลี่ยนแปลง
    $output .= '<div id="ckan-diff-modal" class="ckan-modal">';
    $output .= '<div class="ckan-modal-content">';
    $output .= '<span class="ckan-modal-close">&times;</span>';
    $output .= '<h3>ความเปลี่ยนแปลง</h3>';
    $output .= '<div class="ckan-diff-container">';
    // ส่วนนี้จะถูกเติมด้วย JavaScript/AJAX
    $output .= '</div>';
    $output .= '</div>';
    $output .= '</div>';
    
    $output .= '</div>';
    
    // เรียกใช้ไฟล์ CSS และ JavaScript ที่จำเป็น
    wp_enqueue_style('dashicons');
    wp_enqueue_style('ckan-history-css', get_stylesheet_directory_uri() . '/css/ckan-history.css');
    wp_enqueue_script('ckan-history-js', get_stylesheet_directory_uri() . '/js/ckan-history.js', array('jquery'), null, true);
    
    // ส่งข้อมูลที่จำเป็นไปยัง JavaScript
    wp_localize_script('ckan-history-js', 'ckanHistoryData', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('ckan_history_nonce')
    ));
    
    return $output;
}
add_shortcode('ckan_history', 'ckan_history_shortcode');

/**
 * AJAX handler สำหรับดึงประวัติการแก้ไขทั้งหมด
 */
function ckan_get_all_history() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('ckan_history_nonce', 'nonce');
    
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    
    if (!$post_id) {
        wp_send_json_error(array('message' => 'ไม่พบ Post ID'));
        return;
    }
    
    // ดึงประวัติการแก้ไขทั้งหมด
    global $wpdb;
    $table_name = $wpdb->prefix . 'ckan_post_history';
    
    $history_items = $wpdb->get_results(
        $wpdb->prepare(
            "SELECT * FROM $table_name WHERE post_id = %d ORDER BY revision_date DESC",
            $post_id
        )
    );
    
    $items = array();
    
    foreach ($history_items as $item) {
        $user_info = get_userdata($item->user_id);
        $username = $user_info ? $user_info->display_name : 'ไม่ระบุ';
        $time_elapsed = ckan_time_elapsed_string($item->revision_date);
        
        // ตรวจสอบการเปลี่ยนแปลงของเนื้อหา
        $content_changed = ($item->old_content != $item->new_content);
        $title_changed = ($item->old_title != $item->new_title);
        
        // สร้างข้อความสรุปการเปลี่ยนแปลง
        $change_summary = '';
        if ($title_changed && $content_changed) {
            $change_summary = 'แก้ไขหัวข้อและเนื้อหา';
        } elseif ($title_changed) {
            $change_summary = 'แก้ไขหัวข้อ';
        } elseif ($content_changed) {
            $change_summary = 'แก้ไขเนื้อหา';
        }
        
        // สร้างตัวอย่างเนื้อหาที่เปลี่ยนแปลง
        $content_preview = wp_trim_words(strip_tags($item->new_content), 20, '...');
        
        $items[] = array(
            'id' => $item->id,
            'user_id' => $item->user_id,
            'username' => $username,
            'date' => mysql2date('j F Y เวลา H:i', $item->revision_date),
            'time_elapsed' => $time_elapsed,
            'title' => $item->new_title,
            'change_summary' => $change_summary,
            'content_preview' => $content_preview
        );
    }
    
    wp_send_json_success(array(
        'items' => $items
    ));
}
add_action('wp_ajax_ckan_get_all_history', 'ckan_get_all_history');
add_action('wp_ajax_nopriv_ckan_get_all_history', 'ckan_get_all_history');

/**
 * AJAX handler สำหรับดึงข้อมูลความเปลี่ยนแปลง
 */
function ckan_get_revision_diff() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('ckan_history_nonce', 'nonce');
    
    $history_id = isset($_POST['history_id']) ? intval($_POST['history_id']) : 0;
    
    if (!$history_id) {
        wp_send_json_error(array('message' => 'ไม่พบ History ID'));
        return;
    }
    
    // ดึงข้อมูลความเปลี่ยนแปลง
    global $wpdb;
    $table_name = $wpdb->prefix . 'ckan_post_history';
    
    $history_item = $wpdb->get_row(
        $wpdb->prepare(
            "SELECT * FROM $table_name WHERE id = %d",
            $history_id
        )
    );
    
    if (!$history_item) {
        wp_send_json_error(array('message' => 'ไม่พบข้อมูลประวัติการแก้ไข'));
        return;
    }
    
    // ดึงข้อมูลผู้ใช้
    $user_info = get_userdata($history_item->user_id);
    $username = $user_info ? $user_info->display_name : 'ไม่ระบุ';
    $time_elapsed = ckan_time_elapsed_string($history_item->revision_date);
    
    // ตรวจสอบการเปลี่ยนแปลงของเนื้อหา
    $content_changed = ($history_item->old_content != $history_item->new_content);
    $title_changed = ($history_item->old_title != $history_item->new_title);
    
    // สร้างข้อความสรุปการเปลี่ยนแปลง
    $change_summary = '';
    if ($title_changed && $content_changed) {
        $change_summary = 'แก้ไขหัวข้อและเนื้อหา';
    } elseif ($title_changed) {
        $change_summary = 'แก้ไขหัวข้อ';
    } elseif ($content_changed) {
        $change_summary = 'แก้ไขเนื้อหา';
    }
    
    // เตรียมข้อมูลสำหรับส่งกลับ
    $diff_data = array(
        'id' => $history_item->id,
        'post_id' => $history_item->post_id,
        'user_id' => $history_item->user_id,
        'username' => $username,
        'date' => mysql2date('j F Y เวลา H:i', $history_item->revision_date),
        'time_elapsed' => $time_elapsed,
        'old_title' => $history_item->old_title,
        'new_title' => $history_item->new_title,
        'old_content' => $history_item->old_content,
        'new_content' => $history_item->new_content,
        'change_summary' => $change_summary
    );
    
    wp_send_json_success(array(
        'diff' => $diff_data
    ));
}
add_action('wp_ajax_ckan_get_revision_diff', 'ckan_get_revision_diff');
add_action('wp_ajax_nopriv_ckan_get_revision_diff', 'ckan_get_revision_diff');

/**
 * ฟังก์ชันสำหรับบันทึกประวัติการแก้ไข CKAN
 * รองรับทั้งการแก้ไขผ่าน backend และ frontend
 */
function ckan_save_revision_history($post_id, $new_data, $old_data = null) {
    // ตรวจสอบว่าเป็น post type "ckan" หรือไม่
    if (!isset($new_data['post_type']) || $new_data['post_type'] !== 'ckan') {
        return;
    }
    
    // ถ้าไม่มีข้อมูลเก่า ให้ดึงจากฐานข้อมูล
    if ($old_data === null) {
        $old_post = get_post($post_id, ARRAY_A);
    } else {
        $old_post = $old_data;
    }
    
    // ตรวจสอบการเปลี่ยนแปลง
    $title_changed = ($old_post && isset($old_post['post_title']) && isset($new_data['post_title']) && 
                      $old_post['post_title'] !== $new_data['post_title']);
    $content_changed = ($old_post && isset($old_post['post_content']) && isset($new_data['post_content']) && 
                        $old_post['post_content'] !== $new_data['post_content']);
    
    // บันทึกประวัติถ้ามีการเปลี่ยนแปลง
    if ($title_changed || $content_changed) {
        global $wpdb;
        $table_name = $wpdb->prefix . 'ckan_post_history';
        
        $wpdb->insert(
            $table_name,
            array(
                'post_id' => $post_id,
                'user_id' => get_current_user_id(),
                'revision_date' => current_time('mysql'),
                'old_title' => $old_post ? $old_post['post_title'] : '',
                'new_title' => $new_data['post_title'],
                'old_content' => $old_post ? $old_post['post_content'] : '',
                'new_content' => $new_data['post_content']
            )
        );
        
        // สร้าง log เพื่อตรวจสอบ (สามารถเอาออกได้เมื่อแก้ไขเสร็จแล้ว)
        error_log('CKAN History: บันทึกประวัติการแก้ไข สำหรับโพสต์ ID: ' . $post_id);
    }
}



/***** CKAN SECERT SWITCH ******/


function ckan_secret_shortcode($atts) {
    // Enqueue required scripts and styles จาก ChildTheme
    wp_enqueue_style('ckan-secret-css', get_stylesheet_directory_uri() . '/css/ckan-secret.css', array(), '1.0.0');
    wp_enqueue_script('ckan-secret-js', get_stylesheet_directory_uri() . '/js/ckan-secret.js', array('jquery'), '1.0.0', true);
    
    // Localize script สำหรับ AJAX URL และ nonce
    wp_localize_script('ckan-secret-js', 'ckanSecretData', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('ckan-secret-nonce'),
    ));
    
    // รับ ID ของโพสต์ปัจจุบัน
    $post_id = get_the_ID();
    
    // ตรวจสอบสิทธิ์การแก้ไข
    if (!current_user_can('edit_post', $post_id)) {
        return '<div class="ckan-secret-notice">คุณไม่มีสิทธิ์เปลี่ยนสถานะข้อมูลนี้</div>';
    }
    
    // รับ term ปัจจุบัน
    $current_terms = wp_get_post_terms($post_id, 'cgov', array('fields' => 'names'));
    
    // ตรวจสอบว่าโพสต์มี term "ข้อมูลลับ" หรือไม่
    $is_secret = in_array('ข้อมูลลับ', $current_terms);
    
    // กำหนด class ตามสถานะปัจจุบัน
    $toggle_class = $is_secret ? 'is-secret' : 'is-public';
    
    // สร้าง HTML สำหรับ toggle switch
    $output = '
    <div class="ckan-secret-toggle-container" data-post-id="' . esc_attr($post_id) . '">
        <div class="ckan-secret-toggle-wrapper">
            <div class="ckan-secret-label public-label">ข้อมูลสาธารณะ</div>
            <div class="ckan-secret-toggle ' . $toggle_class . '">
                <div class="ckan-secret-toggle-slider"></div>
            </div>
            <div class="ckan-secret-label secret-label">ข้อมูลลับ</div>
        </div>
        <div class="ckan-secret-status">
            <span class="status-text">' . ($is_secret ? 'ข้อมูลลับ' : 'ข้อมูลสาธารณะ') . '</span>
            <span class="status-icon"></span>
        </div>
    </div>';
    
    return $output;
}
add_shortcode('ckan_secret', 'ckan_secret_shortcode');

/**
 * AJAX handler สำหรับอัปเดต taxonomy term
 */
function ckan_secret_update_term() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan-secret-nonce')) {
        wp_send_json_error('การตรวจสอบความปลอดภัยล้มเหลว');
        die();
    }
    
    // รับ post ID และสถานะใหม่
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $is_secret = isset($_POST['is_secret']) ? (bool)$_POST['is_secret'] : false;
    
    if ($post_id <= 0) {
        wp_send_json_error('ID โพสต์ไม่ถูกต้อง');
        die();
    }
    
    // ตรวจสอบสิทธิ์การแก้ไข
    if (!current_user_can('edit_post', $post_id)) {
        wp_send_json_error('คุณไม่มีสิทธิ์แก้ไขโพสต์นี้');
        die();
    }
    
    // กำหนด term ที่จะใช้
    $term = $is_secret ? 'ข้อมูลลับ' : 'ข้อมูลสาธารณะ';
    
    // อัปเดต taxonomy term
    $result = wp_set_object_terms($post_id, $term, 'cgov', false);
    
    if (is_wp_error($result)) {
        wp_send_json_error($result->get_error_message());
    } else {
        wp_send_json_success(array(
            'message' => 'อัปเดต term เรียบร้อย',
            'term' => $term,
            'is_secret' => $is_secret
        ));
    }
    
    die();
}
add_action('wp_ajax_ckan_secret_update_term', 'ckan_secret_update_term');


/**** EGP FILE DOWNLOAD *****/

// ลงทะเบียน shortcode และเรียกใช้ไฟล์ JS, CSS
function egp_file_download_init() {
    // ลงทะเบียน shortcode
    add_shortcode('egp_file_download', 'egp_file_download_shortcode');
    
    // เรียกใช้ไฟล์ JS และ CSS
    wp_enqueue_style('dashicons'); // สำหรับไอคอนของ WordPress
    wp_enqueue_media(); // สำหรับการอัพโหลดไฟล์ผ่าน Media Library
    wp_enqueue_script('egp-file-download-js', get_stylesheet_directory_uri() . '/js/egp-file-download.js', array('jquery'), '1.0.4', true);
    wp_enqueue_style('egp-file-download-css', get_stylesheet_directory_uri() . '/css/egp-file-download.css', array(), '1.0.4');
    
    // ส่งข้อมูล AJAX URL ไปยัง JavaScript
    wp_localize_script('egp-file-download-js', 'egp_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('egp_file_download_nonce'),
        'current_date' => thai_date(time())
    ));
}
add_action('wp_enqueue_scripts', 'egp_file_download_init');

// ฟังก์ชั่นแปลงวันที่เป็นรูปแบบ พ.ศ.
function thai_date($timestamp) {
    $thai_month_arr = array(
        "มกราคม", "กุมภาพันธ์", "มีนาคม", "เมษายน", "พฤษภาคม", "มิถุนายน",
        "กรกฎาคม", "สิงหาคม", "กันยายน", "ตุลาคม", "พฤศจิกายน", "ธันวาคม"
    );
    
    $thai_date = date("j", $timestamp);
    $thai_month = $thai_month_arr[date("m", $timestamp) - 1];
    $thai_year = date("Y", $timestamp) + 543;
    
    return "$thai_date $thai_month $thai_year";
}

// ฟังก์ชั่น shortcode
function egp_file_download_shortcode($atts) {
    // ค่าเริ่มต้นของ attribute
    $atts = shortcode_atts(array(
        'post_id' => get_the_ID(), // ใช้โพสต์ปัจจุบันถ้าไม่ได้ระบุ
    ), $atts);
    
    $post_id = $atts['post_id'];
    
    // ตรวจสอบว่าโพสต์มีอยู่จริงและเป็นประเภทที่ถูกต้อง
    if (!$post_id || get_post_type($post_id) !== 'egp') {
        return '<div class="egp-error-message">ไม่พบข้อมูลหรือประเภทโพสต์ไม่ถูกต้อง</div>';
    }
    
    // ดึงข้อมูล repeater field
    $files = get_field('egp_files', $post_id);
    
    // สร้าง ID เฉพาะสำหรับ instance นี้
    $unique_id = uniqid();
    $container_id = 'egp-file-download-' . $unique_id;
    $modal_id = 'egp-file-modal-' . $unique_id;
    
    // ตรวจสอบว่าผู้ใช้มีสิทธิ์ในการแก้ไขโพสต์นี้หรือไม่
    $can_edit = current_user_can('edit_post', $post_id);
    
    // เริ่มการเก็บ output
    ob_start();
    ?>
    <div class="egp-file-container" id="<?php echo esc_attr($container_id); ?>" data-post-id="<?php echo esc_attr($post_id); ?>">
        <div class="egp-file-header">
            <h3 class="egp-file-title">เอกสาร/ไฟล์แนบ</h3>
            <?php if ($can_edit) : ?>
            <button type="button" class="egp-add-file-btn">
                <span class="dashicons dashicons-plus-alt"></span> แนบไฟล์เพิ่ม
            </button>
            <?php endif; ?>
        </div>
        
        <div class="egp-file-table-container">
            <table class="egp-file-table">
                <thead>
                    <tr>
                        <th class="egp-file-name">ชื่อไฟล์</th>
                        <th class="egp-file-date">วันที่อัพเดต</th>
                        <th class="egp-file-action">ดาวน์โหลด</th>
                        <?php if ($can_edit) : ?>
                        <th class="egp-file-manage">จัดการ</th>
                        <?php endif; ?>
                    </tr>
                </thead>
                <tbody>
                    <?php
                    // ตรวจสอบว่ามีข้อมูลหรือไม่
                    if ($files && is_array($files) && count($files) > 0) {
                        foreach ($files as $index => $file) {
                            if (isset($file['egp_rp_name']) && isset($file['egp_rp_date']) && isset($file['egp_rp_link'])) {
                                // เข้ารหัส URL ของไฟล์เพื่อความปลอดภัย
                                $encoded_url = base64_encode($file['egp_rp_link']);
                                $download_url = '?egp_download=' . $encoded_url;
                                ?>
                                <tr data-index="<?php echo esc_attr($index); ?>">
                                    <td class="egp-file-name">
                                        <span class="egp-file-icon">
                                            <?php echo egp_get_file_icon($file['egp_rp_link']); ?>
                                        </span>
                                        <?php echo esc_html($file['egp_rp_name']); ?>
                                    </td>
                                    <td class="egp-file-date"><?php echo esc_html($file['egp_rp_date']); ?></td>
                                    <td class="egp-file-action">
                                        <a href="<?php echo esc_url($download_url); ?>" class="egp-download-button">
                                            <span class="dashicons dashicons-download"></span>
                                            <span class="egp-btn-text">ดาวน์โหลด</span>
                                        </a>
                                    </td>
                                    <?php if ($can_edit) : ?>
                                    <td class="egp-file-manage">
                                        <button type="button" class="egp-edit-file-btn" data-index="<?php echo esc_attr($index); ?>" 
                                            data-name="<?php echo esc_attr($file['egp_rp_name']); ?>"
                                            data-date="<?php echo esc_attr($file['egp_rp_date']); ?>"
                                            data-url="<?php echo esc_attr($file['egp_rp_link']); ?>">
                                            <span class="dashicons dashicons-edit"></span>
                                        </button>
                                        <button type="button" class="egp-delete-file-btn" data-index="<?php echo esc_attr($index); ?>">
                                            <span class="dashicons dashicons-trash"></span>
                                        </button>
                                    </td>
                                    <?php endif; ?>
                                </tr>
                                <?php
                            }
                        }
                    } else {
                        // ไม่พบข้อมูล
                        $colspan = $can_edit ? 4 : 3;
                        ?>
                        <tr class="egp-no-files-row">
                            <td colspan="<?php echo esc_attr($colspan); ?>" class="egp-no-files">
                                <div class="egp-empty-state">
                                    <span class="dashicons dashicons-media-document"></span>
                                    <p>ไม่พบไฟล์เอกสาร</p>
                                </div>
                            </td>
                        </tr>
                        <?php
                    }
                    ?>
                </tbody>
            </table>
        </div>
    </div>
    
    <?php if ($can_edit) : ?>
    <!-- Modal Popup สำหรับเพิ่ม/แก้ไขไฟล์ -->
    <div class="egp-modal" id="<?php echo esc_attr($modal_id); ?>">
        <div class="egp-modal-overlay"></div>
        <div class="egp-modal-container">
            <div class="egp-modal-header">
                <h3 class="egp-modal-title">เพิ่มไฟล์เอกสาร</h3>
                <button type="button" class="egp-modal-close">
                    <span class="dashicons dashicons-no-alt"></span>
                </button>
            </div>
            <div class="egp-modal-body">
                <form id="egp-file-form-<?php echo esc_attr($unique_id); ?>" class="egp-file-form" enctype="multipart/form-data">
                    <input type="hidden" name="action" value="egp_save_file">
                    <input type="hidden" name="security" value="<?php echo wp_create_nonce('egp_file_download_nonce'); ?>">
                    <input type="hidden" name="post_id" value="<?php echo esc_attr($post_id); ?>">
                    <input type="hidden" name="file_index" value="-1">
                    <input type="hidden" name="file_url" value="">
                    <input type="hidden" name="upload_type" value="direct">
                    
                    <div class="egp-form-group">
                        <label for="egp-file-name-<?php echo esc_attr($unique_id); ?>">ชื่อไฟล์ <span class="required">*</span></label>
                        <input type="text" id="egp-file-name-<?php echo esc_attr($unique_id); ?>" name="file_name" required>
                    </div>
                    
                    <div class="egp-form-group">
                        <label for="egp-file-date-<?php echo esc_attr($unique_id); ?>">วันที่อัพเดต <span class="required">*</span></label>
                        <input type="text" id="egp-file-date-<?php echo esc_attr($unique_id); ?>" name="file_date" value="<?php echo thai_date(time()); ?>" required>
                    </div>
                    
                    <div class="egp-form-group">
                        <label>ไฟล์ <span class="required">*</span></label>
                        <div class="egp-upload-tabs">
                            <div class="egp-tab-buttons">
                                <button type="button" class="egp-tab-btn active" data-tab="upload">อัพโหลดไฟล์</button>
                                <button type="button" class="egp-tab-btn" data-tab="media">Media Library</button>
                            </div>
                            
                            <div class="egp-tab-content active" data-tab="upload">
                                <div class="egp-file-drop-area">
                                    <span class="egp-drop-instructions">
                                        <span class="dashicons dashicons-upload"></span>
                                        <span>ลากไฟล์มาที่นี่หรือ</span>
                                    </span>
                                    <input type="file" name="file_upload" class="egp-file-input" required>
                                    <button type="button" class="egp-browse-btn">เลือกไฟล์</button>
                                </div>
                                <div class="egp-file-name-display"></div>
                            </div>
                            
                            <div class="egp-tab-content" data-tab="media">
                                <div class="egp-media-select-area">
                                    <button type="button" class="egp-select-media-btn">
                                        <span class="dashicons dashicons-admin-media"></span>
                                        เลือกไฟล์จาก Media Library
                                    </button>
                                </div>
                                <div class="egp-file-preview"></div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="egp-form-actions">
                        <button type="button" class="egp-cancel-btn">ยกเลิก</button>
                        <button type="submit" class="egp-save-btn">บันทึก</button>
                    </div>
                </form>
                <div class="egp-debug-info" style="display: none;"></div>
            </div>
        </div>
    </div>
    <?php endif; ?>
    
    <?php
    
    // ส่งคืนเนื้อหาที่เก็บไว้
    return ob_get_clean();
}

// ฟังก์ชั่นสำหรับแสดงไอคอนตามประเภทไฟล์
function egp_get_file_icon($file_url) {
    $file_ext = strtolower(pathinfo($file_url, PATHINFO_EXTENSION));
    
    $icon = '<span class="dashicons dashicons-media-default"></span>';
    
    switch ($file_ext) {
        case 'pdf':
            $icon = '<span class="dashicons dashicons-pdf"></span>';
            break;
        case 'doc':
        case 'docx':
            $icon = '<span class="dashicons dashicons-media-document"></span>';
            break;
        case 'xls':
        case 'xlsx':
            $icon = '<span class="dashicons dashicons-spreadsheet"></span>';
            break;
        case 'ppt':
        case 'pptx':
            $icon = '<span class="dashicons dashicons-slides"></span>';
            break;
        case 'jpg':
        case 'jpeg':
        case 'png':
        case 'gif':
            $icon = '<span class="dashicons dashicons-format-image"></span>';
            break;
        case 'zip':
        case 'rar':
        case '7z':
            $icon = '<span class="dashicons dashicons-archive"></span>';
            break;
    }
    
    return $icon;
}

// AJAX endpoint สำหรับเพิ่ม/แก้ไขไฟล์
function egp_save_file() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('egp_file_download_nonce', 'security');
    
    $response = array('success' => false, 'message' => '', 'debug' => array());
    
    try {
        // รับข้อมูลจาก AJAX request
        $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
        $file_index = isset($_POST['file_index']) ? intval($_POST['file_index']) : -1;
        $file_name = isset($_POST['file_name']) ? sanitize_text_field($_POST['file_name']) : '';
        $file_date = isset($_POST['file_date']) ? sanitize_text_field($_POST['file_date']) : '';
        $upload_type = isset($_POST['upload_type']) ? sanitize_text_field($_POST['upload_type']) : 'direct';
        
        $response['debug']['post_data'] = array(
            'post_id' => $post_id,
            'file_index' => $file_index,
            'file_name' => $file_name,
            'file_date' => $file_date,
            'upload_type' => $upload_type
        );
        
        // ตรวจสอบสิทธิ์ในการแก้ไขโพสต์
        if (!current_user_can('edit_post', $post_id)) {
            throw new Exception('คุณไม่มีสิทธิ์ในการแก้ไขข้อมูลนี้');
        }
        
        // ตรวจสอบความถูกต้องของข้อมูลพื้นฐาน
        if (empty($post_id) || empty($file_name) || empty($file_date)) {
            throw new Exception('ข้อมูลไม่ครบถ้วน');
        }
        
        $file_url = '';
        
        // จัดการกับไฟล์ตามประเภทการอัพโหลด
        if ($upload_type === 'direct' && isset($_FILES['file_upload']) && !empty($_FILES['file_upload']['name'])) {
            // อัพโหลดไฟล์ใหม่
            if (!function_exists('wp_handle_upload')) {
                require_once(ABSPATH . 'wp-admin/includes/file.php');
            }
            
            $response['debug']['upload_process'] = 'Direct upload started';
            $response['debug']['files_data'] = $_FILES;
            
            $uploadedfile = $_FILES['file_upload'];
            $upload_overrides = array('test_form' => false);
            
            $movefile = wp_handle_upload($uploadedfile, $upload_overrides);
            
            $response['debug']['upload_result'] = $movefile;
            
            if ($movefile && !isset($movefile['error'])) {
                // อัพโหลดสำเร็จ
                $file_url = $movefile['url'];
                
                // เพิ่มไฟล์ลงใน Media Library
                if (!function_exists('wp_generate_attachment_metadata')) {
                    require_once(ABSPATH . 'wp-admin/includes/image.php');
                }
                if (!function_exists('wp_insert_attachment')) {
                    require_once(ABSPATH . 'wp-admin/includes/media.php');
                }
                
                $filename = $uploadedfile['name'];
                $wp_filetype = wp_check_filetype($filename, null);
                
                $attachment = array(
                    'post_mime_type' => $wp_filetype['type'],
                    'post_title' => sanitize_file_name($filename),
                    'post_content' => '',
                    'post_status' => 'inherit'
                );
                
                $attachment_id = wp_insert_attachment($attachment, $movefile['file'], $post_id);
                $response['debug']['attachment_id'] = $attachment_id;
                
                if (is_wp_error($attachment_id)) {
                    throw new Exception('ไม่สามารถเพิ่มไฟล์ลงใน Media Library ได้: ' . $attachment_id->get_error_message());
                }
                
                // ถ้าเป็นรูปภาพให้สร้าง thumbnail
                if (strpos($wp_filetype['type'], 'image') !== false) {
                    $attachment_data = wp_generate_attachment_metadata($attachment_id, $movefile['file']);
                    wp_update_attachment_metadata($attachment_id, $attachment_data);
                }
            } else {
                // อัพโหลดไม่สำเร็จ
                $error_message = isset($movefile['error']) ? $movefile['error'] : 'เกิดข้อผิดพลาดในการอัพโหลดไฟล์';
                throw new Exception($error_message);
            }
        } else if ($upload_type === 'media') {
            // ใช้ URL ที่มีอยู่แล้ว (จาก Media Library)
            $file_url = isset($_POST['file_url']) ? esc_url_raw($_POST['file_url']) : '';
            $response['debug']['media_url'] = $file_url;
            
            if (empty($file_url)) {
                throw new Exception('URL ไฟล์ไม่ถูกต้อง');
            }
        } else {
            throw new Exception('ไม่ได้ระบุไฟล์ที่ต้องการอัพโหลดหรือเลือกจาก Media Library');
        }
        
        // ตรวจสอบว่า file_url ไม่ว่าง
        if (empty($file_url)) {
            throw new Exception('ไม่สามารถรับข้อมูล URL ของไฟล์ได้');
        }
        
        // ดึงข้อมูล repeater field ปัจจุบัน
        $files = get_field('egp_files', $post_id, false);
        $response['debug']['current_files'] = $files;
        
        if (empty($files) || !is_array($files)) {
            $files = array(); // สร้างอาร์เรย์ว่างถ้าไม่มีข้อมูล
        }
        
        // สร้างข้อมูลไฟล์ใหม่ตามโครงสร้าง ACF
        $new_row = array(
            'egp_rp_name' => $file_name,
            'egp_rp_date' => $file_date,
            'egp_rp_link' => $file_url
        );
        
        // เพิ่มหรือแก้ไขข้อมูล
        if ($file_index >= 0 && isset($files[$file_index])) {
            // แก้ไขข้อมูลที่มีอยู่แล้ว
            $files[$file_index] = $new_row;
            $response['debug']['action'] = 'update_row';
        } else {
            // เพิ่มข้อมูลใหม่
            $files[] = $new_row;
            $response['debug']['action'] = 'add_row';
        }
        
        $response['debug']['new_files'] = $files;
        
        // บันทึกข้อมูลลงใน ACF Repeater Field
        $update_result = update_field('egp_files', $files, $post_id);
        
        if ($update_result === false) {
            // ลองใช้วิธีการแบบ flexible content หรือ repeater
            $flexible_content_updated = false;
            
            // ถ้าเป็นการเพิ่มข้อมูลใหม่
            if ($file_index < 0) {
                // ลองใช้ add_row ของ ACF
                if (function_exists('add_row')) {
                    $add_row_result = add_row('egp_files', $new_row, $post_id);
                    $response['debug']['add_row_result'] = $add_row_result;
                    
                    if ($add_row_result !== false) {
                        $flexible_content_updated = true;
                    }
                }
            } else {
                // ถ้าเป็นการแก้ไขข้อมูลที่มีอยู่แล้ว
                if (function_exists('update_row')) {
                    $update_row_result = update_row('egp_files', $file_index + 1, $new_row, $post_id);
                    $response['debug']['update_row_result'] = $update_row_result;
                    
                    if ($update_row_result !== false) {
                        $flexible_content_updated = true;
                    }
                }
            }
            
            // ถ้ายังไม่สามารถบันทึกได้ ให้ลองใช้การอัพเดตข้อมูลโพสต์เมต้า
            if (!$flexible_content_updated) {
                // ลองใช้ update_post_meta
                $meta_key = 'egp_files';
                $update_meta_result = update_post_meta($post_id, $meta_key, $files);
                $response['debug']['update_meta_result'] = $update_meta_result;
                
                // ลองใช้ ACF update_post_meta ซึ่งมีรูปแบบพิเศษ
                $acf_meta_key = '_' . $meta_key;
                $update_acf_meta_result = update_post_meta($post_id, $acf_meta_key, 'field_egp_files');
                $response['debug']['update_acf_meta_result'] = $update_acf_meta_result;
                
                if ($update_meta_result === false && $update_acf_meta_result === false) {
                    throw new Exception('ไม่สามารถบันทึกข้อมูลลงใน ACF Repeater Field ได้');
                }
            }
        }
        
        // ดึงข้อมูลล่าสุดหลังจากบันทึก
        $updated_files = get_field('egp_files', $post_id);
        $response['debug']['updated_files'] = $updated_files;
        
        // สำเร็จ
        $response['success'] = true;
        $response['message'] = 'บันทึกข้อมูลเรียบร้อยแล้ว';
        $response['files'] = $updated_files;
        
    } catch (Exception $e) {
        $response['success'] = false;
        $response['message'] = $e->getMessage();
    }
    
    // ส่งผลลัพธ์กลับ
    wp_send_json($response);
}
add_action('wp_ajax_egp_save_file', 'egp_save_file');

// AJAX endpoint สำหรับลบไฟล์
function egp_delete_file() {
    // ตรวจสอบ nonce เพื่อความปลอดภัย
    check_ajax_referer('egp_file_download_nonce', 'nonce');
    
    $response = array('success' => false, 'message' => '', 'debug' => array());
    
    try {
        // รับข้อมูลจาก AJAX request
        $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
        $file_index = isset($_POST['file_index']) ? intval($_POST['file_index']) : -1;
        
        $response['debug']['post_data'] = array(
            'post_id' => $post_id,
            'file_index' => $file_index
        );
        
        // ตรวจสอบความถูกต้องของข้อมูล
        if (empty($post_id) || $file_index < 0) {
            throw new Exception('ข้อมูลไม่ถูกต้อง');
        }
        
        // ตรวจสอบสิทธิ์ในการแก้ไขโพสต์
        if (!current_user_can('edit_post', $post_id)) {
            throw new Exception('คุณไม่มีสิทธิ์ในการลบข้อมูลนี้');
        }
        
        // ลองใช้ delete_row ของ ACF
        $deleted = false;
        if (function_exists('delete_row')) {
            $delete_result = delete_row('egp_files', $file_index + 1, $post_id);
            $response['debug']['delete_row_result'] = $delete_result;
            
            if ($delete_result !== false) {
                $deleted = true;
            }
        }
        
        // ถ้าใช้ delete_row ไม่สำเร็จ ให้ลองใช้วิธีการดึงข้อมูลทั้งหมดและลบออกแล้วบันทึกใหม่
        if (!$deleted) {
            // ดึงข้อมูล repeater field ปัจจุบัน
            $files = get_field('egp_files', $post_id, false);
            $response['debug']['current_files'] = $files;
            
            if (empty($files) || !is_array($files) || !isset($files[$file_index])) {
                throw new Exception('ไม่พบข้อมูลที่ต้องการลบ');
            }
            
            // ลบข้อมูลออกจากอาร์เรย์
            array_splice($files, $file_index, 1);
            $response['debug']['new_files'] = $files;
            
            // บันทึกข้อมูลลงใน ACF Repeater Field
            $update_result = update_field('egp_files', $files, $post_id);
            $response['debug']['update_result'] = $update_result;
            
            if ($update_result === false) {
                // ลองใช้ update_post_meta
                $meta_key = 'egp_files';
                $update_meta_result = update_post_meta($post_id, $meta_key, $files);
                $response['debug']['update_meta_result'] = $update_meta_result;
                
                if ($update_meta_result === false) {
                    throw new Exception('ไม่สามารถบันทึกข้อมูลลงใน ACF Repeater Field ได้');
                }
            }
        }
        
        // ดึงข้อมูลล่าสุดหลังจากลบ
        $updated_files = get_field('egp_files', $post_id);
        $response['debug']['updated_files'] = $updated_files;
        
        // สำเร็จ
        $response['success'] = true;
        $response['message'] = 'ลบข้อมูลเรียบร้อยแล้ว';
        $response['files'] = $updated_files;
        
    } catch (Exception $e) {
        $response['success'] = false;
        $response['message'] = $e->getMessage();
    }
    
    // ส่งผลลัพธ์กลับ
    wp_send_json($response);
}
add_action('wp_ajax_egp_delete_file', 'egp_delete_file');

// ฟังก์ชั่นสำหรับประมวลผล URL ที่เข้ารหัสและดาวน์โหลดไฟล์
function egp_file_download_process() {
    // ตรวจสอบว่าเป็นการร้องขอดาวน์โหลดหรือไม่
    if (isset($_GET['egp_download']) && !empty($_GET['egp_download'])) {
        // ถอดรหัส URL
        $file_url = base64_decode($_GET['egp_download']);
        
        // ตรวจสอบความถูกต้องของ URL
        if (filter_var($file_url, FILTER_VALIDATE_URL) === false) {
            wp_die('URL ไฟล์ไม่ถูกต้อง');
        }
        
        // รับข้อมูลไฟล์
        $file_info = pathinfo($file_url);
        $file_name = $file_info['basename'];
        
        // ตั้งค่า header สำหรับการดาวน์โหลด
        header('Content-Type: application/octet-stream');
        header('Content-Disposition: attachment; filename="' . $file_name . '"');
        header('Pragma: no-cache');
        
        // อ่านไฟล์และส่งออกไปยังเบราว์เซอร์
        readfile($file_url);
        exit;
    }
}
add_action('init', 'egp_file_download_process');


/**** CKAN API *****/

function add_direct_data_api_button() {
    ?>
    <script type="text/javascript">
    jQuery(document).ready(function($) {
        // ทำงานเมื่อมีการคลิกที่ปุ่มดูตัวอย่าง
        $(document).on('click', '.ckan-preview-btn', function() {
            // รอให้ Modal โหลดเสร็จแล้วค่อยเพิ่มปุ่ม Data API
            setTimeout(function() {
                // ตรวจสอบว่ามีปุ่ม Data API แล้วหรือยัง
                if ($('.data-api-btn').length === 0) {
                    var apiButton = $('<button class="data-api-btn" style="background-color: #e91e63; color: white; border: none; border-radius: 4px; padding: 6px 12px; cursor: pointer; position: absolute; right: 45px; top: 15px; z-index: 10;">Data API</button>');
                    $('.ckan-preview-modal-title').after(apiButton);
                    
                    // เมื่อคลิกปุ่ม Data API
                    apiButton.on('click', function() {
                        // เปลี่ยนชื่อปุ่มและหัวข้อ Modal
                        if ($(this).text() === 'Data API') {
                            $('.ckan-preview-modal-title').text('CKAN Data API');
                            $(this).text('ดูตัวอย่างไฟล์');
                            
                            // ดึง ID ของโพสต์
                            var postId = $('.ckan-assets-container').data('post-id');
                            
                            // ดึง URL ของเว็บไซต์และสร้าง REST API URL
                            var siteUrl = window.location.origin;
                            var apiBaseUrl = siteUrl + '/wp-json/ckan-api/v1';
                            
                            // สร้างเนื้อหา API
                            var apiContent = `
                                <div style="padding: 20px;">
                                    <h3 style="margin-top: 0;">API Endpoints</h3>
                                    <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
                                        <tr style="background-color: #f3f4f6;">
                                            <th style="padding: 10px; text-align: left; border: 1px solid #ddd; width: 30%;">Action</th>
                                            <th style="padding: 10px; text-align: left; border: 1px solid #ddd;">URL</th>
                                        </tr>
                                        <tr>
                                            <td style="padding: 10px; border: 1px solid #ddd;">สร้าง</td>
                                            <td style="padding: 10px; border: 1px solid #ddd;">${apiBaseUrl}/datastore_create</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 10px; border: 1px solid #ddd;">ปรับปรุง/เพิ่ม</td>
                                            <td style="padding: 10px; border: 1px solid #ddd;">${apiBaseUrl}/datastore_upsert</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 10px; border: 1px solid #ddd;">เรียกดูข้อมูล</td>
                                            <td style="padding: 10px; border: 1px solid #ddd;">${apiBaseUrl}/datastore_search</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 10px; border: 1px solid #ddd;">เรียกดูข้อมูล Post</td>
                                            <td style="padding: 10px; border: 1px solid #ddd;">${apiBaseUrl}/post/${postId}</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 10px; border: 1px solid #ddd;">เรียกดูไฟล์แนบ</td>
                                            <td style="padding: 10px; border: 1px solid #ddd;">${apiBaseUrl}/post/${postId}/assets</td>
                                        </tr>
                                        <tr>
                                            <td style="padding: 10px; border: 1px solid #ddd;">เรียกดูเมตาดาต้า</td>
                                            <td style="padding: 10px; border: 1px solid #ddd;">${apiBaseUrl}/post/${postId}/metadata</td>
                                        </tr>
                                    </table>
                                    
                                    <h3>ตัวอย่างการเรียกใช้งาน</h3>
                                    <div style="background-color: #f5f5f5; padding: 15px; border-radius: 4px; margin-bottom: 20px; overflow-x: auto;">
                                        <a href="${apiBaseUrl}/datastore_search?resource_id=${postId}" target="_blank" style="color: #2563eb; text-decoration: none;">${apiBaseUrl}/datastore_search?resource_id=${postId}</a>
                                    </div>
                                </div>
                            `;
                            
                            // แสดงเนื้อหา API
                            $('.ckan-preview-data').html(apiContent);
                            $('.ckan-preview-loading').hide();
                        } else {
                            // กลับไปแสดงตัวอย่างไฟล์
                            window.location.reload();
                        }
                    });
                }
            }, 300);
        });
    });
    </script>
    <?php
}


/****** ฟังก์ชั่นตั้งค่าการเข้าถึง CKAN *****/

// Don't allow direct access
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Main function to initialize CKAN permission settings
 *
 * ควรจะถูกเรียกหลังจาก Custom Post Type 'ckan' ถูกลงทะเบียนแล้ว
 */
function ckan_allow_permission_setup() {
    // Register scripts and styles (Only for the settings page)
    add_action('admin_enqueue_scripts', 'ckan_permission_register_assets');

    // Add menu for access settings in CKAN post type
    // ตรวจสอบให้แน่ใจว่า CPT 'ckan' ถูกลงทะเบียนก่อน hook 'admin_menu' นี้จะทำงาน
    add_action('admin_menu', 'ckan_permission_add_menu');

    // Restrict content based on settings (Frontend check)
    add_action('template_redirect', 'ckan_permission_check_access');

    // Filter for search results / archives (Frontend check)
    add_filter('the_posts', 'ckan_permission_filter_posts', 10, 2);

    // Add AJAX handler for saving settings
    add_action('wp_ajax_save_ckan_permissions', 'ckan_permission_ajax_save_handler');

    // Note: Saving settings is handled within the settings page function itself now.
}
// Hook into 'init' or 'plugins_loaded'. 'init' is generally safe after CPTs are registered.
// If 'ckan' CPT is registered on 'init' with default priority (10), hooking this at 11 ensures CPT exists.
add_action('init', 'ckan_allow_permission_setup', 11);


/**
 * Register and enqueue scripts and styles for the admin settings page.
 *
 * @param string $hook The current admin page hook.
 */
function ckan_permission_register_assets($hook) {
    // Check if we are on the correct admin page ('toplevel_page_myplugin' or 'myplugin_page_mysublevel')
    // For a submenu under a CPT: '{$post_type}_page_{$menu_slug}'
    if ($hook == 'ckan_page_ckan-access-settings') {

        // --- IMPORTANT: Update Path ---
        // เปลี่ยน path ไปยังตำแหน่งที่ถูกต้องของไฟล์ CSS/JS ของคุณ
        // ตัวอย่าง: ถ้าอยู่ใน plugin ให้ใช้ plugin_dir_url(__FILE__)
        // ตัวอย่าง: ถ้าอยู่ใน theme ให้ใช้ get_stylesheet_directory_uri()

        $assets_url = get_stylesheet_directory_uri(); // หรือ plugin_dir_url(__FILE__) . 'assets/';

        // Enqueue Styles
        wp_enqueue_style(
            'ckan-allow-permission-admin-style', // Unique handle
            $assets_url . '/css/ckan-allow-permission.css', // Correct path to your CSS
            array(),
            '1.0.3' // Versioning (update if changed)
        );

        // Enqueue Scripts
        wp_enqueue_script(
            'ckan-allow-permission-admin-script', // Unique handle (must match localize script handle)
            $assets_url . '/js/ckan-allow-permission.js', // Correct path to your JS
            array('jquery'), // Dependencies
            '1.0.3', // Versioning (update if changed)
            true // Load in footer
        );

        // Localize script data - Pass PHP data to JavaScript
        // The JS file 'ckan-allow-permission.js' expects this object.
        wp_localize_script('ckan-allow-permission-admin-script', 'ckan_permission_data', array(
            'ajax_url' => admin_url('admin-ajax.php'), // If using AJAX later
            'nonce' => wp_create_nonce('ckan_permission_ajax_nonce'), // Nonce for AJAX security
            'roles' => wp_roles()->roles, // Pass WP roles (used in JS for status calculation)
            'current_tab' => isset($_GET['tab']) ? sanitize_key($_GET['tab']) : '', // Pass current tab if set in URL
            'admin_url' => admin_url('edit.php?post_type=ckan&page=ckan-access-settings'), // Base admin URL for the form
            'success_message' => __('Settings saved successfully.'),
            'error_message' => __('Error saving settings. Please try again.')
        ));
    }
}

/**
 * Add the submenu page under the 'ckan' Custom Post Type menu.
 *
 * This function MUST run on the 'admin_menu' action hook.
 * Assumes 'ckan' CPT is registered and creates a top-level menu item.
 */
function ckan_permission_add_menu() {
    // Check if the CPT 'ckan' exists before adding the submenu
    if (!post_type_exists('ckan')) {
        // Optional: Log an error or add an admin notice if the CPT is missing
        error_log('CKAN Permission Error: Custom Post Type "ckan" does not exist. Cannot add settings menu.');
        return;
    }

    add_submenu_page(
        'edit.php?post_type=ckan',      // Parent menu slug (Standard for CPTs)
        'ตั้งค่าการเข้าถึง CKAN',        // Page title (appears in browser tab)
        'ตั้งค่าการเข้าถึง',             // Menu title (appears in the sidebar)
        'manage_options',               // Capability required to see this menu item
        'ckan-access-settings',         // Menu slug (unique identifier for the page)
        'ckan_permission_settings_page' // Callback function to render the page content
    );
}

/**
 * AJAX handler for saving CKAN permission settings
 */
function ckan_permission_ajax_save_handler() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ckan_permission_ajax_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        return;
    }

    // Check user capability
    if (!current_user_can('manage_options')) {
        wp_send_json_error(array('message' => 'Permission denied'));
        return;
    }

    // Get current settings
    $current_settings = get_option('ckan_permission_settings', array());
    
    // Get data from AJAX request
    $taxonomy = isset($_POST['taxonomy']) ? sanitize_key($_POST['taxonomy']) : '';
    $term_id = isset($_POST['term_id']) ? absint($_POST['term_id']) : 0;
    $roles = isset($_POST['roles']) ? (array) $_POST['roles'] : array();
    
    // Validate data
    if (empty($taxonomy) || empty($term_id)) {
        wp_send_json_error(array('message' => 'Invalid data provided'));
        return;
    }
    
    // Update settings for this term
    if (!isset($current_settings[$taxonomy])) {
        $current_settings[$taxonomy] = array();
    }
    
    if (!empty($roles)) {
        $current_settings[$taxonomy][$term_id] = array();
        foreach ($roles as $role_key) {
            $clean_role_key = sanitize_key($role_key);
            $current_settings[$taxonomy][$term_id][$clean_role_key] = '1';
        }
    } else {
        // If no roles are selected, remove this term from settings
        if (isset($current_settings[$taxonomy][$term_id])) {
            unset($current_settings[$taxonomy][$term_id]);
        }
    }
    
    // Save updated settings
    $update_success = update_option('ckan_permission_settings', $current_settings);
    
    if ($update_success) {
        wp_send_json_success(array('message' => 'Settings saved successfully'));
    } else {
        wp_send_json_error(array('message' => 'Failed to save settings'));
    }
}

/**
 * Render the settings page HTML content.
 * Handles saving the settings as well.
 */
function ckan_permission_settings_page() {
    // --- Security Check: User Capability ---
    if (!current_user_can('manage_options')) {
        wp_die(__('You do not have sufficient permissions to access this page.'));
        return;
    }

    // Get current tab from URL if available
    $current_tab = isset($_GET['tab']) ? sanitize_key($_GET['tab']) : '';

    // --- Process Form Submission (Save Settings) ---
    $settings_updated_notice = ''; // To display feedback message
    if (isset($_POST['ckan_permission_submit'])) { // Check if our submit button was clicked
        // Verify nonce for security
        if (isset($_POST['ckan_permission_nonce']) && wp_verify_nonce($_POST['ckan_permission_nonce'], 'ckan_permission_save_action')) {
            // Sanitize and save the data
            $sanitized_settings = array();
            if (isset($_POST['ckan_permission']) && is_array($_POST['ckan_permission'])) {
                foreach ($_POST['ckan_permission'] as $tax_slug => $terms) {
                    $clean_tax_slug = sanitize_key($tax_slug);
                    if (is_array($terms)) {
                        $sanitized_settings[$clean_tax_slug] = array();
                        foreach ($terms as $term_id => $roles) {
                            $clean_term_id = absint($term_id);
                            if (is_array($roles)) {
                                $sanitized_settings[$clean_tax_slug][$clean_term_id] = array();
                                foreach ($roles as $role_key => $value) {
                                    // Only save '1' for checked roles/guest
                                    if ($value === '1') {
                                        $sanitized_settings[$clean_tax_slug][$clean_term_id][sanitize_key($role_key)] = '1';
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            // Get existing settings and merge
            $existing_settings = get_option('ckan_permission_settings', array());
            
            // For taxonomies not in the current submission, keep their existing settings
            foreach ($existing_settings as $tax_slug => $tax_settings) {
                if (!isset($sanitized_settings[$tax_slug])) {
                    $sanitized_settings[$tax_slug] = $tax_settings;
                }
            }
            
            // Update the option with sanitized data
            $update_success = update_option('ckan_permission_settings', $sanitized_settings);
            
            if ($update_success) {
                $settings_updated_notice = '<div id="message" class="notice notice-success is-dismissible"><p><strong>' . __('Settings saved successfully.') . '</strong></p></div>';
            } else {
                $settings_updated_notice = '<div id="message" class="notice notice-error is-dismissible"><p><strong>' . __('Error: Settings could not be saved. Please try again.') . '</strong></p></div>';
            }
            
            // Redirect back to the same tab if we have one
            if (!empty($current_tab)) {
                // Use JavaScript to redirect and avoid "headers already sent" issues
                echo '<script>window.location.href = "' . esc_url(admin_url('edit.php?post_type=ckan&page=ckan-access-settings&tab=' . $current_tab)) . '&updated=true";</script>';
                return;
            }
        } else {
            // Nonce verification failed
            $settings_updated_notice = '<div id="message" class="notice notice-error is-dismissible"><p><strong>' . __('Error: Security check failed. Settings not saved.') . '</strong></p></div>';
        }
    }
    
    // Show success message from redirect
    if (isset($_GET['updated']) && $_GET['updated'] === 'true') {
        $settings_updated_notice = '<div id="message" class="notice notice-success is-dismissible"><p><strong>' . __('Settings saved successfully.') . '</strong></p></div>';
    }
    // --- End Save Settings ---

    // Get current settings for display
    $settings = get_option('ckan_permission_settings', array());

    // Taxonomies to manage permissions for
    $taxonomies = array(
        'ctag' => 'CKAN TAG',
        'cgroup' => 'CKAN กลุ่ม',
        'caccess' => 'CKAN การเข้าถึง',
        'cdata' => 'CKAN ชุดข้อมูล',
        'cformat' => 'CKAN รูปแบบ',
        'clicense' => 'CKAN สัญญาอนุญาต',
        'cgov' => 'CKAN หมวดหมู่ตามธรรมาภิบาลข้อมูล',
        'corg' => 'CKAN องค์กร'
        // Add or remove taxonomies as needed
    );

    // Get all editable roles + add our special guest 'role'
    $editable_roles = get_editable_roles();
    $roles_display = array();
    // Add Guest first for consistent order
    $roles_display['guest'] = 'ผู้ไม่ได้ล็อกอิน (Guest)';
    // Add WP roles
    foreach ($editable_roles as $role_key => $role_data) {
        $roles_display[$role_key] = $role_data['name'];
    }

    // --- Role Grouping for UI ---
    $role_groups = array(
        'guest' => array(
            'title' => 'บุคคลทั่วไป',
            'roles' => array('guest')
        ),
        'admin' => array(
            'title' => 'ผู้ดูแลระบบ',
            'roles' => array('administrator')
        ),
        'editor' => array(
            'title' => 'ผู้แก้ไข/จัดการเนื้อหา',
            'roles' => array('editor', 'author', 'contributor')
        ),
        'member' => array(
            'title' => 'สมาชิก/ผู้ใช้งานทั่วไป',
            'roles' => array('subscriber')
        ),
        'other' => array(
            'title' => 'บทบาทอื่นๆ',
            'roles' => array()
        )
    );

    // Assign roles to groups dynamically
    $assigned_roles = array(); // Keep track to avoid duplicates
    foreach ($role_groups as $group_key => &$group_data) { // Use reference to modify array
         $current_group_roles = array();
         foreach($group_data['roles'] as $role_key) {
             if (isset($roles_display[$role_key])) { // Check if role exists
                 $current_group_roles[] = $role_key;
                 $assigned_roles[$role_key] = true; // Mark as assigned
             }
         }
         $group_data['roles'] = $current_group_roles; // Update group with only existing roles
    }
    unset($group_data); // Unset reference

    // Assign remaining roles to 'other' group
    foreach ($roles_display as $role_key => $role_name) {
        if (!isset($assigned_roles[$role_key])) {
            $role_groups['other']['roles'][] = $role_key;
        }
    }

    // Remove 'other' group if it ended up empty
    if (empty($role_groups['other']['roles'])) {
        unset($role_groups['other']);
    }
    // --- End Role Grouping ---

    ?>
    <div class="wrap ckan-permission-settings-wrap">
        <h1><?php echo esc_html(get_admin_page_title()); ?></h1>

        <?php echo $settings_updated_notice; // Display success/error message ?>
        
        <!-- Status indicator for AJAX operations -->
        <div id="ckan-permission-status" style="display: none; margin: 10px 0; padding: 10px 15px; background-color: #f8f9fa; border-left: 4px solid #0073aa;">
            <p id="ckan-permission-status-message"></p>
        </div>

        <div class="ckan-permission-description" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-left: 4px solid #0073aa; color: #555;">
            <p>กำหนดสิทธิ์การเข้าถึงสำหรับแต่ละบทบาท (Role) รวมถึง <strong>ผู้ที่ไม่ได้ล็อกอิน (Guest)</strong> ในแต่ละ Taxonomy ของ CKAN</p>
            <p>เลือกช่องทำเครื่องหมายสำหรับบทบาท (หรือ Guest) ที่ต้องการอนุญาตให้เข้าถึงเนื้อหาที่เชื่อมโยงกับ Term นั้นๆ</p>
            <p>หากไม่มีการเลือกช่องใดเลยสำหรับ Term หนึ่งๆ หมายความว่า Term นั้นจะถูกจำกัดการเข้าถึงทั้งหมด (ยกเว้นผู้ดูแลระบบ)</p>
        </div>

        <form method="post" action="<?php echo esc_url(admin_url('edit.php?post_type=ckan&page=ckan-access-settings' . (isset($_GET['tab']) ? '&tab=' . sanitize_key($_GET['tab']) : ''))); ?>" id="ckan-permission-form">
            <?php wp_nonce_field('ckan_permission_save_action', 'ckan_permission_nonce'); ?>
            <input type="hidden" name="current_tab" id="current_tab_input" value="<?php echo esc_attr($current_tab); ?>">

            <div class="ckan-tabs-container" style="margin-top: 20px;">
                <div class="nav-tab-wrapper">
                    <?php 
                    $first_tab = true;
                    $first_taxonomy = '';
                    ?>
                    <?php foreach ($taxonomies as $tax_slug => $tax_name): ?>
                        <?php 
                        if (taxonomy_exists($tax_slug)) { // Only show tabs for existing taxonomies
                            if (empty($first_taxonomy)) {
                                $first_taxonomy = $tax_slug;
                            }
                            
                            // Check if this tab should be active
                            $is_active = false;
                            if (!empty($current_tab) && $current_tab === $tax_slug) {
                                $is_active = true;
                                $first_tab = false; // Prevent first tab from being active
                            } elseif (empty($current_tab) && $first_tab) {
                                $is_active = true;
                            }
                        ?>
                            <a href="<?php echo esc_url(admin_url('edit.php?post_type=ckan&page=ckan-access-settings&tab=' . $tax_slug)); ?>" 
                               class="nav-tab <?php echo $is_active ? 'nav-tab-active' : ''; ?>" 
                               data-tab="<?php echo esc_attr($tax_slug); ?>">
                                <?php echo esc_html($tax_name); ?>
                            </a>
                            <?php $first_tab = false; ?>
                        <?php } ?>
                    <?php endforeach; ?>
                </div>

                <?php 
                // Determine current active tab
                if (empty($current_tab)) {
                    $active_tab = $first_taxonomy;
                } else {
                    $active_tab = $current_tab;
                }
                ?>
                
                <?php foreach ($taxonomies as $tax_slug => $tax_name): ?>
                    <?php if (taxonomy_exists($tax_slug)): // Ensure taxonomy exists before getting terms ?>
                        <div id="tab-<?php echo esc_attr($tax_slug); ?>" 
                             class="tab-content" 
                             style="<?php echo $tax_slug === $active_tab ? 'display: block;' : 'display: none;'; ?> background: white; padding: 20px; border: 1px solid #ccc; border-top: none;">

                            <div class="taxonomy-header" style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 15px; margin-bottom: 20px;">
                                <div class="taxonomy-info">
                                    <h2 style="margin: 0;"><?php echo esc_html($tax_name); ?></h2>
                                </div>
                                <div class="taxonomy-actions" style="display: flex; gap: 10px; align-items: center; flex-wrap: wrap;">
                                    <input type="text" id="search-<?php echo esc_attr($tax_slug); ?>" class="search-terms regular-text" placeholder="ค้นหา term..." style="min-width: 200px;">
                                    <button type="button" class="button select-all-btn" data-taxonomy="<?php echo esc_attr($tax_slug); ?>">เลือกทั้งหมดในหน้านี้</button>
                                    <button type="button" class="button deselect-all-btn" data-taxonomy="<?php echo esc_attr($tax_slug); ?>">ยกเลิกทั้งหมดในหน้านี้</button>
                                    <button type="button" class="button save-taxonomy-btn" data-taxonomy="<?php echo esc_attr($tax_slug); ?>">บันทึกแท็บนี้</button>
                                </div>
                            </div>

                            <div class="terms-container" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px;">
                                <?php
                                $terms = get_terms(array(
                                    'taxonomy' => $tax_slug,
                                    'hide_empty' => false,
                                    'orderby' => 'name',
                                    'order' => 'ASC',
                                ));

                                if (!empty($terms) && !is_wp_error($terms)):
                                    foreach ($terms as $term):
                                        // Calculate term status based on saved settings
                                        $term_settings = isset($settings[$tax_slug][$term->term_id]) ? $settings[$tax_slug][$term->term_id] : array();
                                        $selected_roles_count = count($term_settings);
                                        $total_possible_roles = count($roles_display); // Including 'guest'

                                        $status_class = 'restricted';
                                        $status_text = 'จำกัดทั้งหมด';

                                        if ($selected_roles_count > 0) {
                                            $guest_selected = isset($term_settings['guest']);
                                            $all_wp_roles_selected = true;
                                            foreach ($roles_display as $r_key => $r_name) {
                                                if ($r_key !== 'guest' && !isset($term_settings[$r_key])) {
                                                    $all_wp_roles_selected = false;
                                                    break;
                                                }
                                            }

                                            if ($guest_selected && $all_wp_roles_selected) {
                                                $status_class = 'public';
                                                $status_text = 'เปิดให้ทุกคน';
                                            } elseif ($guest_selected && $selected_roles_count === 1) {
                                                $status_class = 'public_guest';
                                                $status_text = 'เฉพาะ Guest';
                                            } else {
                                                $status_class = 'partial';
                                                $status_text = 'จำกัดบางส่วน';
                                            }
                                        }
                                ?>
                                        <div class="term-card" 
                                             data-term-name="<?php echo esc_attr(strtolower($term->name)); ?>" 
                                             data-term-id="<?php echo esc_attr($term->term_id); ?>"
                                             data-taxonomy="<?php echo esc_attr($tax_slug); ?>"
                                             style="border: 1px solid #e0e0e0; border-radius: 6px; overflow: hidden; box-shadow: 0 2px 5px rgba(0,0,0,0.05);">
                                            <div class="term-header" style="background: #f7f7f7; border-bottom: 1px solid #e0e0e0; padding: 12px 15px; display: flex; justify-content: space-between; align-items: center;">
                                                <h3 style="margin: 0; font-size: 14px; font-weight: 600;">
                                                    <?php echo esc_html($term->name); ?>
                                                    <span class="term-id" style="font-size: 11px; color: #777; font-weight: normal;"> (ID: <?php echo esc_html($term->term_id); ?>)</span>
                                                </h3>
                                                <div class="term-status">
                                                    <span class="status-indicator status-<?php echo esc_attr($status_class); ?>" style="display: inline-block; width: 12px; height: 12px; border-radius: 50%; margin-right: 5px; vertical-align: middle; border: 1px solid rgba(0,0,0,0.1);"></span>
                                                    <span class="status-text" style="font-size: 12px; color: #555;"><?php echo esc_html($status_text); ?></span>
                                                </div>
                                            </div>

                                            <div class="term-body" style="padding: 15px;">
                                                <?php foreach ($role_groups as $group_key => $group):
                                                    if (empty($group['roles'])) continue; // Skip group if no roles ended up in it
                                                ?>
                                                    <div class="role-group" style="margin-bottom: 15px; border-bottom: 1px solid #f1f1f1; padding-bottom: 10px;">
                                                        <div class="role-group-title" style="font-weight: 600; margin-bottom: 8px; font-size: 13px; color: #333;"><?php echo esc_html($group['title']); ?></div>
                                                        <div class="role-options" style="display: flex; flex-wrap: wrap; gap: 10px;">
                                                            <?php foreach ($group['roles'] as $role_key):
                                                                $role_name = $roles_display[$role_key];
                                                                $checked = isset($settings[$tax_slug][$term->term_id][$role_key]) ? 'checked' : '';
                                                            ?>
                                                                <label style="display: flex; align-items: center; background: #f9f9f9; border: 1px solid #e5e5e5; border-radius: 4px; padding: 4px 8px; font-size: 12px; cursor: pointer; transition: background-color 0.2s ease;">
                                                                    <input type="checkbox"
                                                                           name="ckan_permission[<?php echo esc_attr($tax_slug); ?>][<?php echo esc_attr($term->term_id); ?>][<?php echo esc_attr($role_key); ?>]"
                                                                           value="1" <?php echo $checked; ?>
                                                                           class="role-checkbox"
                                                                           data-role-key="<?php echo esc_attr($role_key); ?>"
                                                                           data-term-id="<?php echo esc_attr($term->term_id); ?>"
                                                                           data-taxonomy="<?php echo esc_attr($tax_slug); ?>">
                                                                    <span style="margin-left: 5px;"><?php echo esc_html($role_name); ?></span>
                                                                </label>
                                                            <?php endforeach; // End foreach $group['roles'] ?>
                                                        </div>
                                                    </div>
                                                <?php endforeach; // End foreach $role_groups ?>
                                                <div class="role-group-clear" style="clear:both;"></div>
                                                <div class="term-actions" style="margin-top: 10px; text-align: right;">
                                                    <button type="button" class="button save-term-btn" 
                                                            data-term-id="<?php echo esc_attr($term->term_id); ?>"
                                                            data-taxonomy="<?php echo esc_attr($tax_slug); ?>">
                                                        บันทึก
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                <?php
                                    endforeach; // End foreach $terms
                                else: // No terms found or WP_Error
                                    echo '<div class="notice notice-warning inline" style="grid-column: 1/-1;"><p>ไม่พบ terms สำหรับ Taxonomy: ' . esc_html($tax_name) . '</p></div>';
                                    if (is_wp_error($terms)) {
                                         echo '<div class="notice notice-error inline" style="grid-column: 1/-1;"><p>Error retrieving terms: ' . esc_html($terms->get_error_message()) . '</p></div>';
                                    }
                                endif; // End if !empty($terms)
                                ?>
                            </div>
                        </div>
                    <?php endif; // End if taxonomy_exists ?>
                <?php endforeach; // End foreach $taxonomies ?>
            </div>
            
            <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #ddd;">
                <?php
                // Use a named submit button for easier checking in POST handler
                submit_button('บันทึกการตั้งค่าทั้งหมด', 'primary', 'ckan_permission_submit', true, array('id' => 'ckan_permission_submit'));
                ?>
            </div>
        </form>
    </div>
    
    <style>
    /* Basic styling for status indicators */
    .status-indicator { border: 1px solid rgba(0,0,0,0.1); }
    .status-public { background-color: #4CAF50; /* Green */ }
    .status-public_guest { background-color: #8BC34A; /* Light Green */ }
    .status-partial { background-color: #FF9800; /* Orange */ }
    .status-restricted { background-color: #F44336; /* Red */ }

    .term-card:hover {
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        border-color: #bbb;
    }
    .nav-tab { cursor: pointer; }
    .nav-tab-wrapper { margin-bottom: 0; } /* Align tabs with content border */

    .role-group:last-child { border-bottom: none; margin-bottom: 0; padding-bottom: 0; }
    .role-options label:hover { background-color: #f0f0f0; }
    
    /* Styling for success/error messages */
    .status-success {
        background-color: #f0f8ff;
        border-left: 4px solid #4CAF50;
    }
    .status-error {
        background-color: #fff8f0;
        border-left: 4px solid #F44336;
    }
    
    /* Button states */
    .button.is-saving {
        opacity: 0.7;
        cursor: not-allowed;
    }
    
    /* Loading indicator */
    .ckan-spinner {
        display: inline-block;
        width: 16px;
        height: 16px;
        margin-right: 5px;
        border: 2px solid rgba(0, 0, 0, 0.1);
        border-top: 2px solid #0073aa;
        border-radius: 50%;
        animation: ckan-spin 1s linear infinite;
    }
    
    @keyframes ckan-spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    @media screen and (max-width: 782px) {
        .taxonomy-header { flex-direction: column; align-items: flex-start; }
        .taxonomy-actions { width: 100%; margin-top: 10px; }
        .terms-container { grid-template-columns: 1fr; /* Stack cards on small screens */ }
    }
    </style>

    <?php
} // End ckan_permission_settings_page()


/**
 * Check if current user has access to the current post being viewed (single post page)
 * (Function remains the same as previous version)
 *
 * @return void
 */
function ckan_permission_check_access() {
    // Only check on single ckan posts on the frontend
    if (!is_singular('ckan') || is_admin()) {
        return;
    }

    global $post;
    $post_id = $post->ID;
    $current_user = wp_get_current_user();
    $user_roles = (array) $current_user->roles; // Ensure it's an array

    // Use the updated access check function
    if (!ckan_permission_user_can_access($post_id, $user_roles)) {
        // User does not have access, show a denied message or redirect
        wp_die(
            '<h1>ขออภัย! คุณไม่มีสิทธิ์เข้าถึง</h1><p>คุณไม่มีสิทธิ์ในการเข้าถึงเนื้อหาส่วนนี้ กรุณาติดต่อผู้ดูแลระบบหากคุณเชื่อว่านี่เป็นข้อผิดพลาด</p><p><a href="' . esc_url(home_url('/')) . '">กลับสู่หน้าหลัก</a></p>', // Message in Thai
            'ไม่มีสิทธิ์เข้าถึง (Access Denied)', // Window title
            array(
                'response' => 403, // Forbidden HTTP status
                'back_link' => true // Show a back link
            )
        );
        exit; // Ensure script stops execution
    }
}

/**
 * Filter out posts the user doesn't have access to from archive/search queries
 * (Function remains the same as previous version)
 *
 * @param WP_Post[] $posts An array of post objects.
 * @param WP_Query  $query The WP_Query instance (passed by reference).
 * @return WP_Post[] The filtered array of post objects.
 */
function ckan_permission_filter_posts($posts, $query) {
    // Only filter frontend queries for 'ckan' post type, avoid admin and single post view
    if (is_admin() || $query->is_singular() || !$query->is_main_query()) {
        return $posts;
    }

    // Check if the query is for the 'ckan' post type or includes it
    $post_type = $query->get('post_type');
    $is_ckan_query = false;
    if (empty($post_type) && $query->is_home() && get_option('show_on_front') == 'posts') {
        // Check if 'ckan' is shown on the main blog page
        $main_query_post_types = get_post_types(array('public' => true), 'names');
        if (in_array('ckan', $main_query_post_types)) {
             // This check might be too broad, depends on theme/settings
             // $is_ckan_query = true;
        }
    } elseif (is_array($post_type) && in_array('ckan', $post_type)) {
        $is_ckan_query = true;
    } elseif ($post_type === 'ckan') {
        $is_ckan_query = true;
    } elseif ($query->is_search()) {
         // Check if 'ckan' is excluded from search, otherwise assume it might be included
         $excluded_post_types = $query->get('post_type_not_in', array());
         if (!is_array($excluded_post_types)) $excluded_post_types = array($excluded_post_types);
         if (!in_array('ckan', $excluded_post_types)) {
              // If not explicitly excluded, filter it
              $is_ckan_query = true;
         }
    } elseif ($query->is_archive()) {
         // Check if it's a taxonomy archive that includes 'ckan'
         $tax_query = $query->get('tax_query');
         // This check can get complex, for now, let's assume if post_type includes ckan, we filter
         // A simpler check might be needed based on specific archive types
         if (is_array($post_type) && in_array('ckan', $post_type)) {
             $is_ckan_query = true;
         } elseif ($post_type === 'ckan') {
             $is_ckan_query = true;
         }
    }


    if (!$is_ckan_query) {
        return $posts;
    }

    $current_user = wp_get_current_user();
    $user_roles = (array) $current_user->roles;
    $filtered_posts = array();

    foreach ($posts as $post) {
        // If it's not a CKAN post, keep it. If it is, check access.
        if ($post->post_type !== 'ckan' || ckan_permission_user_can_access($post->ID, $user_roles)) {
            $filtered_posts[] = $post;
        }
    }

    // Adjust pagination if posts were removed - Still problematic
    if (count($posts) !== count($filtered_posts)) {
        // Warning: This doesn't perfectly fix pagination counts.
        // A 'pre_get_posts' solution is more robust for archives.
        $query->post_count = count($filtered_posts);
    }


    return $filtered_posts;
}


/**
 * Check if a user (by roles or guest) can access a specific CKAN post ID.
 * (Function remains the same as previous version)
 *
 * @param int   $post_id    The ID of the CKAN post.
 * @param array $user_roles Array of user roles. Empty array means guest.
 * @return bool True if access is allowed, false otherwise.
 */
function ckan_permission_user_can_access($post_id, $user_roles = array()) {
    // Ensure roles is an array
    $user_roles = (array) $user_roles;
    $is_guest = empty($user_roles); // Check if user is guest (no roles)

    // 1. Administrator always has access (if logged in)
    if (!$is_guest && in_array('administrator', $user_roles)) {
        return true;
    }

    // Get the global permission settings
    $settings = get_option('ckan_permission_settings', array());
    // If no settings are defined globally, restrict access by default.
    // Change 'return false;' to 'return true;' to allow access by default if no rules exist.
    if (empty($settings)) {
        return false; // Safer default: restrict if no rules defined.
    }

    // Taxonomies to check for restrictions
    $taxonomies_to_check = array('ctag', 'cgroup', 'caccess', 'cdata', 'cformat', 'clicense', 'cgov', 'corg'); // Keep consistent

    $post_requires_permission_check = false; // Flag: Does this post have terms in *any* managed taxonomy?

    // 2. Loop through each relevant taxonomy
    foreach ($taxonomies_to_check as $taxonomy) {
         // Only proceed if the taxonomy actually exists
         if (!taxonomy_exists($taxonomy)) {
             continue;
         }

        // Get the terms assigned to the post for this specific taxonomy
        $post_terms = wp_get_post_terms($post_id, $taxonomy, array('fields' => 'ids'));

        // If the post has terms in this taxonomy, we need to check permissions for it.
        if (!is_wp_error($post_terms) && !empty($post_terms)) {
            $post_requires_permission_check = true; // Mark that this post needs checking
            $taxonomy_access_granted = false; // Assume no access for this taxonomy initially

            // Check if *any* of these terms grant access
            foreach ($post_terms as $term_id) {
                // Check if there are *any* permission settings defined for this specific term
                if (isset($settings[$taxonomy][$term_id]) && !empty($settings[$taxonomy][$term_id])) {
                    $term_permissions = $settings[$taxonomy][$term_id];

                    if ($is_guest) {
                        // Check guest access for this term
                        if (isset($term_permissions['guest'])) {
                            $taxonomy_access_granted = true;
                            break; // Found a term granting guest access for this taxonomy, move to next taxonomy
                        }
                    } else {
                        // Check logged-in user roles for this term
                        foreach ($user_roles as $role) {
                            if (isset($term_permissions[$role])) {
                                $taxonomy_access_granted = true;
                                break 2; // Found a term granting access for this role, break term loop and move to next taxonomy
                            }
                        }
                    }
                } else {
                    // Case: The term exists on the post, but NO permissions are set for it in the settings.
                    // Current logic: Restricted unless another term grants access.
                    // If it should be public by default if no settings exist FOR THE TERM:
                    // $taxonomy_access_granted = true; break;
                }
            } // End foreach $post_terms

            // If after checking all terms for this taxonomy, no access was granted, deny access to the post immediately.
            if (!$taxonomy_access_granted) {
                return false;
            }
        } // End if post has terms in this taxonomy
    } // End foreach $taxonomies_to_check

    // 3. Final Decision:
    // If the post didn't have terms in *any* managed taxonomy ($post_requires_permission_check is false), grant access.
    // OR If the loop completed without returning false (meaning access was granted for all required taxonomies).
    return true;
}


/**** แสดงรายการ CKAN TAXO ORG LIST *****/

function ckan_taxo_orglist_enqueue_scripts() {
    // Get the child theme directory URI
    $child_theme_dir = get_stylesheet_directory_uri();
    
    // Enqueue CSS
    wp_enqueue_style(
        'ckan-taxo-orglist-style',
        $child_theme_dir . '/css/ckan-taxo-orglist.css',
        array(),
        '1.0.0'
    );
    
    // Enqueue JavaScript
    wp_enqueue_script(
        'ckan-taxo-orglist-script',
        $child_theme_dir . '/js/ckan-taxo-orglist.js',
        array('jquery'),
        '1.0.0',
        true
    );
}
add_action('wp_enqueue_scripts', 'ckan_taxo_orglist_enqueue_scripts');

/**
 * Shortcode เพื่อแสดงรายการทั้งหมดของ taxonomy 'corg'
 * 
 * @return string HTML output สำหรับแสดงรายการ taxonomy
 */
function ckan_taxo_orglist_shortcode() {
    // เริ่ม output buffering
    ob_start();
    
    // ดึงรายการ term ทั้งหมดจาก taxonomy 'corg' รวมถึงที่มีจำนวนโพสต์เป็น 0
    $terms = get_terms(array(
        'taxonomy' => 'corg',
        'hide_empty' => false,
    ));
    
    // ตรวจสอบว่ามี terms อยู่และไม่มีข้อผิดพลาด
    if (!is_wp_error($terms) && !empty($terms)) {
        ?>
        <div class="ckan-taxo-container">
            <div class="ckan-taxo-header">
                <h3 class="ckan-taxo-title">Organizations</h3>
            </div>
            <div class="ckan-taxo-content">
                <ul class="ckan-taxo-list">
                    <?php foreach ($terms as $term) : 
                        // นับจำนวนโพสต์สำหรับ term นี้
                        $post_count = $term->count;
                        
                        // รับลิงก์ของ term
                        $term_link = get_term_link($term);
                        
                        // ตรวจสอบว่าลิงก์ถูกต้อง
                        if (!is_wp_error($term_link)) :
                    ?>
                        <li class="ckan-taxo-item">
                            <a href="<?php echo esc_url($term_link); ?>" class="ckan-taxo-item-link">
                                <span class="ckan-taxo-item-name"><?php echo esc_html($term->name); ?></span>
                                <span class="ckan-taxo-item-count"><?php echo esc_html($post_count); ?></span>
                            </a>
                        </li>
                    <?php 
                        endif;
                    endforeach; ?>
                </ul>
            </div>
        </div>
        <?php
    } else {
        // แสดงข้อความผิดพลาดถ้าไม่พบ terms
        ?>
        <div class="ckan-taxo-error">
            ไม่พบรายการองค์กร
        </div>
        <?php
    }
    
    // รับค่า output และจบการ buffering
    $output = ob_get_clean();
    
    return $output;
}

// ลงทะเบียน shortcode
add_shortcode('ckan_taxo_orglist', 'ckan_taxo_orglist_shortcode');


/**** ฟังก์ชั่นบริหารจัดการหมวดหมู่ CKAN ******/


/**
 * Register the shortcode [ckan_edit_taxo_term]
 */
add_shortcode('ckan_edit_taxo_term', 'ckan_edit_taxo_term_shortcode_func');

/**
 * Shortcode function to display taxonomies and terms for 'ckan' post type.
 * Allows Administrators to edit and delete terms via AJAX.
 */
function ckan_edit_taxo_term_shortcode_func() {
    // --- Security Check: Only Administrators ---
    if (!current_user_can('administrator')) {
        return '<p style="color: red;">ขออภัย คุณไม่มีสิทธิ์เข้าถึงส่วนนี้</p>';
    }

    // --- Enqueue Scripts and Styles (conditionally) ---
    wp_enqueue_style(
        'ckan-edit-taxo-term-style',
        get_stylesheet_directory_uri() . '/css/ckan-edit-taxo-term.css',
        array(),
        filemtime(get_stylesheet_directory() . '/css/ckan-edit-taxo-term.css') // Cache busting
    );

    wp_enqueue_script(
        'ckan-edit-taxo-term-script',
        get_stylesheet_directory_uri() . '/js/ckan-edit-taxo-term.js',
        array('jquery'), // Dependency: jQuery
        filemtime(get_stylesheet_directory() . '/js/ckan-edit-taxo-term.js'), // Cache busting
        true // Load in footer
    );

    // --- Pass data to JavaScript (AJAX URL and Nonce) ---
    wp_localize_script('ckan-edit-taxo-term-script', 'ckan_taxo_term_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce'    => wp_create_nonce('ckan_taxo_term_nonce'), // Security Nonce
        'edit_prompt_title' => __('แก้ไข Term', 'textdomain'), // Translateable text
        'delete_confirm'    => __('คุณแน่ใจหรือไม่ว่าต้องการลบ Term นี้? การกระทำนี้ไม่สามารถย้อนกลับได้', 'textdomain'),
        'error_generic'     => __('เกิดข้อผิดพลาด โปรดลองอีกครั้ง', 'textdomain'),
        'success_delete'    => __('ลบ Term สำเร็จ', 'textdomain'),
        'success_edit'      => __('แก้ไข Term สำเร็จ', 'textdomain'),
        'enter_new_name'    => __('กรุณาใส่ชื่อ Term ใหม่:', 'textdomain'),
    ));

    // --- Get Taxonomies for 'ckan' Post Type ---
    $post_type = 'ckan';
    $taxonomies = get_object_taxonomies($post_type, 'objects'); // Get taxonomy objects

    // --- Start Output Buffering ---
    ob_start();
    ?>
    <div class="ckan-taxo-term-editor-wrapper">
        <h1>จัดการ Taxonomy และ Term สำหรับ "<?php echo esc_html(get_post_type_object($post_type)->labels->name); ?>"</h1>
        <div id="ckan-ajax-messages"></div> <?php if (empty($taxonomies)) : ?>
            <p>ไม่พบ Taxonomy ที่เชื่อมโยงกับ Post Type "<?php echo esc_html($post_type); ?>"</p>
        <?php else : ?>
            <?php foreach ($taxonomies as $taxonomy) :
                // Skip built-in post format taxonomy if it exists for CPTs (less common but possible)
                if ($taxonomy->name === 'post_format') {
                    continue;
                }

                // Get terms for the current taxonomy
                $terms = get_terms(array(
                    'taxonomy'   => $taxonomy->name,
                    'hide_empty' => false, // Show all terms, even those not used
                    'orderby'    => 'name',
                    'order'      => 'ASC',
                ));
            ?>
                <div class="taxonomy-section">
                    <h2><?php echo esc_html($taxonomy->labels->name); ?> <span class="taxonomy-slug">(<?php echo esc_html($taxonomy->name); ?>)</span></h2>

                    <?php if (is_wp_error($terms)) : ?>
                        <p class="term-error">เกิดข้อผิดพลาดในการดึงข้อมูล Term: <?php echo esc_html($terms->get_error_message()); ?></p>
                    <?php elseif (!empty($terms)) : ?>
                        <table class="wp-list-table widefat fixed striped ckan-term-table">
                            <thead>
                                <tr>
                                    <th scope="col" class="manage-column column-name">ชื่อ Term</th>
                                    <th scope="col" class="manage-column column-slug">Slug</th>
                                    <th scope="col" class="manage-column column-count num">จำนวน Post</th>
                                    <th scope="col" class="manage-column column-actions">การดำเนินการ</th>
                                </tr>
                            </thead>
                            <tbody id="the-list-<?php echo esc_attr($taxonomy->name); ?>">
                                <?php foreach ($terms as $term) : ?>
                                    <tr id="term-<?php echo esc_attr($term->term_id); ?>">
                                        <td class="column-name" data-colname="ชื่อ Term">
                                            <strong><span class="term-name"><?php echo esc_html($term->name); ?></span></strong>
                                        </td>
                                        <td class="column-slug" data-colname="Slug">
                                            <?php echo esc_html($term->slug); ?>
                                        </td>
                                        <td class="column-count num" data-colname="จำนวน Post">
                                            <?php echo esc_html($term->count); ?>
                                        </td>
                                        <td class="column-actions" data-colname="การดำเนินการ">
                                            <button type="button" class="button button-primary ckan-edit-term"
                                                    data-term-id="<?php echo esc_attr($term->term_id); ?>"
                                                    data-taxonomy="<?php echo esc_attr($taxonomy->name); ?>"
                                                    data-term-name="<?php echo esc_attr($term->name); ?>">
                                                <span class="dashicons dashicons-edit"></span> แก้ไข
                                            </button>
                                            <button type="button" class="button button-delete ckan-delete-term"
                                                    data-term-id="<?php echo esc_attr($term->term_id); ?>"
                                                    data-taxonomy="<?php echo esc_attr($taxonomy->name); ?>"
                                                    data-term-name="<?php echo esc_attr($term->name); ?>">
                                                <span class="dashicons dashicons-trash"></span> ลบ
                                            </button>
                                            <a href="<?php echo esc_url(get_edit_term_link($term->term_id, $taxonomy->name, $post_type)); ?>"
                                               class="button button-secondary" target="_blank" title="แก้ไขในหน้า Admin">
                                                <span class="dashicons dashicons-external"></span>
                                            </a>
                                        </td>
                                    </tr>
                                <?php endforeach; ?>
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th scope="col">ชื่อ Term</th>
                                    <th scope="col">Slug</th>
                                    <th scope="col">จำนวน Post</th>
                                    <th scope="col">การดำเนินการ</th>
                                </tr>
                            </tfoot>
                        </table>
                    <?php else : ?>
                        <p>ยังไม่มี Term ใน Taxonomy นี้</p>
                    <?php endif; ?>
                     </div><?php endforeach; ?>
        <?php endif; ?>
    </div><?php
    // --- Return Buffered Output ---
    return ob_get_clean();
}

// --- AJAX Handler for Editing Term ---
add_action('wp_ajax_ckan_edit_term_action', 'ckan_ajax_edit_term_handler');

function ckan_ajax_edit_term_handler() {
    // 1. Check Nonce & Permissions
    check_ajax_referer('ckan_taxo_term_nonce', 'nonce');
    if (!current_user_can('manage_categories')) { // 'manage_categories' is the capability needed to edit terms
        wp_send_json_error(array('message' => 'ไม่มีสิทธิ์ดำเนินการ'), 403);
        wp_die();
    }

    // 2. Get and Sanitize Data
    $term_id   = isset($_POST['term_id']) ? intval($_POST['term_id']) : 0;
    $taxonomy  = isset($_POST['taxonomy']) ? sanitize_key($_POST['taxonomy']) : '';
    $new_name  = isset($_POST['new_name']) ? sanitize_text_field($_POST['new_name']) : '';

    // 3. Validate Data
    if (empty($term_id) || empty($taxonomy) || empty($new_name)) {
        wp_send_json_error(array('message' => 'ข้อมูลไม่ครบถ้วน'), 400);
        wp_die();
    }

    // 4. Check if taxonomy is valid for the post type (optional but good practice)
     $allowed_taxonomies = get_object_taxonomies('ckan');
     if (!in_array($taxonomy, $allowed_taxonomies)) {
         wp_send_json_error(array('message' => 'Taxonomy ไม่ถูกต้องสำหรับ Post Type นี้'), 400);
         wp_die();
     }

    // 5. Perform Update
    $update_result = wp_update_term($term_id, $taxonomy, array(
        'name' => $new_name
        // 'slug' => sanitize_title($new_name) // Optionally update slug too, be careful with uniqueness
    ));

    // 6. Send Response
    if (is_wp_error($update_result)) {
        wp_send_json_error(array('message' => $update_result->get_error_message()), 500);
    } else {
        $updated_term = get_term($term_id, $taxonomy); // Get updated term data
        wp_send_json_success(array(
            'message' => 'แก้ไข Term สำเร็จ',
            'term' => array(
                 'term_id' => $updated_term->term_id,
                 'name'    => $updated_term->name,
                 'slug'    => $updated_term->slug,
                 // Add other term data if needed by JS
            )
        ));
    }

    wp_die(); // Always include this
}

// --- AJAX Handler for Deleting Term ---
add_action('wp_ajax_ckan_delete_term_action', 'ckan_ajax_delete_term_handler');

function ckan_ajax_delete_term_handler() {
    // 1. Check Nonce & Permissions
    check_ajax_referer('ckan_taxo_term_nonce', 'nonce');
    if (!current_user_can('manage_categories')) { // 'manage_categories' is needed to delete terms
        wp_send_json_error(array('message' => 'ไม่มีสิทธิ์ดำเนินการ'), 403);
        wp_die();
    }

    // 2. Get and Sanitize Data
    $term_id  = isset($_POST['term_id']) ? intval($_POST['term_id']) : 0;
    $taxonomy = isset($_POST['taxonomy']) ? sanitize_key($_POST['taxonomy']) : '';

    // 3. Validate Data
    if (empty($term_id) || empty($taxonomy)) {
        wp_send_json_error(array('message' => 'ข้อมูลไม่ครบถ้วน'), 400);
        wp_die();
    }

     // 4. Check if taxonomy is valid (optional)
     $allowed_taxonomies = get_object_taxonomies('ckan');
     if (!in_array($taxonomy, $allowed_taxonomies)) {
         wp_send_json_error(array('message' => 'Taxonomy ไม่ถูกต้องสำหรับ Post Type นี้'), 400);
         wp_die();
     }

    // 5. Perform Deletion
    $delete_result = wp_delete_term($term_id, $taxonomy);

    // 6. Send Response
    if (is_wp_error($delete_result)) {
        wp_send_json_error(array('message' => $delete_result->get_error_message()), 500);
    } elseif ($delete_result === false) {
         wp_send_json_error(array('message' => 'ไม่สามารถลบ Term ได้ (อาจเกิดข้อผิดพลาดที่ไม่ทราบสาเหตุ)'), 500);
    } else {
        wp_send_json_success(array('message' => 'ลบ Term สำเร็จ'));
    }

    wp_die(); // Always include this
}



/****** CKAN ACTIVITY LOG ********/

// --- (Include previous code for [ckan_edit_taxo_term] if it's in the same file) ---

// =============================================
// == CKAN Term Activity Log Functionality ==
// =============================================

// --- 1. Register Custom Post Type for Logs ---
function ckan_register_term_log_cpt() {
    $labels = array(
        'name'               => _x( 'CKAN Term Logs', 'post type general name', 'textdomain' ),
        'singular_name'      => _x( 'CKAN Term Log', 'post type singular name', 'textdomain' ),
        'menu_name'          => _x( 'CKAN Term Logs', 'admin menu', 'textdomain' ),
        'name_admin_bar'     => _x( 'CKAN Term Log', 'add new on admin bar', 'textdomain' ),
        'add_new'            => _x( 'Add New', 'ckan log', 'textdomain' ),
        'add_new_item'       => __( 'Add New Log', 'textdomain' ),
        'new_item'           => __( 'New Log', 'textdomain' ),
        'edit_item'          => __( 'Edit Log', 'textdomain' ),
        'view_item'          => __( 'View Log', 'textdomain' ),
        'all_items'          => __( 'All Logs', 'textdomain' ),
        'search_items'       => __( 'Search Logs', 'textdomain' ),
        'parent_item_colon'  => __( 'Parent Logs:', 'textdomain' ),
        'not_found'          => __( 'No logs found.', 'textdomain' ),
        'not_found_in_trash' => __( 'No logs found in Trash.', 'textdomain' )
    );

    $args = array(
        'labels'             => $labels,
        'description'        => __( 'Logs activity for CKAN terms.', 'textdomain' ),
        'public'             => false, // Not public facing
        'publicly_queryable' => false, // Not queryable on front-end
        'show_ui'            => true,  // Show in admin menu (optional, set to false to hide)
        'show_in_menu'       => true, // Adjust if you want it under a different menu 'edit.php?post_type=ckan'
        'query_var'          => false,
        'rewrite'            => false,
        'capability_type'    => 'post',
        'has_archive'        => false,
        'hierarchical'       => false,
        'menu_position'      => 80, // Adjust position
        'menu_icon'          => 'dashicons-list-view', // Choose an icon
        'supports'           => array( 'title' ), // Only title needed, details are in meta
        'show_in_rest'       => false // Keep out of REST API unless needed
    );

    register_post_type( 'ckan_term_log', $args );
}
add_action( 'init', 'ckan_register_term_log_cpt' );


// --- 2. Logging Function ---
/**
 * Logs an action performed on a term related to the 'ckan' post type.
 *
 * @param int    $term_id      Term ID.
 * @param string $taxonomy     Taxonomy slug.
 * @param string $action_type  'Created', 'Edited', 'Deleted'.
 * @param object|null $term    The term object (especially useful for 'Deleted' action to get name before deletion).
 * @param int|null $tt_id      Term Taxonomy ID (provided by some hooks).
 */
function ckan_log_term_action( $term_id, $taxonomy, $action_type, $term = null, $tt_id = null ) {

    // --- Ensure this taxonomy belongs to 'ckan' post type ---
    $ckan_taxonomies = get_object_taxonomies('ckan');
    if (!in_array($taxonomy, $ckan_taxonomies)) {
        return; // Only log for 'ckan' related taxonomies
    }

    // --- Get required data ---
    $user_id = get_current_user_id(); // User performing the action
    $term_obj = $term ? $term : get_term($term_id, $taxonomy); // Get term object if not passed

    // Handle cases where term might be already deleted or not found
    if (!$term_obj || is_wp_error($term_obj)) {
         // For delete, we rely on the passed $term object, if available
        if ($action_type !== 'Deleted' || !$term) {
            error_log("CKAN Log Error: Could not get term object for term_id {$term_id} in taxonomy {$taxonomy}");
            return;
        }
        // Use the passed $term object for deletion log
         $term_name = $term->name;
         $term_slug = $term->slug;
    } else {
        $term_name = $term_obj->name;
        $term_slug = $term_obj->slug; // Maybe useful for logging
    }

    $taxonomy_obj = get_taxonomy($taxonomy);
    $taxonomy_label = $taxonomy_obj ? $taxonomy_obj->labels->singular_name : $taxonomy; // Get readable name

    $user_info = get_userdata($user_id);
    $user_display_name = $user_info ? $user_info->display_name : __('ระบบ', 'textdomain'); // System if user not found/0

    // --- Create Log Title ---
    $action_text = '';
    switch ($action_type) {
        case 'Created': $action_text = __('สร้าง', 'textdomain'); break;
        case 'Edited':  $action_text = __('แก้ไข', 'textdomain'); break;
        case 'Deleted': $action_text = __('ลบ', 'textdomain');   break;
        default:        $action_text = $action_type; break;
    }
    $log_title = sprintf(
        '%s: "%s" (%s) โดย %s',
        $action_text,
        esc_html($term_name),
        esc_html($taxonomy_label),
        esc_html($user_display_name)
    );

    // --- Prepare Post Data ---
    $log_post_data = array(
        'post_title'   => wp_strip_all_tags($log_title), // Clean title
        'post_content' => '', // No content needed
        'post_status'  => 'publish', // Logs are always published
        'post_author'  => $user_id, // Associate with the user who did it
        'post_type'    => 'ckan_term_log',
    );

    // --- Insert Log Post ---
    $log_post_id = wp_insert_post($log_post_data);

    // --- Save Details as Post Meta ---
    if ($log_post_id && !is_wp_error($log_post_id)) {
        update_post_meta($log_post_id, '_ckan_log_action', $action_type);
        update_post_meta($log_post_id, '_ckan_log_term_id', $term_id);
        update_post_meta($log_post_id, '_ckan_log_term_name', $term_name);
        update_post_meta($log_post_id, '_ckan_log_taxonomy', $taxonomy);
        update_post_meta($log_post_id, '_ckan_log_taxonomy_label', $taxonomy_label);
        update_post_meta($log_post_id, '_ckan_log_user_id', $user_id);
        update_post_meta($log_post_id, '_ckan_log_user_name', $user_display_name);
        update_post_meta($log_post_id, '_ckan_log_timestamp', time()); // Store Unix timestamp
    } else {
         error_log("CKAN Log Error: Failed to insert log post. Error: " . ($log_post_id instanceof WP_Error ? $log_post_id->get_error_message() : 'Unknown'));
    }
}

// --- 3. Hook into WordPress Term Actions ---
// NOTE: Add checks within hooks if needed to ensure they are for 'ckan' taxonomies
// The logging function `ckan_log_term_action` already contains this check.

// Hook for Term Creation
// The hook passes $term_id, $tt_id, $taxonomy
add_action('created_term', function($term_id, $tt_id, $taxonomy) {
    ckan_log_term_action($term_id, $taxonomy, 'Created', null, $tt_id);
}, 10, 3);

// Hook for Term Edit
// The hook passes $term_id, $tt_id, $taxonomy
add_action('edited_term', function($term_id, $tt_id, $taxonomy) {
     // We might want to log *what* changed, but for now just log that an edit happened.
    ckan_log_term_action($term_id, $taxonomy, 'Edited', null, $tt_id);
}, 10, 3);

// Hook for Term Deletion
// The hook passes $term_id, $tt_id, $taxonomy, $deleted_term (WP_Term object)
add_action('delete_term', function($term_id, $tt_id, $taxonomy, $deleted_term) {
    ckan_log_term_action($term_id, $taxonomy, 'Deleted', $deleted_term, $tt_id);
}, 10, 4);


// --- 4. Modify Previous AJAX Handlers to Trigger Logging ---

// Modify: ckan_ajax_edit_term_handler()
// Add this call INSIDE the `if (!is_wp_error($update_result))` block, BEFORE `wp_send_json_success`:
// ckan_log_term_action($term_id, $taxonomy, 'Edited');
// Example structure:
/*
function ckan_ajax_edit_term_handler() {
    // ... (Nonce check, capability check, validation) ...

    $update_result = wp_update_term($term_id, $taxonomy, array('name' => $new_name));

    if (is_wp_error($update_result)) {
        wp_send_json_error(array('message' => $update_result->get_error_message()), 500);
    } else {
        // <<<--- ADD LOGGING HERE ---<<<
        ckan_log_term_action($term_id, $taxonomy, 'Edited');
        // --->>> END LOGGING ---<<<

        $updated_term = get_term($term_id, $taxonomy);
        wp_send_json_success(array(
            'message' => 'แก้ไข Term สำเร็จ',
            'term' => array( 'term_id' => $updated_term->term_id, /* ... * / )
        ));
    }
    wp_die();
}
*/

// Modify: ckan_ajax_delete_term_handler()
// Add this call INSIDE the `else` block for successful deletion, BEFORE `wp_send_json_success`:
// $term_obj_before_delete = get_term($term_id, $taxonomy); // Get term object BEFORE deleting if possible
// ckan_log_term_action($term_id, $taxonomy, 'Deleted', $term_obj_before_delete);
// Example structure:
/*
function ckan_ajax_delete_term_handler() {
    // ... (Nonce check, capability check, validation) ...

    // --->>> GET TERM OBJECT BEFORE DELETION (Best effort) ---<<<
    $term_obj_before_delete = get_term( $term_id, $taxonomy );
    // --->>> END GET TERM OBJECT ---<<<

    $delete_result = wp_delete_term($term_id, $taxonomy);

    if (is_wp_error($delete_result) || $delete_result === false) {
        $error_msg = is_wp_error($delete_result) ? $delete_result->get_error_message() : 'ไม่สามารถลบ Term ได้';
        wp_send_json_error(array('message' => $error_msg), 500);
    } else {
        // <<<--- ADD LOGGING HERE ---<<<
        // Pass the term object fetched earlier if available
        ckan_log_term_action($term_id, $taxonomy, 'Deleted', is_wp_error($term_obj_before_delete) ? null : $term_obj_before_delete);
         // --->>> END LOGGING ---<<<

        wp_send_json_success(array('message' => 'ลบ Term สำเร็จ'));
    }
    wp_die();
}
*/
// **Important:** You need to manually add the `ckan_log_term_action(...)` calls into your *existing* AJAX handlers as shown in the comments above.


// --- 5. Helper Function: Format Timestamp to Thai B.E. ---
/**
 * Formats a Unix timestamp into a Thai date/time string (d/m/YYYY(B.E.) H:i:s).
 * Respects WordPress timezone setting.
 *
 * @param int $unix_timestamp Unix timestamp.
 * @return string Formatted date/time string or empty string on failure.
 */
function ckan_format_thai_datetime($unix_timestamp) {
    if (!is_numeric($unix_timestamp) || $unix_timestamp <= 0) {
        return '';
    }
    try {
        // Create DateTime object from timestamp and set WP timezone
        $datetime = new DateTime('@' . $unix_timestamp);
        $datetime->setTimezone(wp_timezone());

        // Get Gregorian year (CE)
        $year_ce = (int) $datetime->format('Y');

        // Convert to Buddhist Era (BE)
        $year_be = $year_ce + 543;

        // Format the rest of the date/time and combine
        return $datetime->format('d/m/') . $year_be . $datetime->format(' H:i:s');

    } catch (Exception $e) {
        error_log("CKAN Log Error: Failed to format timestamp {$unix_timestamp}. Error: " . $e->getMessage());
        // Fallback to standard WP date format in case of error
        return wp_date(get_option('date_format') . ' ' . get_option('time_format'), $unix_timestamp);
    }
}

// --- 6. Helper Function: Generate Log HTML Table Content ---
/**
 * Generates the HTML table content for the activity log.
 * Used by the shortcode and the AJAX reload handler.
 *
 * @param array $args Arguments for WP_Query (e.g., 'paged').
 * @return string HTML content of the log table body and pagination.
 */
function ckan_get_log_html($args = array()) {
    $defaults = [
        'posts_per_page' => 20, // Number of log entries per page
        'paged'          => 1,  // Current page number
        'term_id'        => 0,  // Optional term ID for filtering
        'taxonomy'       => '', // Optional taxonomy for filtering
    ];
    $query_args = wp_parse_args($args, $defaults);

    $log_query_params = array(
        'post_type'      => 'ckan_term_log',
        'posts_per_page' => $query_args['posts_per_page'],
        'paged'          => $query_args['paged'],
        'orderby'        => 'date',
        'order'          => 'DESC',
        'post_status'    => 'publish',
    );

    // Add meta query if filtering by term_id
    if (!empty($query_args['term_id'])) {
        $log_query_params['meta_query'] = array(
            array(
                'key'   => '_ckan_log_term_id',
                'value' => $query_args['term_id'],
                'compare' => '=',
            )
        );
        
        // Add taxonomy filter if provided
        if (!empty($query_args['taxonomy'])) {
            $log_query_params['meta_query'][] = array(
                'key'   => '_ckan_log_taxonomy',
                'value' => $query_args['taxonomy'],
                'compare' => '=',
            );
        }
    }

    $log_query = new WP_Query($log_query_params);

    ob_start();

    if ($log_query->have_posts()) : ?>
        <table class="wp-list-table widefat fixed striped ckan-log-table">
            <thead>
                <tr>
                    <th scope="col" class="manage-column column-action">การกระทำ</th>
                    <th scope="col" class="manage-column column-term">Term</th>
                    <th scope="col" class="manage-column column-taxonomy">Taxonomy</th>
                    <th scope="col" class="manage-column column-user">ผู้ใช้</th>
                    <th scope="col" class="manage-column column-timestamp">วัน-เวลา (พ.ศ.)</th>
                </tr>
            </thead>
            <tbody id="the-log-list">
                <?php while ($log_query->have_posts()) : $log_query->the_post();
                    $log_id = get_the_ID();
                    $action = get_post_meta($log_id, '_ckan_log_action', true);
                    $term_name = get_post_meta($log_id, '_ckan_log_term_name', true);
                    // $term_id = get_post_meta($log_id, '_ckan_log_term_id', true); // ID not displayed but available
                    $taxonomy = get_post_meta($log_id, '_ckan_log_taxonomy_label', true); // Use Label
                    $user_name = get_post_meta($log_id, '_ckan_log_user_name', true);
                    $timestamp = get_post_meta($log_id, '_ckan_log_timestamp', true);

                    $action_class = 'action-' . strtolower(sanitize_html_class($action)); // e.g., action-edited
                ?>
                <tr id="log-<?php echo $log_id; ?>">
                    <td class="column-action <?php echo $action_class; ?>" data-colname="การกระทำ">
                        <?php echo esc_html($action); ?>
                    </td>
                    <td class="column-term" data-colname="Term">
                        <?php echo esc_html($term_name); ?>
                    </td>
                    <td class="column-taxonomy" data-colname="Taxonomy">
                        <?php echo esc_html($taxonomy); ?>
                    </td>
                    <td class="column-user" data-colname="ผู้ใช้">
                        <?php echo esc_html($user_name); ?>
                    </td>
                     <td class="column-timestamp" data-colname="วัน-เวลา (พ.ศ.)">
                        <?php echo esc_html(ckan_format_thai_datetime($timestamp)); ?>
                    </td>
                </tr>
                <?php endwhile; ?>
            </tbody>
             <tfoot>
                <tr>
                    <th>การกระทำ</th>
                    <th>Term</th>
                    <th>Taxonomy</th>
                    <th>ผู้ใช้</th>
                    <th>วัน-เวลา (พ.ศ.)</th>
                </tr>
            </tfoot>
        </table>

        <?php
        // --- Pagination ---
        $total_pages = $log_query->max_num_pages;
        if ($total_pages > 1) {
            $current_page = max(1, $query_args['paged']);

            echo '<div class="ckan-log-pagination tablenav-pages">';
            echo paginate_links(array(
                'base'      => add_query_arg('paged', '%#%'), // Let JS handle the actual page load
                'format'    => '?paged=%#%',
                'current'   => $current_page,
                'total'     => $total_pages,
                'prev_text' => __('&laquo; ก่อนหน้า'),
                'next_text' => __('ถัดไป &raquo;'),
                'type'      => 'list', // Use <ul> list for easier styling
                 'add_fragment' => '#ckan-log-container', // Add fragment to potentially jump, but JS handles load
            ));
            echo '</div>';
        }

        ?>

    <?php else : ?>
        <p class="no-logs-found">ยังไม่มีบันทึกกิจกรรม</p>
    <?php endif;

    wp_reset_postdata(); // Restore original Post Data

    return ob_get_clean();
}


// --- 7. Register Shortcode [ckan-edit-log] ---
function ckan_display_log_shortcode() {
     // --- Security Check: Only Administrators ---
    if (!current_user_can('administrator')) {
        return '<p style="color: red;">ขออภัย คุณไม่มีสิทธิ์เข้าถึงส่วนนี้</p>';
    }

     // --- Enqueue Scripts and Styles ---
    wp_enqueue_style(
        'ckan-editlog-style',
        get_stylesheet_directory_uri() . '/css/ckan-editlog.css',
        array(),
        filemtime(get_stylesheet_directory() . '/css/ckan-editlog.css')
    );

    wp_enqueue_script(
        'ckan-editlog-script',
        get_stylesheet_directory_uri() . '/js/ckan-editlog.js',
        array('jquery'),
        filemtime(get_stylesheet_directory() . '/js/ckan-editlog.js'),
        true
    );

    // --- Pass data to JavaScript ---
    wp_localize_script('ckan-editlog-script', 'ckan_log_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce'    => wp_create_nonce('ckan_log_reload_nonce'),
        'loading_text' => __('กำลังโหลดข้อมูล...', 'textdomain'),
        'error_text'   => __('เกิดข้อผิดพลาดในการโหลดข้อมูล', 'textdomain')
    ));

    // --- Output ---
    ob_start();
    ?>
    <div id="ckan-log-container" class="ckan-log-wrapper">
        <h2>
            <span class="dashicons dashicons-list-view"></span> บันทึกกิจกรรมการแก้ไข Term (CKAN)
            <button type="button" id="ckan-refresh-log-btn" class="button button-secondary button-small">
                <span class="dashicons dashicons-update"></span> Refresh
            </button>
        </h2>
        <div class="ckan-log-content">
            <?php
            // Initial load of the log content (Page 1)
            echo ckan_get_log_html(['paged' => 1]);
            ?>
        </div>
         <div class="ckan-log-loader" style="display: none;">
             <span class="spinner is-active"></span> <?php echo esc_html(ckan_log_ajax['loading_text'] ?? 'กำลังโหลด...'); ?>
         </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('ckan-edit-log', 'ckan_display_log_shortcode');


// --- 8. AJAX Handler for Reloading Log Content ---
add_action('wp_ajax_ckan_reload_log_action', 'ckan_ajax_reload_log_handler');

function ckan_ajax_reload_log_handler() {
    // Check nonce and capability
    check_ajax_referer('ckan_log_reload_nonce', 'nonce');
    if (!current_user_can('administrator')) {
        wp_send_json_error(array('message' => 'ไม่มีสิทธิ์ดำเนินการ'), 403);
        wp_die();
    }

    // Get paged parameter if sent
    $paged = isset($_POST['paged']) ? intval($_POST['paged']) : 1;
    
    // Get term_id and taxonomy for filtering if provided
    $term_id = isset($_POST['term_id']) ? intval($_POST['term_id']) : 0;
    $taxonomy = isset($_POST['taxonomy']) ? sanitize_text_field($_POST['taxonomy']) : '';

    // Generate HTML content for the requested page
    $log_html = ckan_get_log_html([
        'paged' => $paged,
        'term_id' => $term_id,
        'taxonomy' => $taxonomy
    ]);

    // Send HTML back to JS
    wp_send_json_success(['html' => $log_html]);

    wp_die();
}

// --- 9. NEW: Activity Icon for Term Display ---
/**
 * Generate a history icon that can be added to taxonomy terms in admin.
 * This will open a popup to show the activity log for a specific term.
 *
 * @param int    $term_id   Term ID to display history for.
 * @param string $taxonomy  Taxonomy slug.
 * @return string HTML for the activity icon.
 */
function ckan_activity_icon($term_id, $taxonomy) {
    // Only show for administrators
    if (!current_user_can('administrator')) {
        return '';
    }
    
    // Check if there are any log entries for this term
    $args = array(
        'post_type' => 'ckan_term_log',
        'posts_per_page' => 1,
        'meta_query' => array(
            array(
                'key' => '_ckan_log_term_id',
                'value' => $term_id,
                'compare' => '='
            )
        )
    );
    
    $log_query = new WP_Query($args);
    $has_logs = $log_query->have_posts();
    
    // Get term info for tooltip
    $term = get_term($term_id, $taxonomy);
    $term_name = $term ? $term->name : __('Term', 'textdomain');
    
    // Generate HTML
    $icon_html = '<a href="#" class="ckan-activity-icon" ';
    $icon_html .= 'data-term-id="' . esc_attr($term_id) . '" ';
    $icon_html .= 'data-taxonomy="' . esc_attr($taxonomy) . '" ';
    $icon_html .= 'title="' . esc_attr(sprintf(__('ดูประวัติของ %s', 'textdomain'), $term_name)) . '">';
    $icon_html .= '<span class="dashicons dashicons-backup"></span>';
    
    // Add badge if logs exist
    if ($has_logs) {
        $icon_html .= '<span class="activity-badge"></span>';
    }
    
    $icon_html .= '</a>';
    
    return $icon_html;
}

// --- 10. NEW: Hook to add the activity icon to taxonomy term display ---
/**
 * Add the activity icon to the actions column in taxonomy term list tables.
 *
 * @param array  $actions Array of action links.
 * @param object $term    Term object.
 * @return array Modified actions array.
 */
function ckan_add_term_activity_icon($actions, $term) {
    // Only add to CKAN taxonomies
    $ckan_taxonomies = get_object_taxonomies('ckan');
    if (!in_array($term->taxonomy, $ckan_taxonomies)) {
        return $actions;
    }
    
    // Add our activity icon
    $activity_icon = ckan_activity_icon($term->term_id, $term->taxonomy);
    if (!empty($activity_icon)) {
        // Add as a new action with key 'activity'
        $actions['activity'] = $activity_icon;
    }
    
    return $actions;
}
add_filter('tag_row_actions', 'ckan_add_term_activity_icon', 10, 2);

// --- 11. NEW: Enqueue scripts and styles for the activity icon popup ---
function ckan_enqueue_activity_popup_assets() {
    // Only enqueue on taxonomy screens for CKAN taxonomies
    $screen = get_current_screen();
    if (!$screen || $screen->base !== 'edit-tags') {
        return;
    }
    
    // Check if current taxonomy belongs to CKAN
    $ckan_taxonomies = get_object_taxonomies('ckan');
    if (!in_array($screen->taxonomy, $ckan_taxonomies)) {
        return;
    }
    
    // Enqueue CSS
    wp_enqueue_style(
        'ckan-editlog-style',
        get_stylesheet_directory_uri() . '/css/ckan-editlog.css',
        array(),
        filemtime(get_stylesheet_directory() . '/css/ckan-editlog.css')
    );
    
    // Enqueue JS
    wp_enqueue_script(
        'ckan-activity-popup',
        get_stylesheet_directory_uri() . '/js/ckan-activity-popup.js',
        array('jquery', 'jquery-ui-dialog'),
        filemtime(get_stylesheet_directory() . '/js/ckan-activity-popup.js'),
        true
    );
    
    // Localize script
    wp_localize_script('ckan-activity-popup', 'ckan_activity', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('ckan_activity_nonce'),
        'loading_text' => __('กำลังโหลดประวัติกิจกรรม...', 'textdomain'),
        'title_text' => __('ประวัติกิจกรรม Term', 'textdomain'),
        'close_text' => __('ปิด', 'textdomain'),
        'error_text' => __('เกิดข้อผิดพลาดในการโหลดข้อมูล', 'textdomain')
    ));
    
    // Add dialog container to footer
    add_action('admin_footer', 'ckan_add_activity_dialog_container');
}
add_action('admin_enqueue_scripts', 'ckan_enqueue_activity_popup_assets');

// --- 12. NEW: Add dialog container for activity popup ---
function ckan_add_activity_dialog_container() {
    ?>
    <div id="ckan-activity-dialog" style="display:none;" title="<?php echo esc_attr__('ประวัติกิจกรรม Term', 'textdomain'); ?>">
        <div class="ckan-activity-content"></div>
        <div class="ckan-activity-loader" style="display:none;">
            <span class="spinner is-active"></span> <?php echo esc_html__('กำลังโหลดข้อมูล...', 'textdomain'); ?>
        </div>
    </div>
    <?php
}

// --- 13. NEW: AJAX handler for loading term activity ---
add_action('wp_ajax_ckan_get_term_activity', 'ckan_ajax_get_term_activity');

function ckan_ajax_get_term_activity() {
    // Check nonce and capability
    check_ajax_referer('ckan_activity_nonce', 'nonce');
    if (!current_user_can('administrator')) {
        wp_send_json_error(array('message' => 'ไม่มีสิทธิ์ดำเนินการ'), 403);
        wp_die();
    }
    
    // Get term parameters
    $term_id = isset($_POST['term_id']) ? intval($_POST['term_id']) : 0;
    $taxonomy = isset($_POST['taxonomy']) ? sanitize_text_field($_POST['taxonomy']) : '';
    $paged = isset($_POST['paged']) ? intval($_POST['paged']) : 1;
    
    if (empty($term_id) || empty($taxonomy)) {
        wp_send_json_error(array('message' => 'ข้อมูลไม่ครบถ้วน'), 400);
        wp_die();
    }
    
    // Get term info
    $term = get_term($term_id, $taxonomy);
    if (is_wp_error($term) || !$term) {
        wp_send_json_error(array('message' => 'ไม่พบข้อมูล Term'), 404);
        wp_die();
    }
    
    // Get activity log
    $log_html = ckan_get_log_html([
        'paged' => $paged,
        'term_id' => $term_id,
        'taxonomy' => $taxonomy,
        'posts_per_page' => 10 // Reduce items per page for popup
    ]);
    
    // Add term info header
    $term_header = '<div class="term-activity-header">';
    $term_header .= '<h3>' . sprintf(__('ประวัติกิจกรรมของ: %s', 'textdomain'), esc_html($term->name)) . '</h3>';
    $term_header .= '</div>';
    
    // Send HTML back to JS
    wp_send_json_success([
        'html' => $term_header . $log_html,
        'term_name' => $term->name
    ]);
    
    wp_die();
}


/**** CKAN HISTORY ******/

/**
 * CKAN Usage Report System
 * 
 * This file contains the shortcode and functions for displaying
 * system usage reports with beautiful charts and data tables.
 */

// ============================================
// ========== Shortcode Registration ==========
// ============================================

/**
 * Register the shortcode [ckan-usage-report]
 */
function ckan_usage_report_shortcode($atts) {
    // Parse attributes
    $atts = shortcode_atts(array(
        'type' => 'all', // all, users, terms, datasets
        'period' => 'month', // day, week, month, year
        'limit' => 10, // Number of records to show in tables
    ), $atts, 'ckan-usage-report');
    
    // Security check
    if (!current_user_can('edit_posts')) {
        return '<div class="ckan-report-error">คุณไม่มีสิทธิ์เข้าถึงรายงานนี้</div>';
    }
    
    // Enqueue required scripts and styles
    wp_enqueue_style(
        'ckan-history-style',
        get_stylesheet_directory_uri() . '/css/ckan-history.css',
        array(),
        filemtime(get_stylesheet_directory() . '/css/ckan-history.css')
    );
    
    wp_enqueue_script(
        'chart-js',
        'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js',
        array(),
        '3.9.1',
        true
    );
    
    wp_enqueue_script(
        'ckan-history-script',
        get_stylesheet_directory_uri() . '/js/ckan-history.js',
        array('jquery', 'chart-js'),
        filemtime(get_stylesheet_directory() . '/js/ckan-history.js'),
        true
    );
    
    // Pass data to JavaScript
    wp_localize_script('ckan-history-script', 'ckan_report', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('ckan_report_nonce'),
        'period' => $atts['period'],
        'type' => $atts['type'],
        'limit' => $atts['limit'],
        'loading_text' => __('กำลังโหลดข้อมูล...', 'textdomain'),
        'error_text' => __('เกิดข้อผิดพลาดในการโหลดข้อมูล', 'textdomain'),
        'no_data_text' => __('ไม่พบข้อมูลในช่วงเวลาที่เลือก', 'textdomain'),
        'months' => array(
            __('มกราคม', 'textdomain'),
            __('กุมภาพันธ์', 'textdomain'),
            __('มีนาคม', 'textdomain'),
            __('เมษายน', 'textdomain'),
            __('พฤษภาคม', 'textdomain'),
            __('มิถุนายน', 'textdomain'),
            __('กรกฎาคม', 'textdomain'),
            __('สิงหาคม', 'textdomain'),
            __('กันยายน', 'textdomain'),
            __('ตุลาคม', 'textdomain'),
            __('พฤศจิกายน', 'textdomain'),
            __('ธันวาคม', 'textdomain'),
        )
    ));
    
    // Start building the output
    ob_start();
    ?>
    <div class="ckan-report-container" data-type="<?php echo esc_attr($atts['type']); ?>" data-period="<?php echo esc_attr($atts['period']); ?>">
        <div class="ckan-report-header">
            <h2><span class="dashicons dashicons-chart-line"></span> รายงานการใช้งานระบบ CKAN</h2>
            
            <div class="ckan-report-filters">
                <div class="ckan-filter-group">
                    <label for="ckan-report-type">ประเภทรายงาน:</label>
                    <select id="ckan-report-type" class="ckan-filter-select">
                        <option value="all" <?php selected($atts['type'], 'all'); ?>>ทั้งหมด</option>
                        <option value="terms" <?php selected($atts['type'], 'terms'); ?>>การจัดการ Terms</option>
                        <option value="users" <?php selected($atts['type'], 'users'); ?>>การใช้งานผู้ใช้</option>
                        <option value="datasets" <?php selected($atts['type'], 'datasets'); ?>>ชุดข้อมูล</option>
                    </select>
                </div>
                
                <div class="ckan-filter-group">
                    <label for="ckan-report-period">ช่วงเวลา:</label>
                    <select id="ckan-report-period" class="ckan-filter-select">
                        <option value="day" <?php selected($atts['period'], 'day'); ?>>รายวัน</option>
                        <option value="week" <?php selected($atts['period'], 'week'); ?>>รายสัปดาห์</option>
                        <option value="month" <?php selected($atts['period'], 'month'); ?>>รายเดือน</option>
                        <option value="year" <?php selected($atts['period'], 'year'); ?>>รายปี</option>
                    </select>
                </div>
                
                <button id="ckan-apply-filters" class="ckan-btn ckan-btn-primary">
                    <span class="dashicons dashicons-filter"></span> กรองข้อมูล
                </button>
                
                <button id="ckan-refresh-report" class="ckan-btn ckan-btn-secondary">
                    <span class="dashicons dashicons-update"></span> รีเฟรช
                </button>
            </div>
        </div>
        
        <div class="ckan-report-content">
            <!-- Dashboard Cards -->
            <div class="ckan-dashboard-cards">
                <div class="ckan-card ckan-card-primary">
                    <div class="ckan-card-icon">
                        <span class="dashicons dashicons-tag"></span>
                    </div>
                    <div class="ckan-card-content">
                        <h3>Terms ทั้งหมด</h3>
                        <div class="ckan-card-value" id="total-terms-value">
                            <div class="ckan-loader-inline"></div>
                        </div>
                    </div>
                </div>
                
                <div class="ckan-card ckan-card-secondary">
                    <div class="ckan-card-icon">
                        <span class="dashicons dashicons-admin-users"></span>
                    </div>
                    <div class="ckan-card-content">
                        <h3>ผู้ใช้งานทั้งหมด</h3>
                        <div class="ckan-card-value" id="total-users-value">
                            <div class="ckan-loader-inline"></div>
                        </div>
                    </div>
                </div>
                
                <div class="ckan-card ckan-card-tertiary">
                    <div class="ckan-card-icon">
                        <span class="dashicons dashicons-database"></span>
                    </div>
                    <div class="ckan-card-content">
                        <h3>ชุดข้อมูลทั้งหมด</h3>
                        <div class="ckan-card-value" id="total-datasets-value">
                            <div class="ckan-loader-inline"></div>
                        </div>
                    </div>
                </div>
                
                <div class="ckan-card ckan-card-quaternary">
                    <div class="ckan-card-icon">
                        <span class="dashicons dashicons-backup"></span>
                    </div>
                    <div class="ckan-card-content">
                        <h3>การดำเนินการทั้งหมด</h3>
                        <div class="ckan-card-value" id="total-actions-value">
                            <div class="ckan-loader-inline"></div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Main Charts -->
            <div class="ckan-chart-sections">
                <div class="ckan-chart-section">
                    <div class="ckan-chart-header">
                        <h3>แนวโน้มการใช้งาน</h3>
                        <div class="ckan-chart-legend" id="activity-trend-legend"></div>
                    </div>
                    <div class="ckan-chart-container">
                        <canvas id="ckan-activity-trend"></canvas>
                        <div class="ckan-chart-loader">
                            <div class="ckan-loader"></div>
                            <p>กำลังโหลดข้อมูล...</p>
                        </div>
                        <div class="ckan-chart-no-data" style="display: none;">
                            <p>ไม่พบข้อมูลในช่วงเวลาที่เลือก</p>
                        </div>
                    </div>
                </div>
                
                <div class="ckan-chart-row">
                    <div class="ckan-chart-section ckan-chart-half">
                        <div class="ckan-chart-header">
                            <h3>ประเภทการดำเนินการ</h3>
                        </div>
                        <div class="ckan-chart-container">
                            <canvas id="ckan-action-types"></canvas>
                            <div class="ckan-chart-loader">
                                <div class="ckan-loader"></div>
                                <p>กำลังโหลดข้อมูล...</p>
                            </div>
                            <div class="ckan-chart-no-data" style="display: none;">
                                <p>ไม่พบข้อมูลในช่วงเวลาที่เลือก</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="ckan-chart-section ckan-chart-half">
                        <div class="ckan-chart-header">
                            <h3>ผู้ใช้งานที่ทำกิจกรรมมากที่สุด</h3>
                        </div>
                        <div class="ckan-chart-container">
                            <canvas id="ckan-top-users"></canvas>
                            <div class="ckan-chart-loader">
                                <div class="ckan-loader"></div>
                                <p>กำลังโหลดข้อมูล...</p>
                            </div>
                            <div class="ckan-chart-no-data" style="display: none;">
                                <p>ไม่พบข้อมูลในช่วงเวลาที่เลือก</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Data Tables Section -->
            <div class="ckan-data-tables">
                <div class="ckan-data-section">
                    <div class="ckan-data-header">
                        <h3>กิจกรรมล่าสุด</h3>
                        <div class="ckan-data-actions">
                            <button class="ckan-btn ckan-btn-sm ckan-btn-tertiary" id="ckan-export-activities">
                                <span class="dashicons dashicons-download"></span> ส่งออกข้อมูล
                            </button>
                        </div>
                    </div>
                    <div class="ckan-table-container">
                        <table class="ckan-data-table" id="ckan-recent-activities">
                            <thead>
                                <tr>
                                    <th>วันที่-เวลา</th>
                                    <th>ประเภท</th>
                                    <th>รายละเอียด</th>
                                    <th>ผู้ดำเนินการ</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="ckan-loading-row">
                                    <td colspan="4">
                                        <div class="ckan-loader-inline"></div>
                                        <p>กำลังโหลดข้อมูล...</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="ckan-report-footer">
            <p>รายงานถูกสร้างเมื่อ <span id="ckan-report-timestamp"><?php echo esc_html(ckan_format_thai_datetime(time())); ?></span></p>
            <div class="ckan-report-actions">
                <button id="ckan-print-report" class="ckan-btn ckan-btn-tertiary">
                    <span class="dashicons dashicons-printer"></span> พิมพ์รายงาน
                </button>
            </div>
        </div>
        
        <!-- Main Loader -->
        <div class="ckan-report-loader" style="display: none;">
            <div class="ckan-loader"></div>
            <p>กำลังโหลดข้อมูลรายงาน...</p>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('ckan-usage-report', 'ckan_usage_report_shortcode');

// ======================================================
// ========== AJAX Handlers for Report Data =============
// ======================================================

/**
 * Handler for AJAX request to get dashboard summary
 */
add_action('wp_ajax_ckan_get_dashboard_summary', 'ckan_ajax_get_dashboard_summary');
function ckan_ajax_get_dashboard_summary() {
    // Check nonce
    check_ajax_referer('ckan_report_nonce', 'nonce');
    
    // Check capability
    if (!current_user_can('edit_posts')) {
        wp_send_json_error(['message' => 'ไม่มีสิทธิ์เข้าถึงข้อมูล'], 403);
    }
    
    global $wpdb;
    
    // Get count of all terms related to CKAN
    $ckan_taxonomies = get_object_taxonomies('ckan');
    $term_count = 0;
    
    foreach ($ckan_taxonomies as $taxonomy) {
        $terms = get_terms([
            'taxonomy' => $taxonomy,
            'hide_empty' => false,
        ]);
        $term_count += is_wp_error($terms) ? 0 : count($terms);
    }
    
    // Get user count (only users who have accessed CKAN)
    $user_query = new WP_User_Query([
        'meta_key' => '_ckan_last_access',
        'count_total' => true,
    ]);
    $user_count = $user_query->get_total();
    
    // If meta_key based query returns 0, get all users with edit capability
    if ($user_count == 0) {
        $user_query = new WP_User_Query([
            'role__in' => ['administrator', 'editor', 'author'],
            'count_total' => true,
        ]);
        $user_count = $user_query->get_total();
    }
    
    // Get dataset count (posts of type 'ckan')
    $dataset_count = wp_count_posts('ckan');
    $dataset_total = $dataset_count->publish + $dataset_count->draft + $dataset_count->private;
    
    // Get total actions (from ckan_term_log post type)
    $action_count = wp_count_posts('ckan_term_log');
    $action_total = $action_count->publish;
    
    // Send the data
    wp_send_json_success([
        'terms' => $term_count,
        'users' => $user_count,
        'datasets' => $dataset_total,
        'actions' => $action_total,
    ]);
    
    wp_die();
}

/**
 * Handler for AJAX request to get activity trend
 */
add_action('wp_ajax_ckan_get_activity_trend', 'ckan_ajax_get_activity_trend');
function ckan_ajax_get_activity_trend() {
    // Check nonce
    check_ajax_referer('ckan_report_nonce', 'nonce');
    
    // Check capability
    if (!current_user_can('edit_posts')) {
        wp_send_json_error(['message' => 'ไม่มีสิทธิ์เข้าถึงข้อมูล'], 403);
    }
    
    // Get parameters
    $period = isset($_POST['period']) ? sanitize_text_field($_POST['period']) : 'month';
    $type = isset($_POST['type']) ? sanitize_text_field($_POST['type']) : 'all';
    
    global $wpdb;
    
    // Prepare time range based on period
    $current_time = current_time('timestamp');
    $start_date = '';
    $group_by = '';
    $date_format = '';
    
    switch ($period) {
        case 'day':
            $start_date = strtotime('-30 days', $current_time);
            $group_by = 'DATE(post_date)';
            $date_format = 'Y-m-d';
            $label_format = 'd M';
            break;
            
        case 'week':
            $start_date = strtotime('-12 weeks', $current_time);
            $group_by = 'YEARWEEK(post_date, 1)';
            $date_format = 'Y-W';
            $label_format = '\สัปดาห์ W, M Y';
            break;
            
        case 'year':
            $start_date = strtotime('-5 years', $current_time);
            $group_by = 'YEAR(post_date)';
            $date_format = 'Y';
            $label_format = 'Y';
            break;
            
        case 'month':
        default:
            $start_date = strtotime('-12 months', $current_time);
            $group_by = 'YEAR(post_date), MONTH(post_date)';
            $date_format = 'Y-m';
            $label_format = 'M Y';
            break;
    }
    
    // Format dates for SQL
    $start_date_sql = date('Y-m-d', $start_date);
    
    // Build query based on type
    $query_conditions = "post_type = 'ckan_term_log' AND post_status = 'publish' AND post_date >= %s";
    $query_params = [$start_date_sql];
    
    if ($type !== 'all') {
        if ($type === 'terms') {
            // Only term-related activities (already filtered by post_type)
        } elseif ($type === 'users') {
            // This example assumes user activities might have a specific meta key
            $query_conditions .= " AND EXISTS (SELECT 1 FROM {$wpdb->postmeta} WHERE post_id = {$wpdb->posts}.ID AND meta_key = '_ckan_log_user_id')";
        } elseif ($type === 'datasets') {
            // This example assumes dataset activities might have a specific meta key
            $query_conditions .= " AND EXISTS (SELECT 1 FROM {$wpdb->postmeta} WHERE post_id = {$wpdb->posts}.ID AND meta_key = '_ckan_log_dataset_id')";
        }
    }
    
    // Get created actions
    $created_query = $wpdb->prepare("
        SELECT DATE_FORMAT(post_date, %s) as date_group, COUNT(*) as count
        FROM {$wpdb->posts}
        WHERE {$query_conditions} AND EXISTS (
            SELECT 1 FROM {$wpdb->postmeta} 
            WHERE post_id = {$wpdb->posts}.ID 
            AND meta_key = '_ckan_log_action' 
            AND meta_value = 'Created'
        )
        GROUP BY date_group
        ORDER BY post_date ASC
    ", $date_format, ...$query_params);
    
    $created_results = $wpdb->get_results($created_query);
    
    // Get edited actions
    $edited_query = $wpdb->prepare("
        SELECT DATE_FORMAT(post_date, %s) as date_group, COUNT(*) as count
        FROM {$wpdb->posts}
        WHERE {$query_conditions} AND EXISTS (
            SELECT 1 FROM {$wpdb->postmeta} 
            WHERE post_id = {$wpdb->posts}.ID 
            AND meta_key = '_ckan_log_action' 
            AND meta_value = 'Edited'
        )
        GROUP BY date_group
        ORDER BY post_date ASC
    ", $date_format, ...$query_params);
    
    $edited_results = $wpdb->get_results($edited_query);
    
    // Get deleted actions
    $deleted_query = $wpdb->prepare("
        SELECT DATE_FORMAT(post_date, %s) as date_group, COUNT(*) as count
        FROM {$wpdb->posts}
        WHERE {$query_conditions} AND EXISTS (
            SELECT 1 FROM {$wpdb->postmeta} 
            WHERE post_id = {$wpdb->posts}.ID 
            AND meta_key = '_ckan_log_action' 
            AND meta_value = 'Deleted'
        )
        GROUP BY date_group
        ORDER BY post_date ASC
    ", $date_format, ...$query_params);
    
    $deleted_results = $wpdb->get_results($deleted_query);
    
    // Generate labels based on period
    $labels = [];
    $created_data = [];
    $edited_data = [];
    $deleted_data = [];
    
    // Generate all date labels within range
    $current = $start_date;
    $end_date = $current_time;
    
    switch ($period) {
        case 'day':
            while ($current <= $end_date) {
                $date_key = date($date_format, $current);
                $display_date = date_i18n($label_format, $current);
                $labels[$date_key] = $display_date;
                $created_data[$date_key] = 0;
                $edited_data[$date_key] = 0;
                $deleted_data[$date_key] = 0;
                $current = strtotime('+1 day', $current);
            }
            break;
            
        case 'week':
            while ($current <= $end_date) {
                $date_key = date('Y-W', $current);
                $display_date = str_replace(['W', 'M'], [date('W', $current), date_i18n('M', $current)], $label_format);
                $labels[$date_key] = $display_date;
                $created_data[$date_key] = 0;
                $edited_data[$date_key] = 0;
                $deleted_data[$date_key] = 0;
                $current = strtotime('+1 week', $current);
            }
            break;
            
        case 'year':
            while ($current <= $end_date) {
                $date_key = date($date_format, $current);
                $display_date = date($label_format, $current);
                $labels[$date_key] = $display_date;
                $created_data[$date_key] = 0;
                $edited_data[$date_key] = 0;
                $deleted_data[$date_key] = 0;
                $current = strtotime('+1 year', $current);
            }
            break;
            
        case 'month':
        default:
            while ($current <= $end_date) {
                $date_key = date($date_format, $current);
                $display_date = date_i18n($label_format, $current);
                $labels[$date_key] = $display_date;
                $created_data[$date_key] = 0;
                $edited_data[$date_key] = 0;
                $deleted_data[$date_key] = 0;
                $current = strtotime('+1 month', $current);
            }
            break;
    }
    
    // Fill in actual counts
    foreach ($created_results as $row) {
        if (isset($created_data[$row->date_group])) {
            $created_data[$row->date_group] = intval($row->count);
        }
    }
    
    foreach ($edited_results as $row) {
        if (isset($edited_data[$row->date_group])) {
            $edited_data[$row->date_group] = intval($row->count);
        }
    }
    
    foreach ($deleted_results as $row) {
        if (isset($deleted_data[$row->date_group])) {
            $deleted_data[$row->date_group] = intval($row->count);
        }
    }
    
    // Prepare data for Chart.js
    $chart_labels = array_values($labels);
    $chart_created = array_values($created_data);
    $chart_edited = array_values($edited_data);
    $chart_deleted = array_values($deleted_data);
    
    // Send response
    wp_send_json_success([
        'labels' => $chart_labels,
        'datasets' => [
            [
                'label' => 'สร้าง',
                'data' => $chart_created,
                'borderColor' => '#2196F3', // Blue
                'backgroundColor' => 'rgba(33, 150, 243, 0.1)',
            ],
            [
                'label' => 'แก้ไข',
                'data' => $chart_edited,
                'borderColor' => '#FF9800', // Orange
                'backgroundColor' => 'rgba(255, 152, 0, 0.1)',
            ],
            [
                'label' => 'ลบ',
                'data' => $chart_deleted,
                'borderColor' => '#F44336', // Red
                'backgroundColor' => 'rgba(244, 67, 54, 0.1)',
            ]
        ]
    ]);
    
    wp_die();
}

/**
 * Handler for AJAX request to get action types
 */
add_action('wp_ajax_ckan_get_action_types', 'ckan_ajax_get_action_types');
function ckan_ajax_get_action_types() {
    // Check nonce
    check_ajax_referer('ckan_report_nonce', 'nonce');
    
    // Check capability
    if (!current_user_can('edit_posts')) {
        wp_send_json_error(['message' => 'ไม่มีสิทธิ์เข้าถึงข้อมูล'], 403);
    }
    
    // Get parameters
    $period = isset($_POST['period']) ? sanitize_text_field($_POST['period']) : 'month';
    $type = isset($_POST['type']) ? sanitize_text_field($_POST['type']) : 'all';
    
    global $wpdb;
    
    // Prepare time range based on period
    $current_time = current_time('timestamp');
    $start_date = '';
    
    switch ($period) {
        case 'day':
            $start_date = strtotime('-30 days', $current_time);
            break;
        case 'week':
            $start_date = strtotime('-12 weeks', $current_time);
            break;
        case 'year':
            $start_date = strtotime('-5 years', $current_time);
            break;
        case 'month':
        default:
            $start_date = strtotime('-12 months', $current_time);
            break;
    }
    
    // Format dates for SQL
    $start_date_sql = date('Y-m-d', $start_date);
    
    // Build query to get action counts by type
    $query = $wpdb->prepare("
        SELECT pm.meta_value as action_type, COUNT(pm.meta_id) as count
        FROM {$wpdb->postmeta} pm
        JOIN {$wpdb->posts} p ON p.ID = pm.post_id
        WHERE p.post_type = 'ckan_term_log'
        AND p.post_status = 'publish'
        AND p.post_date >= %s
        AND pm.meta_key = '_ckan_log_action'
        GROUP BY pm.meta_value
        ORDER BY count DESC
    ", $start_date_sql);
    
    $results = $wpdb->get_results($query);
    
    // Prepare data for Chart.js
    $labels = [];
    $data = [];
    $background_colors = [
        'Created' => 'rgba(33, 150, 243, 0.7)', // Blue
        'Edited' => 'rgba(255, 152, 0, 0.7)',   // Orange
        'Deleted' => 'rgba(244, 67, 54, 0.7)',  // Red
    ];
    $colors = [];
    
    foreach ($results as $row) {
        $action = $row->action_type;
        $labels[] = __($action, 'textdomain');
        $data[] = intval($row->count);
        $colors[] = $background_colors[$action] ?? 'rgba(158, 158, 158, 0.7)'; // Default gray
    }
    
    // Send response
    wp_send_json_success([
        'labels' => $labels,
        'datasets' => [
            [
                'data' => $data,
                'backgroundColor' => $colors,
                'borderWidth' => 1,
            ]
        ]
    ]);
    
    wp_die();
}

/**
 * Handler for AJAX request to get top users
 */
add_action('wp_ajax_ckan_get_top_users', 'ckan_ajax_get_top_users');
function ckan_ajax_get_top_users() {
    // Check nonce
    check_ajax_referer('ckan_report_nonce', 'nonce');
    
    // Check capability
    if (!current_user_can('edit_posts')) {
        wp_send_json_error(['message' => 'ไม่มีสิทธิ์เข้าถึงข้อมูล'], 403);
    }
    
    // Get parameters
    $period = isset($_POST['period']) ? sanitize_text_field($_POST['period']) : 'month';
    $type = isset($_POST['type']) ? sanitize_text_field($_POST['type']) : 'all';
    $limit = isset($_POST['limit']) ? intval($_POST['limit']) : 5;
    
    global $wpdb;
    
    // Prepare time range based on period
    $current_time = current_time('timestamp');
    $start_date = '';
    
    switch ($period) {
        case 'day':
            $start_date = strtotime('-30 days', $current_time);
            break;
        case 'week':
            $start_date = strtotime('-12 weeks', $current_time);
            break;
        case 'year':
            $start_date = strtotime('-5 years', $current_time);
            break;
        case 'month':
        default:
            $start_date = strtotime('-12 months', $current_time);
            break;
    }
    
    // Format dates for SQL
    $start_date_sql = date('Y-m-d', $start_date);
    
    // Build query to get top users
    $query = $wpdb->prepare("
        SELECT pm.meta_value as user_name, COUNT(pm.meta_id) as count
        FROM {$wpdb->postmeta} pm
        JOIN {$wpdb->posts} p ON p.ID = pm.post_id
        WHERE p.post_type = 'ckan_term_log'
        AND p.post_status = 'publish'
        AND p.post_date >= %s
        AND pm.meta_key = '_ckan_log_user_name'
        GROUP BY pm.meta_value
        ORDER BY count DESC
        LIMIT %d
    ", $start_date_sql, $limit);
    
    $results = $wpdb->get_results($query);
    
    // Prepare data for Chart.js
    $labels = [];
    $data = [];
    $background_colors = [];
    
    // Generate colors dynamically
    $base_colors = [
        'rgba(33, 150, 243, 0.7)',   // Blue
        'rgba(255, 152, 0, 0.7)',    // Orange
        'rgba(76, 175, 80, 0.7)',    // Green
        'rgba(156, 39, 176, 0.7)',   // Purple
        'rgba(255, 87, 34, 0.7)',    // Deep Orange
        'rgba(0, 188, 212, 0.7)',    // Cyan
        'rgba(233, 30, 99, 0.7)',    // Pink
        'rgba(3, 169, 244, 0.7)',    // Light Blue
        'rgba(255, 193, 7, 0.7)',    // Amber
        'rgba(103, 58, 183, 0.7)',   // Deep Purple
    ];
    
    foreach ($results as $index => $row) {
        $labels[] = $row->user_name;
        $data[] = intval($row->count);
        $background_colors[] = $base_colors[$index % count($base_colors)];
    }
    
    // Send response
    wp_send_json_success([
        'labels' => $labels,
        'datasets' => [
            [
                'data' => $data,
                'backgroundColor' => $background_colors,
                'borderWidth' => 1,
            ]
        ]
    ]);
    
    wp_die();
}

/**
 * Handler for AJAX request to get recent activities
 */
add_action('wp_ajax_ckan_get_recent_activities', 'ckan_ajax_get_recent_activities');
function ckan_ajax_get_recent_activities() {
    // Check nonce
    check_ajax_referer('ckan_report_nonce', 'nonce');
    
    // Check capability
    if (!current_user_can('edit_posts')) {
        wp_send_json_error(['message' => 'ไม่มีสิทธิ์เข้าถึงข้อมูล'], 403);
    }
    
    // Get parameters
    $period = isset($_POST['period']) ? sanitize_text_field($_POST['period']) : 'month';
    $type = isset($_POST['type']) ? sanitize_text_field($_POST['type']) : 'all';
    $limit = isset($_POST['limit']) ? intval($_POST['limit']) : 10;
    
    // Prepare time range based on period
    $current_time = current_time('timestamp');
    $start_date = '';
    
    switch ($period) {
        case 'day':
            $start_date = strtotime('-30 days', $current_time);
            break;
        case 'week':
            $start_date = strtotime('-12 weeks', $current_time);
            break;
        case 'year':
            $start_date = strtotime('-5 years', $current_time);
            break;
        case 'month':
        default:
            $start_date = strtotime('-12 months', $current_time);
            break;
    }
    
    // Query recent activities
    $args = array(
        'post_type' => 'ckan_term_log',
        'post_status' => 'publish',
        'posts_per_page' => $limit,
        'orderby' => 'date',
        'order' => 'DESC',
        'date_query' => array(
            array(
                'after' => date('Y-m-d', $start_date),
            ),
        ),
    );
    
    $query = new WP_Query($args);
    $activities = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            
            // Get meta data
            $action = get_post_meta($post_id, '_ckan_log_action', true);
            $term_name = get_post_meta($post_id, '_ckan_log_term_name', true);
            $taxonomy = get_post_meta($post_id, '_ckan_log_taxonomy_label', true);
            $user_name = get_post_meta($post_id, '_ckan_log_user_name', true);
            $timestamp = get_post_meta($post_id, '_ckan_log_timestamp', true);
            
            // Format timestamp
            $formatted_time = ckan_format_thai_datetime($timestamp);
            
            // Format details
            switch ($action) {
                case 'Created':
                    $action_thai = __('สร้าง', 'textdomain');
                    $detail = sprintf(__('สร้าง %s "%s"', 'textdomain'), $taxonomy, $term_name);
                    $action_class = 'created';
                    break;
                case 'Edited':
                    $action_thai = __('แก้ไข', 'textdomain');
                    $detail = sprintf(__('แก้ไข %s "%s"', 'textdomain'), $taxonomy, $term_name);
                    $action_class = 'edited';
                    break;
                case 'Deleted':
                    $action_thai = __('ลบ', 'textdomain');
                    $detail = sprintf(__('ลบ %s "%s"', 'textdomain'), $taxonomy, $term_name);
                    $action_class = 'deleted';
                    break;
                default:
                    $action_thai = $action;
                    $detail = sprintf(__('%s %s "%s"', 'textdomain'), $action, $taxonomy, $term_name);
                    $action_class = 'other';
                    break;
            }
            
            $activities[] = array(
                'time' => $formatted_time,
                'timestamp' => $timestamp,
                'action' => $action_thai,
                'action_class' => $action_class,
                'detail' => $detail,
                'user' => $user_name,
            );
        }
        wp_reset_postdata();
    }
    
    // Send the data
    wp_send_json_success([
        'activities' => $activities,
    ]);
    
    wp_die();
}

/**
 * Helper function for formatting Thai Buddhist Era date
 * (assuming we already have this function from previous code)
 */
if (!function_exists('ckan_format_thai_datetime')) {
    function ckan_format_thai_datetime($unix_timestamp) {
        if (!is_numeric($unix_timestamp) || $unix_timestamp <= 0) {
            return '';
        }
        try {
            // Create DateTime object from timestamp and set WP timezone
            $datetime = new DateTime('@' . $unix_timestamp);
            $datetime->setTimezone(wp_timezone());
            
            // Get Gregorian year (CE)
            $year_ce = (int) $datetime->format('Y');
            
            // Convert to Buddhist Era (BE)
            $year_be = $year_ce + 543;
            
            // Format the rest of the date/time and combine
            return $datetime->format('d/m/') . $year_be . $datetime->format(' H:i:s');
            
        } catch (Exception $e) {
            error_log("CKAN Log Error: Failed to format timestamp {$unix_timestamp}. Error: " . $e->getMessage());
            // Fallback to standard WP date format in case of error
            return wp_date(get_option('date_format') . ' ' . get_option('time_format'), $unix_timestamp);
        }
    }
}



/****** ลบชุดข้อมูล CKAN ********/

// Shortcode function to display delete button for administrators
function cpd_delete_post_button_shortcode() {
    // Check if user is an administrator
    if (!current_user_can('administrator')) {
        return ''; // Return empty if not an administrator
    }
    
    // Get current post ID
    $post_id = get_the_ID();
    
    // Enqueue necessary scripts and styles
    wp_enqueue_script(
        'cpd-delete-dataset-js', 
        get_stylesheet_directory_uri() . '/js/ckan-delete-dataset.js', 
        array('jquery'), 
        '1.0.0', 
        true
    );
    
    wp_enqueue_style(
        'cpd-delete-dataset-css', 
        get_stylesheet_directory_uri() . '/css/ckan-delete-dataset.css', 
        array(), 
        '1.0.0'
    );
    
    // Pass post ID to JavaScript
    wp_localize_script(
        'cpd-delete-dataset-js', 
        'cpdDeleteVars', 
        array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'post_id' => $post_id,
            'nonce' => wp_create_nonce('cpd_delete_post_nonce')
        )
    );
    
    // Return the button HTML
    return '<button class="cpd-delete-post-btn" data-post-id="' . $post_id . '">Delete Post</button>
            <div id="cpd-delete-modal" class="cpd-modal">
                <div class="cpd-modal-content">
                    <div class="cpd-modal-header">
                        <h2>WARNING</h2>
                        <span class="cpd-close">&times;</span>
                    </div>
                    <div class="cpd-modal-body">
                        <div class="cpd-warning-icon">
                            <i class="dashicons dashicons-warning"></i>
                        </div>
                        <p>You are about to permanently delete this post.</p>
                        <p>This action cannot be undone. Are you sure?</p>
                    </div>
                    <div class="cpd-modal-footer">
                        <button class="cpd-cancel-btn">Cancel</button>
                        <button class="cpd-confirm-delete-btn">Delete Permanently</button>
                    </div>
                </div>
            </div>';
}
add_shortcode('cpd_delete_button', 'cpd_delete_post_button_shortcode');

// AJAX handler for post deletion
function cpd_delete_post_ajax() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'cpd_delete_post_nonce')) {
        wp_send_json_error('Security check failed');
        exit;
    }
    
    // Check if user is an administrator
    if (!current_user_can('administrator')) {
        wp_send_json_error('Permission denied');
        exit;
    }
    
    // Get post ID from request
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    
    // Delete the post
    if ($post_id > 0) {
        $result = wp_delete_post($post_id, true); // true means force delete
        
        if ($result) {
            wp_send_json_success(array(
                'message' => 'Post deleted successfully',
                'redirect' => home_url()
            ));
        } else {
            wp_send_json_error('Failed to delete post');
        }
    } else {
        wp_send_json_error('Invalid post ID');
    }
    
    exit;
}
add_action('wp_ajax_cpd_delete_post', 'cpd_delete_post_ajax');


/**** ฟังก์ชั่นแสดงไฟล์ที่แนบสำหรับ โพสทั่วไป (ไม่ใช่ CKAN) *******/

function normal_post_attfile($atts) {
    // Enqueue necessary scripts and styles
    wp_enqueue_style('normal-post-attfile-css', get_stylesheet_directory_uri() . '/css/normal-post-attfile.css');
    wp_enqueue_script('normal-post-attfile-js', get_stylesheet_directory_uri() . '/js/normal-post-attfile.js', array('jquery'), '1.0', true);
    
    // Pass AJAX URL to JavaScript
    wp_localize_script('normal-post-attfile-js', 'normal_post_attfile_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('normal_post_attfile_nonce')
    ));
    
    // Generate a unique ID for this instance
    $unique_id = 'normal-post-attfile-' . uniqid();
    
    // Start output buffering
    ob_start();
    
    // HTML Structure
    ?>
    <div class="normal-post-attfile-container" id="<?php echo $unique_id; ?>">
        <div class="normal-post-attfile-loading">กำลังโหลด...</div>
        <table class="normal-post-attfile-table">
            <thead>
                <tr>
                    <th>ชื่อไฟล์</th>
                    <th>วันที่นำเข้า</th>
                    <th>ดาวน์โหลด</th>
                </tr>
            </thead>
            <tbody>
                <!-- Data will be loaded here via AJAX -->
            </tbody>
        </table>
    </div>
    
    <!-- Modal Popup -->
    <div id="normal-post-attfile-modal" class="normal-post-attfile-modal">
        <div class="normal-post-attfile-modal-content">
            <span class="normal-post-attfile-close">&times;</span>
            <div class="normal-post-attfile-modal-body">
                <!-- Preview content will be loaded here -->
            </div>
        </div>
    </div>
    
    <script>
        jQuery(document).ready(function($) {
            normalPostAttfileInit('<?php echo $unique_id; ?>');
        });
    </script>
    <?php
    
    // Return the buffered content
    return ob_get_clean();
}
add_shortcode('normal_post_attfile', 'normal_post_attfile');

/**
 * AJAX handler to fetch attachment files data
 */
function normal_post_attfile_ajax_handler() {
    // Check nonce for security
    check_ajax_referer('normal_post_attfile_nonce', 'nonce');
    
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : get_the_ID();
    $files_data = array();
    
    // Get repeater field data
    if (function_exists('have_rows') && have_rows('at_file_standard', $post_id)) {
        while (have_rows('at_file_standard', $post_id)) {
            the_row();
            
            $file_name = get_sub_field('at_rp_file_name');
            $file_create = get_sub_field('at_rp_file_create');
            $file_url = get_sub_field('at_rp_file_url'); // Assuming there's a file URL field
            
            // Determine file type
            $file_extension = pathinfo($file_url, PATHINFO_EXTENSION);
            $file_type = 'other';
            
            if ($file_extension === 'pdf') {
                $file_type = 'pdf';
            } elseif (in_array($file_extension, array('jpg', 'jpeg', 'png', 'gif', 'webp'))) {
                $file_type = 'image';
            }
            
            $files_data[] = array(
                'name' => $file_name,
                'date' => $file_create,
                'url' => $file_url,
                'type' => $file_type,
                'extension' => $file_extension
            );
        }
    }
    
    wp_send_json_success($files_data);
}
add_action('wp_ajax_normal_post_attfile', 'normal_post_attfile_ajax_handler');
add_action('wp_ajax_nopriv_normal_post_attfile', 'normal_post_attfile_ajax_handler');


/**** กำหนดให้เลืกใช้ Featuredimages กับทุกโพส โดยอัตโนมัติ ******/

/**
 * Post Featured Images
 *
 * Sets a default featured image for all posts (including custom post types)
 * that don't have a featured image. Uses an external image URL without
 * requiring the image to be uploaded again.
 *
 * @package     WordPress
 * @subpackage  Post_Featured_Images
 */

/**
 * Set default featured image for posts without one
 *
 * @param int $batch_size Number of posts to process at once
 * @return array Results of the process
 */
function post_featured_images_set_default($batch_size = 50) {
    // Make sure the required files are included
    if (!function_exists('media_handle_sideload')) {
        require_once(ABSPATH . 'wp-admin/includes/media.php');
        require_once(ABSPATH . 'wp-admin/includes/file.php');
        require_once(ABSPATH . 'wp-admin/includes/image.php');
    }
    
    // Default image URL
    $default_image_url = 'https://standard.wpdevs.co/wp-content/uploads/2025/03/no-images-scaled-2.jpg';
    
    // Results tracking
    $results = array(
        'processed' => 0,
        'updated' => 0,
        'skipped' => 0,
        'post_types' => array()
    );
    
    // Get all post types
    $post_types = get_post_types(array('public' => true));
    
    // Process each post type
    foreach ($post_types as $post_type) {
        // Initialize post type stats
        $results['post_types'][$post_type] = array(
            'processed' => 0,
            'updated' => 0,
            'skipped' => 0
        );
        
        // Get all posts without featured image for this post type
        $args = array(
            'post_type'      => $post_type,
            'posts_per_page' => $batch_size,
            'fields'         => 'ids', // Only get post IDs for better performance
            'meta_query'     => array(
                array(
                    'key'     => '_thumbnail_id',
                    'compare' => 'NOT EXISTS'
                )
            )
        );
        
        $query = new WP_Query($args);
        $posts_without_thumbnail = $query->posts;
        $total_posts = $query->found_posts;
        
        if (!empty($posts_without_thumbnail)) {
            foreach ($posts_without_thumbnail as $post_id) {
                $results['processed']++;
                $results['post_types'][$post_type]['processed']++;
                
                // Set default featured image
                if (post_featured_images_set_image($post_id, $default_image_url)) {
                    $results['updated']++;
                    $results['post_types'][$post_type]['updated']++;
                } else {
                    $results['skipped']++;
                    $results['post_types'][$post_type]['skipped']++;
                }
            }
        }
        
        // Update total posts count
        $results['post_types'][$post_type]['total'] = $total_posts;
    }
    
    // Mark as processed
    update_option('post_featured_images_last_run', current_time('mysql'));
    
    return $results;
}

/**
 * Helper function to set the featured image from URL
 *
 * @param int $post_id The post ID
 * @param string $image_url The image URL
 * @return bool True on success, false on failure
 */
function post_featured_images_set_image($post_id, $image_url) {
    // Skip if already has featured image
    if (has_post_thumbnail($post_id)) {
        return false;
    }
    
    // Make sure the required files are included
    if (!function_exists('media_handle_sideload')) {
        require_once(ABSPATH . 'wp-admin/includes/media.php');
        require_once(ABSPATH . 'wp-admin/includes/file.php');
        require_once(ABSPATH . 'wp-admin/includes/image.php');
    }
    
    // First, check if the image already exists in the media library
    $image_id = post_featured_images_get_image_id($image_url);
    
    // If image doesn't exist in media library, we need to add it
    if (!$image_id) {
        // Get the file name and type
        $file = array();
        $file['name'] = basename($image_url);
        $file['tmp_name'] = download_url($image_url);
        
        // Check for download errors
        if (is_wp_error($file['tmp_name'])) {
            @unlink($file['tmp_name']);
            return false;
        }
        
        // Upload the image and get attachment ID
        $attachment_id = media_handle_sideload($file, $post_id);
        
        // Check for upload errors
        if (is_wp_error($attachment_id)) {
            @unlink($file['tmp_name']);
            return false;
        }
        
        $image_id = $attachment_id;
    }
    
    // Set the featured image
    return set_post_thumbnail($post_id, $image_id);
}

/**
 * Get attachment ID from image URL
 *
 * @param string $image_url The image URL
 * @return int|bool The attachment ID if found, or false if not
 */
function post_featured_images_get_image_id($image_url) {
    global $wpdb;
    
    // Get the filename from URL
    $filename = basename($image_url);
    
    // Search for the image in the database
    $attachment = $wpdb->get_col($wpdb->prepare("SELECT ID FROM $wpdb->posts WHERE guid LIKE %s OR post_name = %s;", '%' . $filename, pathinfo($filename, PATHINFO_FILENAME)));
    
    // Return the attachment ID if found, or false if not
    return isset($attachment[0]) ? $attachment[0] : false;
}

/**
 * Check and set featured image when post is saved
 *
 * @param int $post_id The post ID
 * @return void
 */
function post_featured_images_check_on_save($post_id) {
    // Skip REST API requests
    if (defined('REST_REQUEST') && REST_REQUEST) {
        return;
    }
    
    // Skip autosaves and revisions
    if (wp_is_post_autosave($post_id) || wp_is_post_revision($post_id)) {
        return;
    }
    
    // Get post type
    $post_type = get_post_type($post_id);
    
    // Skip if not a public post type
    if (!in_array($post_type, get_post_types(array('public' => true)))) {
        return;
    }
    
    // Check if post already has a featured image
    if (!has_post_thumbnail($post_id)) {
        // Set default featured image
        post_featured_images_set_image($post_id, 'https://standard.wpdevs.co/wp-content/uploads/2025/03/no-images-scaled-2.jpg');
    }
}
add_action('save_post', 'post_featured_images_check_on_save');

/**
 * Enqueue scripts and styles
 *
 * @return void
 */
function post_featured_images_enqueue_scripts() {
    // Get the theme directory URI
    $theme_uri = get_stylesheet_directory_uri();
    
    // Enqueue JavaScript
    wp_enqueue_script(
        'post-featured-images-js',
        $theme_uri . '/js/post-featured-images.js',
        array('jquery'),
        '1.0.0',
        true
    );
    
    // Enqueue CSS
    wp_enqueue_style(
        'post-featured-images-css',
        $theme_uri . '/css/post-featured-images.css',
        array(),
        '1.0.0'
    );
}
add_action('wp_enqueue_scripts', 'post_featured_images_enqueue_scripts');

/**
 * Process existing posts in batches via AJAX
 */
function post_featured_images_process_existing_posts_ajax() {
    // Verify nonce
    check_admin_referer('post_featured_images_action');
    
    // Check permissions
    if (!current_user_can('manage_options')) {
        wp_send_json_error('Permission denied');
    }
    
    // Process batch
    $batch_size = isset($_POST['batch_size']) ? intval($_POST['batch_size']) : 20;
    $results = post_featured_images_set_default($batch_size);
    
    // Send response
    wp_send_json_success($results);
}
add_action('wp_ajax_post_featured_images_process_batch', 'post_featured_images_process_existing_posts_ajax');

/**
 * Add admin menu
 *
 * @return void
 */
function post_featured_images_admin_menu() {
    add_management_page(
        'Set Default Featured Images',
        'Set Default Featured Images',
        'manage_options',
        'post-featured-images',
        'post_featured_images_admin_page'
    );
}
add_action('admin_menu', 'post_featured_images_admin_menu');

/**
 * Admin page callback
 *
 * @return void
 */
function post_featured_images_admin_page() {
    // Process form submission for manual processing
    if (isset($_POST['post_featured_images_submit']) && check_admin_referer('post_featured_images_action')) {
        $batch_size = isset($_POST['batch_size']) ? intval($_POST['batch_size']) : 50;
        $results = post_featured_images_set_default($batch_size);
        
        if ($results['updated'] > 0) {
            echo '<div class="notice notice-success"><p>' . 
                sprintf(
                    __('Default featured images have been set for %d posts. %d posts were processed in total.', 'post-featured-images'),
                    $results['updated'],
                    $results['processed']
                ) . 
                '</p></div>';
        } else {
            echo '<div class="notice notice-info"><p>' . 
                __('No posts were updated. All posts may already have featured images.', 'post-featured-images') . 
                '</p></div>';
        }
    }
    
    // Display the admin page
    ?>
    <div class="wrap">
        <h1><?php _e('Set Default Featured Images', 'post-featured-images'); ?></h1>
        
        <div class="card">
            <h2><?php _e('Process All Posts', 'post-featured-images'); ?></h2>
            <p><?php _e('This will set the default featured image for all posts (including custom post types) that do not have a featured image.', 'post-featured-images'); ?></p>
            
            <form method="post" action="">
                <?php wp_nonce_field('post_featured_images_action'); ?>
                <div class="form-field">
                    <label for="batch_size">
                        <?php _e('Posts to process per batch:', 'post-featured-images'); ?>
                    </label>
                    <input type="number" id="batch_size" name="batch_size" value="50" min="1" max="100">
                    <p class="description">
                        <?php _e('Larger values are faster but may timeout on some servers.', 'post-featured-images'); ?>
                    </p>
                </div>
                
                <input type="submit" name="post_featured_images_submit" class="button button-primary" value="<?php _e('Process Now', 'post-featured-images'); ?>">
            </form>
        </div>
        
        <div class="card" style="margin-top: 20px;">
            <h2><?php _e('AJAX Processing', 'post-featured-images'); ?></h2>
            <p><?php _e('For sites with many posts, use this method to process posts in batches without timeouts.', 'post-featured-images'); ?></p>
            
            <div id="post-featured-images-ajax-form">
                <input type="hidden" id="post-featured-images-nonce" value="<?php echo wp_create_nonce('post_featured_images_action'); ?>">
                
                <div class="form-field">
                    <label for="ajax_batch_size">
                        <?php _e('Posts to process per batch:', 'post-featured-images'); ?>
                    </label>
                    <input type="number" id="ajax_batch_size" value="20" min="1" max="50">
                </div>
                
                <div id="post-featured-images-progress" style="display: none; margin: 15px 0;">
                    <div class="progress-bar" style="background-color: #f1f1f1; height: 20px; position: relative; width: 100%;">
                        <div class="progress-bar-fill" style="background-color: #0073aa; height: 20px; width: 0%; transition: width 0.3s;"></div>
                        <div class="progress-bar-text" style="position: absolute; top: 0; left: 0; right: 0; text-align: center; line-height: 20px; color: #000;"></div>
                    </div>
                    <p class="description progress-status"></p>
                </div>
                
                <button id="post-featured-images-start-ajax" class="button button-primary">
                    <?php _e('Start Processing', 'post-featured-images'); ?>
                </button>
                <button id="post-featured-images-stop-ajax" class="button" style="display: none;">
                    <?php _e('Stop Processing', 'post-featured-images'); ?>
                </button>
            </div>
            
            <div id="post-featured-images-results" style="margin-top: 20px; display: none;">
                <h3><?php _e('Processing Results', 'post-featured-images'); ?></h3>
                <pre id="post-featured-images-results-data" style="background: #f1f1f1; padding: 10px; overflow: auto;"></pre>
            </div>
        </div>
    </div>
    
    <script>
    jQuery(document).ready(function($) {
        var isProcessing = false;
        var shouldStop = false;
        var totalProcessed = 0;
        var totalUpdated = 0;
        
        $('#post-featured-images-start-ajax').on('click', function(e) {
            e.preventDefault();
            
            // Reset counters
            totalProcessed = 0;
            totalUpdated = 0;
            shouldStop = false;
            
            // Update UI
            $('#post-featured-images-progress').show();
            $('#post-featured-images-results').hide();
            $('#post-featured-images-start-ajax').hide();
            $('#post-featured-images-stop-ajax').show();
            $('.progress-bar-fill').width('0%');
            $('.progress-bar-text').text('0%');
            $('.progress-status').text('<?php _e('Processing...', 'post-featured-images'); ?>');
            
            // Start processing
            isProcessing = true;
            processBatch();
        });
        
        $('#post-featured-images-stop-ajax').on('click', function(e) {
            e.preventDefault();
            shouldStop = true;
            $(this).text('<?php _e('Stopping...', 'post-featured-images'); ?>');
        });
        
        function processBatch() {
            if (shouldStop) {
                isProcessing = false;
                $('#post-featured-images-stop-ajax').hide();
                $('#post-featured-images-start-ajax').show();
                $('.progress-status').text('<?php _e('Processing stopped by user.', 'post-featured-images'); ?>');
                return;
            }
            
            var batchSize = $('#ajax_batch_size').val();
            
            $.ajax({
                url: ajaxurl,
                type: 'POST',
                data: {
                    action: 'post_featured_images_process_batch',
                    _wpnonce: $('#post-featured-images-nonce').val(),
                    batch_size: batchSize
                },
                success: function(response) {
                    if (response.success) {
                        var data = response.data;
                        
                        // Update counters
                        totalProcessed += data.processed;
                        totalUpdated += data.updated;
                        
                        // Update progress display
                        $('#post-featured-images-results-data').html(
                            'Processed: ' + totalProcessed + '\n' +
                            'Updated: ' + totalUpdated + '\n' +
                            'Skipped: ' + (totalProcessed - totalUpdated)
                        );
                        
                        // Display results
                        $('#post-featured-images-results').show();
                        
                        // Continue if there are more posts to process
                        if (data.processed > 0) {
                            // Update progress bar (approximation as we don't know total count)
                            $('.progress-status').text('Processed ' + totalProcessed + ' posts, updated ' + totalUpdated + ' posts.');
                            
                            // Continue processing
                            processBatch();
                        } else {
                            // Finished
                            isProcessing = false;
                            $('#post-featured-images-stop-ajax').hide();
                            $('#post-featured-images-start-ajax').show();
                            $('.progress-bar-fill').width('100%');
                            $('.progress-bar-text').text('100%');
                            $('.progress-status').text('<?php _e('Processing complete!', 'post-featured-images'); ?>');
                        }
                    } else {
                        // Error
                        isProcessing = false;
                        $('#post-featured-images-stop-ajax').hide();
                        $('#post-featured-images-start-ajax').show();
                        $('.progress-status').text('<?php _e('Error: ', 'post-featured-images'); ?>' + response.data);
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // Error
                    isProcessing = false;
                    $('#post-featured-images-stop-ajax').hide();
                    $('#post-featured-images-start-ajax').show();
                    $('.progress-status').text('<?php _e('Error: ', 'post-featured-images'); ?>' + textStatus + ' - ' + errorThrown);
                }
            });
        }
    });
    </script>
    <?php
}

/**
 * Process all existing posts automatically
 * This is executed when the code is first loaded
 */
function post_featured_images_auto_process_existing() {
    // Check if already processed
    if (get_option('post_featured_images_auto_processed')) {
        return;
    }
    
    // Process small batch (10 posts) immediately
    post_featured_images_set_default(10);
    
    // Schedule a single event to process more posts in the background
    if (!wp_next_scheduled('post_featured_images_process_batch')) {
        wp_schedule_single_event(time() + 60, 'post_featured_images_process_batch');
    }
    
    // Mark as processed
    update_option('post_featured_images_auto_processed', true);
}

/**
 * Process batch of posts in the background
 */
function post_featured_images_process_batch_callback() {
    // Process a batch of 50 posts
    post_featured_images_set_default(50);
    
    // Schedule next batch if needed
    $args = array(
        'post_type'      => get_post_types(array('public' => true)),
        'posts_per_page' => 1,
        'fields'         => 'ids',
        'meta_query'     => array(
            array(
                'key'     => '_thumbnail_id',
                'compare' => 'NOT EXISTS'
            )
        )
    );
    
    $query = new WP_Query($args);
    
    if ($query->found_posts > 0) {
        // Schedule next batch
        wp_schedule_single_event(time() + 300, 'post_featured_images_process_batch');
    }
}
add_action('post_featured_images_process_batch', 'post_featured_images_process_batch_callback');

// Run the auto-processor when the code is loaded
post_featured_images_auto_process_existing();

/**
 * Create JS and CSS files if they don't exist
 */
function post_featured_images_create_files() {
    // Check child theme directory paths
    $child_theme_dir = get_stylesheet_directory();
    $js_dir = $child_theme_dir . '/js';
    $css_dir = $child_theme_dir . '/css';
    
    // Create directories if they don't exist
    if (!file_exists($js_dir)) {
        wp_mkdir_p($js_dir);
    }
    
    if (!file_exists($css_dir)) {
        wp_mkdir_p($css_dir);
    }
    
    // Create JS file if it doesn't exist
    $js_file = $js_dir . '/post-featured-images.js';
    if (!file_exists($js_file)) {
        $js_content = <<<'EOT'
/**
 * Post Featured Images JavaScript
 */
(function($) {
    'use strict';
    
    // Wait for the document to be ready
    $(document).ready(function() {
        // Handle image loading errors
        $('.post-featured-image').on('error', function() {
            $(this).attr('src', 'https://standard.wpdevs.co/wp-content/uploads/2025/03/no-images-scaled-2.jpg');
            $(this).addClass('fallback-featured-image');
        });
    });
    
})(jQuery);
EOT;
        file_put_contents($js_file, $js_content);
    }
    
    // Create CSS file if it doesn't exist
    $css_file = $css_dir . '/post-featured-images.css';
    if (!file_exists($css_file)) {
        $css_content = <<<'EOT'
/**
 * Post Featured Images CSS
 */

/* Styles for post featured images */
.post-featured-image {
    display: block;
    width: 100%;
    height: auto;
    margin-bottom: 20px;
}

/* Style for fallback image */
.fallback-featured-image {
    border: 1px solid #ddd;
}

/* Style for no-image placeholder */
.no-featured-image {
    background-color: #f5f5f5;
    border: 1px solid #ddd;
    padding: 20px;
    text-align: center;
}
EOT;
        file_put_contents($css_file, $css_content);
    }
}
add_action('init', 'post_featured_images_create_files');



/**** ระบบเปิดเปิด Post CKAN *****/

/**
 * ระบบเปิด/ปิดสถานะโพสต์ (Publish/Pending) ด้วย Shortcode สำหรับ CKAN Theme หรือ Theme อื่นๆ
 * - แสดงปุ่ม Toggle Switch ในโพสต์ผ่าน Shortcode [ckan_post_status]
 * - อนุญาตให้ผู้เขียนหรือ Admin/Editor เปลี่ยนสถานะโพสต์ระหว่าง Publish (เผยแพร่) และ Pending (รอตรวจสอบ)
 * - ใช้ AJAX ในการเปลี่ยนสถานะโดยไม่ต้องโหลดหน้าใหม่
 * - ลบฟังก์ชันที่แก้ไข Query หลัก (pre_get_posts, template_redirect) เพื่อป้องกันข้อผิดพลาด Page Not Found
 */

// 1. เพิ่ม Scripts และ Styles เฉพาะหน้าที่มี Shortcode หรือหน้าโพสต์เดี่ยว
function ckan_post_status_enqueue_scripts() {
    global $post;

    // ตรวจสอบว่าเป็นหน้าโพสต์เดี่ยว (is_singular) หรือมี Shortcode ในเนื้อหาหรือไม่
    // เพิ่มเงื่อนไข is_singular() เพื่อให้ทำงานในหน้าโพสต์โดยตรง แม้จะไม่ได้ใส่ shortcode (เผื่อต้องการใช้ใน template)
    if (is_a($post, 'WP_Post') && (has_shortcode($post->post_content, 'ckan_post_status') || is_singular())) {

        // **สำคัญ:** ตรวจสอบให้แน่ใจว่าไฟล์ CSS และ JS มีอยู่จริงตาม Path ที่ระบุ
        $css_file_path = get_stylesheet_directory() . '/css/ckan-post-status.css';
        $js_file_path = get_stylesheet_directory() . '/js/ckan-post-status.js';
        $theme_version = wp_get_theme()->get('Version'); // ใช้เวอร์ชันของธีม

        if (file_exists($css_file_path)) {
            wp_enqueue_style('ckan-post-status-css', get_stylesheet_directory_uri() . '/css/ckan-post-status.css', array(), $theme_version);
        } else {
            // แจ้งเตือนถ้าไฟล์ CSS ไม่มีอยู่ (อาจแสดงใน debug log หรือ comment ออก)
            // error_log('CKAN Post Status: CSS file not found at ' . $css_file_path);
        }

        if (file_exists($js_file_path)) {
            wp_enqueue_script('ckan-post-status-js', get_stylesheet_directory_uri() . '/js/ckan-post-status.js', array('jquery'), $theme_version, true);

            // ส่งค่าไปยัง JavaScript
            wp_localize_script('ckan-post-status-js', 'ckanPostStatus', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'nonce'    => wp_create_nonce('ckan_post_status_nonce'),
                'post_id'  => get_the_ID(), // ส่ง Post ID ปัจจุบัน
                // ไม่จำเป็นต้องส่ง user_id หรือ is_author ไป เพราะเราจะเช็คสิทธิ์ในฝั่ง PHP ตอนรับ AJAX
            ));
        } else {
            // แจ้งเตือนถ้าไฟล์ JS ไม่มีอยู่
            // error_log('CKAN Post Status: JS file not found at ' . $js_file_path);
        }
    }
}
add_action('wp_enqueue_scripts', 'ckan_post_status_enqueue_scripts');

// 2. สร้าง Shortcode [ckan_post_status]
function ckan_post_status_shortcode($atts) {
    // กำหนดค่าเริ่มต้นและรวมค่าจาก attributes ของ shortcode
    $atts = shortcode_atts(array(
        'post_id' => get_the_ID(), // ใช้ ID ของโพสต์ปัจจุบันเป็นค่าเริ่มต้น
    ), $atts, 'ckan_post_status');

    $post_id = intval($atts['post_id']);
    $post = get_post($post_id);

    // ตรวจสอบว่าโพสต์มีอยู่จริงหรือไม่
    if (!$post) {
        return '<div class="ckan-post-status-error">ข้อผิดพลาด: ไม่พบโพสต์</div>';
    }

    // ตรวจสอบสิทธิ์: ผู้ใช้ปัจจุบันเป็นผู้เขียน หรือ มีสิทธิ์แก้ไขโพสต์ของผู้อื่นหรือไม่
    if (get_current_user_id() != $post->post_author && !current_user_can('edit_others_posts')) {
        // ถ้าไม่มีสิทธิ์ ไม่ต้องแสดงอะไรเลย หรือจะแสดงข้อความก็ได้ (แต่ซ่อนปุ่มดีกว่า)
        return ''; // ไม่แสดงปุ่มถ้าไม่มีสิทธิ์
        // return '<div class="ckan-post-status-info">คุณไม่มีสิทธิ์เปลี่ยนสถานะโพสต์นี้</div>';
    }

    // ตรวจสอบสถานะปัจจุบันของโพสต์
    $is_published = ($post->post_status == 'publish');
    $checked = $is_published ? 'checked' : '';
    $label = $is_published ? 'เผยแพร่แล้ว' : 'ซ่อนอยู่ (Pending)';

    // สร้าง HTML สำหรับ Toggle Switch
    $output = '<div class="ckan-post-status-wrapper" data-post-id="' . esc_attr($post_id) . '">';
    $output .= '<div class="ckan-toggle-container">';
    $output .= '<label class="ckan-toggle-switch">';
    $output .= '<input type="checkbox" class="ckan-status-toggle" ' . $checked . ' aria-label="เปลี่ยนสถานะโพสต์">';
    $output .= '<span class="ckan-toggle-slider"></span>';
    $output .= '</label>';
    $output .= '<span class="ckan-status-label">' . esc_html($label) . '</span>';
    $output .= '</div>';
    // เพิ่ม container สำหรับแสดงข้อความตอบกลับจาก AJAX
    $output .= '<div class="ckan-post-status-message" style="margin-top: 5px;"></div>';
    $output .= '</div>';

    return $output;
}
add_shortcode('ckan_post_status', 'ckan_post_status_shortcode');

// 3. ฟังก์ชันจัดการ AJAX สำหรับเปลี่ยนสถานะโพสต์
function ckan_post_status_ajax_handler() {
    // 1. ตรวจสอบ Nonce เพื่อความปลอดภัย
    check_ajax_referer('ckan_post_status_nonce', 'nonce');

    // 2. ตรวจสอบข้อมูลที่ส่งมา (post_id และ status)
    if (!isset($_POST['post_id']) || !isset($_POST['status'])) {
        wp_send_json_error(array('message' => 'ข้อมูลไม่ครบถ้วน'));
        exit;
    }

    // 3. ทำความสะอาดและรับค่า
    $post_id = intval($_POST['post_id']);
    // ค่า 'status' ที่ส่งมาจาก JS จะเป็น 'true' หรือ 'false' (สตริง)
    $is_checked = sanitize_text_field($_POST['status']) === 'true';
    $new_status = $is_checked ? 'publish' : 'pending'; // ถ้าเช็คคือ publish ถ้าไม่เช็คคือ pending

    // 4. ดึงข้อมูลโพสต์
    $post = get_post($post_id);

    // 5. ตรวจสอบว่าโพสต์มีอยู่จริงหรือไม่
    if (!$post) {
        wp_send_json_error(array('message' => 'ไม่พบโพสต์'));
        exit;
    }

    // 6. ตรวจสอบสิทธิ์ของผู้ใช้ (สำคัญมาก!)
    // ต้องเป็นผู้เขียนโพสต์ หรือ มีความสามารถ 'edit_others_posts'
    if (get_current_user_id() != $post->post_author && !current_user_can('edit_others_posts')) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์แก้ไขโพสต์นี้'));
        exit;
    }

    // 7. ตรวจสอบว่าสถานะมีการเปลี่ยนแปลงจริงหรือไม่ (ป้องกันการอัปเดตโดยไม่จำเป็น)
    if ($post->post_status === $new_status) {
        // ส่งสถานะปัจจุบันกลับไปเฉยๆ ถ้าไม่มีการเปลี่ยนแปลง
        wp_send_json_success(array(
            'message'     => 'สถานะโพสต์ไม่เปลี่ยนแปลง',
            'newStatus'   => $post->post_status,
            'statusLabel' => ($post->post_status === 'publish') ? 'เผยแพร่แล้ว' : 'ซ่อนอยู่ (Pending)'
        ));
        exit;
    }

    // 8. เตรียมข้อมูลสำหรับอัปเดตโพสต์
    $updated_post = array(
        'ID'          => $post_id,
        'post_status' => $new_status
    );

    // 9. อัปเดตโพสต์
    $result = wp_update_post($updated_post, true); // ตั้งค่า $wp_error เป็น true เพื่อรับ WP_Error object

    // 10. ตรวจสอบผลลัพธ์การอัปเดต
    if (is_wp_error($result)) {
        // ถ้าเกิดข้อผิดพลาดระหว่างอัปเดต
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดในการอัปเดต: ' . $result->get_error_message()));
        exit;
    } else {
        // ถ้าอัปเดตสำเร็จ
        $success_message = ($new_status === 'publish') ? 'โพสต์เผยแพร่เรียบร้อยแล้ว' : 'โพสต์ถูกซ่อน (Pending) เรียบร้อยแล้ว';
        $status_label = ($new_status === 'publish') ? 'เผยแพร่แล้ว' : 'ซ่อนอยู่ (Pending)';

        wp_send_json_success(array(
            'message'     => $success_message,
            'newStatus'   => $new_status,
            'statusLabel' => $status_label
        ));
        exit;
    }
}
// Hook สำหรับรับ AJAX request (ต้องตรงกับ action ใน JavaScript)
add_action('wp_ajax_ckan_post_status_change', 'ckan_post_status_ajax_handler');

// 4. (Optional) เพิ่ม Body Class สำหรับ Styling ถ้าโพสต์เป็น Pending (สำหรับผู้เขียน/Admin)
function ckan_post_status_body_class($classes) {
    // ทำงานเฉพาะหน้าโพสต์เดี่ยว
    if (is_singular()) {
        global $post;
        // ตรวจสอบว่าโพสต์มีอยู่จริง, สถานะเป็น pending, และผู้ใช้ปัจจุบันมีสิทธิ์เห็น (เป็นผู้เขียนหรือ admin/editor)
        if ($post && $post->post_status === 'pending' &&
            (get_current_user_id() == $post->post_author || current_user_can('edit_others_posts'))) {
            $classes[] = 'ckan-post-is-pending'; // เพิ่ม class นี้เพื่อให้ CSS จัดการแสดงผลได้ (เช่น ทำเป็นสีเทา)
        }
    }
    return $classes;
}
add_filter('body_class', 'ckan_post_status_body_class');


/**** ระบบสถิติข้อมูลมาตรฐานองค์กร *****/


// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

// Register the shortcode
add_shortcode('news_statistics', 'news_statistics_shortcode');

// Register scripts and styles
add_action('wp_enqueue_scripts', 'news_statistics_enqueue_assets');

// Register AJAX handlers
add_action('wp_ajax_get_news_statistics', 'get_news_statistics_ajax_handler');
add_action('wp_ajax_nopriv_get_news_statistics', 'get_news_statistics_ajax_handler');

/**
 * Enqueue required scripts and styles
 */
function news_statistics_enqueue_assets() {
    // Only enqueue on pages where the shortcode is used
    global $post;
    if (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'news_statistics')) {
        // Enqueue Chart.js
        wp_enqueue_script('chartjs', 'https://cdn.jsdelivr.net/npm/chart.js', array(), '3.9.1', true);
        
        // Enqueue Date Range Picker
        wp_enqueue_script('moment', 'https://cdn.jsdelivr.net/momentjs/latest/moment.min.js', array(), null, true);
        wp_enqueue_script('daterangepicker', 'https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js', array('jquery', 'moment'), null, true);
        wp_enqueue_style('daterangepicker', 'https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css', array(), null);
        
        // Enqueue custom scripts and styles
        wp_enqueue_script('news-statistics-js', get_stylesheet_directory_uri() . '/js/news-statistics.js', array('jquery', 'chartjs', 'daterangepicker'), '1.0.0', true);
        wp_enqueue_style('news-statistics-css', get_stylesheet_directory_uri() . '/css/news-statistics.css', array(), '1.0.0');
        
        // Pass Ajax URL and nonce to JavaScript
        wp_localize_script('news-statistics-js', 'news_statistics_vars', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('news_statistics_nonce'),
        ));
    }
}

/**
 * Shortcode callback function
 */
function news_statistics_shortcode($atts) {
    // Parse shortcode attributes
    $atts = shortcode_atts(array(
        'title' => 'รายงานสถิติข่าวสาร',
    ), $atts);
    
    // Get all terms from the "tnews" taxonomy
    $terms = get_terms(array(
        'taxonomy' => 'tnews',
        'hide_empty' => false,
    ));
    
    // Start output buffering
    ob_start();
    ?>
    <div class="news-statistics-dashboard">
        <h2><?php echo esc_html($atts['title']); ?></h2>
        
        <div class="news-statistics-controls">
            <div class="date-range-filter">
                <label for="date-range">เลือกช่วงเวลา:</label>
                <input type="text" id="date-range" name="date-range" class="date-range-picker" />
            </div>
            
            <div class="taxonomy-filter">
                <label for="term-filter">เลือกหมวดหมู่:</label>
                <select id="term-filter" name="term-filter">
                    <option value="">ทั้งหมด</option>
                    <?php foreach ($terms as $term) : ?>
                        <option value="<?php echo esc_attr($term->term_id); ?>"><?php echo esc_html($term->name); ?></option>
                    <?php endforeach; ?>
                </select>
            </div>
            
            <button id="apply-filters" class="apply-filters-btn">ใช้ตัวกรอง</button>
        </div>
        
        <div class="news-statistics-loader">กำลังโหลดข้อมูล...</div>
        
        <div class="news-statistics-charts">
            <div class="chart-container">
                <h3>จำนวนโพส</h3>
                <canvas id="posts-chart"></canvas>
            </div>
            
            <div class="chart-container">
                <h3>กิจกรรมโพส</h3>
                <canvas id="activities-chart"></canvas>
            </div>
        </div>
        
        <div class="news-statistics-summary">
            <div class="summary-card total-posts">
                <span class="card-title">จำนวนโพสทั้งหมด</span>
                <span class="card-value" id="total-posts">0</span>
            </div>
            
            <div class="summary-card total-views">
                <span class="card-title">จำนวนการเข้าชมทั้งหมด</span>
                <span class="card-value" id="total-views">0</span>
            </div>
            
            <div class="summary-card total-updates">
                <span class="card-title">จำนวนการอัพเดตทั้งหมด</span>
                <span class="card-value" id="total-updates">0</span>
            </div>
            
            <div class="summary-card total-deleted">
                <span class="card-title">จำนวนโพสที่ถูกลบทั้งหมด</span>
                <span class="card-value" id="total-deleted">0</span>
            </div>
        </div>
    </div>
    <?php
    // Return the buffered content
    return ob_get_clean();
}

/**
 * AJAX handler for fetching statistics
 */
function get_news_statistics_ajax_handler() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'news_statistics_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        wp_die();
    }
    
    // Get filter parameters
    $start_date = isset($_POST['start_date']) ? sanitize_text_field($_POST['start_date']) : '';
    $end_date = isset($_POST['end_date']) ? sanitize_text_field($_POST['end_date']) : '';
    $term_id = isset($_POST['term_id']) ? intval($_POST['term_id']) : 0;
    
    // Convert dates to DateTime objects
    $start_datetime = !empty($start_date) ? new DateTime($start_date . ' 00:00:00') : new DateTime('30 days ago');
    $end_datetime = !empty($end_date) ? new DateTime($end_date . ' 23:59:59') : new DateTime('now');
    
    // Format dates for WP_Query
    $start_date_query = $start_datetime->format('Y-m-d H:i:s');
    $end_date_query = $end_datetime->format('Y-m-d H:i:s');
    
    // Prepare tax query if term ID is provided
    $tax_query = array();
    if ($term_id > 0) {
        $tax_query = array(
            array(
                'taxonomy' => 'tnews',
                'field' => 'term_id',
                'terms' => $term_id,
            ),
        );
    }
    
    // Get post counts within date range
    $post_counts = get_post_counts_by_date($start_date_query, $end_date_query, $tax_query);
    
    // Get post views
    $post_views = get_post_views_by_date($start_date_query, $end_date_query, $tax_query);
    
    // Get post updates
    $post_updates = get_post_updates_by_date($start_date_query, $end_date_query, $tax_query);
    
    // Get deleted posts
    $deleted_posts = get_deleted_posts_by_date($start_date_query, $end_date_query, $tax_query);
    
    // Get overall statistics
    $total_posts = get_total_posts($tax_query);
    $total_views = get_total_views($tax_query);
    $total_updates = array_sum(array_values($post_updates));
    $total_deleted = array_sum(array_values($deleted_posts));
    
    // Prepare and send response
    wp_send_json_success(array(
        'post_counts' => $post_counts,
        'post_views' => $post_views,
        'post_updates' => $post_updates,
        'deleted_posts' => $deleted_posts,
        'summary' => array(
            'total_posts' => $total_posts,
            'total_views' => $total_views,
            'total_updates' => $total_updates,
            'total_deleted' => $total_deleted,
        ),
    ));
    
    wp_die();
}

/**
 * Get post counts grouped by date within a date range
 */
function get_post_counts_by_date($start_date, $end_date, $tax_query = array()) {
    $args = array(
        'post_type' => 'news',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'date_query' => array(
            array(
                'after' => $start_date,
                'before' => $end_date,
                'inclusive' => true,
            ),
        ),
        'fields' => 'ids',
    );
    
    if (!empty($tax_query)) {
        $args['tax_query'] = $tax_query;
    }
    
    $posts = get_posts($args);
    
    // Group posts by date
    $post_counts_by_date = array();
    foreach ($posts as $post_id) {
        $post_date = get_the_date('Y-m-d', $post_id);
        
        if (!isset($post_counts_by_date[$post_date])) {
            $post_counts_by_date[$post_date] = 0;
        }
        
        $post_counts_by_date[$post_date]++;
    }
    
    // Fill in missing dates
    $result = fill_date_gaps($post_counts_by_date, $start_date, $end_date);
    
    return $result;
}

/**
 * Get post views grouped by date within a date range
 */
function get_post_views_by_date($start_date, $end_date, $tax_query = array()) {
    global $wpdb;
    
    $tax_join = '';
    $tax_where = '';
    
    if (!empty($tax_query)) {
        $term_id = $tax_query[0]['terms'];
        $tax_join = "INNER JOIN {$wpdb->term_relationships} tr ON p.ID = tr.object_id
                     INNER JOIN {$wpdb->term_taxonomy} tt ON tr.term_taxonomy_id = tt.term_taxonomy_id";
        $tax_where = $wpdb->prepare("AND tt.taxonomy = 'tnews' AND tt.term_id = %d", $term_id);
    }
    
    $query = $wpdb->prepare("
        SELECT DATE(pm.meta_value) AS view_date, COUNT(*) AS view_count
        FROM {$wpdb->postmeta} pm
        INNER JOIN {$wpdb->posts} p ON pm.post_id = p.ID
        {$tax_join}
        WHERE pm.meta_key = 'post_view_date'
        AND p.post_type = 'news'
        AND p.post_status = 'publish'
        AND DATE(pm.meta_value) BETWEEN %s AND %s
        {$tax_where}
        GROUP BY view_date
        ORDER BY view_date
    ", $start_date, $end_date);
    
    $results = $wpdb->get_results($query);
    
    $views_by_date = array();
    foreach ($results as $row) {
        $views_by_date[$row->view_date] = intval($row->view_count);
    }
    
    // Fill in missing dates
    $result = fill_date_gaps($views_by_date, $start_date, $end_date);
    
    return $result;
}

/**
 * Get post updates grouped by date within a date range
 */
function get_post_updates_by_date($start_date, $end_date, $tax_query = array()) {
    global $wpdb;
    
    $tax_join = '';
    $tax_where = '';
    
    if (!empty($tax_query)) {
        $term_id = $tax_query[0]['terms'];
        $tax_join = "INNER JOIN {$wpdb->term_relationships} tr ON p.ID = tr.object_id
                     INNER JOIN {$wpdb->term_taxonomy} tt ON tr.term_taxonomy_id = tt.term_taxonomy_id";
        $tax_where = $wpdb->prepare("AND tt.taxonomy = 'tnews' AND tt.term_id = %d", $term_id);
    }
    
    $query = $wpdb->prepare("
        SELECT DATE(p.post_modified) AS update_date, COUNT(*) AS update_count
        FROM {$wpdb->posts} p
        {$tax_join}
        WHERE p.post_type = 'news'
        AND p.post_status = 'publish'
        AND DATE(p.post_modified) BETWEEN %s AND %s
        AND p.post_modified > p.post_date
        {$tax_where}
        GROUP BY update_date
        ORDER BY update_date
    ", $start_date, $end_date);
    
    $results = $wpdb->get_results($query);
    
    $updates_by_date = array();
    foreach ($results as $row) {
        $updates_by_date[$row->update_date] = intval($row->update_count);
    }
    
    // Fill in missing dates
    $result = fill_date_gaps($updates_by_date, $start_date, $end_date);
    
    return $result;
}

/**
 * Get deleted posts grouped by date
 * หมายเหตุ: ต้องมีการเก็บข้อมูลโพสที่ถูกลบด้วย custom table ตามฟังก์ชัน track_post_deletions ด้านล่าง
 */
function get_deleted_posts_by_date($start_date, $end_date, $tax_query = array()) {
    global $wpdb;
    
    $table_name = $wpdb->prefix . 'deleted_posts_log';
    
    $tax_where = '';
    if (!empty($tax_query)) {
        $term_id = $tax_query[0]['terms'];
        $tax_where = $wpdb->prepare("AND FIND_IN_SET(%d, tax_terms)", $term_id);
    }
    
    $query = $wpdb->prepare("
        SELECT DATE(deleted_date) AS deletion_date, COUNT(*) AS deleted_count
        FROM $table_name
        WHERE post_type = 'news'
        AND DATE(deleted_date) BETWEEN %s AND %s
        $tax_where
        GROUP BY deletion_date
        ORDER BY deletion_date
    ", $start_date, $end_date);
    
    $results = $wpdb->get_results($query);
    
    $deletions_by_date = array();
    foreach ($results as $row) {
        $deletions_by_date[$row->deletion_date] = intval($row->deleted_count);
    }
    
    // Fill in missing dates
    $result = fill_date_gaps($deletions_by_date, $start_date, $end_date);
    
    return $result;
}

/**
 * Get the total number of posts
 */
function get_total_posts($tax_query = array()) {
    $args = array(
        'post_type' => 'news',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'fields' => 'ids',
    );
    
    if (!empty($tax_query)) {
        $args['tax_query'] = $tax_query;
    }
    
    $query = new WP_Query($args);
    return $query->found_posts;
}

/**
 * Get the total number of views
 */
function get_total_views($tax_query = array()) {
    global $wpdb;
    
    $tax_join = '';
    $tax_where = '';
    
    if (!empty($tax_query)) {
        $term_id = $tax_query[0]['terms'];
        $tax_join = "INNER JOIN {$wpdb->term_relationships} tr ON p.ID = tr.object_id
                     INNER JOIN {$wpdb->term_taxonomy} tt ON tr.term_taxonomy_id = tt.term_taxonomy_id";
        $tax_where = $wpdb->prepare("AND tt.taxonomy = 'tnews' AND tt.term_id = %d", $term_id);
    }
    
    $query = $wpdb->prepare("
        SELECT SUM(CAST(pm.meta_value AS UNSIGNED)) AS total_views
        FROM {$wpdb->postmeta} pm
        INNER JOIN {$wpdb->posts} p ON pm.post_id = p.ID
        {$tax_join}
        WHERE pm.meta_key = 'post_views'
        AND p.post_type = 'news'
        AND p.post_status = 'publish'
        {$tax_where}
    ");
    
    $result = $wpdb->get_var($query);
    
    return $result ? intval($result) : 0;
}

/**
 * Helper function to fill in missing dates in a date-indexed array
 */
function fill_date_gaps($data_array, $start_date, $end_date) {
    $start = new DateTime($start_date);
    $end = new DateTime($end_date);
    $interval = new DateInterval('P1D');
    $date_range = new DatePeriod($start, $interval, $end);
    
    $result = array();
    foreach ($date_range as $date) {
        $date_str = $date->format('Y-m-d');
        $result[$date_str] = isset($data_array[$date_str]) ? $data_array[$date_str] : 0;
    }
    
    // Add the end date as well
    $end_date_str = $end->format('Y-m-d');
    $result[$end_date_str] = isset($data_array[$end_date_str]) ? $data_array[$end_date_str] : 0;
    
    return $result;
}

/**
 * Create and initialize custom table for tracking deleted posts
 * ใช้เรียกครั้งเดียวเมื่อเปิดใช้งานปลั๊กอิน
 */
function create_deleted_posts_table() {
    global $wpdb;
    
    $table_name = $wpdb->prefix . 'deleted_posts_log';
    
    $charset_collate = $wpdb->get_charset_collate();
    
    $sql = "CREATE TABLE $table_name (
        id bigint(20) NOT NULL AUTO_INCREMENT,
        post_id bigint(20) NOT NULL,
        post_title text NOT NULL,
        post_type varchar(20) NOT NULL,
        deleted_date datetime DEFAULT '0000-00-00 00:00:00' NOT NULL,
        tax_terms text,
        PRIMARY KEY  (id)
    ) $charset_collate;";
    
    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
    dbDelta($sql);
}
// คอมเม้นต์บรรทัดด้านล่างและรันฟังก์ชันนี้เมื่อติดตั้งแรกครั้งเดียว
// register_activation_hook(__FILE__, 'create_deleted_posts_table');

/**
 * Track post views
 */
function track_news_post_views() {
    if (is_singular('news')) {
        $post_id = get_the_ID();
        
        // Get current view count
        $views = get_post_meta($post_id, 'post_views', true);
        $views = $views ? intval($views) : 0;
        
        // Update the view count
        update_post_meta($post_id, 'post_views', $views + 1);
        
        // Store the view date for statistics
        add_post_meta($post_id, 'post_view_date', current_time('mysql'));
    }
}
add_action('wp_head', 'track_news_post_views');

/**
 * Track post deletions
 */
function track_post_deletions($post_id) {
    global $wpdb;
    
    $post = get_post($post_id);
    
    if ($post && $post->post_type === 'news') {
        $table_name = $wpdb->prefix . 'deleted_posts_log';
        
        // Get taxonomy terms
        $terms = get_the_terms($post_id, 'tnews');
        $term_ids = array();
        
        if ($terms && !is_wp_error($terms)) {
            foreach ($terms as $term) {
                $term_ids[] = $term->term_id;
            }
        }
        
        $wpdb->insert(
            $table_name,
            array(
                'post_id' => $post_id,
                'post_title' => $post->post_title,
                'post_type' => $post->post_type,
                'deleted_date' => current_time('mysql'),
                'tax_terms' => !empty($term_ids) ? implode(',', $term_ids) : '',
            )
        );
    }
}
add_action('before_delete_post', 'track_post_deletions');


/***** ตารางแสดงโพสที่เกี่ยวของกับสถิติ *******/

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

// Register the shortcode
add_shortcode('news_posts_table', 'news_posts_table_shortcode');

// Register scripts and styles
add_action('wp_enqueue_scripts', 'news_posts_table_enqueue_assets');

// Register AJAX handlers
add_action('wp_ajax_update_news_category', 'update_news_category_ajax_handler');
add_action('wp_ajax_delete_news_post', 'delete_news_post_ajax_handler');

/**
 * Enqueue required scripts and styles
 */
function news_posts_table_enqueue_assets() {
    // Only enqueue on pages where the shortcode is used
    global $post;
    if (is_a($post, 'WP_Post') && 
        (has_shortcode($post->post_content, 'news_posts_table') || 
         has_shortcode($post->post_content, 'news_statistics'))) {
        
        // Enqueue Dashicons for front-end use
        wp_enqueue_style('dashicons');
        
        // Enqueue custom scripts and styles
        wp_enqueue_script('news-posts-table-js', get_stylesheet_directory_uri() . '/js/news-posts-table.js', array('jquery'), '1.0.2', true);
        wp_enqueue_style('news-posts-table-css', get_stylesheet_directory_uri() . '/css/news-posts-table.css', array(), '1.0.2');
        
        // Pass Ajax URL and nonce to JavaScript
        wp_localize_script('news-posts-table-js', 'news_posts_table_vars', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('news_posts_table_nonce'),
            'confirm_delete_message' => 'คุณต้องการลบเนื้อหานี้ใช่หรือไม่? คุณจะไม่สามารถกู้คืนข้อมูลนี้ได้อีก',
            'delete_success_message' => 'ลบโพสต์เรียบร้อยแล้ว',
            'update_success_message' => 'อัพเดตหมวดหมู่เรียบร้อยแล้ว',
            'error_message' => 'เกิดข้อผิดพลาด โปรดลองอีกครั้ง',
            'processing_message' => 'กำลังดำเนินการ...'
        ));
    }
}

/**
 * Shortcode callback function
 */
function news_posts_table_shortcode($atts) {
    // User must be logged in to see this table
    if (!is_user_logged_in()) {
        return '<div class="news-posts-error">กรุณาเข้าสู่ระบบเพื่อจัดการโพสต์</div>';
    }
    
    // Check if user has capability to edit posts
    if (!current_user_can('edit_posts')) {
        return '<div class="news-posts-error">คุณไม่มีสิทธิ์เข้าถึงหน้านี้</div>';
    }
    
    // Parse shortcode attributes
    $atts = shortcode_atts(array(
        'title' => 'จัดการโพสต์ข่าวสาร',
        'posts_per_page' => 10,
        'taxonomy' => 'tnews',
        'term_id' => 0,
        'orderby' => 'date',
        'order' => 'DESC',
    ), $atts);
    
    // Get term ID from URL parameter if available
    $term_id = isset($_GET['term_id']) ? intval($_GET['term_id']) : intval($atts['term_id']);
    
    // Get date filter from URL if available
    $date_filter = isset($_GET['date']) ? sanitize_text_field($_GET['date']) : '';
    
    // Get all terms from the specified taxonomy
    $terms = get_terms(array(
        'taxonomy' => $atts['taxonomy'],
        'hide_empty' => false,
    ));
    
    // Query arguments
    $args = array(
        'post_type' => 'news',
        'posts_per_page' => intval($atts['posts_per_page']),
        'paged' => get_query_var('paged') ? get_query_var('paged') : 1,
        'orderby' => $atts['orderby'],
        'order' => $atts['order'],
    );
    
    // Add taxonomy query if term ID is specified
    if ($term_id > 0) {
        $args['tax_query'] = array(
            array(
                'taxonomy' => $atts['taxonomy'],
                'field' => 'term_id',
                'terms' => $term_id,
            ),
        );
    }
    
    // Add date query if date filter is specified
    if (!empty($date_filter) && strtotime($date_filter)) {
        $date = new DateTime($date_filter);
        $args['date_query'] = array(
            array(
                'year' => $date->format('Y'),
                'month' => $date->format('m'),
                'day' => $date->format('d'),
            ),
        );
    }
    
    // Get current page for pagination
    $paged = (get_query_var('paged')) ? get_query_var('paged') : 1;
    $args['paged'] = $paged;
    
    // Run the query
    $news_query = new WP_Query($args);
    
    // Start output buffering
    ob_start();
    ?>
    <div class="news-posts-management">
        <h2><?php echo esc_html($atts['title']); ?></h2>
        
        <div class="news-posts-filters">
            <form method="get" action="" class="auto-submit">
                <label for="term-filter">กรองตามหมวดหมู่:</label>
                <select id="term-filter" name="term_id" class="term-filter">
                    <option value="0">ทั้งหมด</option>
                    <?php foreach ($terms as $term) : ?>
                        <option value="<?php echo esc_attr($term->term_id); ?>" <?php selected($term_id, $term->term_id); ?>>
                            <?php echo esc_html($term->name); ?>
                        </option>
                    <?php endforeach; ?>
                </select>
                
                <?php if (!empty($date_filter)) : ?>
                    <input type="hidden" name="date" value="<?php echo esc_attr($date_filter); ?>">
                    <div class="date-filter-badge">
                        <span>กรองตามวันที่: <?php echo esc_html(date_i18n('d/m/Y', strtotime($date_filter))); ?></span>
                        <a href="<?php echo esc_url(remove_query_arg('date')); ?>" class="clear-date-filter" title="ล้างตัวกรองวันที่">×</a>
                    </div>
                <?php endif; ?>
                
                <button type="submit" class="filter-button">กรอง</button>
            </form>
        </div>
        
        <?php if ($news_query->have_posts()) : ?>
            <div class="news-posts-table-container">
                <table class="news-posts-table">
                    <thead>
                        <tr>
                            <th class="col-title">ชื่อโพสต์</th>
                            <th class="col-date">วันที่สร้าง</th>
                            <th class="col-modified">วันที่อัพเดต</th>
                            <th class="col-category">หมวดหมู่</th>
                            <th class="col-actions">การจัดการ</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php while ($news_query->have_posts()) : $news_query->the_post(); ?>
                            <?php 
                                $post_id = get_the_ID();
                                $post_terms = get_the_terms($post_id, $atts['taxonomy']);
                                $term_names = array();
                                $post_term_ids = array();
                                
                                if ($post_terms && !is_wp_error($post_terms)) {
                                    foreach ($post_terms as $term) {
                                        $term_names[] = $term->name;
                                        $post_term_ids[] = $term->term_id;
                                    }
                                }
                                
                                // Get post view count if available
                                $post_views = get_post_meta($post_id, 'post_views', true);
                                $post_views = $post_views ? number_format($post_views) : '0';
                            ?>
                            <tr id="post-row-<?php echo $post_id; ?>">
                                <td class="col-title">
                                    <a href="<?php the_permalink(); ?>" target="_blank"><?php the_title(); ?></a>
                                    <span class="post-views-count" title="จำนวนการเข้าชม">
                                        <span class="dashicons dashicons-visibility"></span> <?php echo $post_views; ?>
                                    </span>
                                </td>
                                <td class="col-date"><?php echo get_the_date('d/m/Y'); ?></td>
                                <td class="col-modified"><?php echo get_the_modified_date('d/m/Y'); ?></td>
                                <td class="col-category"><?php echo implode(', ', $term_names); ?></td>
                                <td class="col-actions">
                                    <div class="action-buttons-container">
                                        <button type="button" class="action-btn edit-category-btn" 
                                                data-post-id="<?php echo $post_id; ?>"
                                                data-tooltip="แก้ไขหมวดหมู่ของโพสต์นี้"
                                                data-current-terms="<?php echo esc_attr(implode(',', $post_term_ids)); ?>">
                                            <i class="dashicons dashicons-category"></i>
                                            แก้ไขหมวดหมู่
                                        </button>
                                        
                                        <button type="button" class="action-btn delete-post-btn" 
                                                data-post-id="<?php echo $post_id; ?>"
                                                data-tooltip="ลบโพสต์นี้ออกจากระบบ"
                                                data-post-title="<?php echo esc_attr(get_the_title()); ?>">
                                            <i class="dashicons dashicons-trash"></i>
                                            ลบโพสต์
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <?php endwhile; ?>
                    </tbody>
                </table>
            </div>
            
            <?php if ($news_query->max_num_pages > 1) : ?>
                <div class="news-posts-pagination">
                    <?php
                    echo paginate_links(array(
                        'base' => add_query_arg('paged', '%#%'),
                        'format' => '',
                        'prev_text' => '<span class="dashicons dashicons-arrow-left-alt2"></span> ก่อนหน้า',
                        'next_text' => 'ถัดไป <span class="dashicons dashicons-arrow-right-alt2"></span>',
                        'total' => $news_query->max_num_pages,
                        'current' => max(1, get_query_var('paged')),
                        'mid_size' => 1,
                    ));
                    ?>
                </div>
            <?php endif; ?>
            
            <div class="news-posts-summary">
                <p>แสดงผล <?php echo $news_query->post_count; ?> รายการ จาก <?php echo $news_query->found_posts; ?> รายการ</p>
            </div>
            
        <?php else : ?>
            <div class="news-posts-no-results">ไม่พบโพสต์ที่ตรงกับเงื่อนไข</div>
        <?php endif; ?>
        
        <?php wp_reset_postdata(); ?>
    </div>
    
    <!-- Edit Category Modal -->
    <div id="edit-category-modal" class="news-modal">
        <div class="news-modal-content">
            <span class="news-modal-close">&times;</span>
            <h3>แก้ไขหมวดหมู่</h3>
            <form id="update-category-form">
                <input type="hidden" id="edit-post-id" name="post_id" value="">
                <div class="form-group">
                    <label for="new-category">เลือกหมวดหมู่:</label>
                    <select id="new-category" name="new_term_id" class="new-category-select" multiple>
                        <?php foreach ($terms as $term) : ?>
                            <option value="<?php echo esc_attr($term->term_id); ?>">
                                <?php echo esc_html($term->name); ?>
                            </option>
                        <?php endforeach; ?>
                    </select>
                    <p class="form-description">เลือกได้หลายหมวดหมู่โดยกด Ctrl (Windows) หรือ Command (Mac) ค้างไว้ขณะคลิก</p>
                </div>
                <div class="form-actions">
                    <button type="submit" class="update-category-submit">บันทึก</button>
                    <button type="button" class="cancel-modal">ยกเลิก</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Delete Post Modal -->
    <div id="delete-post-modal" class="news-modal">
        <div class="news-modal-content">
            <span class="news-modal-close">&times;</span>
            <h3>ยืนยันการลบ</h3>
            <p class="delete-confirmation-message">
                <span class="dashicons dashicons-warning"></span> 
                คุณต้องการลบโพสต์ "<span id="delete-post-title"></span>" ใช่หรือไม่? 
                <br><br>
                <strong>หมายเหตุ:</strong> คุณจะไม่สามารถกู้คืนข้อมูลนี้ได้อีก
            </p>
            <input type="hidden" id="delete-post-id" value="">
            <div class="form-actions">
                <button type="button" class="confirm-delete-btn">ยืนยันการลบ</button>
                <button type="button" class="cancel-modal">ยกเลิก</button>
            </div>
        </div>
    </div>
    
    <!-- Notification -->
    <div id="news-notification" class="news-notification">
        <div class="news-notification-content">
            <span class="news-notification-message"></span>
        </div>
    </div>
    <?php
    // Return the buffered content
    return ob_get_clean();
}

/**
 * AJAX handler for updating post category
 */
function update_news_category_ajax_handler() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'news_posts_table_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        wp_die();
    }
    
    // Check user permissions
    if (!current_user_can('edit_posts')) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์แก้ไขโพสต์'));
        wp_die();
    }
    
    // Get parameters
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $new_term_ids = isset($_POST['new_term_ids']) ? array_map('intval', (array) $_POST['new_term_ids']) : array();
    
    // Validate parameters
    if ($post_id <= 0) {
        wp_send_json_error(array('message' => 'รหัสโพสต์ไม่ถูกต้อง'));
        wp_die();
    }
    
    // Check if the post exists and is of the correct type
    $post = get_post($post_id);
    if (!$post || $post->post_type !== 'news') {
        wp_send_json_error(array('message' => 'ไม่พบโพสต์หรือโพสต์ไม่ใช่ประเภทข่าวสาร'));
        wp_die();
    }
    
    // Update the post's terms
    $result = wp_set_object_terms($post_id, $new_term_ids, 'tnews');
    
    if (is_wp_error($result)) {
        wp_send_json_error(array('message' => $result->get_error_message()));
        wp_die();
    }
    
    // Get the updated term names for response
    $updated_terms = get_the_terms($post_id, 'tnews');
    $term_names = array();
    
    if ($updated_terms && !is_wp_error($updated_terms)) {
        foreach ($updated_terms as $term) {
            $term_names[] = $term->name;
        }
    }
    
    $term_names_str = !empty($term_names) ? implode(', ', $term_names) : 'ไม่มีหมวดหมู่';
    
    // Log the activity if needed
    do_action('news_post_category_updated', $post_id, $new_term_ids);
    
    wp_send_json_success(array(
        'message' => 'อัพเดตหมวดหมู่เรียบร้อยแล้ว',
        'term_names' => $term_names_str,
        'post_id' => $post_id
    ));
    
    wp_die();
}

/**
 * AJAX handler for deleting a post
 */
function delete_news_post_ajax_handler() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'news_posts_table_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        wp_die();
    }
    
    // Check user permissions
    if (!current_user_can('delete_posts')) {
        wp_send_json_error(array('message' => 'คุณไม่มีสิทธิ์ลบโพสต์'));
        wp_die();
    }
    
    // Get post ID
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    
    // Validate post ID
    if ($post_id <= 0) {
        wp_send_json_error(array('message' => 'รหัสโพสต์ไม่ถูกต้อง'));
        wp_die();
    }
    
    // Check if the post exists and is of the correct type
    $post = get_post($post_id);
    if (!$post || $post->post_type !== 'news') {
        wp_send_json_error(array('message' => 'ไม่พบโพสต์หรือโพสต์ไม่ใช่ประเภทข่าวสาร'));
        wp_die();
    }
    
    // Track post terms before deletion for statistics purposes
    $post_terms = wp_get_post_terms($post_id, 'tnews', array('fields' => 'ids'));
    
    // Delete the post
    $result = wp_delete_post($post_id, true); // true = force delete (skip trash)
    
    if (!$result) {
        wp_send_json_error(array('message' => 'เกิดข้อผิดพลาดในการลบโพสต์'));
        wp_die();
    }
    
    // Log the deletion if needed
    do_action('news_post_deleted', $post_id, $post->post_title, $post_terms);
    
    wp_send_json_success(array(
        'message' => 'ลบโพสต์เรียบร้อยแล้ว',
        'post_id' => $post_id
    ));
    
    wp_die();
}

/**
 * Add custom column for post views in admin
 */
function add_news_posts_admin_columns($columns) {
    $new_columns = array();
    
    foreach ($columns as $key => $value) {
        $new_columns[$key] = $value;
        
        // Add views column after title
        if ($key === 'title') {
            $new_columns['post_views'] = 'การเข้าชม';
        }
    }
    
    return $new_columns;
}
add_filter('manage_news_posts_columns', 'add_news_posts_admin_columns');

/**
 * Display post views in admin column
 */
function display_news_posts_admin_columns($column, $post_id) {
    if ($column === 'post_views') {
        $views = get_post_meta($post_id, 'post_views', true);
        echo !empty($views) ? number_format($views) : '0';
    }
}
add_action('manage_news_posts_custom_column', 'display_news_posts_admin_columns', 10, 2);

/**
 * Make post views column sortable in admin
 */
function make_news_posts_views_sortable($columns) {
    $columns['post_views'] = 'post_views';
    return $columns;
}
add_filter('manage_edit-news_sortable_columns', 'make_news_posts_views_sortable');

/**
 * Handle sorting by post views in admin
 */
function news_posts_views_orderby($query) {
    if (!is_admin() || !$query->is_main_query()) {
        return;
    }
    
    if ($query->get('orderby') === 'post_views') {
        $query->set('meta_key', 'post_views');
        $query->set('orderby', 'meta_value_num');
    }
}
add_action('pre_get_posts', 'news_posts_views_orderby');

/**
 * Helper function to log post deletion for statistics
 */
function track_news_post_deletion($post_id, $post_title, $term_ids) {
    global $wpdb;
    
    $table_name = $wpdb->prefix . 'deleted_posts_log';
    
    // Check if table exists, if not, skip logging
    if ($wpdb->get_var("SHOW TABLES LIKE '$table_name'") != $table_name) {
        return;
    }
    
    $wpdb->insert(
        $table_name,
        array(
            'post_id' => $post_id,
            'post_title' => $post_title,
            'post_type' => 'news',
            'deleted_date' => current_time('mysql'),
            'tax_terms' => is_array($term_ids) ? implode(',', $term_ids) : '',
        )
    );
}
add_action('news_post_deleted', 'track_news_post_deletion', 10, 3);

/**
 * Helper function to check if a date filter is active
 */
function is_news_date_filter_active() {
    return isset($_GET['date']) && !empty($_GET['date']);
}

/**
 * Helper function to get the current date filter
 */
function get_news_current_date_filter() {
    if (is_news_date_filter_active()) {
        return sanitize_text_field($_GET['date']);
    }
    return '';
}



/***** ฟังก์ชั่นแสดง PostLoop จาก Standard Post ******/


define('STD_EXCERPT_WORDS', 150); // กำหนดค่าคงที่เพื่อใช้ทั้งในฟังก์ชัน shortcode และ AJAX handler

// Make sure we don't expose any info if called directly
if (!defined('ABSPATH')) {
    exit;
}

/**
 * Register shortcode and necessary scripts/styles
 */
function std_looppost_init() {
    // Register shortcode
    add_shortcode('std_looppost', 'std_looppost_shortcode');
    
    // Register scripts and styles
    add_action('wp_enqueue_scripts', 'std_looppost_enqueue_scripts');
    
    // Register AJAX handlers
    add_action('wp_ajax_std_looppost_load', 'std_looppost_ajax_handler');
    add_action('wp_ajax_nopriv_std_looppost_load', 'std_looppost_ajax_handler');
}
add_action('init', 'std_looppost_init');

/**
 * Enqueue necessary scripts and styles
 */
function std_looppost_enqueue_scripts() {
    // Only enqueue if the shortcode is used on the page
    global $post;
    if (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'std_looppost')) {
        // Enqueue CSS
        wp_enqueue_style(
            'std-looppost-style',
            get_stylesheet_directory_uri() . '/css/std-looppost.css',
            array(),
            '1.0.1'
        );
        
        // Enqueue JavaScript
        wp_enqueue_script(
            'std-looppost-script',
            get_stylesheet_directory_uri() . '/js/std-looppost.js',
            array('jquery'),
            '1.0.1',
            true
        );
        
        // Pass data to JavaScript
        wp_localize_script(
            'std-looppost-script',
            'stdLoopPost',
            array(
                'ajaxurl' => admin_url('admin-ajax.php'),
                'nonce' => wp_create_nonce('std_looppost_nonce'),
                'no_image_url' => 'https://standard.wpdevs.co/wp-content/uploads/2025/01/no-images-scaled-2.jpg'
            )
        );
    }
}

/**
 * Convert Gregorian year to Buddhist year (พ.ศ.)
 */
function std_convert_to_buddhist_year($gregorian_date) {
    $date_obj = date_create($gregorian_date);
    if (!$date_obj) {
        return $gregorian_date; // Return original if parsing fails
    }
    
    $year = intval(date_format($date_obj, 'Y')) + 543; // Add 543 to convert to Buddhist year
    $month_day = date_format($date_obj, 'd M');
    
    return $month_day . ' ' . $year;
}

/**
 * Get available years for filtering (2560-2568 พ.ศ.)
 */
function std_get_filter_years() {
    $years = array();
    // Convert 2017-2025 to 2560-2568
    for ($i = 2017; $i <= 2025; $i++) {
        $buddhist_year = $i + 543;
        $years[$i] = $buddhist_year;
    }
    return $years;
}

/**
 * Shortcode callback function
 */
function std_looppost_shortcode($atts) {
    // Extract shortcode attributes
    $atts = shortcode_atts(
        array(
            'posts_per_page' => 15,
        ),
        $atts,
        'std_looppost'
    );
    
    // Start output buffering
    ob_start();
    
    // Get filter years
    $filter_years = std_get_filter_years();
    
    // Generate unique ID for this instance
    $unique_id = 'std-looppost-' . uniqid();
    
    // ดึงข้อมูล Terms จาก Taxonomy "tnews"
    $std_terms = get_terms(array(
        'taxonomy' => 'tnews',
        'hide_empty' => false,
    ));
    
    // UI container
    ?>
    <div class="std-looppost-container" id="<?php echo esc_attr($unique_id); ?>" data-posts-per-page="<?php echo esc_attr($atts['posts_per_page']); ?>">

        <!-- Controls Section -->
        <div class="std-looppost-controls">
            <div class="std-looppost-search-filter">
                <div class="std-looppost-search">
                    <input type="text" class="std-looppost-search-input" placeholder="ค้นหา..." aria-label="ค้นหามาตรฐาน">
                </div>
                
                <div class="std-looppost-filters">
                    <div class="std-looppost-year-filter">
                        <label for="year-select-<?php echo esc_attr($unique_id); ?>" class="screen-reader-text">เลือกปีที่ต้องการดู</label>
                        <select id="year-select-<?php echo esc_attr($unique_id); ?>" class="std-looppost-year-select" aria-label="เลือกปีที่ต้องการดู">
                            <option value="">ทุกปี</option>
                            <?php foreach ($filter_years as $year_value => $year_label) : ?>
                                <option value="<?php echo esc_attr($year_value); ?>"><?php echo esc_html($year_label); ?></option>
                            <?php endforeach; ?>
                        </select>
                    </div>
                    
                    <div class="std-looppost-custom-filters">
                        <!-- แทนที่ปุ่มด้วย Dropdown สำหรับ Term ในหมวดหมู่ tnews -->
                        <label for="taxonomy-select-<?php echo esc_attr($unique_id); ?>" class="screen-reader-text">เลือกประเภทมาตรฐาน</label>
                        <select id="taxonomy-select-<?php echo esc_attr($unique_id); ?>" class="std-looppost-taxonomy-select" aria-label="เลือกประเภทมาตรฐาน">
                            <option value="">ทุกประเภทมาตรฐาน</option>
                            <?php 
                            if (!empty($std_terms) && !is_wp_error($std_terms)) {
                                foreach ($std_terms as $term) {
                                    // นับจำนวนโพสต์ในแต่ละ Term
                                    $term_count = get_term_post_count($term->term_id, 'tnews', 'news');
                                    echo '<option value="' . esc_attr($term->slug) . '">' . 
                                         esc_html($term->name) . ' (' . $term_count . ')' . 
                                         '</option>';
                                }
                            }
                            ?>
                        </select>
                        <button class="std-looppost-filter-reset">แสดงทั้งหมด</button>
                    </div>
                </div>
                
                <div class="std-looppost-sort-view">
                    <div class="std-looppost-sort">
                        <label for="sort-select-<?php echo esc_attr($unique_id); ?>" class="screen-reader-text">เรียงลำดับตาม</label>
                        <select id="sort-select-<?php echo esc_attr($unique_id); ?>" class="std-looppost-sort-select" aria-label="เรียงลำดับตาม">
                            <option value="newest">ล่าสุด</option>
                            <option value="oldest">เก่าสุด</option>
                            <option value="title_asc">ชื่อเรื่อง ก-ฮ</option>
                            <option value="title_desc">ชื่อเรื่อง ฮ-ก</option>
                        </select>
                    </div>
                    
                    <div class="std-looppost-view-toggle">
                        <button class="std-looppost-view-btn" data-view="card" title="มุมมองการ์ด">
                            <span class="dashicons dashicons-grid-view"></span>
                        </button>
                        <button class="std-looppost-view-btn active" data-view="table" title="มุมมองตาราง">
                            <span class="dashicons dashicons-editor-table"></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Table Header (แสดงเฉพาะในมุมมองตาราง) -->
        <div class="std-looppost-table-header">
            <div>เลขที่</div>
            <div>ชื่อมาตรฐาน</div>
            <div>วัตถุประสงค์</div>
        </div>
        
        <!-- Content Section -->
        <div class="std-looppost-content">
            <div class="std-looppost-posts-container table-view">
                <?php
                // ดึงข้อมูลโพสต์เริ่มต้นด้วย PHP โดยตรง
                $args = array(
                    'post_type' => 'news',
                    'post_status' => 'publish',
                    'posts_per_page' => $atts['posts_per_page'],
                    'orderby' => 'date',
                    'order' => 'DESC'
                );
                
                $query = new WP_Query($args);
                
                if ($query->have_posts()) :
                    while ($query->have_posts()) : $query->the_post();
                        $post_id = get_the_ID();
                        
                        // Get featured image or fallback for card view
                        $image_url = get_the_post_thumbnail_url($post_id, 'medium');
                        if (!$image_url) {
                            $image_url = 'https://standard.wpdevs.co/wp-content/uploads/2025/01/no-images-scaled-2.jpg';
                        }
                        
                        // Convert date to Buddhist calendar
                        $date = std_convert_to_buddhist_year(get_the_date('Y-m-d'));
                        
                        // Get custom fields
                        $at_content = get_post_meta($post_id, 'at_content', true);
                        $excerpt = wp_trim_words($at_content, STD_EXCERPT_WORDS, '...');
                        $excerpt_table = mb_substr(strip_tags($at_content), 0, 200) . (mb_strlen(strip_tags($at_content)) > 200 ? '...' : '');
                        
                        // Get post views
                        $post_views = get_post_meta($post_id, 'post_views', true);
                        if (empty($post_views)) {
                            $post_views = 0;
                        }
                        
                        // ดึงค่า Custom fields สำหรับ Badge
                        $mrdh_value = get_post_meta($post_id, 'at_docnum_2', true);
                        $msprr_value = get_post_meta($post_id, 'at_docnum_1', true);
                        
                        // ตรวจสอบว่ามีค่าหรือไม่
                        $has_mrdh = !empty($mrdh_value);
                        $has_msprr = !empty($msprr_value);
                        
                        // ดึงวันที่อัพเดตโพส (ถ้ามี)
                        $modified_date = get_the_modified_date('Y-m-d');
                        $is_modified = $modified_date != get_the_date('Y-m-d');
                        $modified_date_display = $is_modified ? std_convert_to_buddhist_year($modified_date) : '';
                        
                        // กำหนดหมายเลขเอกสารที่จะแสดง
                        $doc_number = '';
                        if ($has_mrdh) {
                            $doc_number = '<span class="doc-number mrdh">เลขที่ มรด. ' . esc_html($mrdh_value) . '</span>';
                        } elseif ($has_msprr) {
                            $doc_number = '<span class="doc-number msprr">เลขที่ มสพร. ' . esc_html($msprr_value) . '</span>';
                        }
                        
                        // เริ่มแสดงโพสต์ในรูปแบบตาราง (Table View)
                        ?>
                        <div class="std-looppost-table-row" data-post-id="<?php echo esc_attr($post_id); ?>" tabindex="0">
                            <a href="<?php the_permalink(); ?>" class="std-looppost-table-link">
                                <div class="std-looppost-table-cell doc-number-cell<?php echo $has_mrdh ? ' mrdh' : ($has_msprr ? ' msprr' : ''); ?>">
                                    <?php echo $doc_number; ?>
                                </div>
                                <div class="std-looppost-table-cell title-cell">
                                    <div class="post-title"><?php the_title(); ?></div>
                                    <div class="post-date">
                                        <span class="publish-date">ประกาศ: <?php echo esc_html($date); ?></span>
                                        <?php if ($is_modified) : ?>
                                            <span class="modified-date">อัพเดต: <?php echo esc_html($modified_date_display); ?></span>
                                        <?php endif; ?>
                                    </div>
                                </div>
                                <div class="std-looppost-table-cell content-cell">
                                    <?php echo esc_html($excerpt_table); ?>
                                </div>
                            </a>
                        </div>
                    <?php endwhile;
                    
                    // Reset post data
                    wp_reset_postdata();
                    
                else : ?>
                    <div class="std-looppost-no-results">
                        <p>ไม่พบโพสต์ที่ตรงตามเงื่อนไขการค้นหา</p>
                    </div>
                <?php endif; ?>
                
                <!-- Skeleton loader (ซ่อนไว้เมื่อมีข้อมูลเริ่มต้น) -->
                <div class="std-looppost-skeleton" style="display: none;">
                    <?php for ($i = 0; $i < $atts['posts_per_page']; $i++) : ?>
                        <div class="std-looppost-skeleton-table-row">
                            <div class="std-looppost-skeleton-cell doc-number-cell"></div>
                            <div class="std-looppost-skeleton-cell title-cell"></div>
                            <div class="std-looppost-skeleton-cell content-cell"></div>
                        </div>
                    <?php endfor; ?>
                </div>
            </div>
            
            <!-- Pagination -->
            <div class="std-looppost-pagination">
                <button class="std-looppost-load-more">โหลดเพิ่ม</button>
                <div class="std-looppost-page-numbers"></div>
            </div>
        </div>
    </div>
    <?php
    
    // Add script to initialize AJAX functionality
    ?>
    <script>
    jQuery(document).ready(function($) {
        // Initialize the looppost
        $('#<?php echo esc_js($unique_id); ?>').trigger('std_looppost_load');
    });
    </script>
    <?php

    // ดึงข้อมูลโพสต์เริ่มต้นด้วย PHP โดยตรง
    $args = array(
        'post_type' => 'news',
        'post_status' => 'publish',
        'posts_per_page' => $atts['posts_per_page'],
        'orderby' => 'date',
        'order' => 'DESC',
        'meta_query' => array(
            'relation' => 'OR',
            array(
                'key' => 'at_status',
                'value' => 'inactive',
                'compare' => '!=',
            ),
            array(
                'key' => 'at_status',
                'compare' => 'NOT EXISTS',
            )
        )
    );
    
    // Return the buffered content
    return ob_get_clean();
}

/**
 * ฟังก์ชันสำหรับนับจำนวนโพสต์ในแต่ละ Term
 */
function get_term_post_count($term_id, $taxonomy, $post_type = 'post') {
    $args = array(
        'post_type' => $post_type,
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'tax_query' => array(
            array(
                'taxonomy' => $taxonomy,
                'field' => 'term_id',
                'terms' => $term_id,
            ),
        ),
    );
    
    $query = new WP_Query($args);
    return $query->found_posts;
}

/**
 * AJAX handler for loading posts
 */
function std_looppost_ajax_handler() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'std_looppost_nonce')) {
        wp_send_json_error('Invalid security token');
        wp_die();
    }
    
    // Get parameters from request
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $year = isset($_POST['year']) ? intval($_POST['year']) : '';
    $custom_field = isset($_POST['custom_field']) ? sanitize_text_field($_POST['custom_field']) : '';
    $taxonomy_term = isset($_POST['taxonomy_term']) ? sanitize_text_field($_POST['taxonomy_term']) : '';
    $sort = isset($_POST['sort']) ? sanitize_text_field($_POST['sort']) : 'newest';
    $view = isset($_POST['view']) ? sanitize_text_field($_POST['view']) : 'table';
    $paged = isset($_POST['paged']) ? intval($_POST['paged']) : 1;
    $posts_per_page = isset($_POST['posts_per_page']) ? intval($_POST['posts_per_page']) : 15;
    
    // Set up query arguments
    $args = array(
        'post_type' => 'news',
        'post_status' => 'publish',
        'posts_per_page' => $posts_per_page,
        'paged' => $paged
    );
    
    // Add search parameter if provided
    if (!empty($search)) {
        $args['s'] = $search;
    }
    
    // Add year filter if provided
    if (!empty($year)) {
        $args['date_query'] = array(
            array(
                'year' => $year
            )
        );
    }
    
    // Add taxonomy filter if provided
    if (!empty($taxonomy_term)) {
        $args['tax_query'] = array(
            array(
                'taxonomy' => 'tnews',
                'field' => 'slug',
                'terms' => $taxonomy_term
            )
        );
    }
    
    // สร้าง meta_query สำหรับกรองโพสต์ที่ inactive
    $inactive_filter = array(
        'relation' => 'OR',
        array(
            'key' => 'at_status',
            'value' => 'inactive',
            'compare' => '!=',
        ),
        array(
            'key' => 'at_status',
            'compare' => 'NOT EXISTS',
        )
    );
    
    // Add custom field filter if provided
    if (!empty($custom_field)) {
        $args['meta_query'] = array(
            'relation' => 'AND',
            $inactive_filter,
            array(
                'key' => $custom_field,
                'value' => '',  // กรองค่าว่างออก
                'compare' => '!=', // เลือกเฉพาะที่ไม่เท่ากับค่าว่าง
                'type' => 'CHAR' // ระบุประเภทข้อมูลเพื่อประสิทธิภาพในการค้นหา
            )
        );
    } else {
        $args['meta_query'] = $inactive_filter;
    }
    
    // Add sorting parameters
    switch ($sort) {
        case 'oldest':
            $args['orderby'] = 'date';
            $args['order'] = 'ASC';
            break;
        case 'title_asc':
            $args['orderby'] = 'title';
            $args['order'] = 'ASC';
            break;
        case 'title_desc':
            $args['orderby'] = 'title';
            $args['order'] = 'DESC';
            break;
        case 'newest':
        default:
            $args['orderby'] = 'date';
            $args['order'] = 'DESC';
            break;
    }
    
    // Execute query
    $query = new WP_Query($args);
    
    // Prepare response data
    $response = array(
        'posts' => array(),
        'max_pages' => $query->max_num_pages,
        'found_posts' => $query->found_posts
    );
    
    // Loop through posts
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            
            // Get post data
            $post_id = get_the_ID();
            $title = get_the_title();
            $permalink = get_permalink();
            $date = std_convert_to_buddhist_year(get_the_date('Y-m-d'));
            
            // Get featured image or fallback
            $image_url = get_the_post_thumbnail_url($post_id, 'medium');
            if (!$image_url) {
                $image_url = 'https://standard.wpdevs.co/wp-content/uploads/2025/01/no-images-scaled-2.jpg';
            }
            
            // Get custom fields
            $at_content = get_post_meta($post_id, 'at_content', true);
            $excerpt = wp_trim_words($at_content, STD_EXCERPT_WORDS, '...');
            $excerpt_table = mb_substr(strip_tags($at_content), 0, 200) . (mb_strlen(strip_tags($at_content)) > 200 ? '...' : '');
            
            // Get post views
            $post_views = get_post_meta($post_id, 'post_views', true);
            if (empty($post_views)) {
                $post_views = 0;
            }
            
            // ดึงค่า Custom fields สำหรับหมายเลขเอกสาร
            $mrdh_value = get_post_meta($post_id, 'at_docnum_2', true);
            $msprr_value = get_post_meta($post_id, 'at_docnum_1', true);
            
            // ตรวจสอบว่ามีค่าหรือไม่
            $has_mrdh = !empty($mrdh_value);
            $has_msprr = !empty($msprr_value);
            
            // ดึงวันที่อัพเดตโพส (ถ้ามี)
            $modified_date = get_the_modified_date('Y-m-d');
            $is_modified = $modified_date != get_the_date('Y-m-d');
            $modified_date_display = $is_modified ? std_convert_to_buddhist_year($modified_date) : '';
            
            // Add post to response
            $response['posts'][] = array(
                'id' => $post_id,
                'title' => $title,
                'permalink' => $permalink,
                'image_url' => $image_url,
                'date' => $date,
                'excerpt' => $excerpt,
                'excerpt_table' => $excerpt_table,
                'views' => $post_views,
                'has_mrdh' => $has_mrdh,
                'has_msprr' => $has_msprr,
                'mrdh_value' => $mrdh_value,
                'msprr_value' => $msprr_value,
                'is_modified' => $is_modified,
                'modified_date' => $modified_date_display
            );
        }
    }
    
    // Reset post data
    wp_reset_postdata();
    
    // Generate HTML for posts
    ob_start();
    
    if (!empty($response['posts'])) {
        foreach ($response['posts'] as $post) {
            if ($view === 'table') {
                // กำหนดหมายเลขเอกสารที่จะแสดง
                $doc_number = '';
                if ($post['has_mrdh']) {
                    $doc_number = '<span class="doc-number mrdh">เลขที่ มรด. ' . esc_html($post['mrdh_value']) . '</span>';
                } elseif ($post['has_msprr']) {
                    $doc_number = '<span class="doc-number msprr">เลขที่ มสพร. ' . esc_html($post['msprr_value']) . '</span>';
                }
                ?>
                <div class="std-looppost-table-row" data-post-id="<?php echo esc_attr($post['id']); ?>" tabindex="0">
                    <a href="<?php echo esc_url($post['permalink']); ?>" class="std-looppost-table-link">
                        <div class="std-looppost-table-cell doc-number-cell<?php echo $post['has_mrdh'] ? ' mrdh' : ($post['has_msprr'] ? ' msprr' : ''); ?>">
                            <?php echo $doc_number; ?>
                        </div>
                        <div class="std-looppost-table-cell title-cell">
                            <div class="post-title"><?php echo esc_html($post['title']); ?></div>
                            <div class="post-date">
                                <span class="publish-date">ประกาศ: <?php echo esc_html($post['date']); ?></span>
                                <?php if ($post['is_modified']) : ?>
                                    <span class="modified-date">อัพเดต: <?php echo esc_html($post['modified_date']); ?></span>
                                <?php endif; ?>
                            </div>
                        </div>
                        <div class="std-looppost-table-cell content-cell" title="<?php echo esc_attr($post['excerpt_table']); ?>">
                            <?php echo esc_html($post['excerpt_table']); ?>
                        </div>
                    </a>
                </div>
                <?php
            } else { // Card view
                ?>
                <div class="std-looppost-item">
                    <div class="std-looppost-image" style="background-image: url('<?php echo esc_url($post['image_url']); ?>');">
                        <?php 
                        // ถ้ามี มรด. ให้แสดง มรด. ก่อน (มีความสำคัญมากกว่า)
                        if ($post['has_mrdh']) : ?>
                            <span class="std-looppost-badge mrdh">มรด. <?php echo esc_html($post['mrdh_value']); ?></span>
                        <?php 
                        // ถ้าไม่มี มรด. แต่มี มสพร. ให้แสดง มสพร.
                        elseif ($post['has_msprr']) : ?>
                            <span class="std-looppost-badge msprr">มสพร. <?php echo esc_html($post['msprr_value']); ?></span>
                        <?php endif; ?>
                    </div>
                    
                    <div class="std-looppost-content-wrapper">
                        <div class="std-looppost-meta">
                            <span class="std-looppost-date"><?php echo esc_html($post['date']); ?></span>
                            <span class="std-looppost-views">
                                <span class="dashicons dashicons-visibility"></span> <?php echo number_format($post['views']); ?> ครั้ง
                            </span>
                        </div>
                        
                        <h3 class="std-looppost-title">
                            <a href="<?php echo esc_url($post['permalink']); ?>"><?php echo esc_html($post['title']); ?></a>
                        </h3>
                        
                        <div class="std-looppost-excerpt">
                            <?php echo esc_html($post['excerpt']); ?>
                        </div>
                        
                        <div class="std-looppost-read-more">
                            <a href="<?php echo esc_url($post['permalink']); ?>" class="std-looppost-read-more-btn">อ่านต่อ</a>
                        </div>
                    </div>
                </div>
                <?php
            }
        }
    } else {
        ?>
        <div class="std-looppost-no-results">
            <p>ไม่พบโพสต์ที่ตรงตามเงื่อนไขการค้นหา</p>
        </div>
        <?php
    }
    
    $posts_html = ob_get_clean();
    
    // Generate pagination HTML
    ob_start();
    
    if ($response['max_pages'] > 1) {
        echo '<div class="std-looppost-pagination-numbers">';
        
        $total_pages = $response['max_pages'];
        $current_page = $paged;
        
        // Previous page
        if ($current_page > 1) {
            echo '<a href="#" class="std-looppost-page-number" data-page="' . ($current_page - 1) . '">«</a>';
        }
        
        // Page numbers
        for ($i = 1; $i <= $total_pages; $i++) {
            if ($i == $current_page) {
                echo '<span class="std-looppost-page-number current">' . $i . '</span>';
            } else {
                if ($i <= 3 || $i >= $total_pages - 2 || abs($i - $current_page) <= 1) {
                    echo '<a href="#" class="std-looppost-page-number" data-page="' . $i . '">' . $i . '</a>';
                } elseif (abs($i - $current_page) == 2) {
                    echo '<span class="std-looppost-page-number dots">...</span>';
                }
            }
        }
        
        // Next page
        if ($current_page < $total_pages) {
            echo '<a href="#" class="std-looppost-page-number" data-page="' . ($current_page + 1) . '">»</a>';
        }
        
        echo '</div>';
    }
    
    $pagination_html = ob_get_clean();
    
    // Add HTML to response
    $response['html'] = $posts_html;
    $response['pagination'] = $pagination_html;
    
    // Send response
    wp_send_json_success($response);
    wp_die();
}

/**
 * ลงทะเบียน CSS สำหรับปรับแต่ง Standard Loop Post
 */
function std_looppost_custom_styles() {
    // ตรวจสอบว่ามีการใช้ Shortcode หรือไม่
    global $post;
    if (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'std_looppost')) {
        wp_enqueue_style(
            'std-looppost-custom-style',
            get_stylesheet_directory_uri() . '/css/std-looppost-custom.css',
            array('std-looppost-style'), // ระบุว่าต้องโหลดหลัง CSS หลัก
            '1.0.1'
        );
    }
}
add_action('wp_enqueue_scripts', 'std_looppost_custom_styles', 20); // ใช้ priority 20 เพื่อให้โหลดหลัง CSS หลัก



/***** DGA TAG  *****/

// If this file is called directly, abort.
if (!defined('WPINC')) {
    die;
}

// Define plugin constants
define('DGA_TAG_VERSION', '1.0.0');
define('DGA_TAG_PATH', plugin_dir_path(__FILE__));
define('DGA_TAG_URL', plugin_dir_url(__FILE__));

/**
 * Function to register the shortcode and all necessary scripts/styles
 */
function dga_tag_init() {
    // Register shortcode
    add_shortcode('dga_tag', 'dga_tag_shortcode');
    
    // Register scripts and styles
    wp_register_style('dga-tag-style', get_stylesheet_directory_uri() . '/css/dga-tag.css', array(), DGA_TAG_VERSION);
    wp_register_script('dga-tag-script', get_stylesheet_directory_uri() . '/js/dga-tag.js', array('jquery'), DGA_TAG_VERSION, true);
    
    // Localize script for AJAX
    wp_localize_script('dga-tag-script', 'dgaTagAjax', array(
        'ajaxurl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('dga-tag-nonce')
    ));
}
add_action('init', 'dga_tag_init');

/**
 * The shortcode function
 */
function dga_tag_shortcode($atts) {
    // Enqueue necessary styles and scripts
    wp_enqueue_style('dga-tag-style');
    wp_enqueue_script('dga-tag-script');
    
    // Parse shortcode attributes
    $atts = shortcode_atts(array(
        'limit' => 20, // Default number of tags to display
    ), $atts);
    
    // Start output buffering
    ob_start();
    
    // Get current user
    $current_user = wp_get_current_user();
    $can_edit = current_user_can('edit_posts');
    
    // Display tag management UI for admin/editor
    if ($can_edit) {
        ?>
        <div class="dga-tag-admin" aria-labelledby="dga-tag-admin-heading">
            <h3 id="dga-tag-admin-heading" class="dga-tag-admin-heading">จัดการแท็ก</h3>
            <div class="dga-tag-form">
                <input type="text" id="dga-tag-input" class="dga-tag-input" placeholder="ใส่แท็กใหม่" aria-label="ใส่แท็กใหม่">
                <button id="dga-tag-add" class="dga-tag-button" aria-label="เพิ่มแท็กใหม่">เพิ่มแท็ก</button>
            </div>
            <div id="dga-tag-message" class="dga-tag-message" role="status" aria-live="polite"></div>
        </div>
        <?php
    }
    
    // Display tags
    ?>
    <div class="dga-tag-container" aria-labelledby="dga-tag-heading">
        <h3 id="dga-tag-heading" class="dga-tag-heading">แท็ก</h3>
        <div id="dga-tag-cloud" class="dga-tag-cloud" role="list" aria-label="รายการแท็ก">
            <!-- Tags will be loaded via AJAX -->
            <div class="dga-tag-loading">กำลังโหลดแท็ก...</div>
        </div>
    </div>
    <?php
    
    // Return the buffered content
    return ob_get_clean();
}

/**
 * AJAX handler to get tags
 */
function dga_tag_get_tags() {
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga-tag-nonce')) {
        wp_send_json_error('การตรวจสอบความปลอดภัยล้มเหลว');
    }
    
    // Get post ID if available
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    
    // Get all tags
    $tags = get_terms(array(
        'taxonomy' => 'post_tag',
        'hide_empty' => false,
    ));
    
    $tag_data = array();
    
    if (!empty($tags) && !is_wp_error($tags)) {
        foreach ($tags as $tag) {
            $tag_data[] = array(
                'id' => $tag->term_id,
                'name' => $tag->name,
                'slug' => $tag->slug,
                'count' => $tag->count,
                'link' => get_term_link($tag),
                'has_tag' => ($post_id > 0) ? has_tag($tag->term_id, $post_id) : false
            );
        }
    }
    
    wp_send_json_success($tag_data);
}
add_action('wp_ajax_dga_tag_get_tags', 'dga_tag_get_tags');
add_action('wp_ajax_nopriv_dga_tag_get_tags', 'dga_tag_get_tags');

/**
 * AJAX handler to add a new tag
 */
function dga_tag_add_tag() {
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga-tag-nonce')) {
        wp_send_json_error('การตรวจสอบความปลอดภัยล้มเหลว');
    }
    
    // Check user permissions
    if (!current_user_can('edit_posts')) {
        wp_send_json_error('คุณไม่มีสิทธิ์เพิ่มแท็ก');
    }
    
    // Get the tag name
    $tag_name = isset($_POST['tag_name']) ? sanitize_text_field($_POST['tag_name']) : '';
    
    if (empty($tag_name)) {
        wp_send_json_error('ชื่อแท็กไม่สามารถเว้นว่างได้');
    }
    
    // Create the tag if it doesn't exist
    $tag = wp_create_tag($tag_name);
    
    if (is_wp_error($tag)) {
        wp_send_json_error($tag->get_error_message());
    }
    
    wp_send_json_success(array(
        'message' => 'สร้างแท็กสำเร็จแล้ว',
        'tag' => get_term($tag['term_id'], 'post_tag')
    ));
}
add_action('wp_ajax_dga_tag_add_tag', 'dga_tag_add_tag');

/**
 * AJAX handler to assign a tag to a post
 */
function dga_tag_toggle_post_tag() {
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga-tag-nonce')) {
        wp_send_json_error('การตรวจสอบความปลอดภัยล้มเหลว');
    }
    
    // Check user permissions
    if (!current_user_can('edit_posts')) {
        wp_send_json_error('คุณไม่มีสิทธิ์แก้ไขโพสต์นี้');
    }
    
    // Get post and tag IDs
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $tag_id = isset($_POST['tag_id']) ? intval($_POST['tag_id']) : 0;
    $action = isset($_POST['action_type']) ? sanitize_text_field($_POST['action_type']) : 'add';
    
    if ($post_id <= 0 || $tag_id <= 0) {
        wp_send_json_error('ID โพสต์หรือแท็กไม่ถูกต้อง');
    }
    
    $tag = get_term($tag_id, 'post_tag');
    
    if (is_wp_error($tag)) {
        wp_send_json_error('ไม่พบแท็ก');
    }
    
    if ($action === 'add') {
        $result = wp_add_post_tags($post_id, $tag->name);
    } else {
        $result = wp_remove_object_terms($post_id, $tag_id, 'post_tag');
    }
    
    if (is_wp_error($result)) {
        wp_send_json_error($result->get_error_message());
    }
    
    wp_send_json_success(array(
        'message' => ($action === 'add') ? 'เพิ่มแท็กให้กับโพสต์แล้ว' : 'ลบแท็กออกจากโพสต์แล้ว',
        'tag_id' => $tag_id,
        'post_id' => $post_id,
        'action' => $action
    ));
}
add_action('wp_ajax_dga_tag_toggle_post_tag', 'dga_tag_toggle_post_tag');


/**** DGA USER TOKEN *****/

function dga_user_token_shortcode() {
    // Check if user is logged in
    if (!is_user_logged_in()) {
        return '<p>กรุณาเข้าสู่ระบบเพื่อจัดการ API TOKEN</p>';
    }
    
    // Enqueue required styles and scripts
    wp_enqueue_style('dga-user-token-css', get_stylesheet_directory_uri() . '/css/dga-user-token.css', array(), '1.0.0');
    wp_enqueue_script('dga-user-token-js', get_stylesheet_directory_uri() . '/js/dga-user-token.js', array('jquery'), '1.0.0', true);
    
    // Add AJAX URL to the script
    wp_localize_script('dga-user-token-js', 'dgaUserToken', array(
        'ajaxUrl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('dga_user_token_nonce')
    ));
    
    // Get current user and API key
    $current_user = wp_get_current_user();
    $current_api_key = get_user_meta($current_user->ID, 'api_key', true);
    $masked_api_key = $current_api_key ? substr($current_api_key, 0, 4) . '****' . substr($current_api_key, -4) : '';
    
    // Prepare output
    $output = '<div class="dga-user-token-container">';
    $output .= '<div class="dga-user-token-content">';
    
    if ($current_api_key) {
        $output .= '<div class="dga-token-info">';
        $output .= '<span class="dga-token-label">API TOKEN ปัจจุบัน:</span> ';
        $output .= '<span class="dga-token-value">' . esc_html($masked_api_key) . '</span>';
        $output .= '</div>';
        
        // Add buttons container with update and delete buttons
        $output .= '<div class="dga-token-actions">';
        $output .= '<button id="dga-update-token-btn" class="dga-btn dga-btn-primary">อัพเดต API TOKEN</button>';
        $output .= '<button id="dga-delete-token-btn" class="dga-btn dga-btn-danger">ลบ TOKEN</button>';
        $output .= '</div>';
    } else {
        // If no token exists, only show the update button
        $output .= '<button id="dga-update-token-btn" class="dga-btn dga-btn-primary">อัพเดต API TOKEN</button>';
    }
    
    $output .= '</div>'; // End of dga-user-token-content
    
    // Modal popup for update
    $output .= '
    <div id="dga-token-modal" class="dga-modal">
        <div class="dga-modal-content">
            <span class="dga-modal-close">&times;</span>
            <h2>อัพเดต API TOKEN</h2>
            <div class="dga-modal-body">
                <div class="dga-form-group">
                    <label for="dga-api-key">API KEY</label>
                    <input type="text" id="dga-api-key" class="dga-form-control" placeholder="กรอก API KEY ของคุณ">
                </div>
                <div class="dga-form-actions">
                    <button id="dga-save-token" class="dga-btn dga-btn-success">บันทึก</button>
                    <button id="dga-cancel-token" class="dga-btn dga-btn-secondary">ยกเลิก</button>
                </div>
            </div>
            <div id="dga-modal-message" class="dga-modal-message"></div>
        </div>
    </div>';
    
    // Confirmation modal for delete
    $output .= '
    <div id="dga-delete-modal" class="dga-modal">
        <div class="dga-modal-content">
            <span class="dga-modal-close">&times;</span>
            <h2>ลบ API TOKEN</h2>
            <div class="dga-modal-body">
                <p>คุณต้องการลบ API TOKEN ของคุณใช่หรือไม่?</p>
                <div class="dga-form-actions">
                    <button id="dga-confirm-delete" class="dga-btn dga-btn-danger">ยืนยันการลบ</button>
                    <button id="dga-cancel-delete" class="dga-btn dga-btn-secondary">ยกเลิก</button>
                </div>
            </div>
            <div id="dga-delete-modal-message" class="dga-modal-message"></div>
        </div>
    </div>';
    
    $output .= '</div>'; // End of dga-user-token-container
    
    return $output;
}
add_shortcode('dga_user_token', 'dga_user_token_shortcode');

/**
 * Helper function to get widget HTML content
 */
function dga_get_token_widget_content() {
    $current_user = wp_get_current_user();
    $current_api_key = get_user_meta($current_user->ID, 'api_key', true);
    $masked_api_key = $current_api_key ? substr($current_api_key, 0, 4) . '****' . substr($current_api_key, -4) : '';
    
    $output = '';
    
    if ($current_api_key) {
        $output .= '<div class="dga-token-info">';
        $output .= '<span class="dga-token-label">API TOKEN ปัจจุบัน:</span> ';
        $output .= '<span class="dga-token-value">' . esc_html($masked_api_key) . '</span>';
        $output .= '</div>';
        
        // Add buttons container with update and delete buttons
        $output .= '<div class="dga-token-actions">';
        $output .= '<button id="dga-update-token-btn" class="dga-btn dga-btn-primary">อัพเดต API TOKEN</button>';
        $output .= '<button id="dga-delete-token-btn" class="dga-btn dga-btn-danger">ลบ TOKEN</button>';
        $output .= '</div>';
    } else {
        // If no token exists, only show the update button
        $output .= '<button id="dga-update-token-btn" class="dga-btn dga-btn-primary">อัพเดต API TOKEN</button>';
    }
    
    return $output;
}

/**
 * AJAX handler to update user API key
 */
function dga_update_user_api_key() {
    // Verify nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_user_token_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        wp_die();
    }
    
    // Check if user is logged in
    if (!is_user_logged_in()) {
        wp_send_json_error(array('message' => 'User not logged in'));
        wp_die();
    }
    
    // Get and sanitize API key
    $api_key = isset($_POST['api_key']) ? sanitize_text_field($_POST['api_key']) : '';
    
    if (empty($api_key)) {
        wp_send_json_error(array('message' => 'API KEY ไม่สามารถเป็นค่าว่างได้'));
        wp_die();
    }
    
    // Update user meta
    $current_user_id = get_current_user_id();
    $update_result = update_user_meta($current_user_id, 'api_key', $api_key);
    
    if ($update_result) {
        $masked_api_key = substr($api_key, 0, 4) . '****' . substr($api_key, -4);
        
        // Get updated widget content
        $updated_content = dga_get_token_widget_content();
        
        wp_send_json_success(array(
            'message' => 'อัพเดต API KEY สำเร็จ',
            'masked_key' => $masked_api_key,
            'widget_content' => $updated_content
        ));
    } else {
        wp_send_json_error(array('message' => 'ไม่สามารถอัพเดต API KEY ได้ โปรดลองอีกครั้ง'));
    }
    
    wp_die();
}
add_action('wp_ajax_dga_update_user_api_key', 'dga_update_user_api_key');

/**
 * AJAX handler to delete user API key
 */
function dga_delete_user_api_key() {
    // Verify nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_user_token_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        wp_die();
    }
    
    // Check if user is logged in
    if (!is_user_logged_in()) {
        wp_send_json_error(array('message' => 'User not logged in'));
        wp_die();
    }
    
    // Delete user meta
    $current_user_id = get_current_user_id();
    $delete_result = delete_user_meta($current_user_id, 'api_key');
    
    if ($delete_result) {
        // Get updated widget content
        $updated_content = dga_get_token_widget_content();
        
        wp_send_json_success(array(
            'message' => 'ลบ API TOKEN สำเร็จ',
            'widget_content' => $updated_content
        ));
    } else {
        wp_send_json_error(array('message' => 'ไม่สามารถลบ API TOKEN ได้ โปรดลองอีกครั้ง'));
    }
    
    wp_die();
}
add_action('wp_ajax_dga_delete_user_api_key', 'dga_delete_user_api_key');

/**
 * AJAX handler to refresh widget content
 */
function dga_refresh_token_widget() {
    // Verify nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_user_token_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        wp_die();
    }
    
    // Check if user is logged in
    if (!is_user_logged_in()) {
        wp_send_json_error(array('message' => 'User not logged in'));
        wp_die();
    }
    
    // Get updated widget content
    $updated_content = dga_get_token_widget_content();
    
    wp_send_json_success(array(
        'widget_content' => $updated_content
    ));
    
    wp_die();
}
add_action('wp_ajax_dga_refresh_token_widget', 'dga_refresh_token_widget');



/***** API READER TEST *****/

function dga_endpoint_test_shortcode() {
    // Check if user is logged in
    if (!is_user_logged_in()) {
        return '<p>กรุณาเข้าสู่ระบบเพื่อทดสอบ API Endpoint</p>';
    }
    
    // Enqueue required styles and scripts
    wp_enqueue_style('dga-endpoint-test-css', get_stylesheet_directory_uri() . '/css/dga-endpoint-test.css', array(), '1.0.0');
    wp_enqueue_script('dga-endpoint-test-js', get_stylesheet_directory_uri() . '/js/dga-endpoint-test.js', array('jquery'), '1.0.0', true);
    
    // Add AJAX URL to the script
    wp_localize_script('dga-endpoint-test-js', 'dgaEndpointTest', array(
        'ajaxUrl' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('dga_endpoint_test_nonce')
    ));
    
    // Get current user API key
    $current_user = wp_get_current_user();
    $api_key = get_user_meta($current_user->ID, 'api_key', true);
    
    // Prepare output
    $output = '<div class="dga-endpoint-test-container">';
    
    // Check if API key exists
    if (empty($api_key)) {
        $output .= '<div class="dga-endpoint-test-notice dga-notice-warning">';
        $output .= '<p>คุณยังไม่ได้ตั้งค่า API TOKEN โปรดตั้งค่า API TOKEN ก่อนทดสอบ API</p>';
        
        // Add shortcode to update API token if available
        if (shortcode_exists('dga_user_token')) {
            $output .= do_shortcode('[dga_user_token]');
        } else {
            $output .= '<p>กรุณาติดตั้ง Shortcode สำหรับจัดการ API TOKEN ก่อนใช้งาน</p>';
        }
        
        $output .= '</div>';
    } else {
        // API key exists, show endpoint test interface
        $output .= '<div class="dga-endpoint-test-header">';
        $output .= '<h3>ทดสอบ API Endpoint จาก data.go.th</h3>';
        
        // Show masked API key
        $masked_api_key = substr($api_key, 0, 4) . '****' . substr($api_key, -4);
        $output .= '<div class="dga-token-info">';
        $output .= '<span class="dga-token-label">API TOKEN ปัจจุบัน:</span> ';
        $output .= '<span class="dga-token-value">' . esc_html($masked_api_key) . '</span>';
        $output .= '</div>';
        $output .= '</div>';
        
        // Endpoint test form
        $output .= '<div class="dga-endpoint-form">';
        $output .= '<div class="dga-form-group">';
        $output .= '<label for="dga-endpoint-url">URL Endpoint</label>';
        $output .= '<div class="dga-input-group">';
        $output .= '<input type="url" id="dga-endpoint-url" class="dga-form-control" placeholder="https://api.data.go.th/..." required>';
        $output .= '<button id="dga-test-endpoint" class="dga-btn dga-btn-primary">ทดสอบ</button>';
        $output .= '</div>';
        $output .= '<div class="dga-endpoint-examples">';
        $output .= '<div class="dga-endpoint-examples-label">ตัวอย่าง Endpoint:</div>';
        $output .= '<div class="dga-endpoint-examples-list">';
        $output .= '<span class="dga-endpoint-example-item" data-endpoint="https://api.data.go.th/catalog/api/3/search/dataset?q=covid">ค้นหาชุดข้อมูล COVID</span>';
        $output .= '<span class="dga-endpoint-example-item" data-endpoint="https://api.data.go.th/catalog/api/3/action/group_list">รายการกลุ่มข้อมูล</span>';
        $output .= '<span class="dga-endpoint-example-item" data-endpoint="https://api.data.go.th/catalog/api/3/action/package_list">รายการชุดข้อมูล</span>';
        $output .= '</div>';
        $output .= '</div>';
        $output .= '</div>';
        
        // HTTP method and parameter options
        $output .= '<div class="dga-form-row">';
        
        // Method selection
        $output .= '<div class="dga-form-group dga-form-col">';
        $output .= '<label for="dga-http-method">HTTP Method</label>';
        $output .= '<select id="dga-http-method" class="dga-form-control">';
        $output .= '<option value="GET" selected>GET</option>';
        $output .= '<option value="POST">POST</option>';
        $output .= '</select>';
        $output .= '</div>';
        
        // Parameters form (for POST requests)
        $output .= '<div class="dga-form-group dga-form-col dga-params-container" style="display:none;">';
        $output .= '<label for="dga-params">Parameters (JSON)</label>';
        $output .= '<textarea id="dga-params" class="dga-form-control" placeholder=\'{"key": "value"}\' rows="4"></textarea>';
        $output .= '</div>';
        
        $output .= '</div>'; // End form row
        
        // API Headers (new section)
        $output .= '<div class="dga-form-group">';
        $output .= '<label for="dga-api-headers">Headers (JSON) - เพิ่มเติมถ้าจำเป็น</label>';
        $output .= '<div class="dga-header-info">API TOKEN จะถูกใส่เป็น header อัตโนมัติใน <code>api-key</code></div>';
        $output .= '<textarea id="dga-api-headers" class="dga-form-control" placeholder=\'{"Content-Type": "application/json", "Custom-Header": "value"}\' rows="2"></textarea>';
        $output .= '</div>';
        
        $output .= '</div>'; // End endpoint form
        
        // Troubleshooting panel
        $output .= '<div class="dga-troubleshooting-container">';
        $output .= '<div class="dga-troubleshooting-header">';
        $output .= '<h4><i class="dga-icon-help"></i> พบปัญหาการเชื่อมต่อหรือไม่?</h4>';
        $output .= '<button class="dga-troubleshooting-toggle">แสดงข้อมูลเพิ่มเติม</button>';
        $output .= '</div>';
        $output .= '<div class="dga-troubleshooting-content" style="display:none;">';
        $output .= '<div class="dga-troubleshooting-item">';
        $output .= '<h5>วิธีแก้ไขปัญหาการเชื่อมต่อ API</h5>';
        $output .= '<ul>';
        $output .= '<li><strong>ตรวจสอบ URL:</strong> ตรวจสอบว่า URL ของ API ถูกต้องหรือไม่ โดยทั่วไปจะขึ้นต้นด้วย <code>https://api.data.go.th/</code> หรือ <code>https://data.go.th/api/</code></li>';
        $output .= '<li><strong>ตรวจสอบ API TOKEN:</strong> ตรวจสอบว่า API TOKEN ของคุณยังใช้งานได้และมีสิทธิ์เพียงพอ</li>';
        $output .= '<li><strong>ลองใช้ tool อื่น:</strong> ทดสอบ API ด้วย tools อื่น เช่น Postman หรือ cURL เพื่อดูว่าสามารถเข้าถึงได้หรือไม่</li>';
        $output .= '<li><strong>ตรวจสอบ Firewall:</strong> เซิร์ฟเวอร์ของคุณอาจมีการบล็อคการเชื่อมต่อไปยัง external APIs</li>';
        $output .= '</ul>';
        $output .= '</div>';
        $output .= '<div class="dga-troubleshooting-item">';
        $output .= '<h5>APIs ที่ใช้งานได้</h5>';
        $output .= '<p>Data.go.th มี APIs หลายชุด คุณสามารถตรวจสอบได้จาก:</p>';
        $output .= '<ul>';
        $output .= '<li><a href="https://data.go.th/th/developer" target="_blank">หน้า Developer ของ data.go.th</a></li>';
        $output .= '<li><a href="https://data.go.th/th/dataset" target="_blank">รายการชุดข้อมูลที่เปิดเผย</a></li>';
        $output .= '</ul>';
        $output .= '<p><strong>ตัวอย่าง API ที่ใช้งานได้:</strong></p>';
        $output .= '<ul>';
        $output .= '<li><code>https://api.data.go.th/catalog/api/3/action/package_list</code> - รายการชุดข้อมูล</li>';
        $output .= '<li><code>https://api.data.go.th/catalog/api/3/action/group_list</code> - รายการกลุ่มข้อมูล</li>';
        $output .= '<li><code>https://api.data.go.th/catalog/api/3/search/dataset?q=covid</code> - ค้นหาชุดข้อมูล COVID</li>';
        $output .= '</ul>';
        $output .= '</div>';
        $output .= '</div>';
        $output .= '</div>';
        
        // Results area
        $output .= '<div class="dga-endpoint-results" style="display:none;">';
        $output .= '<div class="dga-results-header">';
        $output .= '<h4>ผลลัพธ์การทดสอบ</h4>';
        $output .= '<div class="dga-results-actions">';
        $output .= '<button id="dga-copy-response" class="dga-btn dga-btn-secondary dga-btn-sm">คัดลอกข้อมูล</button>';
        $output .= '<button id="dga-toggle-view" class="dga-btn dga-btn-secondary dga-btn-sm">เปลี่ยนรูปแบบการแสดงผล</button>';
        $output .= '</div>';
        $output .= '</div>';
        
        // Loading indicator
        $output .= '<div id="dga-loading" class="dga-loading" style="display:none;">';
        $output .= '<div class="dga-spinner"></div>';
        $output .= '<span>กำลังดึงข้อมูล...</span>';
        $output .= '</div>';
        
        // Status and response time
        $output .= '<div class="dga-result-status">';
        $output .= '<div class="dga-status-code"><span>สถานะ:</span> <span id="dga-status-value">-</span></div>';
        $output .= '<div class="dga-response-time"><span>เวลาตอบสนอง:</span> <span id="dga-time-value">-</span></div>';
        $output .= '</div>';
        
        // Request details
        $output .= '<div class="dga-request-details" style="display:none;">';
        $output .= '<div class="dga-request-info-header">รายละเอียดการส่งคำขอ <button class="dga-btn-toggle-request-details">ซ่อน</button></div>';
        $output .= '<div class="dga-request-info-content">';
        $output .= '<pre id="dga-request-details"></pre>';
        $output .= '</div>';
        $output .= '</div>';
        
        // Result content tabs
        $output .= '<div class="dga-result-tabs">';
        $output .= '<div class="dga-tab-header">';
        $output .= '<div class="dga-tab-btn active" data-tab="response">API Response</div>';
        $output .= '<div class="dga-tab-btn" data-tab="headers">Headers</div>';
        $output .= '<div class="dga-tab-btn" data-tab="preview">Data Preview</div>';
        $output .= '</div>';
        
        // Tab content
        $output .= '<div class="dga-tab-content">';
        
        // Response tab
        $output .= '<div id="dga-tab-response" class="dga-tab-pane active">';
        $output .= '<pre id="dga-response-json" class="dga-response-content"></pre>';
        $output .= '</div>';
        
        // Headers tab
        $output .= '<div id="dga-tab-headers" class="dga-tab-pane">';
        $output .= '<pre id="dga-response-headers" class="dga-response-content"></pre>';
        $output .= '</div>';
        
        // Preview tab
        $output .= '<div id="dga-tab-preview" class="dga-tab-pane">';
        $output .= '<div id="dga-data-preview" class="dga-data-preview"></div>';
        $output .= '</div>';
        
        $output .= '</div>'; // End tab content
        $output .= '</div>'; // End result tabs
        $output .= '</div>'; // End endpoint results
    }
    
    $output .= '</div>'; // End main container
    
    return $output;
}
add_shortcode('dga_endpoint_test', 'dga_endpoint_test_shortcode');

/**
 * AJAX handler to test API endpoint
 */
function dga_test_api_endpoint() {
    // Verify nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_endpoint_test_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        wp_die();
    }
    
    // Check if user is logged in
    if (!is_user_logged_in()) {
        wp_send_json_error(array('message' => 'User not logged in'));
        wp_die();
    }
    
    // Get and validate endpoint URL
    $endpoint_url = isset($_POST['endpoint']) ? esc_url_raw($_POST['endpoint']) : '';
    $http_method = isset($_POST['method']) ? sanitize_text_field($_POST['method']) : 'GET';
    $params = isset($_POST['params']) ? $_POST['params'] : '';
    $custom_headers = isset($_POST['headers']) ? $_POST['headers'] : '';
    
    if (empty($endpoint_url)) {
        wp_send_json_error(array('message' => 'URL Endpoint ไม่สามารถเป็นค่าว่างได้'));
        wp_die();
    }
    
    // Get user's API key
    $current_user_id = get_current_user_id();
    $api_key = get_user_meta($current_user_id, 'api_key', true);
    
    if (empty($api_key)) {
        wp_send_json_error(array('message' => 'ไม่พบ API KEY โปรดตั้งค่า API KEY ก่อนทดสอบ API'));
        wp_die();
    }
    
    // สร้าง headers แบบใหม่ ให้เหมือนกับ Postman ทุกประการ
    // ต้องสังเกตว่า data.go.th อาจต้องการ Content-Type เป็น application/json หรือไม่ต้องการเลยก็ได้
    $headers = array();
    
    // เพิ่ม api-key header อย่างเดียวก่อน (เหมือนใน Postman)
    $headers['api-key'] = trim($api_key); // ใช้ trim() เพื่อกำจัดช่องว่าง
    
    // ถ้าต้องการเพิ่ม Content-Type ให้เปิดใช้บรรทัดนี้
    // $headers['Content-Type'] = 'application/json';
    
    // Add custom headers if provided
    if (!empty($custom_headers)) {
        // Convert headers string to array
        $headers_array = json_decode($custom_headers, true);
        if ($headers_array === null) {
            wp_send_json_error(array('message' => 'รูปแบบ Headers ไม่ถูกต้อง โปรดตรวจสอบว่าเป็น JSON ที่ถูกต้อง'));
            wp_die();
        }
        
        // เพิ่มเฉพาะ headers ที่ไม่ใช่ api-key
        foreach ($headers_array as $key => $value) {
            if (strtolower($key) !== 'api-key') {
                $headers[$key] = $value;
            }
        }
    }
    
    // Set up API request 
    $args = array(
        'timeout' => 30,
        'headers' => $headers,
        'sslverify' => true
    );
    
    // For debugging
    $debug_info = array(
        'url' => $endpoint_url,
        'method' => $http_method,
        'headers' => $headers,
        'api_key_found' => !empty($api_key),
        'api_key_value' => substr($api_key, 0, 3) . '...' . substr($api_key, -3), // แสดงเฉพาะส่วนของ API key
        'api_key_length' => strlen($api_key)
    );
    
    // Add body parameters for POST requests
    if ($http_method === 'POST' && !empty($params)) {
        $params_array = json_decode($params, true);
        if ($params_array === null) {
            wp_send_json_error(array('message' => 'รูปแบบ Parameters ไม่ถูกต้อง โปรดตรวจสอบว่าเป็น JSON ที่ถูกต้อง'));
            wp_die();
        }
        $args['body'] = $params;
        $debug_info['body'] = $params_array;
    }
    
    // Record start time to calculate response time
    $start_time = microtime(true);
    
    // ลองใช้ WP HTTP API โดยตรง แทนการใช้ wp_remote_get/wp_remote_post
    if ($http_method === 'GET') {
        $response = wp_remote_get($endpoint_url, $args);
    } else {
        $response = wp_remote_post($endpoint_url, $args);
    }
    
    // Calculate response time
    $response_time = round((microtime(true) - $start_time) * 1000); // in milliseconds
    
    // Check if request was successful
    if (is_wp_error($response)) {
        $error_message = $response->get_error_message();
        $error_code = $response->get_error_code();
        
        // Add more specific error messages based on error codes
        $error_advice = '';
        if (strpos($error_message, 'Could not resolve host') !== false) {
            $error_advice = 'โปรดตรวจสอบ URL ของ API ว่าถูกต้องหรือไม่ หรือลองเปลี่ยนเป็น api.data.go.th แทน opendata.data.go.th';
        } elseif (strpos($error_message, 'Connection timed out') !== false) {
            $error_advice = 'การเชื่อมต่อ API ใช้เวลานานเกินไป อาจเกิดจากเซิร์ฟเวอร์ API ทำงานช้าหรือไม่ตอบสนอง';
        } elseif (strpos($error_message, 'SSL') !== false) {
            $error_advice = 'เกิดปัญหาเกี่ยวกับการเชื่อมต่อ SSL ลองปรับการตั้งค่า SSL ในเซิร์ฟเวอร์';
        }
        
        wp_send_json_error(array(
            'message' => 'เกิดข้อผิดพลาดในการเชื่อมต่อ API: ' . $error_message,
            'error_code' => $error_code,
            'advice' => $error_advice,
            'debug_info' => $debug_info
        ));
        wp_die();
    }
    
    // Get response data
    $status_code = wp_remote_retrieve_response_code($response);
    $response_headers = wp_remote_retrieve_headers($response);
    $body = wp_remote_retrieve_body($response);
    
    // เพิ่มข้อมูลการดีบั๊กสำหรับกรณี 403 Forbidden
    if ($status_code == 403) {
        $debug_info['status_code'] = $status_code;
        $debug_info['response_headers'] = $response_headers;
        $debug_info['response_message'] = 'Forbidden (403) - อาจมีปัญหาเกี่ยวกับ API KEY หรือสิทธิ์การเข้าถึง';
        $debug_info['response_body'] = $body;
        $debug_info['postman_tip'] = 'ลองเปรียบเทียบการตั้งค่า Headers ใน Postman กับที่นี่';
        
        // แสดงข้อแนะนำสำหรับการแก้ไขปัญหา
        wp_send_json_error(array(
            'message' => 'เข้าถึง API ไม่สำเร็จ: สถานะ 403 Forbidden',
            'advice' => 'ลองทดสอบต่อไปนี้:<br>1. ตรวจสอบว่า API KEY ถูกต้อง<br>2. ลองใช้ URL endpoint ที่ต่างกัน<br>3. ตรวจสอบว่าคุณมีสิทธิ์เข้าถึง endpoint นี้<br>4. ลองนำ Content-Type header ออก',
            'debug_info' => $debug_info
        ));
        wp_die();
    }
    
    // Parse JSON response 
    $parsed_response = json_decode($body, true);
    
    // Extract data for preview
    $preview_data = extract_preview_data($parsed_response);
    
    // Send response back to JavaScript
    wp_send_json_success(array(
        'statusCode' => $status_code,
        'responseTime' => $response_time . ' ms',
        'headers' => $response_headers,
        'response' => $parsed_response ? $parsed_response : $body,
        'previewData' => $preview_data,
        'debug_info' => $debug_info
    ));
    
    wp_die();
}
add_action('wp_ajax_dga_test_api_endpoint', 'dga_test_api_endpoint');



/**
 * Helper function to extract preview data from various API response formats
 */
function extract_preview_data($response) {
    // ถ้าไม่มีข้อมูลหรือไม่ใช่ array
    if (empty($response) || !is_array($response)) {
        return array('error' => 'ไม่สามารถแสดงตัวอย่างข้อมูลได้', 'type' => 'error');
    }
    
    // Debug info for frontend
    $structure_info = array(
        'type' => 'unknown',
        'keys' => array_keys($response),
        'has_result' => isset($response['result']),
        'result_type' => isset($response['result']) ? gettype($response['result']) : 'not set'
    );
    
    // CASE 1: API data.go.th - result เป็น array แบบง่าย (เช่น group_list, package_list)
    if (isset($response['result']) && is_array($response['result']) && !empty($response['result'])) {
        $first_item = reset($response['result']);
        
        // ถ้า result เป็น array ของ string (เช่น package_list, group_list)
        if (is_string($first_item)) {
            $structure_info['type'] = 'string_array';
            
            // แปลง array ของ string เป็นตาราง
            $table_data = array();
            foreach ($response['result'] as $index => $value) {
                $table_data[] = array(
                    'index' => $index + 1,
                    'value' => $value
                );
            }
            
            return array(
                'type' => 'table',
                'data' => $table_data,
                'total' => count($table_data),
                'structure_info' => $structure_info
            );
        }
        
        // ถ้า result เป็น array ของ object/array (เช่น search results)
        elseif (is_array($first_item)) {
            $structure_info['type'] = 'object_array';
            
            return array(
                'type' => 'table',
                'data' => $response['result'],
                'total' => count($response['result']),
                'structure_info' => $structure_info
            );
        }
    }
    
    // CASE 2: API data.go.th - search/dataset format
    if (isset($response['result']) && isset($response['result']['results']) && is_array($response['result']['results'])) {
        $structure_info['type'] = 'search_results';
        
        return array(
            'type' => 'table',
            'data' => $response['result']['results'],
            'total' => isset($response['result']['count']) ? $response['result']['count'] : count($response['result']['results']),
            'structure_info' => $structure_info
        );
    }
    
    // CASE 3: API data.go.th - datastore_search format
    if (isset($response['result']) && isset($response['result']['records']) && is_array($response['result']['records'])) {
        $structure_info['type'] = 'datastore_records';
        
        return array(
            'type' => 'table',
            'data' => $response['result']['records'],
            'total' => isset($response['result']['total']) ? $response['result']['total'] : count($response['result']['records']),
            'structure_info' => $structure_info
        );
    }
    
    // CASE 4: Standard API formats with data/records at root
    if (isset($response['data']) && is_array($response['data'])) {
        $structure_info['type'] = 'standard_data';
        
        return array(
            'type' => 'table',
            'data' => $response['data'],
            'total' => isset($response['total']) ? $response['total'] : count($response['data']),
            'structure_info' => $structure_info
        );
    }
    
    if (isset($response['records']) && is_array($response['records'])) {
        $structure_info['type'] = 'standard_records';
        
        return array(
            'type' => 'table',
            'data' => $response['records'],
            'total' => isset($response['total']) ? $response['total'] : count($response['records']),
            'structure_info' => $structure_info
        );
    }
    
    // CASE 5: Find any array in the response that might be data
    foreach ($response as $key => $value) {
        if (is_array($value) && !empty($value)) {
            $first_item = reset($value);
            
            // Array of arrays/objects
            if (is_array($first_item) || is_object($first_item)) {
                $structure_info['type'] = "array_in_key_$key";
                
                return array(
                    'type' => 'table',
                    'data' => $value,
                    'total' => count($value),
                    'structure_info' => $structure_info
                );
            }
            // Array of strings
            elseif (is_string($first_item) || is_numeric($first_item)) {
                $structure_info['type'] = "string_array_in_key_$key";
                
                // Convert to table format
                $table_data = array();
                foreach ($value as $index => $item) {
                    $table_data[] = array(
                        'index' => is_numeric($index) ? ($index + 1) : $index,
                        'value' => $item
                    );
                }
                
                return array(
                    'type' => 'table',
                    'data' => $table_data,
                    'total' => count($table_data),
                    'structure_info' => $structure_info
                );
            }
        }
    }
    
    // CASE 6: If response itself is an array of items
    if (count($response) > 0 && isset($response[0])) {
        $structure_info['type'] = 'root_array';
        
        return array(
            'type' => 'table',
            'data' => $response,
            'total' => count($response),
            'structure_info' => $structure_info
        );
    }
    
    // CASE 7: Fallback - just show the raw response
    $structure_info['type'] = 'fallback_json';
    
    return array(
        'type' => 'json',
        'data' => $response,
        'structure_info' => $structure_info
    );
}



/**** ฟังก์ชั่นสร้าง user ใหม่ ******/

// ป้องกันการเข้าถึงไฟล์โดยตรง
if (!defined('ABSPATH')) {
    exit;
}

/**
 * สร้าง shortcode สำหรับสร้างผู้ใช้ใหม่
 * 
 * @return string HTML ของฟอร์ม
 */
function dga_create_user_shortcode() {
    // ตรวจสอบว่าผู้ใช้มีสิทธิ์ในการสร้างผู้ใช้
    if (!current_user_can('create_users')) {
        return '<p>' . __('คุณไม่มีสิทธิ์ในการสร้างผู้ใช้', 'textdomain') . '</p>';
    }
    
    $output = '';
    
    // จัดการกับการส่งฟอร์ม
    if (isset($_POST['dga_create_user_submit']) && isset($_POST['dga_create_user_nonce']) && 
        wp_verify_nonce($_POST['dga_create_user_nonce'], 'dga_create_user_action')) {
        
        $email = sanitize_email($_POST['user_email']);
        
        if (!is_email($email)) {
            $output .= '<div class="dga-error-message">' . __('กรุณากรอกอีเมลให้ถูกต้อง', 'textdomain') . '</div>';
        } else {
            // ตรวจสอบว่ามีผู้ใช้อยู่แล้วหรือไม่
            if (email_exists($email)) {
                $output .= '<div class="dga-error-message">' . __('อีเมลนี้มีอยู่ในระบบแล้ว', 'textdomain') . '</div>';
            } else {
                // สร้างผู้ใช้ใหม่
                $username = $email;
                $random_password = wp_generate_password(12, false);
                $user_id = wp_create_user($username, $random_password, $email);
                
                if (is_wp_error($user_id)) {
                    $output .= '<div class="dga-error-message">' . $user_id->get_error_message() . '</div>';
                } else {
                    // กำหนดสิทธิ์ผู้ใช้
                    $user = new WP_User($user_id);
                    $user->set_role('subscriber');
                    
                    // สร้างและจัดเก็บคีย์แบบกำหนดเอง
                    $reset_key = dga_generate_reset_key($user_id);
                    
                    if (!$reset_key) {
                        $output .= '<div class="dga-error-message">' . __('มีข้อผิดพลาดในการสร้างลิงก์รีเซ็ตรหัสผ่าน', 'textdomain') . '</div>';
                    } else {
                        // สร้างลิงก์ที่นำไปยังหน้าแสดง Modal ตั้งรหัสผ่าน
                        $reset_link = add_query_arg(
                            array(
                                'action' => 'dga_set_password',
                                'key' => $reset_key,
                                'login' => rawurlencode($username),
                                'user_id' => $user_id // เพิ่ม user_id ในลิงก์
                            ),
                            home_url()
                        );
                        
                        // ส่งอีเมลพร้อมลิงก์
                        if (dga_send_new_user_email($email, $reset_link)) {
                            $output .= '<div class="dga-success-message">' . __('สร้างผู้ใช้สำเร็จแล้ว! ระบบได้ส่งอีเมลพร้อมคำแนะนำในการตั้งรหัสผ่านไปยังผู้ใช้แล้ว', 'textdomain') . '</div>';
                        } else {
                            $output .= '<div class="dga-error-message">' . __('สร้างผู้ใช้สำเร็จ แต่มีข้อผิดพลาดในการส่งอีเมล', 'textdomain') . '</div>';
                        }
                    }
                }
            }
        }
    }
    
    // แสดงฟอร์ม
    $output .= '
    <div class="dga-create-user-form-container">
        <form method="post" class="dga-create-user-form">
            <div class="dga-form-field">
                <label for="user_email">' . __('อีเมลผู้ใช้', 'textdomain') . '</label>
                <input type="email" name="user_email" id="user_email" required />
            </div>
            <div class="dga-form-submit">
                <input type="hidden" name="dga_create_user_nonce" value="' . wp_create_nonce('dga_create_user_action') . '" />
                <input type="submit" name="dga_create_user_submit" value="' . __('สร้างผู้ใช้', 'textdomain') . '" class="dga-submit-button" />
            </div>
        </form>
    </div>';
    
    return $output;
}
add_shortcode('dga_create_user', 'dga_create_user_shortcode');

/**
 * สร้างและจัดเก็บคีย์สำหรับรีเซ็ตรหัสผ่านแบบกำหนดเอง
 * 
 * @param int $user_id ID ของผู้ใช้
 * @return string|bool คีย์รีเซ็ตรหัสผ่าน หรือ false หากล้มเหลว
 */
function dga_generate_reset_key($user_id) {
    // สร้างคีย์แบบสุ่ม
    $key = wp_generate_password(20, false);
    
    // เก็บคีย์ในฐานข้อมูล (เก็บแบบไม่เข้ารหัสเพื่อให้ตรวจสอบได้ง่าย)
    update_user_meta($user_id, 'dga_password_reset_key', $key);
    
    // กำหนดเวลาหมดอายุ (24 ชั่วโมง)
    $expiration = time() + (24 * HOUR_IN_SECONDS);
    update_user_meta($user_id, 'dga_password_reset_expiry', $expiration);
    
    return $key;
}

/**
 * ตรวจสอบคีย์รีเซ็ตรหัสผ่านแบบกำหนดเอง
 * 
 * @param string $key คีย์ที่ต้องการตรวจสอบ
 * @param string $login ชื่อผู้ใช้หรืออีเมล
 * @return WP_User|WP_Error ออบเจ็กต์ผู้ใช้หากสำเร็จ หรือ WP_Error หากล้มเหลว
 */
function dga_verify_reset_key($key, $login) {
    // ค้นหาผู้ใช้จากชื่อผู้ใช้หรืออีเมล
    $user = get_user_by(is_email($login) ? 'email' : 'login', $login);
    
    if (!$user) {
        return new WP_Error('invalid_key', __('ลิงก์รีเซ็ตรหัสผ่านไม่ถูกต้อง', 'textdomain'));
    }
    
    // ดึงคีย์และเวลาหมดอายุจากฐานข้อมูล
    $stored_key = get_user_meta($user->ID, 'dga_password_reset_key', true);
    $expiration = get_user_meta($user->ID, 'dga_password_reset_expiry', true);
    
    // ตรวจสอบว่าคีย์หมดอายุหรือไม่
    if (!$expiration || $expiration < time()) {
        return new WP_Error('expired_key', __('ลิงก์รีเซ็ตรหัสผ่านหมดอายุแล้ว', 'textdomain'));
    }
    
    // ตรวจสอบคีย์ (เปรียบเทียบโดยตรง)
    if (!$stored_key || $key !== $stored_key) {
        return new WP_Error('invalid_key', __('ลิงก์รีเซ็ตรหัสผ่านไม่ถูกต้อง', 'textdomain'));
    }
    
    return $user;
}

/**
 * ส่งอีเมลแจ้งผู้ใช้ใหม่พร้อมลิงก์ตั้งรหัสผ่าน
 * 
 * @param string $email อีเมลผู้ใช้
 * @param string $reset_link ลิงก์สำหรับตั้งรหัสผ่าน
 * @return bool สถานะการส่งอีเมล
 */
function dga_send_new_user_email($email, $reset_link) {
    $subject = __('ข้อมูลบัญชีผู้ใช้ใหม่ของคุณ', 'textdomain');
    
    // ดึง template อีเมล
    $template_path = get_stylesheet_directory() . '/email/newuser.html';
    if (file_exists($template_path)) {
        $template = file_get_contents($template_path);
    } else {
        // Template สำรองหากไม่พบไฟล์
        $template = '
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>บัญชีผู้ใช้ใหม่ของคุณ</title>
        </head>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
            <div style="text-align: center; margin-bottom: 20px;">
                <img src="' . get_site_icon_url() . '" alt="Logo" style="max-width: 150px;">
            </div>
            <div style="border-top: 3px solid #002b5c; border-bottom: 3px solid #002b5c; padding: 20px 0;">
                <h1 style="color: #002b5c;">บัญชีผู้ใช้ใหม่ของคุณ</h1>
                <p>ขอบคุณที่เข้าร่วม ' . get_bloginfo('name') . '</p>
                <p>เพื่อตั้งรหัสผ่านและเข้าสู่บัญชีผู้ใช้ของคุณ โปรดคลิกที่ปุ่มด้านล่าง:</p>
                <p style="text-align: center; margin: 30px 0;">
                    <a href="{reset_link}" style="background-color: #002b5c; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block; font-weight: bold;">ตั้งรหัสผ่านของคุณ</a>
                </p>
                <p>ลิงก์นี้จะหมดอายุใน 24 ชั่วโมงเพื่อความปลอดภัย</p>
                <p>หากคุณไม่ได้ขอบัญชีผู้ใช้นี้ โปรดเพิกเฉยต่ออีเมลฉบับนี้</p>
            </div>
            <div style="margin-top: 20px; font-size: 12px; color: #666; text-align: center;">
                <p>&copy; ' . date('Y') . ' ' . get_bloginfo('name') . '. สงวนลิขสิทธิ์ทั้งหมด</p>
            </div>
        </body>
        </html>';
    }
    
    // แทนที่ตัวแปรใน template
    $template = str_replace('{reset_link}', $reset_link, $template);
    $template = str_replace('{site_name}', get_bloginfo('name'), $template);
    $template = str_replace('{site_url}', get_bloginfo('url'), $template);
    $template = str_replace('{current_year}', date('Y'), $template);
    
    // ตั้งค่าส่วนหัวอีเมล
    $headers = array(
        'Content-Type: text/html; charset=UTF-8',
        'From: ' . get_bloginfo('name') . ' <' . get_option('admin_email') . '>'
    );
    
    // ส่งอีเมล
    return wp_mail($email, $subject, $template, $headers);
}

/**
 * เพิ่ม Modal สำหรับการตั้งรหัสผ่านไปยัง footer ของทุกหน้า
 */
function dga_add_password_reset_modal() {
    // ตรวจสอบว่าอยู่ในหน้า admin หรือไม่
    if (is_admin()) {
        return;
    }
    
    // เพิ่มการใส่ debug mode เพื่อตรวจสอบค่าพารามิเตอร์
    $debug_mode = false; // ตั้งเป็น true เมื่อต้องการดูค่าพารามิเตอร์
    
    // ตรวจสอบว่ามีการร้องขอการตั้งรหัสผ่านหรือไม่
    $is_reset_request = isset($_GET['action']) && $_GET['action'] === 'dga_set_password' && 
                        isset($_GET['key']) && isset($_GET['login']);
    
    if ($is_reset_request) {
        $key = sanitize_text_field($_GET['key']);
        $login = sanitize_user($_GET['login']);
        // รับค่า user_id จาก URL (ถ้ามี)
        $user_id = isset($_GET['user_id']) ? intval($_GET['user_id']) : 0;
        
        // แสดงค่าพารามิเตอร์เพื่อการตรวจสอบ (เฉพาะเมื่ออยู่ใน debug mode)
        if ($debug_mode) {
            echo "<div style='position:fixed; top:0; left:0; background:#fff; padding:10px; z-index:999999; border:1px solid red;'>";
            echo "Key: " . esc_html($key) . "<br>";
            echo "Login: " . esc_html($login) . "<br>";
            echo "User ID from URL: " . esc_html($user_id) . "<br>";
            echo "</div>";
        }
        
        // ตรวจสอบความถูกต้องของคีย์ด้วยวิธีกำหนดเอง
        $user = dga_verify_reset_key($key, $login);
        
        if (is_wp_error($user)) {
            echo '<div class="dga-password-reset-error-container" style="padding: 20px; max-width: 600px; margin: 50px auto; background-color: #f8d7da; border-left: 4px solid #dc3545; color: #721c24;">
                <h3>' . __('ข้อผิดพลาด', 'textdomain') . '</h3>
                <p>' . $user->get_error_message() . '</p>
                <p><a href="' . home_url() . '">' . __('กลับไปยังหน้าหลัก', 'textdomain') . '</a></p>
            </div>
            <script>
                // ซ่อน Modal หากมีข้อผิดพลาด
                document.addEventListener("DOMContentLoaded", function() {
                    var errorContainer = document.querySelector(".dga-password-reset-error-container");
                    if (errorContainer) {
                        // แสดงข้อความแจ้งเตือนในหน้า
                        document.body.prepend(errorContainer);
                    }
                });
            </script>';
            return;
        }
        
        // เปรียบเทียบ user_id จาก URL กับ user->ID ถ้า user_id จาก URL ไม่ใช่ 0 และไม่ตรงกับ user->ID
        if ($user_id !== 0 && $user_id !== $user->ID) {
            echo '<div class="dga-password-reset-error-container" style="padding: 20px; max-width: 600px; margin: 50px auto; background-color: #f8d7da; border-left: 4px solid #dc3545; color: #721c24;">
                <h3>' . __('ข้อผิดพลาด', 'textdomain') . '</h3>
                <p>' . __('ข้อมูลผู้ใช้ไม่ตรงกัน กรุณาขอลิงก์ใหม่', 'textdomain') . '</p>
                <p><a href="' . home_url() . '">' . __('กลับไปยังหน้าหลัก', 'textdomain') . '</a></p>
            </div>';
            return;
        }
        
        // ทำให้มั่นใจว่าเรามี user_id ที่ถูกต้อง
        $user_id = $user->ID;
        
        // ดึงข้อมูลผู้ใช้เพิ่มเติม
        $user_data = get_userdata($user_id);
        $display_name = $user_data->display_name;
        $user_email = $user_data->user_email;
        
        // แสดง Modal สำหรับการตั้งรหัสผ่าน
        ?>
        <div id="dga-password-reset-modal" class="dga-modal">
            <div class="dga-modal-content">
                <div class="dga-modal-header">
                    <h2><?php _e('ตั้งรหัสผ่านใหม่', 'textdomain'); ?></h2>
                </div>
                <div class="dga-modal-body">
                    <div class="dga-user-info">
                        <p><?php _e('คุณกำลังตั้งรหัสผ่านสำหรับบัญชีต่อไปนี้:', 'textdomain'); ?></p>
                        <div class="dga-user-info-details">
                            <div class="dga-user-info-item">
                                <span class="dga-user-info-label"><?php _e('ชื่อผู้ใช้:', 'textdomain'); ?></span>
                                <span class="dga-user-info-value"><?php echo esc_html($login); ?></span>
                            </div>
                            <div class="dga-user-info-item">
                                <span class="dga-user-info-label"><?php _e('อีเมล:', 'textdomain'); ?></span>
                                <span class="dga-user-info-value"><?php echo esc_html($user_email); ?></span>
                            </div>
                        </div>
                    </div>
                    
                    <form method="post" id="dga-reset-password-form" class="dga-reset-password-form">
                        <div id="dga-form-messages"></div>
                        
                        <div class="dga-form-field">
                            <label for="pass1"><?php _e('รหัสผ่านใหม่', 'textdomain'); ?></label>
                            <input type="password" name="pass1" id="pass1" class="input" size="20" required autocomplete="new-password" />
                        </div>
                        
                        <div class="dga-form-field">
                            <label for="pass2"><?php _e('ยืนยันรหัสผ่านใหม่', 'textdomain'); ?></label>
                            <input type="password" name="pass2" id="pass2" class="input" size="20" required autocomplete="new-password" />
                        </div>
                        
                        <div class="dga-form-field">
                            <div class="dga-password-strength">
                                <span id="password-strength"></span>
                            </div>
                            <div class="dga-password-hint"><?php _e('คำแนะนำ: รหัสผ่านควรมีอย่างน้อย 8 ตัวอักษร และควรใช้ตัวอักษรพิมพ์เล็ก พิมพ์ใหญ่ ตัวเลข และสัญลักษณ์พิเศษร่วมกัน', 'textdomain'); ?></div>
                        </div>
                        
                        <div class="dga-form-submit">
                            <input type="hidden" name="dga_reset_nonce" value="<?php echo wp_create_nonce('dga_reset_password_action'); ?>" />
                            <input type="hidden" name="key" value="<?php echo esc_attr($key); ?>" />
                            <input type="hidden" name="login" value="<?php echo esc_attr($login); ?>" />
                            <input type="hidden" name="user_id" value="<?php echo esc_attr($user_id); ?>" />
                            <input type="submit" name="dga_set_password_submit" value="<?php _e('ตั้งรหัสผ่าน', 'textdomain'); ?>" class="dga-submit-button" />
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <?php
        
        // เพิ่ม script สำหรับการจัดการ AJAX form submission
        wp_enqueue_style('dga-newuser-style', get_stylesheet_directory_uri() . '/css/dga-newuser.css', array(), '1.0.0');
        wp_enqueue_script('dga-newuser-script', get_stylesheet_directory_uri() . '/js/dga-newuser.js', array('jquery'), '1.0.0', true);
        
        // สร้าง AJAX nonce
        wp_localize_script('dga-newuser-script', 'dgaResetParams', array(
            'ajaxurl' => admin_url('admin-ajax.php'),
            'resetNonce' => wp_create_nonce('dga_ajax_reset_password'),
            'redirectUrl' => user_admin_url(),
            'userId' => $user_id // เพิ่ม user_id สำหรับใช้ใน JavaScript
        ));
    }
}
add_action('wp_footer', 'dga_add_password_reset_modal', 9999); // เพิ่มความสำคัญสูงเพื่อให้แสดงท้ายสุด

/**
 * จัดการกับ AJAX request สำหรับการตั้งรหัสผ่าน
 */
function dga_ajax_reset_password() {
    $debug = true; // เปิดโหมด debug
    
    // บันทึก log หากเปิดใช้งาน debug
    if ($debug) {
        error_log('Reset password AJAX request received: ' . json_encode($_POST));
    }
    
    // ข้ามการตรวจสอบ nonce ชั่วคราว
    $has_valid_nonce = true;
    
    // ตรวจสอบข้อมูลที่จำเป็น
    if (!isset($_POST['pass1']) || !isset($_POST['pass2'])) {
        wp_send_json_error(['message' => 'กรุณากรอกรหัสผ่าน']);
        exit;
    }
    
    // ดึงข้อมูลจาก POST
    $password = $_POST['pass1'];
    $password_confirm = $_POST['pass2'];
    
    // ตรวจสอบรหัสผ่าน
    if (empty($password) || empty($password_confirm)) {
        wp_send_json_error(['message' => 'กรุณากรอกรหัสผ่าน']);
        exit;
    }
    
    if ($password !== $password_confirm) {
        wp_send_json_error(['message' => 'รหัสผ่านไม่ตรงกัน']);
        exit;
    }
    
    if (strlen($password) < 8) {
        wp_send_json_error(['message' => 'รหัสผ่านควรมีอย่างน้อย 8 ตัวอักษร']);
        exit;
    }
    
    // ดึงข้อมูลผู้ใช้
    $user = null;
    $user_id = isset($_POST['user_id']) ? intval($_POST['user_id']) : 0;
    $login = isset($_POST['login']) ? sanitize_user($_POST['login']) : '';
    
    if ($user_id > 0) {
        // หาผู้ใช้จาก ID
        $user = get_user_by('id', $user_id);
    } elseif (!empty($login)) {
        // หาผู้ใช้จาก login
        $user = get_user_by(is_email($login) ? 'email' : 'login', $login);
    }
    
    // ตรวจสอบว่าพบผู้ใช้หรือไม่
    if (!$user) {
        wp_send_json_error(['message' => 'ไม่พบข้อมูลผู้ใช้']);
        exit;
    }
    
    // อัปเดตรหัสผ่าน
    wp_set_password($password, $user->ID);
    
    if ($debug) {
        error_log('Password reset successful for user ID: ' . $user->ID);
    }
    
    // ลบคีย์รีเซ็ตรหัสผ่าน (ถ้ามี)
    delete_user_meta($user->ID, 'dga_password_reset_key');
    delete_user_meta($user->ID, 'dga_password_reset_expiry');
    
    // สร้างโทเค็นสำหรับการล็อกอินอัตโนมัติ
    $token = wp_generate_password(32, false);
    update_user_meta($user->ID, 'dga_auto_login_token', $token);
    
    // ตั้งเวลาหมดอายุของโทเค็น (30 นาที)
    $expiry_time = time() + (30 * MINUTE_IN_SECONDS);
    update_user_meta($user->ID, 'dga_auto_login_token_expiry', $expiry_time);
    
    // ส่งข้อมูลสำเร็จ
    wp_send_json_success([
        'message' => 'ตั้งรหัสผ่านสำเร็จ! กำลังเข้าสู่ระบบ...',
        'user_id' => $user->ID,
        'token' => $token,
        'username' => $user->user_login
    ]);
    exit;
}

// แทนที่ hook เดิมด้วย hook ใหม่
remove_action('wp_ajax_nopriv_dga_reset_password', 'dga_ajax_reset_password');
add_action('wp_ajax_nopriv_dga_reset_password', 'dga_ajax_reset_password');

/**
 * Endpoint สำหรับการล็อกอินอัตโนมัติหลังจากตั้งรหัสผ่าน
 */
function dga_auto_login() {
    // ตรวจสอบว่ามีพารามิเตอร์ที่จำเป็นหรือไม่
    if (!isset($_GET['user_id']) || !isset($_GET['token'])) {
        return;
    }
    
    // ถ้าผู้ใช้ล็อกอินอยู่แล้ว ให้ข้ามขั้นตอนนี้ไป
    if (is_user_logged_in()) {
        return;
    }
    
    $user_id = intval($_GET['user_id']);
    $token = sanitize_text_field($_GET['token']);
    
    // ตรวจสอบว่า user ID ถูกต้องหรือไม่
    $user = get_user_by('id', $user_id);
    if (!$user) {
        return;
    }
    
    $stored_token = get_user_meta($user_id, 'dga_auto_login_token', true);
    $token_expiry = get_user_meta($user_id, 'dga_auto_login_token_expiry', true);
    
    // ตรวจสอบโทเค็นและเวลาหมดอายุ
    if ($token && $stored_token && $token === $stored_token && $token_expiry > time()) {
        // ล็อกอินผู้ใช้อัตโนมัติด้วยการตั้งค่าที่เหมาะสม
        // กำหนดเวลาหมดอายุของ cookie และใช้ค่าที่เหมาะสม
        $expiration = time() + apply_filters('auth_cookie_expiration', 2 * DAY_IN_SECONDS, $user_id, true);
        
        // ใช้ WordPress API สำหรับการตั้งค่า auth cookie อย่างปลอดภัย
        wp_clear_auth_cookie();
        wp_set_auth_cookie($user_id, true, is_ssl());
        do_action('wp_login', $user->user_login, $user);
        
        // อัปเดตเวลาที่ล็อกอินล่าสุด
        update_user_meta($user_id, 'last_login', current_time('mysql'));
        
        // ลบโทเค็นหลังจากใช้งาน
        delete_user_meta($user_id, 'dga_auto_login_token');
        delete_user_meta($user_id, 'dga_auto_login_token_expiry');
        
        // ทำการเปลี่ยนเส้นทางอย่างปลอดภัย
        wp_safe_redirect(user_admin_url());
        exit;
    } else if ($token && $stored_token) {
        // ในกรณีที่โทเค็นหมดอายุหรือไม่ถูกต้อง ให้ลบทิ้ง
        delete_user_meta($user_id, 'dga_auto_login_token');
        delete_user_meta($user_id, 'dga_auto_login_token_expiry');
    }
}
// ใช้ hook ที่มีความสำคัญสูงกว่า init และตรวจสอบหลังจากที่ WordPress โหลดแล้ว
add_action('wp_loaded', 'dga_auto_login', 20);

/**
 * เรียกใช้ scripts และ styles เฉพาะเมื่อมี shortcode บนหน้า
 * หรือเมื่อมีการร้องขอการตั้งรหัสผ่าน
 */
function dga_enqueue_scripts() {
    global $post;
    
    $is_reset_request = isset($_GET['action']) && $_GET['action'] === 'dga_set_password';
    
    if ((is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'dga_create_user')) || $is_reset_request) {
        wp_enqueue_style('dga-newuser-style', get_stylesheet_directory_uri() . '/css/dga-newuser.css', array(), '1.0.0');
        wp_enqueue_script('dga-newuser-script', get_stylesheet_directory_uri() . '/js/dga-newuser.js', array('jquery'), '1.0.0', true);
    }
}
add_action('wp_enqueue_scripts', 'dga_enqueue_scripts');


/**
 * เพิ่ม AJAX endpoint สำหรับการล็อกอินโดยตรง
 */
function dga_add_direct_login_endpoint() {
    add_action('wp_ajax_nopriv_dga_direct_login', 'dga_direct_login_handler');
}
add_action('init', 'dga_add_direct_login_endpoint');


/**
 * จัดการ AJAX request สำหรับการล็อกอินโดยตรง
 */
function dga_direct_login_handler() {
    // การตรวจสอบข้อมูลที่จำเป็น
    if (!isset($_GET['user_id']) || !isset($_GET['token']) || !isset($_GET['ajax_nonce'])) {
        wp_send_json_error(['message' => 'ข้อมูลไม่ครบถ้วน']);
        exit;
    }
    
    // ตรวจสอบ nonce
    if (!wp_verify_nonce($_GET['ajax_nonce'], 'dga_direct_login_nonce')) {
        wp_send_json_error(['message' => 'การตรวจสอบความปลอดภัยล้มเหลว']);
        exit;
    }
    
    $user_id = intval($_GET['user_id']);
    $token = sanitize_text_field($_GET['token']);
    
    // ตรวจสอบว่าผู้ใช้มีอยู่จริง
    $user = get_user_by('id', $user_id);
    if (!$user) {
        wp_send_json_error(['message' => 'ไม่พบข้อมูลผู้ใช้']);
        exit;
    }
    
    // ตรวจสอบโทเค็น
    $stored_token = get_user_meta($user_id, 'dga_auto_login_token', true);
    $token_expiry = get_user_meta($user_id, 'dga_auto_login_token_expiry', true);
    
    if (!$stored_token || $token !== $stored_token) {
        wp_send_json_error(['message' => 'โทเค็นไม่ถูกต้อง']);
        exit;
    }
    
    if (!$token_expiry || $token_expiry < time()) {
        delete_user_meta($user_id, 'dga_auto_login_token');
        delete_user_meta($user_id, 'dga_auto_login_token_expiry');
        wp_send_json_error(['message' => 'โทเค็นหมดอายุ']);
        exit;
    }
    
    // ล็อกอินผู้ใช้
    wp_clear_auth_cookie();
    wp_set_auth_cookie($user_id, true, is_ssl());
    wp_set_current_user($user_id);
    
    // ลบโทเค็นหลังจากใช้งาน
    delete_user_meta($user_id, 'dga_auto_login_token');
    delete_user_meta($user_id, 'dga_auto_login_token_expiry');
    
    // ส่งข้อมูลสำเร็จ
    wp_send_json_success([
        'message' => 'เข้าสู่ระบบสำเร็จ',
        'redirect_url' => user_admin_url() // หรือ URL อื่นที่ต้องการให้ redirect ไป
    ]);
    exit;
}


/**
 * เพิ่มข้อมูล nonce สำหรับการล็อกอินโดยตรงไปยัง JavaScript
 */
function dga_add_login_nonce() {
    // ตรวจสอบว่ามีการร้องขอการตั้งรหัสผ่านหรือไม่
    $is_reset_request = isset($_GET['action']) && $_GET['action'] === 'dga_set_password';
    
    if ($is_reset_request) {
        // ส่ง nonce สำหรับการล็อกอินโดยตรง
        wp_localize_script('dga-newuser-script', 'dga_reset_params', [
            'nonce' => wp_create_nonce('dga_ajax_reset_password'),
            'login_nonce' => wp_create_nonce('dga_direct_login_nonce'),
            'ajaxurl' => admin_url('admin-ajax.php')
        ]);
    }
}
add_action('wp_enqueue_scripts', 'dga_add_login_nonce', 99);


/**** ระบบเลือก Template *******/

// Add shortcode
add_shortcode('dga_template_selector', 'dga_template_selector_function');

// Enqueue necessary scripts and styles
add_action('wp_enqueue_scripts', 'dga_template_selector_scripts');

function dga_template_selector_scripts() {
    // Register and enqueue stylesheet
    wp_register_style(
        'dga-template-style',
        get_stylesheet_directory_uri() . '/css/dga-template.css',
        array(),
        '1.2.0',
        'all'
    );
    wp_enqueue_style('dga-template-style');
    
    // Register and enqueue script
    wp_register_script(
        'dga-template-script',
        get_stylesheet_directory_uri() . '/js/dga-template.js',
        array('jquery'),
        '1.2.0',
        true
    );
    wp_enqueue_script('dga-template-script');
    
    // Localize script with WordPress AJAX URL and nonce
    wp_localize_script(
        'dga-template-script',
        'dga_template_vars',
        array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('dga_template_nonce'),
            'current_page_id' => get_the_ID(),
            'success_message' => __('Template applied successfully!', 'dga-template'),
            'error_message' => __('An error occurred. Please try again.', 'dga-template')
        )
    );
}

// Main shortcode function
function dga_template_selector_function($atts) {
    // Extract shortcode attributes with defaults
    $atts = shortcode_atts(
        array(
            'authorized_users' => '', // Comma-separated list of user IDs
            'authorized_roles' => 'administrator,editor', // Comma-separated list of roles
        ),
        $atts,
        'dga_template_selector'
    );
    
    // Check if user is logged in
    if (!is_user_logged_in()) {
        return ''; // Return empty if not logged in
    }
    
    // Get current user
    $current_user = wp_get_current_user();
    $user_id = $current_user->ID;
    $user_roles = $current_user->roles;
    
    // Parse authorized users and roles
    $authorized_users = array_map('trim', explode(',', $atts['authorized_users']));
    $authorized_roles = array_map('trim', explode(',', $atts['authorized_roles']));
    
    // Check if user is authorized
    $is_authorized = false;
    
    // Check by user ID
    if (in_array($user_id, $authorized_users)) {
        $is_authorized = true;
    }
    
    // Check by role
    if (!$is_authorized) {
        foreach ($user_roles as $role) {
            if (in_array($role, $authorized_roles)) {
                $is_authorized = true;
                break;
            }
        }
    }
    
    // Return empty if not authorized
    if (!$is_authorized) {
        return '';
    }
    
    // Add our title filter to the posts query
    add_filter('posts_where', 'dga_filter_template_titles', 10, 2);
    
    function dga_filter_template_titles($where, $query) {
        global $wpdb;
        if ($title_filter = $query->get('title_filter')) {
            $where .= " AND " . $wpdb->posts . ".post_title LIKE '$title_filter%'";
        }
        return $where;
    }
    
    // Get all template pages after applying our filter
    $templates = get_posts(array(
        'post_type' => 'page',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'title_filter' => 'Template-'
    ));
    
    // Remove our filter
    remove_filter('posts_where', 'dga_filter_template_titles', 10);
    
    // Prepare output
    $output = '<div class="dga-template-selector">';
    $output .= '<button class="dga-template-button" id="dga-template-toggle" data-tooltip="เปลี่ยนเทมเพลต"><i class="dga-cog-icon"></i></button>';
    $output .= '<div class="dga-template-modal" id="dga-template-modal">';
    $output .= '<div class="dga-template-modal-content">';
    $output .= '<div class="dga-template-modal-header">';
    $output .= '<h2>' . __('เลือกรูปแบบเทมเพลต', 'dga-template') . '</h2>';
    $output .= '<span class="dga-template-close">&times;</span>';
    $output .= '</div>'; // End header
    $output .= '<div class="dga-template-modal-body">';
    
    if (!empty($templates)) {
        $output .= '<div class="dga-template-grid">';
        foreach ($templates as $template) {
            $template_id = $template->ID;
            $template_title = str_replace('Template-', '', $template->post_title);
            $template_featured_image = get_the_post_thumbnail_url($template_id, 'medium');
            
            if (!$template_featured_image) {
                $template_featured_image = get_stylesheet_directory_uri() . '/css/template-placeholder.png';
            }
            
            $output .= '<div class="dga-template-item" data-template-id="' . esc_attr($template_id) . '">';
            $output .= '<div class="dga-template-preview">';
            $output .= '<img src="' . esc_url($template_featured_image) . '" alt="' . esc_attr($template_title) . '">';
            $output .= '</div>';
            $output .= '<div class="dga-template-details">';
            $output .= '<h3>' . esc_html($template_title) . '</h3>';
            $output .= '<button class="dga-template-apply-btn" data-template-id="' . esc_attr($template_id) . '">' . __('ใช้รูปแบบนี้', 'dga-template') . '</button>';
            $output .= '</div>';
            $output .= '</div>';
        }
        $output .= '</div>'; // End grid
    } else {
        $output .= '<p class="dga-no-templates">' . __('ไม่พบเทมเพลตที่พร้อมใช้งาน กรุณาสร้างหน้าที่มีชื่อขึ้นต้นด้วย "Template-"', 'dga-template') . '</p>';
    }
    
    $output .= '</div>'; // End body
    $output .= '<div class="dga-template-modal-footer">';
    $output .= '<div class="dga-template-message" id="dga-template-message"></div>';
    $output .= '</div>'; // End footer
    $output .= '</div>'; // End modal content
    $output .= '</div>'; // End modal
    $output .= '</div>'; // End container
    
    return $output;
}

// AJAX handler for cloning templates - ใช้วิธีที่ 3
add_action('wp_ajax_dga_clone_template', 'dga_clone_template_ajax');

function dga_clone_template_ajax() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_template_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        exit;
    }
    
    // Get template ID and current page ID
    $template_id = isset($_POST['template_id']) ? intval($_POST['template_id']) : 0;
    $current_page_id = isset($_POST['current_page_id']) ? intval($_POST['current_page_id']) : 0;
    
    // Check if both IDs are valid
    if ($template_id <= 0 || $current_page_id <= 0) {
        wp_send_json_error(array('message' => 'Invalid page IDs'));
        exit;
    }
    
    // Get template page
    $template_page = get_post($template_id);
    $current_page = get_post($current_page_id);
    
    // Check if template exists
    if (!$template_page || $template_page->post_type !== 'page') {
        wp_send_json_error(array('message' => 'Template page not found'));
        exit;
    }
    
    // Check if current page exists
    if (!$current_page) {
        wp_send_json_error(array('message' => 'Current page not found'));
        exit;
    }
    
    // Begin transaction
    global $wpdb;
    $wpdb->query('START TRANSACTION');
    
    try {
        // 1. อัปเดตเนื้อหาหลักของหน้าปัจจุบัน
        $update_args = array(
            'ID' => $current_page_id,
            'post_content' => $template_page->post_content,
            // คงสถานะเดิมของเพจปลายทาง
            'post_status' => $current_page->post_status,
            // คัดลอกการตั้งค่าอื่นๆ จากเทมเพลต
            'menu_order' => $template_page->menu_order,
        );
        
        $update_result = wp_update_post($update_args, true);
        
        if (is_wp_error($update_result)) {
            throw new Exception($update_result->get_error_message());
        }
        
        // 2. ลบข้อมูล Elementor และ meta ทั้งหมดของหน้าปลายทาง (ยกเว้นข้อมูลสำคัญบางส่วน)
        $preserve_metas = array(
            '_edit_lock',
            '_edit_last',
            'post_date',
            'post_date_gmt',
            'post_modified',
            'post_modified_gmt'
        );
        
        // สร้าง placeholders สำหรับ SQL
        $placeholders = implode(',', array_fill(0, count($preserve_metas), '%s'));
        $query_args = array_merge(array($current_page_id), $preserve_metas);
        
        $wpdb->query(
            $wpdb->prepare(
                "DELETE FROM $wpdb->postmeta WHERE post_id = %d AND meta_key NOT IN ($placeholders)",
                $query_args
            )
        );
        
        // 3. คัดลอกข้อมูล meta ทั้งหมดจากหน้าต้นทาง
        $source_metas = $wpdb->get_results(
            $wpdb->prepare(
                "SELECT meta_key, meta_value FROM $wpdb->postmeta 
                 WHERE post_id = %d AND meta_key NOT IN ('_edit_lock', '_edit_last')",
                $template_id
            )
        );
        
        if (!empty($source_metas)) {
            foreach ($source_metas as $meta) {
                update_post_meta($current_page_id, $meta->meta_key, maybe_unserialize($meta->meta_value));
            }
        }
        
        // 4. คัดลอกข้อมูล Elementor โดยเฉพาะอย่างยิ่ง
        $elementor_keys = array(
            '_elementor_data',
            '_elementor_page_settings',
            '_elementor_edit_mode',
            '_elementor_template_type',
            '_elementor_version',
            '_elementor_pro_version',
            '_elementor_css',
            '_elementor_page_assets',
            '_elementor_controls_usage',
            '_elementor_page_meta',
            '_elementor_cache_version',
            '_elementor_conditions',
            '_elementor_section_usage',
            '_elementor_container_usage'
        );
        
        foreach ($elementor_keys as $key) {
            $value = get_post_meta($template_id, $key, true);
            if (!empty($value)) {
                update_post_meta($current_page_id, $key, $value);
            } else {
                // ลบข้อมูลเดิมที่อาจมีอยู่
                delete_post_meta($current_page_id, $key);
            }
        }
        
        // 5. คัดลอกแฟ้มแนบ (attachments) ที่อาจมีการใช้งานในหน้า
        $thumbnail_id = get_post_meta($template_id, '_thumbnail_id', true);
        if (!empty($thumbnail_id)) {
            update_post_meta($current_page_id, '_thumbnail_id', $thumbnail_id);
        }
        
        // 6. คัดลอก Page Template ที่ใช้
        $template_file = get_post_meta($template_id, '_wp_page_template', true);
        if (!empty($template_file)) {
            update_post_meta($current_page_id, '_wp_page_template', $template_file);
        }
        
        // 7. คัดลอก Taxonomy terms
        $taxonomies = get_object_taxonomies('page');
        foreach ($taxonomies as $taxonomy) {
            // ลบ terms เดิมทั้งหมด
            wp_delete_object_term_relationships($current_page_id, $taxonomy);
            
            // คัดลอก terms จากต้นฉบับ
            $terms = wp_get_object_terms($template_id, $taxonomy, array('fields' => 'ids'));
            if (!is_wp_error($terms) && !empty($terms)) {
                wp_set_object_terms($current_page_id, $terms, $taxonomy);
            }
        }
        
        // 8. ล้าง Cache ของ Elementor
        if (class_exists('Elementor\Plugin')) {
            // ล้าง cache ที่เกี่ยวข้องทั้งหมด
            Elementor\Plugin::$instance->files_manager->clear_cache();
            
            // ล้าง cache ของไฟล์ CSS
            if (class_exists('\Elementor\Core\Files\Manager')) {
                $css_file = new \Elementor\Core\Files\CSS\Post($current_page_id);
                $css_file->delete();
            }
            
            // อัปเดต document ถ้ามีการใช้งาน
            if (method_exists('\Elementor\Plugin', 'instance') && method_exists(\Elementor\Plugin::instance()->documents, 'get')) {
                $document = \Elementor\Plugin::instance()->documents->get($current_page_id);
                if ($document) {
                    $document->save_template_type();
                }
            }
            
            // ล้าง cache ของธีม
            if (function_exists('wp_cache_flush')) {
                wp_cache_flush();
            }
        }
        
        // Transaction สำเร็จ
        $wpdb->query('COMMIT');
        
        // ส่งผลลัพธ์กลับ
        wp_send_json_success(array(
            'message' => 'Template applied successfully',
            'template_id' => $template_id,
            'page_id' => $current_page_id
        ));
        
    } catch (Exception $e) {
        // ถ้ามีข้อผิดพลาด - rollback transaction
        $wpdb->query('ROLLBACK');
        wp_send_json_error(array('message' => 'Error: ' . $e->getMessage()));
    }
    
    exit;
}


/******* Post Activity Tracker *********/


// ป้องกันการเข้าถึงโดยตรง
if (!defined('ABSPATH')) {
    exit;
}

class Post_Activity_Tracker {
    
    // เก็บ instance ของคลาส (Singleton pattern)
    private static $instance = null;
    
    // ชื่อตารางในฐานข้อมูล
    private $table_name;
    
    // Custom Fields ที่ต้องการติดตาม
    private $tracked_fields = [
        'ckan_cdata', 'ckan_gd_agree', 'ckan_org_name', 'ckan_org_mail', 
        'ckan_objective', 'ckan_fr_update', 'ckan_fr_year', 'ckan_area', 
        'ckan_source', 'ckan_cformat', 'ckan_cgov', 'ckan_clicense', 
        'ckan_caccess', 'ckan_url', 'ckan_language', 'ckan_data_create', 
        'ckan_data_update', 'ckan_height_value', 'ckan_ref', 'ckan_create_by', 
        'ckan_auto_createpost', 'ckan_auto_updatepost', 'ckan_asset'
    ];
    
    // Mapping ชื่อฟิลด์เป็นชื่อที่อ่านง่าย
    private $field_names = [
        'ckan_cdata' => 'ประเภทชุดข้อมูล',
        'ckan_gd_agree' => 'ยินยอมให้นำชื่อชุดข้อมูลไปใช้ที่ GD-Catalog',
        'ckan_org_name' => 'ชื่อผู้ติดต่อ',
        'ckan_org_mail' => 'อีเมลผู้ติดต่อ',
        'ckan_objective' => 'วัตถุประสงค์',
        'ckan_fr_update' => 'หน่วยความถี่ของการปรับปรุงข้อมูล',
        'ckan_fr_year' => 'ค่าความถี่ของการปรับปรุงข้อมูล (ความถี่น้อยที่สุด)',
        'ckan_area' => 'ขอบเขตเชิงภูมิศาสตร์หรือเชิงพื้นที่',
        'ckan_source' => 'แหล่งที่มา',
        'ckan_cformat' => 'รูปแบบการเก็บข้อมูล',
        'ckan_cgov' => 'หมวดหมู่ข้อมูลตามธรรมาภิบาลข้อมูลภาครัฐ',
        'ckan_clicense' => 'สัญญาอนุญาตให้ใช้ข้อมูล',
        'ckan_caccess' => 'เงื่อนไขในการเข้าถึงข้อมูล',
        'ckan_url' => 'URL',
        'ckan_language' => 'ภาษาที่ใช้',
        'ckan_data_create' => 'วันที่เริ่มต้นสร้าง',
        'ckan_data_update' => 'วันที่อัพเดต',
        'ckan_height_value' => 'ชุดข้อมูลที่มีคุณค่าสูง',
        'ckan_ref' => 'ข้อมูลอ้างอิง',
        'ckan_create_by' => 'สร้างโดย',
        'ckan_auto_createpost' => 'สร้างในระบบเมื่อ',
        'ckan_auto_updatepost' => 'ปรับปรุงครั้งล่าสุดในระบบเมื่อ',
        'ckan_asset' => 'ข้อมูลและทรัพยากร'
    ];
    
    /**
     * Constructor
     */
    private function __construct() {
        global $wpdb;
        
        $this->table_name = $wpdb->prefix . 'post_activity_logs';
        
        // สร้างตารางฐานข้อมูลเมื่อเริ่มต้นคลาส
        $this->create_table();
        
        // ลงทะเบียน hooks
        $this->register_hooks();
        
        // ลงทะเบียน shortcode
        add_shortcode('post_activity_logs', [$this, 'activity_logs_shortcode']);
        
        // ลงทะเบียน assets
        add_action('wp_enqueue_scripts', [$this, 'enqueue_scripts']);
    }
    
    /**
     * รับ instance ของคลาส (Singleton pattern)
     */
    public static function get_instance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        
        return self::$instance;
    }
    
    /**
     * สร้างตารางฐานข้อมูลสำหรับเก็บบันทึกกิจกรรม
     */
    private function create_table() {
        global $wpdb;
        
        $charset_collate = $wpdb->get_charset_collate();
        
        $sql = "CREATE TABLE IF NOT EXISTS {$this->table_name} (
            id bigint(20) unsigned NOT NULL AUTO_INCREMENT,
            post_id bigint(20) unsigned NOT NULL,
            user_id bigint(20) unsigned NOT NULL,
            activity_type varchar(50) NOT NULL,
            field_name varchar(100) DEFAULT NULL,
            old_value longtext DEFAULT NULL,
            new_value longtext DEFAULT NULL,
            ip_address varchar(100) DEFAULT NULL,
            user_agent text DEFAULT NULL,
            created_at datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            KEY post_id (post_id),
            KEY user_id (user_id),
            KEY activity_type (activity_type),
            KEY field_name (field_name),
            KEY created_at (created_at)
        ) $charset_collate;";
        
        require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
        dbDelta($sql);
    }
    
    /**
     * ลงทะเบียน hooks
     */
    private function register_hooks() {
        // Track post views
        add_action('wp', [$this, 'track_post_view']);
        
        // Track custom field changes
        add_action('updated_post_meta', [$this, 'track_updated_meta'], 10, 4);
        add_action('added_post_meta', [$this, 'track_added_meta'], 10, 4);
        add_action('deleted_post_meta', [$this, 'track_deleted_meta'], 10, 4);
        
        // Track CSV downloads
        add_action('init', [$this, 'track_csv_download']);
    }
    
    /**
     * บันทึกกิจกรรม
     */
    public function log_activity($post_id, $activity_type, $field_name = null, $old_value = null, $new_value = null) {
        global $wpdb;
        
        $user_id = get_current_user_id();
        $ip_address = $this->get_client_ip();
        $user_agent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';
        
        $wpdb->insert(
            $this->table_name,
            [
                'post_id' => $post_id,
                'user_id' => $user_id,
                'activity_type' => $activity_type,
                'field_name' => $field_name,
                'old_value' => maybe_serialize($old_value),
                'new_value' => maybe_serialize($new_value),
                'ip_address' => $ip_address,
                'user_agent' => $user_agent
            ],
            [
                '%d', '%d', '%s', '%s', '%s', '%s', '%s', '%s'
            ]
        );
        
        return $wpdb->insert_id;
    }
    
    /**
     * ติดตามการเข้าชมโพสต์
     */
    public function track_post_view() {
        // ตรวจสอบว่าเป็นหน้าโพสต์เดี่ยวหรือไม่
        if (is_single() && !is_admin() && !is_bot()) {
            global $post;
            
            // หลีกเลี่ยงการบันทึกซ้ำโดยใช้ cookie หรือ session
            $visited_posts = isset($_COOKIE['visited_posts']) ? json_decode(stripslashes($_COOKIE['visited_posts']), true) : [];
            
            if (!in_array($post->ID, $visited_posts)) {
                // บันทึกกิจกรรมการเข้าชม
                $this->log_activity($post->ID, 'view');
                
                // เพิ่มโพสต์นี้ลงใน cookie
                $visited_posts[] = $post->ID;
                setcookie('visited_posts', json_encode($visited_posts), time() + 3600, '/'); // หมดอายุใน 1 ชั่วโมง
            }
        }
    }
    
    /**
     * ติดตามการอัพเดท Custom Fields
     */
    public function track_updated_meta($meta_id, $post_id, $meta_key, $meta_value) {
        // ตรวจสอบว่าเป็น custom field ที่ต้องการติดตามหรือไม่
        if (in_array($meta_key, $this->tracked_fields)) {
            $old_value = get_post_meta($post_id, $meta_key, true);
            
            // บันทึกเฉพาะเมื่อค่าเปลี่ยนแปลง
            if ($old_value !== $meta_value) {
                $this->log_activity($post_id, 'update', $meta_key, $old_value, $meta_value);
            }
        }
    }
    
    /**
     * ติดตามการเพิ่ม Custom Fields
     */
    public function track_added_meta($meta_id, $post_id, $meta_key, $meta_value) {
        // ตรวจสอบว่าเป็น custom field ที่ต้องการติดตามหรือไม่
        if (in_array($meta_key, $this->tracked_fields)) {
            $this->log_activity($post_id, 'add', $meta_key, null, $meta_value);
        }
    }
    
    /**
     * ติดตามการลบ Custom Fields
     */
    public function track_deleted_meta($meta_ids, $post_id, $meta_key, $meta_value) {
        // ตรวจสอบว่าเป็น custom field ที่ต้องการติดตามหรือไม่
        if (in_array($meta_key, $this->tracked_fields)) {
            $this->log_activity($post_id, 'delete', $meta_key, $meta_value, null);
        }
    }
    
    /**
     * ติดตามการดาวน์โหลด CSV
     */
    public function track_csv_download() {
        if (isset($_GET['download_csv']) && isset($_GET['post_id'])) {
            $post_id = intval($_GET['post_id']);
            
            // ตรวจสอบสิทธิ์
            if (!current_user_can('read') || !get_post($post_id)) {
                return;
            }
            
            // บันทึกกิจกรรมการดาวน์โหลด
            $this->log_activity($post_id, 'download_csv');
            
            // ดำเนินการส่งไฟล์ CSV
            // โค้ดส่วนนี้จะต้องปรับให้เหมาะสมกับโครงสร้างข้อมูลของคุณ
            $filename = 'post-data-' . $post_id . '.csv';
            
            header('Content-Type: text/csv');
            header('Content-Disposition: attachment; filename="' . $filename . '"');
            
            $output = fopen('php://output', 'w');
            
            // เพิ่มข้อมูลลงใน CSV file
            fputcsv($output, ['Field', 'Value']);
            
            foreach ($this->tracked_fields as $field) {
                $value = get_post_meta($post_id, $field, true);
                
                if (!empty($this->field_names[$field])) {
                    fputcsv($output, [$this->field_names[$field], $value]);
                } else {
                    fputcsv($output, [$field, $value]);
                }
            }
            
            fclose($output);
            exit;
        }
    }
    
    /**
     * Shortcode สำหรับแสดงบันทึกกิจกรรม
     */
    public function activity_logs_shortcode($atts) {
        $atts = shortcode_atts([
            'post_id' => get_the_ID(),
            'limit' => 50,
            'show_filters' => 'yes'
        ], $atts, 'post_activity_logs');
        
        $post_id = intval($atts['post_id']);
        $limit = intval($atts['limit']);
        $show_filters = $atts['show_filters'] === 'yes';
        
        // ตรวจสอบสิทธิ์
        if (!current_user_can('read') || !get_post($post_id)) {
            return '<p>ไม่พบข้อมูลหรือคุณไม่มีสิทธิ์เข้าถึง</p>';
        }
        
        // ดึงข้อมูลบันทึกกิจกรรม
        $logs = $this->get_activity_logs($post_id, $limit);
        
        // เริ่มต้นสร้าง output
        ob_start();
        
        // แสดงปุ่มดาวน์โหลด CSV
        echo '<div class="activity-logs-container">';
        echo '<div class="activity-header">';
        echo '<h3>ประวัติการใช้งาน</h3>';
        echo '<a href="' . esc_url(add_query_arg(['download_csv' => 1, 'post_id' => $post_id])) . '" class="download-csv">ดาวน์โหลด CSV</a>';
        echo '</div>';
        
        // แสดง filters หากต้องการ
        if ($show_filters) {
            echo '<div class="activity-filters">';
            echo '<select id="activity-type-filter">';
            echo '<option value="">ทุกประเภทกิจกรรม</option>';
            echo '<option value="view">การเข้าชม</option>';
            echo '<option value="add">การเพิ่มข้อมูล</option>';
            echo '<option value="update">การอัพเดทข้อมูล</option>';
            echo '<option value="delete">การลบข้อมูล</option>';
            echo '<option value="download_csv">การดาวน์โหลด CSV</option>';
            echo '</select>';
            
            echo '<input type="text" id="date-range" placeholder="ช่วงวันที่" />';
            echo '<button id="apply-filters" class="filter-button">กรองข้อมูล</button>';
            echo '</div>';
        }
        
        // แสดงตารางบันทึกกิจกรรม
        echo '<div class="activity-logs-table-wrapper">';
        echo '<table class="activity-logs-table">';
        echo '<thead>';
        echo '<tr>';
        echo '<th>วันที่และเวลา</th>';
        echo '<th>ผู้ใช้</th>';
        echo '<th>ประเภทกิจกรรม</th>';
        echo '<th>ฟิลด์</th>';
        echo '<th>ข้อมูลเก่า</th>';
        echo '<th>ข้อมูลใหม่</th>';
        echo '</tr>';
        echo '</thead>';
        echo '<tbody>';
        
        if (empty($logs)) {
            echo '<tr><td colspan="6">ยังไม่มีบันทึกกิจกรรม</td></tr>';
        } else {
            foreach ($logs as $log) {
                echo '<tr>';
                echo '<td>' . date_i18n('d/m/Y H:i:s', strtotime($log->created_at)) . '</td>';
                echo '<td>' . $this->get_user_display_name($log->user_id) . '</td>';
                echo '<td>' . $this->get_activity_type_label($log->activity_type) . '</td>';
                echo '<td>' . $this->get_field_display_name($log->field_name) . '</td>';
                echo '<td>' . $this->format_field_value($log->old_value) . '</td>';
                echo '<td>' . $this->format_field_value($log->new_value) . '</td>';
                echo '</tr>';
            }
        }
        
        echo '</tbody>';
        echo '</table>';
        echo '</div>';
        
        // แสดงปุ่มโหลดเพิ่มเติม
        if (count($logs) >= $limit) {
            echo '<div class="load-more-wrapper">';
            echo '<button id="load-more" class="load-more-button" data-post-id="' . $post_id . '" data-offset="' . $limit . '">โหลดเพิ่มเติม</button>';
            echo '</div>';
        }
        
        echo '</div>';
        
        return ob_get_clean();
    }
    
    /**
     * ดึงข้อมูลบันทึกกิจกรรม
     */
    private function get_activity_logs($post_id, $limit = 50, $offset = 0, $filters = []) {
        global $wpdb;
        
        $where = $wpdb->prepare("WHERE post_id = %d", $post_id);
        
        // เพิ่มเงื่อนไขตามฟิลเตอร์
        if (!empty($filters['activity_type'])) {
            $where .= $wpdb->prepare(" AND activity_type = %s", $filters['activity_type']);
        }
        
        if (!empty($filters['start_date']) && !empty($filters['end_date'])) {
            $where .= $wpdb->prepare(" AND created_at >= %s AND created_at <= %s", 
                $filters['start_date'] . ' 00:00:00', 
                $filters['end_date'] . ' 23:59:59'
            );
        }
        
        $query = "SELECT * FROM {$this->table_name} 
                 {$where} 
                 ORDER BY created_at DESC 
                 LIMIT %d OFFSET %d";
        
        $query = $wpdb->prepare($query, $limit, $offset);
        
        return $wpdb->get_results($query);
    }
    
    /**
     * แปลงประเภทกิจกรรมเป็นข้อความที่อ่านง่าย
     */
    private function get_activity_type_label($type) {
        $labels = [
            'view' => 'เข้าชม',
            'add' => 'เพิ่มข้อมูล',
            'update' => 'อัพเดทข้อมูล',
            'delete' => 'ลบข้อมูล',
            'download_csv' => 'ดาวน์โหลด CSV'
        ];
        
        return isset($labels[$type]) ? $labels[$type] : $type;
    }
    
    /**
     * รับชื่อฟิลด์ที่แสดงผล
     */
    private function get_field_display_name($field_name) {
        if (empty($field_name)) {
            return '-';
        }
        
        return isset($this->field_names[$field_name]) ? $this->field_names[$field_name] : $field_name;
    }
    
    /**
     * รับชื่อผู้ใช้ที่แสดงผล
     */
    private function get_user_display_name($user_id) {
        if ($user_id === 0) {
            return 'ผู้เยี่ยมชม';
        }
        
        $user = get_user_by('id', $user_id);
        
        if ($user) {
            return $user->display_name;
        }
        
        return "ผู้ใช้ #$user_id";
    }
    
    /**
     * จัดรูปแบบค่าของฟิลด์สำหรับแสดงผล
     */
    private function format_field_value($value) {
        if ($value === null) {
            return '-';
        }
        
        $value = maybe_unserialize($value);
        
        if (is_array($value) || is_object($value)) {
            return '<pre>' . esc_html(print_r($value, true)) . '</pre>';
        }
        
        if (is_bool($value)) {
            return $value ? 'จริง' : 'เท็จ';
        }
        
        return esc_html($value);
    }
    
    /**
     * รับ IP ของไคลเอนต์
     */
    private function get_client_ip() {
        $ip = '';
        
        if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
            $ip = $_SERVER['HTTP_CLIENT_IP'];
        } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
            $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
        } else {
            $ip = $_SERVER['REMOTE_ADDR'];
        }
        
        return $ip;
    }
    
    /**
     * ลงทะเบียน JavaScript และ CSS
     */
    public function enqueue_scripts() {
        // ลงทะเบียนเฉพาะเมื่อมี shortcode ปรากฏ
        global $post;
        
        if (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'post_activity_logs')) {
            // ลงทะเบียน DatePicker
            wp_enqueue_script('jquery-ui-datepicker');
            wp_enqueue_style('jquery-ui', 'https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css');
            
            // ลงทะเบียน JavaScript หลัก
            wp_enqueue_script(
                'post-activity-tracker-js',
                get_stylesheet_directory_uri() . '/js/post-activity-tracker.js',
                ['jquery', 'jquery-ui-datepicker'],
                '1.0.0',
                true
            );
            
            // ส่งค่าไปยัง JavaScript
            wp_localize_script('post-activity-tracker-js', 'activityTrackerData', [
                'ajaxUrl' => admin_url('admin-ajax.php'),
                'nonce' => wp_create_nonce('activity-tracker-nonce')
            ]);
            
            // ลงทะเบียน CSS
            wp_enqueue_style(
                'post-activity-tracker-css',
                get_stylesheet_directory_uri() . '/css/post-activity-tracker.css',
                [],
                '1.0.0'
            );
        }
    }
}

// เริ่มต้นคลาส
$post_activity_tracker = Post_Activity_Tracker::get_instance();

/**
 * ฟังก์ชัน AJAX สำหรับโหลดข้อมูลเพิ่มเติม
 */
function load_more_activity_logs() {
    // ตรวจสอบ nonce
    check_ajax_referer('activity-tracker-nonce', 'nonce');
    
    $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
    $offset = isset($_POST['offset']) ? intval($_POST['offset']) : 0;
    $limit = isset($_POST['limit']) ? intval($_POST['limit']) : 20;
    
    // ตรวจสอบฟิลเตอร์
    $filters = [];
    
    if (!empty($_POST['activity_type'])) {
        $filters['activity_type'] = sanitize_text_field($_POST['activity_type']);
    }
    
    if (!empty($_POST['start_date']) && !empty($_POST['end_date'])) {
        $filters['start_date'] = sanitize_text_field($_POST['start_date']);
        $filters['end_date'] = sanitize_text_field($_POST['end_date']);
    }
    
    // ดึงข้อมูลเพิ่มเติม
    $tracker = Post_Activity_Tracker::get_instance();
    $logs = $tracker->get_activity_logs($post_id, $limit, $offset, $filters);
    
    // ส่งข้อมูลกลับ
    wp_send_json_success([
        'logs' => $logs,
        'count' => count($logs)
    ]);
}
add_action('wp_ajax_load_more_activity_logs', 'load_more_activity_logs');
add_action('wp_ajax_nopriv_load_more_activity_logs', 'load_more_activity_logs');




/****** ทดสอบ import json template *********/


if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

/**
 * Class DGA_Template_Importer
 * จัดการการนำเข้า JSON Template สำหรับ Elementor
 */
class DGA_Template_Importer {
    /**
     * Singleton instance
     */
    private static $instance = null;

    /**
     * Templates directory path
     */
    private $templates_dir;

    /**
     * Templates directory URL
     */
    private $templates_url;

    /**
     * Get singleton instance
     */
    public static function get_instance() {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * Constructor
     */
    private function __construct() {
        // กำหนดค่าเริ่มต้น
        $this->templates_dir = get_stylesheet_directory() . '/templates/';
        $this->templates_url = get_stylesheet_directory_uri() . '/templates/';
        
        // สร้างโฟลเดอร์ templates หากยังไม่มี
        $this->create_templates_folder();
        
        // เพิ่ม scripts และ styles
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        
        // เพิ่ม Floating Button
        add_action('wp_footer', array($this, 'add_floating_button'));
        
        // ลงทะเบียน shortcodes
        add_shortcode('dga_template_import', array($this, 'render_single_template_shortcode'));
        add_shortcode('dga_template_gallery', array($this, 'render_template_gallery_shortcode'));
        add_shortcode('dga_template_icon', array($this, 'render_template_icon_shortcode'));
        
        // ลงทะเบียน AJAX handlers
        add_action('wp_ajax_import_json_template', array($this, 'ajax_import_json_template'));
        add_action('wp_ajax_get_template_gallery_html', array($this, 'ajax_get_template_gallery_html'));
        
        // เพิ่มปุ่ม Template ใน Elementor Editor
        add_action('elementor/editor/after_enqueue_scripts', array($this, 'add_template_button_to_editor'));
        
        // เพิ่ม admin menu สำหรับการจัดการ Templates
        if (is_admin()) {
            add_action('admin_menu', array($this, 'add_admin_menu'));
        }
    }

    /**
     * เพิ่ม scripts และ styles
     */
    public function enqueue_scripts() {
        // ตรวจสอบว่าเป็น Elementor Editor หรือไม่
        $is_elementor_editor = false;
        if (class_exists('\Elementor\Plugin')) {
            $is_elementor_editor = \Elementor\Plugin::$instance->editor->is_edit_mode() || \Elementor\Plugin::$instance->preview->is_preview_mode();
        }
        
        global $post;
        
        if (!$is_elementor_editor && 
            (is_a($post, 'WP_Post') && 
             (has_shortcode($post->post_content, 'dga_template_import') || 
              has_shortcode($post->post_content, 'dga_template_gallery') ||
              has_shortcode($post->post_content, 'dga_template_icon')))) {
            
            // Font Awesome สำหรับไอคอน
            wp_enqueue_style('fontawesome', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css', array(), '5.15.4');
            
            // CSS หลัก
            wp_enqueue_style('template-importer-css', get_stylesheet_directory_uri() . '/css/template-importer.css', array(), '1.3.0');
            
            // JavaScript หลัก
            wp_enqueue_script('template-importer-js', get_stylesheet_directory_uri() . '/js/template-importer.js', array('jquery'), '1.3.0', true);
            
            // ส่งค่าไปที่ JavaScript
            wp_localize_script('template-importer-js', 'template_importer_ajax', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'nonce' => wp_create_nonce('template_importer_nonce'),
                'post_id' => get_the_ID(),
                'loading_text' => __('กำลังนำเข้า...', 'dga-template-importer'),
                'success_text' => __('นำเข้าสำเร็จ!', 'dga-template-importer'),
                'error_text' => __('เกิดข้อผิดพลาด', 'dga-template-importer')
            ));
        }
    }

    /**
     * เพิ่ม Floating Button ในหน้าเว็บ
     */
    public function add_floating_button() {
        // แสดงเฉพาะ Administrator เท่านั้น
        if (!current_user_can('administrator')) {
            return;
        }
        
        // ตรวจสอบว่าเป็น Elementor Editor หรือไม่
        $is_elementor_editor = false;
        if (class_exists('\Elementor\Plugin')) {
            $is_elementor_editor = \Elementor\Plugin::$instance->editor->is_edit_mode() || \Elementor\Plugin::$instance->preview->is_preview_mode();
        }
        
        // ไม่แสดงปุ่มใน Elementor Editor
        if ($is_elementor_editor) {
            return;
        }
        
        // เพิ่ม Scripts สำหรับปุ่ม Floating
        wp_enqueue_style('fontawesome', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css', array(), '5.15.4');
        wp_enqueue_style('template-importer-css', get_stylesheet_directory_uri() . '/css/template-importer.css', array(), '1.3.0');
        wp_enqueue_script('template-importer-js', get_stylesheet_directory_uri() . '/js/template-importer.js', array('jquery'), '1.3.0', true);
        
        // ส่งค่าไปที่ JavaScript
        wp_localize_script('template-importer-js', 'template_importer_ajax', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('template_importer_nonce'),
            'post_id' => get_the_ID(),
            'loading_text' => __('กำลังนำเข้า...', 'dga-template-importer'),
            'success_text' => __('นำเข้าสำเร็จ!', 'dga-template-importer'),
            'error_text' => __('เกิดข้อผิดพลาด', 'dga-template-importer'),
            'is_admin' => current_user_can('administrator')
        ));
        
        // แสดง HTML สำหรับปุ่ม Floating และ Modal
        ?>
        <div class="template-floating-button fixed-position">
            <button title="เลือก Template">
                <i class="fas fa-th-large"></i>
            </button>
        </div>
        
        <div id="template-floating-modal" class="template-modal-container">
            <div class="template-modal-overlay"></div>
            <div class="template-modal-content">
                <div class="template-modal-header">
                    <h3>เลือก Template</h3>
                    <button class="template-modal-close"><i class="fas fa-times"></i></button>
                </div>
                <div class="template-modal-body">
                    <div class="template-modal-loading"><i class="fas fa-spinner fa-spin"></i> กำลังโหลด Template...</div>
                </div>
            </div>
        </div>
        <?php
    }

    /**
     * เพิ่มปุ่ม Template ใน Elementor Editor
     */
    public function add_template_button_to_editor() {
        // เพิ่ม CSS สำหรับปุ่ม
        wp_enqueue_style('template-editor-css', get_stylesheet_directory_uri() . '/css/template-editor.css', array(), '1.0.0');
        
        // เพิ่ม JS สำหรับปุ่ม
        wp_enqueue_script('template-editor-js', get_stylesheet_directory_uri() . '/js/template-editor.js', array('jquery'), '1.0.0', true);
        
        // ส่งค่าไปที่ JavaScript
        wp_localize_script('template-editor-js', 'template_editor_data', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('template_importer_nonce'),
            'templates' => $this->get_available_templates()
        ));
    }

    /**
     * สร้างโฟลเดอร์ templates ถ้ายังไม่มี
     */
    private function create_templates_folder() {
        if (!file_exists($this->templates_dir)) {
            wp_mkdir_p($this->templates_dir);
            
            // สร้างโฟลเดอร์ส่วนย่อย
            $subfolders = array('previews', 'logs');
            foreach ($subfolders as $subfolder) {
                if (!file_exists($this->templates_dir . $subfolder)) {
                    wp_mkdir_p($this->templates_dir . $subfolder);
                    
                    // สร้างไฟล์ .htaccess เพื่อป้องกันการเข้าถึงโดยตรง
                    $htaccess_content = "# Deny direct access\n";
                    $htaccess_content .= "Order Allow,Deny\n";
                    $htaccess_content .= "Deny from all\n";
                    
                    @file_put_contents($this->templates_dir . $subfolder . '/.htaccess', $htaccess_content);
                    
                    // สร้างไฟล์ index.php เพื่อป้องกันการแสดงรายการไฟล์
                    @file_put_contents($this->templates_dir . $subfolder . '/index.php', '<?php // Silence is golden');
                }
            }
            
            // สร้างไฟล์ .htaccess เพื่อป้องกันการเข้าถึงโดยตรง
            $htaccess_content = "# Deny direct access to JSON files\n";
            $htaccess_content .= "<FilesMatch \"\.(json)$\">\n";
            $htaccess_content .= "Order Allow,Deny\n";
            $htaccess_content .= "Deny from all\n";
            $htaccess_content .= "</FilesMatch>";
            
            @file_put_contents($this->templates_dir . '.htaccess', $htaccess_content);
            
            // สร้างไฟล์ index.php เพื่อป้องกันการแสดงรายการไฟล์
            @file_put_contents($this->templates_dir . 'index.php', '<?php // Silence is golden');
        }
    }

    /**
     * ดึงรายการ Template ที่มีทั้งหมด
     */
    public function get_available_templates() {
        $templates = array();
        
        if (is_dir($this->templates_dir)) {
            $files = scandir($this->templates_dir);
            
            foreach ($files as $file) {
                if (pathinfo($file, PATHINFO_EXTENSION) === 'json') {
                    $template_id = pathinfo($file, PATHINFO_FILENAME);
                    $metadata = $this->get_template_metadata($template_id);
                    
                    $templates[$template_id] = $metadata;
                }
            }
        }
        
        return $templates;
    }

    /**
     * ดึงข้อมูล metadata จากไฟล์ JSON และแยกจากชื่อไฟล์
     */
    public function get_template_metadata($template_id) {
        $template_path = $this->templates_dir . $template_id . '.json';
        
        if (!file_exists($template_path)) {
            return array(
                'id' => $template_id,
                'title' => $template_id,
                'description' => 'No description available',
                'category' => 'general',
                'tags' => array(),
                'preview' => '',
                'created' => time(),
                'modified' => time()
            );
        }
        
        // อ่านข้อมูลจากไฟล์ JSON
        $json_content = file_get_contents($template_path);
        $template_data = json_decode($json_content, true);
        
        // ตรวจสอบข้อมูลจาก metadata
        $title = isset($template_data['title']) ? $template_data['title'] : $template_id;
        $description = isset($template_data['description']) ? $template_data['description'] : '';
        $category_from_json = isset($template_data['category']) ? $template_data['category'] : '';
        $preview = isset($template_data['preview']) ? $template_data['preview'] : '';
        $tags = isset($template_data['tags']) ? $template_data['tags'] : array();
        $created = isset($template_data['created']) ? $template_data['created'] : filemtime($template_path);
        $modified = isset($template_data['modified']) ? $template_data['modified'] : filemtime($template_path);
        
        // แยกหมวดหมู่จากชื่อไฟล์ถ้ามีรูปแบบ [category]-[id]
        $filename_parts = explode('-', $template_id);
        $category_from_filename = '';
        
        // ตรวจสอบว่ามีรูปแบบที่ถูกต้องหรือไม่
        if (count($filename_parts) >= 2) {
            $valid_categories = array('homepage', 'landing', 'blog', 'contact', 'about', 'service', 'portfolio', 'gallery', 'team', 'general','dga3.0');
            $first_part = strtolower($filename_parts[0]);
            
            if (in_array($first_part, $valid_categories)) {
                $category_from_filename = $first_part;
            }
        }
        
        // ใช้หมวดหมู่จาก metadata ก่อน ถ้าไม่มีให้ใช้จากชื่อไฟล์
        $category = !empty($category_from_json) ? $category_from_json : $category_from_filename;
        
        // ถ้าไม่มีทั้งสองอย่าง ให้เป็น general
        if (empty($category)) {
            $category = 'general';
        }
        
        // แปลง tags จากข้อความเป็น array ถ้าจำเป็น
        if (is_string($tags)) {
            $tags = array_map('trim', explode(',', $tags));
        }
        
        // ถ้าไม่มี preview ให้ใช้ภาพ placeholder ตามหมวดหมู่
        if (empty($preview)) {
            $preview = get_stylesheet_directory_uri() . '/images/template-' . $category . '.jpg';
            
            // ถ้าไม่มีภาพเฉพาะหมวดหมู่ ให้ใช้ภาพ default
            if (!file_exists(get_stylesheet_directory() . '/images/template-' . $category . '.jpg')) {
                $preview = get_stylesheet_directory_uri() . '/images/template-placeholder.jpg';
            }
        }
        
        return array(
            'id' => $template_id,
            'title' => $title,
            'description' => $description,
            'category' => $category,
            'tags' => $tags,
            'preview' => $preview,
            'created' => $created,
            'modified' => $modified,
            'color' => $this->get_category_color($category)
        );
    }

    /**
     * กำหนดสีตามหมวดหมู่
     */
    public function get_category_color($category) {
        $colors = array(
            'homepage' => '#4CAF50', // สีเขียว
            'landing' => '#FF9800',  // สีส้ม
            'blog' => '#2196F3',     // สีน้ำเงิน
            'contact' => '#9C27B0',  // สีม่วง
            'about' => '#E91E63',    // สีชมพู
            'service' => '#FF5722',  // สีส้มแดง
            'portfolio' => '#009688', // สีเขียวมิ้นท์
            'gallery' => '#673AB7',  // สีม่วงเข้ม
            'team' => '#3F51B5',     // สีอินดิโก
            'dga3.0' => '#FFEB3B',     // สีอินดิโก
        );
        
        return isset($colors[$category]) ? $colors[$category] : '#607D8B'; // สีเทาถ้าไม่มีในรายการ
    }

    /**
     * Shortcode สำหรับการแสดง Template เดี่ยว
     */
    public function render_single_template_shortcode($atts) {

        // แสดงเฉพาะ Administrator เท่านั้น
        if (!current_user_can('administrator')) {
            return '';
        }

        $atts = shortcode_atts(array(
            'template_id' => '',
            'title' => '',
            'description' => '',
            'preview' => '',
            'button_text' => 'นำเข้า Template'
        ), $atts);
        
        // ตรวจสอบว่ามี template_id หรือไม่
        if (empty($atts['template_id'])) {
            return '<p>กรุณาระบุ template_id</p>';
        }
        
        // ตรวจสอบว่ามีไฟล์ Template หรือไม่
        $template_path = $this->templates_dir . $atts['template_id'] . '.json';
        if (!file_exists($template_path)) {
            return '<p>ไม่พบไฟล์ Template ที่ระบุ</p>';
        }
        
        // ดึง metadata
        $metadata = $this->get_template_metadata($atts['template_id']);
        
        // ใช้ค่าจาก metadata ถ้าไม่ได้กำหนดใน shortcode
        $title = !empty($atts['title']) ? $atts['title'] : $metadata['title'];
        $description = !empty($atts['description']) ? $atts['description'] : $metadata['description'];
        $preview = !empty($atts['preview']) ? $atts['preview'] : $metadata['preview'];
        
        // สร้าง HTML สำหรับแสดงปุ่ม import
        $output = '<div class="template-import-container">';
        $output .= '<h3>' . esc_html($title) . '</h3>';
        
        if (!empty($preview)) {
            $output .= '<div class="single-template-preview">';
            $output .= '<img src="' . esc_url($preview) . '" alt="Template Preview">';
            $output .= '</div>';
        }
        
        $output .= '<div class="template-description">' . esc_html($description) . '</div>';
        $output .= '<button class="single-template-import-button" data-template-id="' . esc_attr($atts['template_id']) . '">' . esc_html($atts['button_text']) . '</button>';
        $output .= '</div>';
        
        return $output;
    }

    /**
     * Shortcode สำหรับแสดง Template Icon
     */
    public function render_template_icon_shortcode($atts) {

        // แสดงเฉพาะ Administrator เท่านั้น
        if (!current_user_can('administrator')) {
            return '';
        }

        $atts = shortcode_atts(array(
            'icon' => 'fa-th-large',
            'position' => 'bottom-right',
            'color' => '#F05123',
            'title' => 'เลือก Template'
        ), $atts);
        
        // ID เฉพาะสำหรับ modal
        $modal_id = 'template-modal-' . uniqid();
        
        // สร้าง HTML สำหรับไอคอน
        $output = '<div class="template-icon-container template-icon-' . esc_attr($atts['position']) . '">';
        $output .= '<button class="template-icon-button" style="background-color: ' . esc_attr($atts['color']) . ';" title="' . esc_attr($atts['title']) . '" data-modal-id="' . esc_attr($modal_id) . '">';
        $output .= '<i class="fas ' . esc_attr($atts['icon']) . '"></i>';
        $output .= '</button>';
        $output .= '</div>';
        
        // สร้าง HTML สำหรับ Modal
        $output .= '<div id="' . esc_attr($modal_id) . '" class="template-modal-container">';
        $output .= '<div class="template-modal-overlay"></div>';
        $output .= '<div class="template-modal-content">';
        $output .= '<div class="template-modal-header">';
        $output .= '<h3>' . esc_html($atts['title']) . '</h3>';
        $output .= '<button class="template-modal-close"><i class="fas fa-times"></i></button>';
        $output .= '</div>';
        $output .= '<div class="template-modal-body">';
        $output .= '<div class="template-modal-loading"><i class="fas fa-spinner fa-spin"></i> กำลังโหลด...</div>';
        $output .= '</div>'; // End modal-body
        $output .= '</div>'; // End modal-content
        $output .= '</div>'; // End modal-container
        
        return $output;
    }

    /**
     * Shortcode สำหรับแสดง Template Gallery
     */
    public function render_template_gallery_shortcode($atts) {

        // แสดงเฉพาะ Administrator เท่านั้นถ้าอยู่ในโหมด full
        if (isset($atts['mode']) && $atts['mode'] === 'full' && !current_user_can('administrator')) {
            return '';
        }


        $atts = shortcode_atts(array(
            'title' => 'Template Gallery',
            'categories' => 'all,homepage,landing,blog,contact,about,service,portfolio',
            'tags' => '',
            'show_search' => 'true',
            'show_sort' => 'true',
            'show_filter' => 'true',
            'columns' => '3',
            'limit' => '100',
            'mode' => 'full' // full หรือ modal
        ), $atts);
        
        // แยกหมวดหมู่
        $categories = array_map('trim', explode(',', $atts['categories']));
        
        // แยก tags ถ้ามี
        $filter_tags = !empty($atts['tags']) ? array_map('trim', explode(',', $atts['tags'])) : array();
        
        // ดึงรายการ Template ทั้งหมด
        $templates = $this->get_available_templates();
        
        if (empty($templates)) {
            return '<p>ไม่พบ Template ในระบบ</p>';
        }
        
        // จำกัดจำนวน template ถ้ากำหนด
        if (is_numeric($atts['limit']) && count($templates) > (int)$atts['limit']) {
            $templates = array_slice($templates, 0, (int)$atts['limit'], true);
        }
        
        // เริ่มสร้าง output
        $output = '';
        
        // ตรวจสอบโหมดการแสดงผล
        if ($atts['mode'] === 'full') {
            $output .= '<div class="template-gallery-container">';
            
            // สร้างปุ่ม Toggle
            $output .= '<button class="template-gallery-toggle">';
            $output .= esc_html($atts['title']);
            $output .= '<i class="fas fa-chevron-down"></i>';
            $output .= '</button>';
            
            $output .= '<div class="template-gallery-content">';
        }
        
        // ส่วน Toolbar (ค้นหา, กรอง, เรียงลำดับ)
        if ($atts['show_search'] === 'true' || $atts['show_sort'] === 'true' || $atts['show_filter'] === 'true') {
            $output .= '<div class="template-toolbar">';
            
            // ช่องค้นหา
            if ($atts['show_search'] === 'true') {
                $output .= '<div class="template-search-box">';
                $output .= '<i class="fas fa-search"></i>';
                $output .= '<input type="text" id="template-search" placeholder="ค้นหา Template...">';
                $output .= '</div>';
            }
            
            // ตัวเลือกการเรียงลำดับ
            if ($atts['show_sort'] === 'true') {
                $output .= '<div class="template-sort-box">';
                $output .= '<select id="template-sort">';
                $output .= '<option value="name-asc">เรียงตามชื่อ A-Z</option>';
                $output .= '<option value="name-desc">เรียงตามชื่อ Z-A</option>';
                $output .= '<option value="date-new">ใหม่ล่าสุด</option>';
                $output .= '<option value="date-old">เก่าที่สุด</option>';
                $output .= '</select>';
                $output .= '</div>';
            }
            
            $output .= '</div>'; // End toolbar
        }
        
        // สร้าง tab สำหรับหมวดหมู่
        $output .= '<div class="template-categories">';
        foreach ($categories as $category) {
            $category = trim($category);
            $cat_name = ($category === 'all') ? 'ทั้งหมด' : ucfirst($category);
            $output .= '<div class="template-category" data-category="' . esc_attr($category) . '">' . esc_html($cat_name) . '</div>';
        }
        $output .= '</div>';
        
        // แสดง Filter buttons ถ้ามี tags
        if ($atts['show_filter'] === 'true' && !empty($filter_tags)) {
            $output .= '<div class="template-filter-container">';
            foreach ($filter_tags as $tag) {
                $output .= '<button class="template-filter-button" data-filter="' . esc_attr($tag) . '">' . esc_html($tag) . '</button>';
            }
            $output .= '</div>';
        }
        
        // แยก Template ตามหมวดหมู่และสร้าง grid
        foreach ($categories as $category) {
            $category = trim($category);
            $is_all_category = ($category === 'all');
            
            $output .= '<div class="templates-grid" data-category="' . esc_attr($category) . '" style="grid-template-columns: repeat(' . esc_attr($atts['columns']) . ', 1fr);">';
            
            $has_templates = false;
            
            foreach ($templates as $template_id => $metadata) {
                // ข้ามถ้าไม่ตรงกับหมวดหมู่ปัจจุบัน และไม่ใช่หมวด "ทั้งหมด"
                if (!$is_all_category && $metadata['category'] !== $category) {
                    continue;
                }
                
                $has_templates = true;
                
                // แปลง tags เป็น string สำหรับใช้ใน data attribute
                $tags_string = is_array($metadata['tags']) ? implode(' ', $metadata['tags']) : '';
                
                // สร้าง template item
                $output .= '<div class="template-item" data-tags="' . esc_attr($tags_string) . '" data-date="' . esc_attr($metadata['modified']) . '" data-category="' . esc_attr($metadata['category']) . '">';
                
                // Preview image
                $output .= '<div class="template-preview">';
                if (!empty($metadata['preview'])) {
                    $output .= '<img src="' . esc_url($metadata['preview']) . '" alt="' . esc_attr($metadata['title']) . '">';
                } else {
                    // Default placeholder image
                    $output .= '<img src="' . esc_url(get_stylesheet_directory_uri() . '/images/template-placeholder.jpg') . '" alt="Template Preview">';
                }
                
                // Preview overlay (สำหรับดูเต็มหน้าจอ)
                if (!empty($metadata['preview'])) {
                    $output .= '<div class="template-preview-overlay">';
                    $output .= '<button class="template-preview-button" data-preview="' . esc_url($metadata['preview']) . '">';
                    $output .= '<i class="fas fa-search-plus"></i>';
                    $output .= '</button>';
                    $output .= '</div>';
                }
                
                $output .= '</div>'; // End template-preview
                
                // Template info
                $output .= '<div class="template-info">';
                $output .= '<div class="template-title">' . esc_html($metadata['title']) . '</div>';
                $output .= '<div class="template-description">' . esc_html($metadata['description']) . '</div>';
                
                // Tags (ถ้ามี)
                if (!empty($metadata['tags'])) {
                    $output .= '<div class="template-tags">';
                    foreach ($metadata['tags'] as $tag) {
                        $output .= '<span class="template-tag">' . esc_html($tag) . '</span>';
                    }
                    $output .= '</div>';
                }
                
                $output .= '<button class="template-import-button" data-template-id="' . esc_attr($template_id) . '">นำเข้า Template</button>';
                $output .= '</div>'; // End template-info
                
                $output .= '</div>'; // End template-item
            }
            
            // ถ้าไม่มี template ในหมวดหมู่นี้
            if (!$has_templates) {
                $cat_name = ($category === 'all') ? 'ทั้งหมด' : ucfirst($category);
                $output .= '<p class="no-results-message">ไม่พบ Template ในหมวดหมู่ ' . esc_html($cat_name) . '</p>';
            }
            
            $output .= '</div>'; // End templates-grid
        }
        
        // ปิด container ถ้าเป็นโหมด full
        if ($atts['mode'] === 'full') {
            $output .= '</div>'; // End template-gallery-content
            $output .= '</div>'; // End template-gallery-container
        }
        
        return $output;
    }

    /**
     * AJAX handler สำหรับดึง HTML ของ Gallery
     */
    public function ajax_get_template_gallery_html() {
        // ตรวจสอบสิทธิ์ Administrator
        if (!current_user_can('administrator')) {
            wp_send_json_error('คุณไม่มีสิทธิ์ใช้งานฟีเจอร์นี้');
            return;
        }
        
        // ตรวจสอบ nonce เพื่อความปลอดภัย
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'template_importer_nonce')) {
            wp_send_json_error('Security check failed');
            return;
        }
        
        // ดึง HTML ของ Gallery
        $gallery_html = $this->render_template_gallery_shortcode(array(
            'mode' => 'modal',
            'title' => 'เลือก Template',
            'show_search' => 'true',
            'show_sort' => 'true'
        ));
        
        wp_send_json_success(array('html' => $gallery_html));
    }

    /**
     * AJAX handler สำหรับการ Import Template
     */
    public function ajax_import_json_template() {

        // ตรวจสอบสิทธิ์ Administrator
        if (!current_user_can('administrator')) {
            wp_send_json_error('คุณไม่มีสิทธิ์ใช้งานฟีเจอร์นี้');
            return;
        }

        // ตรวจสอบ nonce เพื่อความปลอดภัย
        if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'template_importer_nonce')) {
            wp_send_json_error('Security check failed');
            return;
        }
        
        // ตรวจสอบว่ามีสิทธิ์แก้ไขโพสต์หรือไม่
        $post_id = isset($_POST['post_id']) ? intval($_POST['post_id']) : 0;
        if (!current_user_can('edit_post', $post_id)) {
            wp_send_json_error('คุณไม่มีสิทธิ์แก้ไขหน้านี้');
            return;
        }
        
        // ตรวจสอบว่ามี template_id หรือไม่
        if (empty($_POST['template_id'])) {
            wp_send_json_error('Template ID is required');
        }
        
        $template_id = sanitize_text_field($_POST['template_id']);
        $template_path = $this->templates_dir . $template_id . '.json';
        
        // ตรวจสอบว่ามีไฟล์ Template หรือไม่
        if (!file_exists($template_path)) {
            wp_send_json_error('Template file not found');
        }
        
        // อ่านไฟล์ JSON
        $json_content = file_get_contents($template_path);
        $template_data = json_decode($json_content, true);
        
        // ตรวจสอบว่า JSON ถูกต้องหรือไม่
        if (json_last_error() !== JSON_ERROR_NONE) {
            wp_send_json_error('Invalid JSON format: ' . json_last_error_msg());
        }
        
        // ตรวจสอบว่า Elementor พร้อมใช้งานหรือไม่
        if (!did_action('elementor/loaded')) {
            wp_send_json_error('Elementor is not active');
        }
        
        // Import JSON เข้าไปใน Elementor
        try {
            // ใช้ Elementor Document API เพื่อ import JSON
            $elementor = \Elementor\Plugin::$instance;
            $document = $elementor->documents->get($post_id);
            
            if (!$document) {
                wp_send_json_error('Elementor document not found');
            }
            
            // ดึงข้อมูล content จาก JSON
            $content = isset($template_data['content']) ? $template_data['content'] : $template_data;
            
            // บันทึกข้อมูล Template ลงในโพสต์
            $document->save(['elements' => $content]);
            
            // บันทึกข้อมูลว่าใช้ template ไหน
            update_post_meta($post_id, '_dga_used_template', $template_id);
            update_post_meta($post_id, '_dga_template_imported_date', current_time('mysql'));
            
            // ทำการ refresh เพจแคช
            if (function_exists('wp_cache_post_change')) {
                wp_cache_post_change($post_id);
            }
            
            // บันทึกล็อก
            $this->log_template_import($template_id, $post_id);
            
            wp_send_json_success('Template imported successfully');
            
        } catch (Exception $e) {
            wp_send_json_error('Error importing template: ' . $e->getMessage());
        }
        
        wp_die();
    }

    /**
     * บันทึกล็อกการนำเข้า Template
     */
    private function log_template_import($template_id, $post_id) {
        $logs_dir = $this->templates_dir . 'logs/';
        
        // สร้างข้อมูลล็อก
        $log_data = array(
            'template_id' => $template_id,
            'post_id' => $post_id,
            'post_title' => get_the_title($post_id),
            'user_id' => get_current_user_id(),
            'user_name' => wp_get_current_user()->display_name,
            'date' => current_time('mysql'),
            'ip' => $_SERVER['REMOTE_ADDR']
        );
        
        // บันทึกล็อก
        $log_file = $logs_dir . 'template_imports.log';
        $log_line = json_encode($log_data) . "\n";
        @file_put_contents($log_file, $log_line, FILE_APPEND);
    }

    /**
     * เพิ่ม Admin Menu สำหรับการจัดการ Templates
     */
    public function add_admin_menu() {
        add_menu_page(
            'Template Manager',
            'Templates',
            'manage_options',
            'dga-template-manager',
            array($this, 'render_admin_page'),
            'dashicons-layout',
            30
        );
    }

    /**
     * แสดงหน้า Admin
     */
    public function render_admin_page() {
        // รายละเอียดหน้า Admin จะทำในอนาคต
        echo '<div class="wrap">';
        echo '<h1>Template Manager</h1>';
        echo '<p>จัดการ Template สำหรับนำเข้าไปใช้งานใน Elementor</p>';
        echo '</div>';
    }
}

// เริ่มต้นระบบ
DGA_Template_Importer::get_instance();

/**
 * Shortcode แบบสั้น (convenience functions)
 */
function dga_template_import($atts) {
    return DGA_Template_Importer::get_instance()->render_single_template_shortcode($atts);
}

function dga_template_gallery($atts) {
    return DGA_Template_Importer::get_instance()->render_template_gallery_shortcode($atts);
}

function dga_template_icon($atts) {
    return DGA_Template_Importer::get_instance()->render_template_icon_shortcode($atts);
}


/**
 * Fix for Template Gallery Modal not displaying
 */
add_action('wp_footer', 'dga_template_debug_script');
function dga_template_debug_script() {
    ?>
    <script>
    jQuery(document).ready(function($) {
        // Debug helper for modal
        console.log('DGA Template Importer loaded');
        
        // Check if AJAX is configured properly
        if (typeof template_importer_ajax !== 'undefined') {
            console.log('AJAX config loaded:', template_importer_ajax);
        } else {
            console.error('AJAX configuration missing!');
        }
    });
    </script>
    <?php
}

// Enhanced AJAX handler with better error handling
add_action('wp_ajax_get_template_gallery_html', 'dga_enhanced_get_template_gallery_html');
add_action('wp_ajax_nopriv_get_template_gallery_html', 'dga_enhanced_get_template_gallery_html');

function dga_enhanced_get_template_gallery_html() {
    // Verify nonce or skip if missing (for debugging)
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'template_importer_nonce')) {
        // For debugging, still process but log the error
        error_log('Template Gallery: Nonce verification failed');
    }
    
    // Get the template gallery instance
    $importer = DGA_Template_Importer::get_instance();
    
    // Generate gallery HTML with specific settings for modal
    $gallery_html = $importer->render_template_gallery_shortcode(array(
        'mode' => 'modal',
        'title' => 'เลือก Template',
        'show_search' => 'true',
        'show_sort' => 'true',
        'columns' => '3'
    ));
    
    // Add debug info
    $debug_info = '<!-- Gallery HTML Generated: ' . date('Y-m-d H:i:s') . ' -->';
    
    wp_send_json_success(array(
        'html' => $debug_info . $gallery_html,
        'debug' => array(
            'timestamp' => current_time('mysql'),
            'template_count' => count($importer->get_available_templates())
        )
    ));
}


/***** ฟังก์ชั่น Export ข้้อมูล Wordpress user ออกเป็น A4 และ CSV *******/

// ถ้าเรียกไฟล์นี้โดยตรง ให้ยกเลิกการทำงาน
if (!defined('ABSPATH')) {
    exit;
}

/**
 * สร้าง Shortcode สำหรับแสดงผลผู้ใช้งาน
 */
function dga_user_export_shortcode() {
    // Enqueue necessary scripts and styles
    wp_enqueue_style('dashicons');
    wp_enqueue_style('dga-user-export-style', get_stylesheet_directory_uri() . '/css/dga-user-export.css', array(), '1.0.1');
    wp_enqueue_script('dga-user-export-script', get_stylesheet_directory_uri() . '/js/dga-user-export.js', array('jquery'), '1.0.1', true);

    // Localize script with AJAX URL and nonce
    wp_localize_script('dga-user-export-script', 'dga_user_export', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('dga_user_export_nonce'),
    ));

    // Output container for the user export
    ob_start();
    ?>
    <div class="dga-user-export-container">
        <div class="dga-user-export-header">
            <h2>รายงานบทบาทและสิทธิ์ของผู้ใช้</h2>
            <div class="dga-user-export-actions">
                <div class="dga-search-filter">
                    <input type="text" id="dga-search-input" placeholder="ค้นหาผู้ใช้...">
                    <select id="dga-role-filter">
                        <option value="">บทบาททั้งหมด</option>
                        <?php
                        $roles = wp_roles()->get_names();
                        foreach ($roles as $role_key => $role_name) {
                            echo '<option value="' . esc_attr($role_key) . '">' . esc_html($role_name) . '</option>';
                        }
                        ?>
                    </select>
                </div>
                <div class="dga-export-buttons">
                    <button id="dga-print-button" class="dga-button"><i class="dashicons dashicons-printer"></i> พิมพ์</button>
                    <button id="dga-csv-button" class="dga-button"><i class="dashicons dashicons-media-spreadsheet"></i> ส่งออก CSV</button>
                </div>
            </div>
        </div>
        
        <div class="dga-user-export-table-container">
            <table class="dga-user-export-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>ชื่อผู้ใช้</th>
                        <th>ชื่อแสดง</th>
                        <th>อีเมล</th>
                        <th>บทบาท</th>
                        <th>สิทธิ์การเข้าถึง</th>
                    </tr>
                </thead>
                <tbody id="dga-user-export-tbody">
                    <tr>
                        <td colspan="6" class="dga-loading">กำลังโหลดข้อมูลผู้ใช้...</td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <div class="dga-pagination">
            <button id="dga-prev-page" class="dga-pagination-button" disabled>ก่อนหน้า</button>
            <span id="dga-page-info">หน้า 1</span>
            <button id="dga-next-page" class="dga-pagination-button">ถัดไป</button>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('dga_user_export', 'dga_user_export_shortcode');

/**
 * AJAX handler สำหรับดึงข้อมูลผู้ใช้
 */
function dga_get_users_ajax() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_user_export_nonce')) {
        wp_send_json_error('รหัสความปลอดภัยไม่ถูกต้อง กรุณารีเฟรชหน้าและลองใหม่อีกครั้ง');
    }

    // Get parameters
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $role_filter = isset($_POST['role']) ? sanitize_text_field($_POST['role']) : '';
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 40; // Default 40 as requested
    
    $offset = ($page - 1) * $per_page;
    
    // Prepare arguments for WP_User_Query
    $args = array(
        'number' => $per_page,
        'offset' => $offset,
        'orderby' => 'display_name',
        'order' => 'ASC',
    );
    
    // Add role filter if specified
    if (!empty($role_filter)) {
        $args['role'] = $role_filter;
    }
    
    // Add search if specified
    if (!empty($search)) {
        $args['search'] = '*' . $search . '*';
        $args['search_columns'] = array('user_login', 'user_email', 'display_name');
    }
    
    // Get users
    $user_query = new WP_User_Query($args);
    $users = $user_query->get_results();
    $total_users = $user_query->get_total();
    $total_pages = ceil($total_users / $per_page);
    
    $response_data = array(
        'users' => array(),
        'total_pages' => $total_pages,
        'current_page' => $page,
        'total_users' => $total_users
    );
    
    // Prepare user data
    foreach ($users as $user) {
        $user_roles = $user->roles;
        $role_names = array();
        $permissions = array();
        
        // Get role names and permissions
        foreach ($user_roles as $role_key) {
            $role_obj = get_role($role_key);
            
            if (!$role_obj) {
                continue; // Skip if role object doesn't exist
            }
            
            $role_name = wp_roles()->get_names()[$role_key] ?? $role_key;
            $role_names[] = $role_name;
            
            // Get capabilities and organize them by type
            $role_permissions = array(
                'read' => false,
                'write' => false,
                'edit' => false,
                'delete' => false,
                'publish' => false,
                'details' => array()
            );
            
            foreach ($role_obj->capabilities as $cap => $allowed) {
                if ($allowed) {
                    // Categorize capabilities
                    if (strpos($cap, 'read') !== false) {
                        $role_permissions['read'] = true;
                        $role_permissions['details'][] = $cap;
                    } elseif (strpos($cap, 'edit') !== false) {
                        $role_permissions['edit'] = true;
                        $role_permissions['details'][] = $cap;
                    } elseif (strpos($cap, 'delete') !== false) {
                        $role_permissions['delete'] = true;
                        $role_permissions['details'][] = $cap;
                    } elseif (strpos($cap, 'publish') !== false) {
                        $role_permissions['publish'] = true;
                        $role_permissions['details'][] = $cap;
                    } elseif (strpos($cap, 'create') !== false || strpos($cap, 'add') !== false) {
                        $role_permissions['write'] = true;
                        $role_permissions['details'][] = $cap;
                    } else {
                        $role_permissions['details'][] = $cap;
                    }
                }
            }
            
            $permissions[$role_key] = $role_permissions;
        }
        
        $response_data['users'][] = array(
            'ID' => $user->ID,
            'user_login' => $user->user_login,
            'display_name' => $user->display_name,
            'user_email' => $user->user_email,
            'roles' => $role_names,
            'permissions' => $permissions
        );
    }
    
    wp_send_json_success($response_data);
}
add_action('wp_ajax_dga_get_users', 'dga_get_users_ajax');
add_action('wp_ajax_nopriv_dga_get_users', 'dga_get_users_ajax');

/**
 * ฟังก์ชันสร้างไฟล์เทมเพลตสำหรับพิมพ์
 */
function dga_user_export_print_template() {
    // ตรวจสอบว่าอยู่ในส่วนแสดงผลข้อมูลผู้ใช้ (Frontend)
    if (!is_admin()) {
        $template_path = get_stylesheet_directory() . '/templates/dga-user-export.php';
        
        // ตรวจสอบว่าไฟล์เทมเพลตมีอยู่จริง
        if (!file_exists($template_path)) {
            // สร้างโฟลเดอร์ templates ถ้ายังไม่มี
            $templates_dir = get_stylesheet_directory() . '/templates';
            if (!file_exists($templates_dir)) {
                wp_mkdir_p($templates_dir);
            }
            
            // สร้างไฟล์เทมเพลตอัตโนมัติ
            $template_content = '<?php
/**
 * Print template for User Roles and Permissions Report
 * 
 * This file is included by the dga_print_template_ajax function
 */

// Prevent direct file access
if (!defined(\'ABSPATH\')) {
    exit;
}

// Access $users variable that was passed from the AJAX handler
if (!isset($users) || !is_array($users)) {
    echo "No data available";
    return;
}

// Get current date and time for the report
$date = current_time(\'Y-m-d H:i:s\');
?>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>รายงานบทบาทและสิทธิ์ของผู้ใช้</title>
    <style>
        /* Print-specific styling */
        @page {
            size: A4;
            margin: 1cm;
        }
        
        body {
            font-family: \'TH Sarabun New\', \'Sarabun\', \'Times New Roman\', Times, serif;
            color: #000;
            margin: 0;
            padding: 0;
            font-size: 12pt;
            background-color: white;
        }
        
        .print-header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #002868;
            position: relative;
        }
        
        .print-header::before {
            content: \'\';
            position: absolute;
            width: 40px;
            height: 40px;
            background-image: url(\'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="50" cy="50" r="45" stroke="%23002868" stroke-width="10" fill="none"/><path d="M50 10 v80 M10 50 h80" stroke="%23BB0000" stroke-width="5"/></svg>\');
            background-size: contain;
            background-repeat: no-repeat;
            left: 10px;
            top: 10px;
        }
        
        .print-header h1 {
            color: #002868;
            font-size: 24pt;
            margin: 0 0 10px 0;
        }
        
        .print-header .print-meta {
            font-size: 10pt;
            color: #666;
        }
        
        .print-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            page-break-inside: auto;
        }
        
        .print-table thead {
            display: table-header-group;
        }
        
        .print-table tr {
            page-break-inside: avoid;
            page-break-after: auto;
        }
        
        .print-table th {
            background-color: #002868;
            color: white;
            padding: 8px;
            text-align: left;
            font-size: 10pt;
            font-weight: bold;
        }
        
        .print-table td {
            padding: 6px 8px;
            border-bottom: 1px solid #ddd;
            font-size: 10pt;
        }
        
        .print-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        
        .permission-yes {
            color: green;
            font-weight: bold;
        }
        
        .permission-no {
            color: #999;
        }
        
        .print-footer {
            text-align: center;
            font-size: 9pt;
            color: #666;
            margin-top: 20px;
            padding-top: 10px;
            border-top: 1px solid #ddd;
        }
        
        .page-break {
            page-break-before: always;
        }
    </style>
</head>
<body>
    <?php
    // Pagination for A4 (40 items per page as requested)
    $users_per_page = 40;
    $total_pages = ceil(count($users) / $users_per_page);
    
    for ($page = 0; $page < $total_pages; $page++) {
        $start = $page * $users_per_page;
        $page_users = array_slice($users, $start, $users_per_page);
        
        // Add page break except for the first page
        if ($page > 0) {
            echo \'<div class="page-break"></div>\';
        }
        
        // Header on each page
        echo \'<div class="print-header">
            <h1>รายงานบทบาทและสิทธิ์ของผู้ใช้</h1>
            <div class="print-meta">
                วันที่สร้าง: \' . esc_html($date) . \'
            </div>
        </div>\';
        
        echo \'<table class="print-table">
            <thead>
                <tr>
                    <th style="width: 5%;">ID</th>
                    <th style="width: 15%;">ชื่อผู้ใช้</th>
                    <th style="width: 15%;">ชื่อแสดง</th>
                    <th style="width: 20%;">อีเมล</th>
                    <th style="width: 15%;">บทบาท</th>
                    <th style="width: 30%;">สิทธิ์การเข้าถึง</th>
                </tr>
            </thead>
            <tbody>\';
        
        foreach ($page_users as $user) {
            $roles_list = implode(\', \', $user[\'roles\']);
            $permissions_html = \'\';
            
            // Format permissions for print
            foreach ($user[\'permissions\'] as $role => $p) {
                $permission_summary = [
                    $p[\'read\'] ? \'<span class="permission-yes">อ่าน</span>\' : \'<span class="permission-no">อ่าน</span>\',
                    $p[\'write\'] ? \'<span class="permission-yes">เขียน</span>\' : \'<span class="permission-no">เขียน</span>\',
                    $p[\'edit\'] ? \'<span class="permission-yes">แก้ไข</span>\' : \'<span class="permission-no">แก้ไข</span>\',
                    $p[\'delete\'] ? \'<span class="permission-yes">ลบ</span>\' : \'<span class="permission-no">ลบ</span>\',
                    $p[\'publish\'] ? \'<span class="permission-yes">เผยแพร่</span>\' : \'<span class="permission-no">เผยแพร่</span>\'
                ];
                
                $permissions_html .= "<div><strong>" . esc_html($role) . ":</strong> " . 
                    implode(\' | \', $permission_summary) . "</div>";
            }
            
            echo \'<tr>
                <td>\' . esc_html($user[\'ID\']) . \'</td>
                <td>\' . esc_html($user[\'user_login\']) . \'</td>
                <td>\' . esc_html($user[\'display_name\']) . \'</td>
                <td>\' . esc_html($user[\'user_email\']) . \'</td>
                <td>\' . esc_html($roles_list) . \'</td>
                <td>\' . $permissions_html . \'</td>
            </tr>\';
        }
        
        echo \'</tbody></table>\';
        
        // Page number footer
        echo \'<div class="print-footer">
            หน้า \' . ($page + 1) . \' จาก \' . $total_pages . \'
        </div>\';
    }
    ?>
    
    <script>
        // Auto-print when loaded
        window.onload = function() {
            setTimeout(function() {
                window.print();
            }, 500);
        };
    </script>
</body>
</html>';
            
            file_put_contents($template_path, $template_content);
        }
    }
}
add_action('wp_footer', 'dga_user_export_print_template');

/**
 * AJAX handler สำหรับพิมพ์รายงาน
 */
function dga_print_template_ajax() {
    // Check nonce for security
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_user_export_nonce')) {
        wp_send_json_error('รหัสความปลอดภัยไม่ถูกต้อง กรุณารีเฟรชหน้าและลองใหม่');
    }
    
    // Get template data
    $data = isset($_POST['data']) ? json_decode(stripslashes($_POST['data']), true) : null;
    
    if (!$data) {
        wp_send_json_error('ข้อมูลไม่ถูกต้อง');
    }
    
    // Get template path
    $template_path = get_stylesheet_directory() . '/templates/dga-user-export.php';
    
    if (!file_exists($template_path)) {
        // ไฟล์เทมเพลตไม่มีอยู่ ให้เรียกฟังก์ชันสร้างเทมเพลต
        dga_user_export_print_template();
        
        // ตรวจสอบอีกครั้ง
        if (!file_exists($template_path)) {
            wp_send_json_error('ไม่พบไฟล์เทมเพลตและไม่สามารถสร้างได้โดยอัตโนมัติ: ' . $template_path);
        }
    }
    
    // Start output buffering
    ob_start();
    
    // Include template file with data
    $users = $data['users'];
    include($template_path);
    
    // Get buffered output
    $html = ob_get_clean();
    
    wp_send_json_success($html);
}
add_action('wp_ajax_dga_print_template', 'dga_print_template_ajax');
add_action('wp_ajax_nopriv_dga_print_template', 'dga_print_template_ajax');


/***** ฟังก์ชั่น reCAPTCHA V.3 *****/

// ป้องกันการเข้าถึงโดยตรง
if (!defined('ABSPATH')) {
    exit;
}

// กำหนดค่า reCAPTCHA
define('DGA_RECAPTCHA_SITE_KEY', '6LcULDkrAAAAAKmcMSBaRZ61-8uYxCRtG6LcEnhy');
define('DGA_RECAPTCHA_SECRET_KEY', '6LcULDkrAAAAAAZ--tIZ5iBJDmhmkchu5_zxBQCJ');

// ลงทะเบียน shortcode
add_shortcode('dga_recaptcha_v3', 'dga_recaptcha_v3_shortcode');

function dga_recaptcha_v3_shortcode($atts) {
    // กำหนดค่าเริ่มต้นของ attributes
    $atts = shortcode_atts(array(
        'action' => 'submit',
        'callback' => '',
        'form_id' => '',
        'button_id' => ''
    ), $atts, 'dga_recaptcha_v3');

    // Generate unique ID
    $unique_id = 'dga-recaptcha-' . wp_rand(1000, 9999);

    ob_start();
    ?>
    <div class="dga-recaptcha-container" 
         id="<?php echo esc_attr($unique_id); ?>"
         data-action="<?php echo esc_attr($atts['action']); ?>"
         data-callback="<?php echo esc_attr($atts['callback']); ?>"
         data-form-id="<?php echo esc_attr($atts['form_id']); ?>"
         data-button-id="<?php echo esc_attr($atts['button_id']); ?>">
        <input type="hidden" id="<?php echo esc_attr($unique_id); ?>-token" name="recaptcha_token" />
        <input type="hidden" name="recaptcha_action" value="<?php echo esc_attr($atts['action']); ?>" />
    </div>
    <?php
    
    return ob_get_clean();
}

// เพิ่ม reCAPTCHA เข้าไปใน Contact Form อัตโนมัติ
add_filter('wp_footer', 'dga_inject_recaptcha_to_contact_form');
function dga_inject_recaptcha_to_contact_form() {
    if (has_shortcode(get_the_content(), 'department_contact')) {
        ?>
        <script>
        jQuery(document).ready(function($) {
            // เพิ่ม reCAPTCHA container เข้าไปใน form
            var recaptchaHtml = `
                <div class="dga-recaptcha-container" 
                     id="contact-form-recaptcha"
                     data-action="contact_form"
                     data-form-id="department-contact-form">
                    <input type="hidden" name="recaptcha_token" />
                    <input type="hidden" name="recaptcha_action" value="contact_form" />
                </div>
            `;
            $('#department-contact-form').append(recaptchaHtml);
        });
        </script>
        <?php
    }
}

// Enqueue scripts และ styles
add_action('wp_enqueue_scripts', 'dga_recaptcha_v3_enqueue_assets');

function dga_recaptcha_v3_enqueue_assets() {
    global $post;
    
    // ตรวจสอบว่ามี shortcode หรือ contact form ในหน้านี้หรือไม่
    $has_recaptcha = (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'dga_recaptcha_v3'));
    $has_contact_form = (is_a($post, 'WP_Post') && has_shortcode($post->post_content, 'department_contact'));
    
    if ($has_recaptcha || $has_contact_form) {
        // Enqueue Google reCAPTCHA script
        wp_enqueue_script(
            'google-recaptcha-v3',
            'https://www.google.com/recaptcha/api.js?render=' . DGA_RECAPTCHA_SITE_KEY,
            array(),
            null,
            true
        );
        
        // Enqueue custom JavaScript
        wp_enqueue_script(
            'dga-recap-v3',
            get_stylesheet_directory_uri() . '/js/dga-recap-v3.js',
            array('jquery', 'google-recaptcha-v3'),
            '1.0.0',
            true
        );
        
        // Localize script
        wp_localize_script('dga-recap-v3', 'dga_recaptcha_ajax', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('dga_recaptcha_v3_nonce'),
            'site_key' => DGA_RECAPTCHA_SITE_KEY
        ));
        
        // Enqueue custom CSS
        wp_enqueue_style(
            'dga-recap-v3',
            get_stylesheet_directory_uri() . '/css/dga-recap-v3.css',
            array(),
            '1.0.0'
        );
    }
}

// AJAX handler สำหรับการ verify reCAPTCHA token
add_action('wp_ajax_dga_verify_recaptcha', 'dga_verify_recaptcha_ajax');
add_action('wp_ajax_nopriv_dga_verify_recaptcha', 'dga_verify_recaptcha_ajax');

function dga_verify_recaptcha_ajax() {
    // ตรวจสอบ nonce
    if (!check_ajax_referer('dga_recaptcha_v3_nonce', 'nonce', false)) {
        wp_send_json_error(array('message' => 'Invalid nonce'));
    }
    
    // รับ token จาก POST request
    $token = isset($_POST['token']) ? sanitize_text_field($_POST['token']) : '';
    $action = isset($_POST['action']) ? sanitize_text_field($_POST['action']) : '';
    
    if (empty($token)) {
        wp_send_json_error(array('message' => 'Token is required'));
    }
    
    // Verify token กับ Google reCAPTCHA
    $response = wp_remote_post('https://www.google.com/recaptcha/api/siteverify', array(
        'body' => array(
            'secret' => DGA_RECAPTCHA_SECRET_KEY,
            'response' => $token,
            'remoteip' => $_SERVER['REMOTE_ADDR']
        )
    ));
    
    if (is_wp_error($response)) {
        wp_send_json_error(array('message' => 'Error verifying reCAPTCHA'));
    }
    
    $body = wp_remote_retrieve_body($response);
    $result = json_decode($body, true);
    
    // ตรวจสอบผลลัพธ์
    if ($result['success'] && $result['score'] >= 0.5) {
        wp_send_json_success(array(
            'message' => 'reCAPTCHA verified successfully',
            'score' => $result['score'],
            'action' => $result['action']
        ));
    } else {
        wp_send_json_error(array(
            'message' => 'reCAPTCHA verification failed',
            'score' => isset($result['score']) ? $result['score'] : 0,
            'errors' => isset($result['error-codes']) ? $result['error-codes'] : array()
        ));
    }
}

// เพิ่ม reCAPTCHA verification เข้าไปใน existing contact form handler
add_action('init', 'dga_override_contact_form_handler');
function dga_override_contact_form_handler() {
    remove_action('wp_ajax_contact_form_submit', 'handle_contact_form_submission');
    remove_action('wp_ajax_nopriv_contact_form_submit', 'handle_contact_form_submission');
    
    add_action('wp_ajax_contact_form_submit', 'dga_handle_contact_form_with_recaptcha');
    add_action('wp_ajax_nopriv_contact_form_submit', 'dga_handle_contact_form_with_recaptcha');
}

function dga_handle_contact_form_with_recaptcha() {
    // ตรวจสอบ reCAPTCHA token ก่อน
    $recaptcha_token = isset($_POST['recaptcha_token']) ? sanitize_text_field($_POST['recaptcha_token']) : '';
    $recaptcha_action = isset($_POST['recaptcha_action']) ? sanitize_text_field($_POST['recaptcha_action']) : 'contact_form';
    
    if (empty($recaptcha_token)) {
        wp_send_json(array(
            'status' => 'error',
            'message' => 'กรุณายืนยันว่าคุณไม่ใช่บอท'
        ));
        return;
    }
    
    // Verify reCAPTCHA
    $verification = dga_verify_recaptcha_server_side($recaptcha_token, $recaptcha_action);
    
    if (!$verification['success']) {
        wp_send_json(array(
            'status' => 'error',
            'message' => 'การยืนยันความปลอดภัยล้มเหลว กรุณาลองใหม่อีกครั้ง'
        ));
        return;
    }
    
    // ถ้า reCAPTCHA ผ่าน ให้ดำเนินการ form submission ต่อ
    $contact_name = sanitize_text_field($_POST['contact_name']);
    $contact_email = sanitize_email($_POST['contact_email']);
    $contact_message = sanitize_textarea_field($_POST['contact_message']);
    
    $data = array(
        'contact_name' => $contact_name,
        'contact_email' => $contact_email,
        'contact_message' => $contact_message
    );

    // Set email headers
    $headers = array(
        'Content-Type: text/html; charset=UTF-8',
        'From: ' . get_bloginfo('name') . ' <' . get_bloginfo('admin_email') . '>'
    );

    // Send email to admin
    $admin_email = get_option('admin_email');
    $admin_subject = '[' . get_bloginfo('name') . '] มีข้อความติดต่อใหม่จาก ' . $contact_name;
    $admin_message = get_contact_email_template($data, 'admin');
    
    $admin_mail_sent = wp_mail($admin_email, $admin_subject, $admin_message, $headers);

    // Send confirmation email to user
    $user_subject = '[' . get_bloginfo('name') . '] ยืนยันการส่งข้อความติดต่อ';
    $user_message = get_contact_email_template($data, 'user');
    
    $user_mail_sent = wp_mail($contact_email, $user_subject, $user_message, $headers);

    // Prepare response
    if ($admin_mail_sent && $user_mail_sent) {
        $response = array(
            'status' => 'success',
            'message' => 'ส่งข้อความเรียบร้อยแล้ว',
            'recaptcha_score' => $verification['score']
        );
    } else {
        $response = array(
            'status' => 'error',
            'message' => 'เกิดข้อผิดพลาดในการส่งข้อความ กรุณาลองใหม่อีกครั้ง'
        );
    }
    
    wp_send_json($response);
}

// Function สำหรับการตรวจสอบ reCAPTCHA ในฝั่ง server
function dga_verify_recaptcha_server_side($token, $action = 'submit') {
    if (empty($token)) {
        return array('success' => false, 'message' => 'Token is required');
    }
    
    $response = wp_remote_post('https://www.google.com/recaptcha/api/siteverify', array(
        'body' => array(
            'secret' => DGA_RECAPTCHA_SECRET_KEY,
            'response' => $token,
            'remoteip' => $_SERVER['REMOTE_ADDR']
        )
    ));
    
    if (is_wp_error($response)) {
        return array('success' => false, 'message' => 'Error verifying reCAPTCHA');
    }
    
    $body = wp_remote_retrieve_body($response);
    $result = json_decode($body, true);
    
    // ตรวจสอบว่า action ตรงกันหรือไม่
    $action_match = (!empty($result['action']) && $result['action'] === $action);
    
    if ($result['success'] && $result['score'] >= 0.5 && $action_match) {
        return array(
            'success' => true,
            'score' => $result['score'],
            'action' => $result['action']
        );
    }
    
    return array(
        'success' => false,
        'score' => isset($result['score']) ? $result['score'] : 0,
        'action' => isset($result['action']) ? $result['action'] : '',
        'errors' => isset($result['error-codes']) ? $result['error-codes'] : array()
    );
}


/****** ฟังก์ชั่น Session timeout แบบตั้งค่าได้ *******/

// สร้างหน้า admin menu
add_action('admin_menu', 'dga_session_timeout_menu');
function dga_session_timeout_menu() {
    add_menu_page(
        'Session Timeout Settings',
        'Session Timeout',
        'manage_options',
        'dga-session-timeout',
        'dga_session_timeout_page',
        'dashicons-clock',
        90
    );
}

// หน้า admin settings
function dga_session_timeout_page() {
    ?>
    <div class="wrap">
        <h1>Session Timeout Settings</h1>
        <form id="dga-timeout-form">
            <table class="form-table">
                <tr>
                    <th scope="row">
                        <label for="dga_timeout_minutes">Timeout Duration</label>
                    </th>
                    <td>
                        <input type="number" 
                               id="dga_timeout_minutes" 
                               name="dga_timeout_minutes" 
                               value="<?php echo esc_attr(get_option('dga_timeout_minutes', 30)); ?>" 
                               min="1" 
                               max="1440" 
                               required>
                        <span class="description">Minutes (1-1440)</span>
                    </td>
                </tr>
                <tr>
                    <th scope="row">
                        <label for="dga_timeout_enabled">Enable Auto Logout</label>
                    </th>
                    <td>
                        <input type="checkbox" 
                               id="dga_timeout_enabled" 
                               name="dga_timeout_enabled" 
                               value="1" 
                               <?php checked(get_option('dga_timeout_enabled', 0), 1); ?>>
                        <span class="description">Enable automatic logout after timeout</span>
                    </td>
                </tr>
                <tr>
                    <th scope="row">
                        <label for="dga_timeout_warning">Warning Time</label>
                    </th>
                    <td>
                        <input type="number" 
                               id="dga_timeout_warning" 
                               name="dga_timeout_warning" 
                               value="<?php echo esc_attr(get_option('dga_timeout_warning', 5)); ?>" 
                               min="1" 
                               max="60" 
                               required>
                        <span class="description">Minutes before timeout to show warning</span>
                    </td>
                </tr>
            </table>
            <?php wp_nonce_field('dga_timeout_nonce', 'dga_timeout_nonce_field'); ?>
            <p class="submit">
                <button type="submit" class="button-primary">Save Settings</button>
                <span id="dga-timeout-message" class="notice" style="display:none;"></span>
            </p>
        </form>
    </div>
    <?php
}

// AJAX handler สำหรับบันทึกการตั้งค่า
add_action('wp_ajax_dga_save_timeout_settings', 'dga_save_timeout_settings');
function dga_save_timeout_settings() {
    // ตรวจสอบ nonce
    if (!wp_verify_nonce($_POST['nonce'], 'dga_timeout_nonce')) {
        wp_die('Security check failed');
    }
    
    // ตรวจสอบสิทธิ์
    if (!current_user_can('manage_options')) {
        wp_die('Unauthorized user');
    }
    
    // บันทึกการตั้งค่า
    update_option('dga_timeout_minutes', intval($_POST['timeout_minutes']));
    update_option('dga_timeout_enabled', intval($_POST['timeout_enabled']));
    update_option('dga_timeout_warning', intval($_POST['timeout_warning']));
    
    wp_send_json_success('Settings saved successfully');
}

// AJAX handler สำหรับการ logout
add_action('wp_ajax_dga_session_logout', 'dga_session_logout');
function dga_session_logout() {
    // ตรวจสอบ nonce
    if (!wp_verify_nonce($_POST['nonce'], 'dga_timeout_logout_nonce')) {
        wp_die('Security check failed');
    }
    
    wp_logout();
    wp_send_json_success('Logged out successfully');
}

// โหลด scripts และ styles ในหน้า admin
add_action('admin_enqueue_scripts', 'dga_timeout_enqueue_admin_scripts');
function dga_timeout_enqueue_admin_scripts($hook) {
    // โหลดเฉพาะในหน้า plugin settings
    if ($hook == 'toplevel_page_dga-session-timeout') {
        wp_enqueue_script(
            'dga-timeout-admin', 
            get_stylesheet_directory_uri() . '/js/dga-timeout.js', 
            array('jquery'), 
            '1.0.0', 
            true
        );
        
        wp_enqueue_style(
            'dga-timeout-admin', 
            get_stylesheet_directory_uri() . '/css/dga-timeout.css', 
            array(), 
            '1.0.0'
        );
        
        // ส่งข้อมูลไปยัง JavaScript
        wp_localize_script('dga-timeout-admin', 'dga_timeout_ajax', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('dga_timeout_nonce'),
            'logout_nonce' => wp_create_nonce('dga_timeout_logout_nonce')
        ));
    }
}

// โหลด scripts สำหรับ frontend และ admin เพื่อ handle timeout
add_action('wp_enqueue_scripts', 'dga_timeout_enqueue_scripts');
add_action('admin_enqueue_scripts', 'dga_timeout_enqueue_scripts');
function dga_timeout_enqueue_scripts() {
    if (is_user_logged_in() && get_option('dga_timeout_enabled', 0)) {
        wp_enqueue_script(
            'dga-timeout-handler', 
            get_stylesheet_directory_uri() . '/js/dga-timeout-handler.js', 
            array('jquery'), 
            '1.0.0', 
            true
        );
        
        // ส่งค่า timeout ไปยัง JavaScript
        wp_localize_script('dga-timeout-handler', 'dga_timeout_config', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'logout_nonce' => wp_create_nonce('dga_timeout_logout_nonce'),
            'timeout_minutes' => get_option('dga_timeout_minutes', 30),
            'warning_minutes' => get_option('dga_timeout_warning', 5),
            'is_admin' => is_admin() ? 'yes' : 'no'
        ));
    }
}

// Update user last activity
add_action('init', 'dga_update_user_activity');
function dga_update_user_activity() {
    if (is_user_logged_in()) {
        update_user_meta(get_current_user_id(), 'dga_last_activity', time());
    }
}

// AJAX handler สำหรับอัปเดต activity
add_action('wp_ajax_dga_update_activity', 'dga_ajax_update_activity');
function dga_ajax_update_activity() {
    if (is_user_logged_in()) {
        update_user_meta(get_current_user_id(), 'dga_last_activity', time());
        wp_send_json_success();
    }
    wp_die();
}


/**** ฟังก์ชั่น อภิธานศัพท์ *******/

/**
 * DGA Glossary Shortcode Function
 * 
 * Usage: [dga_glossary post_types="ckan,egp,news"]
 */

// Register shortcode
add_shortcode('dga_glossary', 'dga_glossary_shortcode');

function dga_glossary_shortcode($atts) {
    // Default attributes
    $atts = shortcode_atts(array(
        'post_types' => 'ckan,egp,news,mpeople,article,pha,dgallery'
    ), $atts);
    
    // Create nonce for security
    $nonce = wp_create_nonce('dga_glossary_nonce');
    
    // Check if current user is administrator
    $is_admin = current_user_can('administrator');
    
    // Enqueue scripts and styles
    wp_enqueue_style('dga-glossary', get_stylesheet_directory_uri() . '/css/dga-glossary.css', array(), '1.0.0');
    wp_enqueue_script('dga-glossary', get_stylesheet_directory_uri() . '/js/dga-glossary.js', array('jquery'), '1.0.0', true);
    
    // Pass data to JavaScript
    wp_localize_script('dga-glossary', 'dga_glossary_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => $nonce,
        'post_types' => $atts['post_types'],
        'is_admin' => $is_admin
    ));
    
    ob_start();
    ?>
    <div id="dga-glossary-container" data-is-admin="<?php echo $is_admin ? 'true' : 'false'; ?>">
        <!-- Filter Section -->
        <div class="dga-glossary-filters">
            <div class="filter-row">
                <div class="search-container">
                    <input type="text" id="dga-search-input" placeholder="ค้นหาคำศัพท์..." />
                    <button id="dga-clear-search" class="btn-clear">ล้างค่า</button>
                </div>
                
                <!-- Selected Letter Display -->
                <div class="selected-letter-display">
                    <div class="selected-letter-box">
                        <span id="selected-letter-text">-</span>
                    </div>
                </div>
            </div>
            
            <div class="filter-row alphabet-filters">
                <div class="alphabet-group thai-alphabet">
                    <span class="alphabet-label">ไทย:</span>
                    <?php 
                    $thai_chars = array('ก','ข','ค','ฆ','ง','จ','ฉ','ช','ซ','ฌ','ญ','ฎ','ฏ','ฐ','ฑ','ฒ','ณ','ด','ต','ถ','ท','ธ','น','บ','ป','ผ','ฝ','พ','ฟ','ภ','ม','ย','ร','ล','ว','ศ','ษ','ส','ห','ฬ','อ','ฮ');
                    foreach($thai_chars as $char): ?>
                        <button class="alphabet-filter" data-char="<?php echo $char; ?>" data-type="thai"><?php echo $char; ?></button>
                    <?php endforeach; ?>
                </div>
                
                <div class="alphabet-group english-alphabet">
                    <span class="alphabet-label">English:</span>
                    <?php 
                    foreach(range('A', 'Z') as $char): ?>
                        <button class="alphabet-filter" data-char="<?php echo $char; ?>" data-type="english"><?php echo $char; ?></button>
                    <?php endforeach; ?>
                </div>
            </div>
        </div>
        
        <!-- Table Section -->
        <div class="dga-glossary-table-container">
            <table id="dga-glossary-table">
                <thead>
                    <tr>
                        <th>คำศัพท์ (ไทย)</th>
                        <th>คำศัพท์ (English)</th>
                        <th>คำอธิบาย</th>
                        <th>ที่มา</th>
                        <th>URL</th>
                    </tr>
                </thead>
                <tbody id="dga-glossary-tbody">
                    <!-- Loading skeleton will be shown here -->
                    <tr class="skeleton-row">
                        <td colspan="5">
                            <div class="skeleton-loader">กำลังโหลดข้อมูล...</div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <!-- Pagination Section -->
        <div id="dga-glossary-pagination" class="pagination-container"></div>
    </div>
    <?php
    return ob_get_clean();
}

// AJAX Handler for fetching glossary data
add_action('wp_ajax_dga_fetch_glossary', 'dga_fetch_glossary_data');
add_action('wp_ajax_nopriv_dga_fetch_glossary', 'dga_fetch_glossary_data');

function dga_fetch_glossary_data() {
    // Check if request is AJAX
    if (!defined('DOING_AJAX') || !DOING_AJAX) {
        wp_die();
    }
    
    // Verify nonce
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'dga_glossary_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        wp_die();
    }
    
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    $letter = isset($_POST['letter']) ? sanitize_text_field($_POST['letter']) : '';
    $post_types = isset($_POST['post_types']) ? explode(',', sanitize_text_field($_POST['post_types'])) : array();
    
    // Trim whitespace from post types
    $post_types = array_map('trim', $post_types);
    
    $per_page = 10;
    $offset = ($page - 1) * $per_page;
    
    // Build query arguments
    $args = array(
        'post_type' => $post_types,
        'posts_per_page' => $per_page,
        'offset' => $offset,
        'post_status' => 'publish',
        'orderby' => 'title',
        'order' => 'ASC'
    );
    
    // Add search query if provided
    if (!empty($search)) {
        $args['s'] = $search;
        
        // Also search in meta fields
        $args['meta_query'] = array(
            'relation' => 'OR',
            array(
                'key' => 'at_content',
                'value' => $search,
                'compare' => 'LIKE'
            ),
            array(
                'key' => 'at_thai',
                'value' => $search,
                'compare' => 'LIKE'
            ),
            array(
                'key' => 'at_eng',
                'value' => $search,
                'compare' => 'LIKE'
            )
        );
    }
    
    // Add letter filter if provided
    if (!empty($letter)) {
        add_filter('posts_where', function($where) use ($letter) {
            global $wpdb;
            $where .= " AND {$wpdb->posts}.post_title LIKE '{$letter}%'";
            return $where;
        });
    }
    
    $query = new WP_Query($args);
    
    $results = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            
            // Get custom fields
            $at_thai = get_post_meta($post_id, 'at_thai', true);
            $at_eng = get_post_meta($post_id, 'at_eng', true);
            $at_content = get_post_meta($post_id, 'at_content', true);
            
            // Limit content to 200 characters and strip HTML
            if (!empty($at_content)) {
                // Strip HTML tags and decode entities
                $at_content = wp_strip_all_tags($at_content);
                $at_content = html_entity_decode($at_content, ENT_QUOTES, 'UTF-8');
                $at_content = mb_substr($at_content, 0, 200, 'UTF-8');
                if (mb_strlen($at_content, 'UTF-8') >= 200) {
                    $at_content .= '...';
                }
            }
            
            // Get all taxonomies and terms
            $taxonomies = get_post_taxonomies($post_id);
            $terms = array();
            
            foreach ($taxonomies as $taxonomy) {
                $post_terms = get_the_terms($post_id, $taxonomy);
                if ($post_terms && !is_wp_error($post_terms)) {
                    foreach ($post_terms as $term) {
                        $terms[] = $term->name;
                    }
                }
            }
            
            $results[] = array(
                'id' => $post_id,
                'thai' => $at_thai,
                'english' => $at_eng,
                'content' => $at_content,
                'source' => implode(', ', $terms),
                'url' => get_permalink()
            );
        }
    }
    
    // Remove letter filter
    if (!empty($letter)) {
        remove_all_filters('posts_where');
    }
    
    // Get total posts for pagination
    $total_args = $args;
    unset($total_args['posts_per_page']);
    unset($total_args['offset']);
    $total_query = new WP_Query($total_args);
    $total_posts = $total_query->found_posts;
    $total_pages = ceil($total_posts / $per_page);
    
    wp_reset_postdata();
    
    wp_send_json(array(
        'success' => true,
        'data' => $results,
        'pagination' => array(
            'current_page' => $page,
            'total_pages' => $total_pages,
            'total_posts' => $total_posts
        )
    ));
}

// AJAX Handler for updating glossary terms
add_action('wp_ajax_dga_update_glossary_term', 'dga_update_glossary_term');

function dga_update_glossary_term() {
    // Verify nonce
    if (!wp_verify_nonce($_POST['nonce'], 'dga_glossary_nonce')) {
        wp_send_json_error(array('message' => 'Security check failed'));
        wp_die();
    }
    
    // Check if user is administrator
    if (!current_user_can('administrator')) {
        wp_send_json(array(
            'success' => false,
            'message' => 'คุณไม่มีสิทธิ์ในการแก้ไขข้อมูล'
        ));
        wp_die();
    }
    
    $post_id = intval($_POST['post_id']);
    $field = sanitize_text_field($_POST['field']);
    $value = sanitize_text_field($_POST['value']);
    
    // Update the custom field
    if ($field === 'thai' || $field === 'english') {
        $meta_key = $field === 'thai' ? 'at_thai' : 'at_eng';
        update_post_meta($post_id, $meta_key, $value);
        
        wp_send_json(array(
            'success' => true,
            'message' => 'บันทึกข้อมูลสำเร็จ'
        ));
    } else {
        wp_send_json(array(
            'success' => false,
            'message' => 'ไม่สามารถแก้ไขฟิลด์นี้ได้'
        ));
    }
}


/**** ฟังก์ชั่น FAQs ********/

// สร้าง Custom Post Type สำหรับ FAQ
function dga_create_faq_post_type() {
    $args = array(
        'labels' => array(
            'name' => 'FAQs',
            'singular_name' => 'FAQ',
            'add_new' => 'เพิ่ม FAQ ใหม่',
            'add_new_item' => 'เพิ่ม FAQ ใหม่',
            'edit_item' => 'แก้ไข FAQ',
            'new_item' => 'FAQ ใหม่',
            'view_item' => 'ดู FAQ',
            'search_items' => 'ค้นหา FAQ',
            'not_found' => 'ไม่พบ FAQ',
            'not_found_in_trash' => 'ไม่พบ FAQ ในถังขยะ'
        ),
        'public' => true,
        'has_archive' => true,
        'rewrite' => array('slug' => 'faq'),
        'supports' => array('title', 'custom-fields'),
        'show_in_rest' => true,
        'menu_icon' => 'dashicons-editor-help'
    );
    
    register_post_type('faq', $args);
}
add_action('init', 'dga_create_faq_post_type');

// ลงทะเบียน Shortcode
function dga_faqs_shortcode($atts) {
    $atts = shortcode_atts(array(
        'per_page' => 20
    ), $atts);
    
    ob_start();
    ?>
    <div id="dga-faqs-container" data-per-page="<?php echo esc_attr($atts['per_page']); ?>">
        <!-- Search Box -->
        <div class="dga-faqs-search">
            <input type="text" id="dga-faqs-search-input" placeholder="ค้นหาคำถาม...">
            <button id="dga-faqs-search-btn">
                <span class="dashicons dashicons-search"></span>
            </button>
        </div>
        
        <!-- FAQs List -->
        <div id="dga-faqs-list">
            <!-- FAQs จะถูกโหลดด้วย AJAX -->
        </div>
        
        <!-- Pagination -->
        <div id="dga-faqs-pagination">
            <!-- Pagination จะถูกสร้างด้วย JavaScript -->
        </div>
    </div>
    
    <!-- Modal Popup -->
    <div id="dga-faq-modal" class="dga-modal">
        <div class="dga-modal-content">
            <span class="dga-modal-close">&times;</span>
            <h3>เพิ่มคำถามใหม่</h3>
            <form id="dga-faqs-modal-form">
                <div class="dga-form-group">
                    <label for="dga-modal-question">คำถาม</label>
                    <input type="text" id="dga-modal-question" placeholder="กรอกคำถามของคุณ" required>
                </div>
                <div class="dga-form-group">
                    <label for="dga-modal-answer">คำตอบ</label>
                    <textarea id="dga-modal-answer" placeholder="กรอกคำตอบของคุณ" rows="5" required></textarea>
                </div>
                <div class="dga-modal-buttons">
                    <button type="submit" class="dga-btn-primary">เพิ่มคำถาม</button>
                    <button type="button" class="dga-btn-secondary dga-modal-cancel">ยกเลิก</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Edit Modal Popup -->
    <div id="dga-faq-edit-modal" class="dga-modal">
        <div class="dga-modal-content">
            <span class="dga-modal-close">&times;</span>
            <h3>แก้ไขคำถาม</h3>
            <form id="dga-faqs-edit-form">
                <input type="hidden" id="dga-edit-faq-id">
                <div class="dga-form-group">
                    <label for="dga-edit-question">คำถาม</label>
                    <input type="text" id="dga-edit-question" placeholder="กรอกคำถามของคุณ" required>
                </div>
                <div class="dga-form-group">
                    <label for="dga-edit-answer">คำตอบ</label>
                    <textarea id="dga-edit-answer" placeholder="กรอกคำตอบของคุณ" rows="5" required></textarea>
                </div>
                <div class="dga-modal-buttons">
                    <button type="submit" class="dga-btn-primary">บันทึกการแก้ไข</button>
                    <button type="button" class="dga-btn-secondary dga-modal-cancel">ยกเลิก</button>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Delete Confirmation Dialog -->
    <div id="dga-delete-confirm" class="dga-modal">
        <div class="dga-modal-content dga-confirm-dialog">
            <div class="dga-confirm-icon">
                <span class="dashicons dashicons-warning"></span>
            </div>
            <h3>ยืนยันการลบคำถาม</h3>
            <p>คุณต้องการลบคำถามนี้ใช่หรือไม่?</p>
            <div class="dga-confirm-details">
                <strong>คำถาม:</strong> <span id="dga-delete-question-text"></span>
            </div>
            <div class="dga-modal-buttons">
                <button type="button" class="dga-btn-danger" id="dga-confirm-delete">ลบคำถาม</button>
                <button type="button" class="dga-btn-secondary dga-modal-cancel">ยกเลิก</button>
            </div>
        </div>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('dga_faqs', 'dga_faqs_shortcode');

// Shortcode สำหรับปุ่มเพิ่มคำถาม
function dga_faq_add_button_shortcode($atts) {
    $atts = shortcode_atts(array(
        'text' => 'เพิ่มคำถาม',
        'class' => '',
        'style' => ''
    ), $atts);
    
    $button_class = 'dga-add-faq-btn ' . esc_attr($atts['class']);
    $button_style = !empty($atts['style']) ? 'style="' . esc_attr($atts['style']) . '"' : '';
    
    return sprintf(
        '<button class="%s" %s>%s</button>',
        $button_class,
        $button_style,
        esc_html($atts['text'])
    );
}
add_shortcode('dga-faq-add', 'dga_faq_add_button_shortcode');

// Enqueue Scripts และ Styles
function dga_faqs_enqueue_scripts() {
    global $post;
    
    if (is_a($post, 'WP_Post') && (has_shortcode($post->post_content, 'dga_faqs') || has_shortcode($post->post_content, 'dga-faq-add'))) {
        wp_enqueue_style('dga-faqs-style', get_stylesheet_directory_uri() . '/css/dga-faqs.css', array(), '1.0.0');
        wp_enqueue_script('dga-faqs-script', get_stylesheet_directory_uri() . '/js/dga-faqs.js', array('jquery'), '1.0.0', true);
        
        // ใช้ helper function ตรวจสอบ admin
        $is_admin = dga_is_user_admin();
        
        wp_localize_script('dga-faqs-script', 'dga_faqs_ajax', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('dga_faqs_nonce'),
            'is_admin' => $is_admin,
            'user_logged_in' => is_user_logged_in(),
            'debug' => array(
                'capabilities' => is_user_logged_in() ? $current_user->allcaps : array(),
                'roles' => is_user_logged_in() ? $current_user->roles : array()
            )
        ));
    }
}
add_action('wp_enqueue_scripts', 'dga_faqs_enqueue_scripts');

// AJAX Handler - โหลด FAQs
function dga_load_faqs() {
    check_ajax_referer('dga_faqs_nonce', 'nonce');
    
    $page = isset($_POST['page']) ? intval($_POST['page']) : 1;
    $per_page = isset($_POST['per_page']) ? intval($_POST['per_page']) : 20;
    $search = isset($_POST['search']) ? sanitize_text_field($_POST['search']) : '';
    
    $args = array(
        'post_type' => 'faq',
        'posts_per_page' => $per_page,
        'paged' => $page,
        'post_status' => 'publish',
        'orderby' => 'date',
        'order' => 'DESC'
    );
    
    if (!empty($search)) {
        $args['s'] = $search;
    }
    
    $query = new WP_Query($args);
    $faqs = array();
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            $post_id = get_the_ID();
            
            $faqs[] = array(
                'id' => $post_id,
                'question' => get_the_title(),
                'answer' => get_post_meta($post_id, 'faq_details', true),
                'likes' => intval(get_post_meta($post_id, 'faq_good', true)),
                'user_liked' => dga_check_user_liked($post_id)
            );
        }
    }
    
    wp_send_json_success(array(
        'faqs' => $faqs,
        'total_pages' => $query->max_num_pages,
        'current_page' => $page
    ));
}
add_action('wp_ajax_dga_load_faqs', 'dga_load_faqs');
add_action('wp_ajax_nopriv_dga_load_faqs', 'dga_load_faqs');

// AJAX Handler - เพิ่ม FAQ
function dga_add_faq() {
    check_ajax_referer('dga_faqs_nonce', 'nonce');
    
    $question = sanitize_text_field($_POST['question']);
    $answer = sanitize_textarea_field($_POST['answer']);
    
    if (empty($question) || empty($answer)) {
        wp_send_json_error('กรุณากรอกข้อมูลให้ครบถ้วน');
    }
    
    $post_data = array(
        'post_title' => $question,
        'post_type' => 'faq',
        'post_status' => 'publish'
    );
    
    $post_id = wp_insert_post($post_data);
    
    if ($post_id) {
        update_post_meta($post_id, 'faq_details', $answer);
        update_post_meta($post_id, 'faq_good', 0);
        
        // อัพเดต slug ให้เป็น post ID
        wp_update_post(array(
            'ID' => $post_id,
            'post_name' => $post_id
        ));
        
        wp_send_json_success('เพิ่มคำถามสำเร็จ');
    } else {
        wp_send_json_error('เกิดข้อผิดพลาดในการเพิ่มคำถาม');
    }
}
add_action('wp_ajax_dga_add_faq', 'dga_add_faq');
add_action('wp_ajax_nopriv_dga_add_faq', 'dga_add_faq');

// AJAX Handler - แก้ไข FAQ
function dga_update_faq() {
    check_ajax_referer('dga_faqs_nonce', 'nonce');
    
    // ตรวจสอบว่าเป็น Administrator
    if (!is_user_logged_in() || !current_user_can('administrator')) {
        wp_send_json_error('คุณไม่มีสิทธิ์ในการแก้ไขคำถาม');
    }
    
    $faq_id = intval($_POST['faq_id']);
    $question = sanitize_text_field($_POST['question']);
    $answer = sanitize_textarea_field($_POST['answer']);
    
    if (empty($question) || empty($answer)) {
        wp_send_json_error('กรุณากรอกข้อมูลให้ครบถ้วน');
    }
    
    // อัพเดตคำถาม
    $updated = wp_update_post(array(
        'ID' => $faq_id,
        'post_title' => $question
    ));
    
    if ($updated) {
        update_post_meta($faq_id, 'faq_details', $answer);
        wp_send_json_success('แก้ไขคำถามสำเร็จ');
    } else {
        wp_send_json_error('เกิดข้อผิดพลาดในการแก้ไขคำถาม');
    }
}
add_action('wp_ajax_dga_update_faq', 'dga_update_faq');
add_action('wp_ajax_nopriv_dga_update_faq', 'dga_update_faq');

// AJAX Handler - ลบ FAQ
function dga_delete_faq() {
    check_ajax_referer('dga_faqs_nonce', 'nonce');
    
    // ตรวจสอบว่าเป็น Administrator
    if (!is_user_logged_in() || !current_user_can('administrator')) {
        wp_send_json_error('คุณไม่มีสิทธิ์ในการลบคำถาม');
    }
    
    $faq_id = intval($_POST['faq_id']);
    
    if (!$faq_id) {
        wp_send_json_error('ไม่พบคำถามที่ต้องการลบ');
    }
    
    $deleted = wp_trash_post($faq_id);
    
    if ($deleted) {
        wp_send_json_success('ลบคำถามสำเร็จ');
    } else {
        wp_send_json_error('เกิดข้อผิดพลาดในการลบคำถาม');
    }
}
add_action('wp_ajax_dga_delete_faq', 'dga_delete_faq');
add_action('wp_ajax_nopriv_dga_delete_faq', 'dga_delete_faq');

// AJAX Handler - Toggle Like
function dga_toggle_like() {
    check_ajax_referer('dga_faqs_nonce', 'nonce');
    
    $faq_id = intval($_POST['faq_id']);
    
    // ตรวจสอบว่าผู้ใช้ลงคะแนนวันนี้แล้วหรือยัง
    if (dga_check_daily_limit($faq_id)) {
        wp_send_json_error('คุณได้ลงคะแนนสำหรับคำถามนี้ในวันนี้แล้ว');
    }
    
    $current_likes = intval(get_post_meta($faq_id, 'faq_good', true));
    $user_liked = dga_check_user_liked($faq_id);
    
    if ($user_liked) {
        // Unlike
        $new_likes = $current_likes - 1;
        dga_remove_user_like($faq_id);
    } else {
        // Like
        $new_likes = $current_likes + 1;
        dga_add_user_like($faq_id);
    }
    
    update_post_meta($faq_id, 'faq_good', $new_likes);
    
    wp_send_json_success(array(
        'likes' => $new_likes,
        'user_liked' => !$user_liked
    ));
}
add_action('wp_ajax_dga_toggle_like', 'dga_toggle_like');
add_action('wp_ajax_nopriv_dga_toggle_like', 'dga_toggle_like');

// Helper function to check if user is administrator
function dga_is_user_admin() {
    if (!is_user_logged_in()) {
        return false;
    }
    
    $current_user = wp_get_current_user();
    
    // Check multiple ways to ensure user is admin
    if (current_user_can('manage_options')) {
        return true;
    }
    
    if (current_user_can('administrator')) {
        return true;
    }
    
    if (in_array('administrator', (array) $current_user->roles)) {
        return true;
    }
    
    // Check if user is Super Admin in multisite
    if (is_multisite() && is_super_admin()) {
        return true;
    }
    
    return false;
}
function dga_check_user_liked($faq_id) {
    $session_key = 'dga_faq_likes_' . dga_get_session_id();
    $likes = get_transient($session_key);
    
    if (!is_array($likes)) {
        $likes = array();
    }
    
    return isset($likes[$faq_id]) && $likes[$faq_id];
}

function dga_add_user_like($faq_id) {
    $session_key = 'dga_faq_likes_' . dga_get_session_id();
    $likes = get_transient($session_key);
    
    if (!is_array($likes)) {
        $likes = array();
    }
    
    $likes[$faq_id] = true;
    set_transient($session_key, $likes, DAY_IN_SECONDS);
}

function dga_remove_user_like($faq_id) {
    $session_key = 'dga_faq_likes_' . dga_get_session_id();
    $likes = get_transient($session_key);
    
    if (!is_array($likes)) {
        $likes = array();
    }
    
    unset($likes[$faq_id]);
    set_transient($session_key, $likes, DAY_IN_SECONDS);
}

function dga_check_daily_limit($faq_id) {
    $limit_key = 'dga_faq_daily_' . dga_get_session_id() . '_' . $faq_id;
    $today = date('Y-m-d');
    $last_action = get_transient($limit_key);
    
    if ($last_action === $today) {
        return true;
    }
    
    set_transient($limit_key, $today, DAY_IN_SECONDS);
    return false;
}

function dga_get_session_id() {
    if (!session_id()) {
        session_start();
    }
    
    if (!isset($_SESSION['dga_faq_session'])) {
        $_SESSION['dga_faq_session'] = uniqid();
    }
    
    return $_SESSION['dga_faq_session'];
}


/***** ฟังก์ชั่น CARD ITEM ข่าวสารหน้าแรก ********/


// Enqueue styles and scripts
function dga_news_enqueue_assets() {
    $theme_version = wp_get_theme()->get('Version');
    
    // Check for child theme CSS
    if (is_child_theme()) {
        $child_style_path = get_stylesheet_directory() . '/css/dga-news-loop.css';
        $child_style_uri = get_stylesheet_directory_uri() . '/css/dga-news-loop.css';
        
        if (file_exists($child_style_path)) {
            wp_enqueue_style('dga-news-style', $child_style_uri, array(), $theme_version);
        } else {
            wp_enqueue_style('dga-news-style', get_template_directory_uri() . '/css/dga-news-loop.css', array(), $theme_version);
        }
        
        // Check for child theme JS
        $child_script_path = get_stylesheet_directory() . '/js/dga-news-loop.js';
        $child_script_uri = get_stylesheet_directory_uri() . '/js/dga-news-loop.js';
        
        if (file_exists($child_script_path)) {
            wp_enqueue_script('dga-news-script', $child_script_uri, array('jquery'), $theme_version, true);
        } else {
            wp_enqueue_script('dga-news-script', get_template_directory_uri() . '/js/dga-news-loop.js', array('jquery'), $theme_version, true);
        }
    } else {
        wp_enqueue_style('dga-news-style', get_template_directory_uri() . '/css/dga-news-loop.css', array(), $theme_version);
        wp_enqueue_script('dga-news-script', get_template_directory_uri() . '/js/dga-news-loop.js', array('jquery'), $theme_version, true);
    }
    
    // Setup AJAX 
    wp_localize_script('dga-news-script', 'dga_news_ajax', array(
        'ajax_url' => admin_url('admin-ajax.php'),
        'nonce' => wp_create_nonce('dga-news-nonce')
    ));
}
add_action('wp_enqueue_scripts', 'dga_news_enqueue_assets');

// News post loop shortcode
function dga_news_loops($atts) {
    // Parse attributes
    $atts = shortcode_atts(array(
        'posts_per_page' => 8,
        'post_type' => 'article',
        'taxonomy' => '',
        'term' => 'stdnews',
    ), $atts);
    
    // Build tax query if term is provided
    $tax_query = array();
    if (!empty($atts['term'])) {
        $taxonomy = !empty($atts['taxonomy']) ? sanitize_text_field($atts['taxonomy']) : 'category';
        $tax_query[] = array(
            'taxonomy' => $taxonomy,
            'field' => 'slug',
            'terms' => $atts['term']
        );
    }
    
    // Setup query arguments
    $query_args = array(
        'post_type' => $atts['post_type'],
        'posts_per_page' => $atts['posts_per_page'],
        'post_status' => 'publish',
        'orderby' => 'date',
        'order' => 'DESC'
    );
    
    // Add tax_query if we have term
    if (!empty($tax_query)) {
        $query_args['tax_query'] = $tax_query;
    }
    
    $query = new WP_Query($query_args);
    
    ob_start();
    
    if ($query->have_posts()) : ?>
        <div class="dga-news-container" data-post-type="<?php echo esc_attr($atts['post_type']); ?>" data-taxonomy="<?php echo esc_attr($taxonomy); ?>" data-term="<?php echo esc_attr($atts['term']); ?>" data-posts-per-page="<?php echo esc_attr($atts['posts_per_page']); ?>">
            <div class="dga-news-carousel">
                <?php $count = 0; while ($query->have_posts()) : $query->the_post(); $count++; ?>
                    <article class="dga-news-item <?php echo ($count === 1) ? 'dga-news-active' : ''; ?>">
                        <a href="<?php the_permalink(); ?>" class="dga-news-link">
                            <div class="dga-news-image">
                                <?php if (has_post_thumbnail()) : ?>
                                    <?php the_post_thumbnail('medium', array('class' => 'dga-news-thumbnail')); ?>
                                <?php else : ?>
                                    <div class="dga-news-no-image"></div>
                                <?php endif; ?>
                                <?php
                                    // Get all taxonomies for this post
                                    $post_taxonomies = get_object_taxonomies(get_post_type());
                                    $first_term = null;

                                    // Loop through taxonomies to find the first term
                                    foreach ($post_taxonomies as $taxonomy) {
                                        $terms = get_the_terms(get_the_ID(), $taxonomy);
                                        if (!empty($terms) && !is_wp_error($terms)) {
                                            $first_term = $terms[0];
                                            break; // ใช้ term แรกที่เจอ
                                        }
                                    }

                                    // Display the term name if found
                                    if ($first_term) : ?>
                                        <span class="dga-news-badge"><?php echo esc_html($first_term->name); ?></span>
                                    <?php endif; ?>
                            </div>
                            <div class="dga-news-content">
                                <h3 class="dga-news-title"><?php the_title(); ?></h3>
                                <div class="dga-news-meta">
                                    <span class="dga-news-time"><?php echo human_time_diff(get_the_time('U'), current_time('timestamp')); ?> ที่แล้ว</span>
                                    <span class="dga-news-separator">•</span>
                                    <span class="dga-news-readmore">อ่านต่อ</span>
                                </div>
                            </div>
                        </a>
                    </article>
                <?php endwhile; ?>
            </div>
        </div>
    <?php else: ?>
        <div class="dga-news-empty">ไม่พบโพสต์ที่เกี่ยวข้อง</div>
    <?php endif;
    
    wp_reset_postdata();
    
    return ob_get_clean();
}
add_shortcode('dga-news-postloop', 'dga_news_loops');

// Navigation shortcode
function dga_navigator($atts) {
    // Parse attributes
    $atts = shortcode_atts(array(
        'target' => '.dga-news-container', // CSS selector of the target carousel
    ), $atts);
    
    ob_start();
    ?>
    <div class="dga-news-navigator" data-target="<?php echo esc_attr($atts['target']); ?>">
        <button type="button" class="dga-nav-prev" aria-label="ก่อนหน้า">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="15 18 9 12 15 6"></polyline>
            </svg>
        </button>
        <button type="button" class="dga-nav-next" aria-label="ถัดไป">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="9 18 15 12 9 6"></polyline>
            </svg>
        </button>
    </div>
    <?php
    
    return ob_get_clean();
}
add_shortcode('dga-news-navigator', 'dga_navigator');

// AJAX function to load more posts
function dga_load_more_posts() {
    check_ajax_referer('dga-news-nonce', 'nonce');
    
    $post_type = isset($_POST['post_type']) ? sanitize_text_field($_POST['post_type']) : 'article';
    $taxonomy = isset($_POST['taxonomy']) ? sanitize_text_field($_POST['taxonomy']) : 'category';
    $term = isset($_POST['term']) ? sanitize_text_field($_POST['term']) : 'stdnews';
    $posts_per_page = isset($_POST['posts_per_page']) ? intval($_POST['posts_per_page']) : 8;
    $offset = isset($_POST['offset']) ? intval($_POST['offset']) : 0;
    
    // Build tax query if term is provided
    $tax_query = array();
    if (!empty($term)) {
        $tax_query[] = array(
            'taxonomy' => $taxonomy,
            'field' => 'slug',
            'terms' => $term
        );
    }
    
    // Setup query arguments
    $query_args = array(
        'post_type' => $post_type,
        'posts_per_page' => $posts_per_page,
        'offset' => $offset,
        'post_status' => 'publish',
        'orderby' => 'date',
        'order' => 'DESC'
    );
    
    // Add tax_query if we have term
    if (!empty($tax_query)) {
        $query_args['tax_query'] = $tax_query;
    }
    
    $query = new WP_Query($query_args);
    $posts_html = '';
    
    if ($query->have_posts()) {
        while ($query->have_posts()) {
            $query->the_post();
            
            ob_start();
            ?>
            <article class="dga-news-item">
                <a href="<?php the_permalink(); ?>" class="dga-news-link">
                    <div class="dga-news-image">
                        <?php if (has_post_thumbnail()) : ?>
                            <?php the_post_thumbnail('medium', array('class' => 'dga-news-thumbnail')); ?>
                        <?php else : ?>
                            <div class="dga-news-no-image"></div>
                        <?php endif; ?>
                        <?php
                            // Get all taxonomies for this post
                            $post_taxonomies = get_object_taxonomies(get_post_type());
                            $first_term = null;

                            // Loop through taxonomies to find the first term
                            foreach ($post_taxonomies as $taxonomy) {
                                $terms = get_the_terms(get_the_ID(), $taxonomy);
                                if (!empty($terms) && !is_wp_error($terms)) {
                                    $first_term = $terms[0];
                                    break; // ใช้ term แรกที่เจอ
                                }
                            }

                            // Display the term name if found
                            if ($first_term) : ?>
                                <span class="dga-news-badge"><?php echo esc_html($first_term->name); ?></span>
                            <?php endif; ?>
                    </div>
                    <div class="dga-news-content">
                        <h3 class="dga-news-title"><?php the_title(); ?></h3>
                        <div class="dga-news-meta">
                            <span class="dga-news-time"><?php echo human_time_diff(get_the_time('U'), current_time('timestamp')); ?> ที่แล้ว</span>
                            <span class="dga-news-separator">•</span>
                            <span class="dga-news-readmore">อ่านต่อ</span>
                        </div>
                    </div>
                </a>
            </article>
            <?php
            $posts_html .= ob_get_clean();
        }
        
        wp_reset_postdata();
        
        wp_send_json_success(array(
            'posts' => $posts_html,
            'has_more' => $query->max_num_pages > ($offset / $posts_per_page) + 1
        ));
    } else {
        wp_send_json_error(array('message' => 'ไม่พบโพสต์เพิ่มเติม'));
    }
    
    wp_die();
}
add_action('wp_ajax_dga_load_more_posts', 'dga_load_more_posts');
add_action('wp_ajax_nopriv_dga_load_more_posts', 'dga_load_more_posts');



/**** ฟังก์ชั่น PDF PREVIEW *********/


class PDF_Viewer_Shortcode {
    
    private static $instance = null;
    private $assets_loaded = false;
    
    public static function get_instance() {
        return self::$instance ?: self::$instance = new self();
    }
    
    public function __construct() {
        add_shortcode('pdf_viewer', [$this, 'render_shortcode']);
        add_action('wp_enqueue_scripts', [$this, 'conditional_enqueue']);
        add_action('elementor/frontend/after_enqueue_scripts', [$this, 'elementor_enqueue']);
    }
    
    /**
     * Render PDF viewer shortcode
     */
    public function render_shortcode($atts) {
        $atts = shortcode_atts([
            'url' => '',
            'width' => '100%',
            'height' => '600px',
            'class' => '',
            'download' => 'true',
            'fullscreen' => 'true'
        ], $atts, 'pdf_viewer');
        
        // Security: Sanitize inputs
        $url = sanitize_url($atts['url']);
        $width = sanitize_text_field($atts['width']);
        $height = sanitize_text_field($atts['height']);
        $class = sanitize_html_class($atts['class']);
        $download = $atts['download'] === 'true';
        $fullscreen = $atts['fullscreen'] === 'true';
        
        if (!$url) return '<p>PDF URL is required.</p>';
        
        // Validate URL format
        if (!filter_var($url, FILTER_VALIDATE_URL) && !$this->is_relative_path($url)) {
            return '<p>Invalid PDF URL provided.</p>';
        }
        
        $this->load_assets();
        
        $unique_id = 'pdf-viewer-' . wp_rand(1000, 9999);
        $wrapper_class = 'pdf-viewer-wrapper ' . $class;
        
        ob_start();
        ?>
        <div class="<?php echo esc_attr($wrapper_class); ?>" 
             data-pdf-url="<?php echo esc_url($url); ?>"
             data-width="<?php echo esc_attr($width); ?>"
             data-height="<?php echo esc_attr($height); ?>"
             data-download="<?php echo $download ? 'true' : 'false'; ?>"
             data-fullscreen="<?php echo $fullscreen ? 'true' : 'false'; ?>">
            
            <div id="<?php echo esc_attr($unique_id); ?>" class="pdf-viewer-container">
                <div class="pdf-loading">
                    <span>Loading PDF...</span>
                </div>
                
                <?php if ($fullscreen): ?>
                <div class="pdf-header">
                    <button class="pdf-fullscreen-btn" 
                            type="button" 
                            title="Toggle Fullscreen"
                            aria-label="Toggle fullscreen mode">
                        <span class="fullscreen-icon">⛶</span>
                        <span class="fullscreen-text">Fullscreen</span>
                    </button>
                </div>
                <?php endif; ?>
                
                <iframe class="pdf-iframe" 
                        src="<?php echo esc_url($this->get_viewer_url($url, $download)); ?>"
                        width="<?php echo esc_attr($width); ?>"
                        height="<?php echo esc_attr($height); ?>"
                        frameborder="0"
                        title="PDF Viewer"
                        allowfullscreen>
                    <p>Your browser doesn't support PDF viewing. 
                       <a href="<?php echo esc_url($url); ?>" target="_blank">Download PDF</a>
                    </p>
                </iframe>
                
                <?php if ($download): ?>
                <div class="pdf-controls">
                    <a href="<?php echo esc_url($url); ?>" 
                       class="pdf-download-btn" 
                       download 
                       target="_blank">
                        Download PDF
                    </a>
                </div>
                <?php endif; ?>
            </div>
        </div>
        <?php
        return ob_get_clean();
    }
    
    /**
     * Generate viewer URL with fallback options
     */
    private function get_viewer_url($url, $download = true) {
        // For external URLs, use Google Docs viewer as fallback
        if (filter_var($url, FILTER_VALIDATE_URL)) {
            return "https://docs.google.com/viewer?url=" . urlencode($url) . "&embedded=true";
        }
        
        // For local files, serve directly
        return $url . ($download ? '' : '#toolbar=0');
    }
    
    /**
     * Check if path is relative
     */
    private function is_relative_path($path) {
        return strpos($path, '/') === 0 || strpos($path, './') === 0;
    }
    
    /**
     * Conditional asset loading
     */
    public function conditional_enqueue() {
        global $post;
        
        if (!is_admin() && $post && has_shortcode($post->post_content, 'pdf_viewer')) {
            $this->load_assets();
        }
    }
    
    /**
     * Elementor compatibility
     */
    public function elementor_enqueue() {
        if (class_exists('\Elementor\Plugin') && \Elementor\Plugin::$instance->editor->is_edit_mode()) {
            $this->load_assets();
        }
    }
    
    /**
     * Load CSS and JS assets
     */
    private function load_assets() {
        if ($this->assets_loaded) return;
        
        $version = get_theme_mod('cache_bust', '1.0.0');
        
        // Determine asset path (theme vs plugin)
        $css_url = get_stylesheet_directory_uri() . '/css/pdf-viewer.css';
        $js_url = get_stylesheet_directory_uri() . '/js/pdf-viewer.js';
        
        // Fallback to plugin directory if in plugin
        if (!file_exists(get_stylesheet_directory() . '/css/pdf-viewer.css')) {
            $css_url = plugin_dir_url(__FILE__) . 'assets/css/pdf-viewer.css';
            $js_url = plugin_dir_url(__FILE__) . 'assets/js/pdf-viewer.js';
        }
        
        wp_enqueue_style('pdf-viewer-css', $css_url, [], $version);
        wp_enqueue_script('pdf-viewer-js', $js_url, ['jquery'], $version, true);
        
        // Localize script
        wp_localize_script('pdf-viewer-js', 'pdfViewerConfig', [
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('pdf_viewer_nonce'),
            'loading_text' => __('Loading PDF...', 'textdomain'),
            'error_text' => __('Error loading PDF', 'textdomain')
        ]);
        
        $this->assets_loaded = true;
    }
}

// Initialize
PDF_Viewer_Shortcode::get_instance();